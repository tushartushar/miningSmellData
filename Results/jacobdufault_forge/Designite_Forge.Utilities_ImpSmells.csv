Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Forge.Utilities,TypeMetadata,C:\repos\jacobdufault_forge\Forge.Utilities\TypeMetadata.cs,CollectProperties,Cyclomatic complexity of the method is 16
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 6 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 8 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 10 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3' param4' nparam4
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 12 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3' param4' nparam4' param5' nparam5
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 14 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3' param4' nparam4' param5' nparam5' param6' nparam6
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 16 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3' param4' nparam4' param5' nparam5' param6' nparam6' param7' nparam7
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 18 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3' param4' nparam4' param5' nparam5' param6' nparam6' param7' nparam7' param8' nparam8
Long Parameter List,Forge.Utilities,Contract,C:\repos\jacobdufault_forge\Forge.Utilities\Contract.cs,AssertArguments,The method has 20 parameters. Parameters: param0' nparam0' param1' nparam1' param2' nparam2' param3' nparam3' param4' nparam4' param5' nparam5' param6' nparam6' param7' nparam7' param8' nparam8' param9' nparam9
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 6 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 7 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 8 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 9 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 10 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The method has 11 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 6 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 7 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 8 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 9 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 10 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Debug,The method has 11 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 6 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 7 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 8 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 9 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 10 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Info,The method has 11 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 6 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 7 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 8 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 9 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 10 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Warn,The method has 11 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 6 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 7 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 8 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 9 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 10 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Error,The method has 11 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 5 parameters. Parameters: format' arg0' arg1' arg2' arg3
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 6 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 7 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 8 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 9 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 10 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8
Long Parameter List,Forge.Utilities,Log<T>,C:\repos\jacobdufault_forge\Forge.Utilities\Log.cs,Fatal,The method has 11 parameters. Parameters: format' arg0' arg1' arg2' arg3' arg4' arg5' arg6' arg7' arg8' arg9
Long Statement,Forge.Utilities,RequireOptInContractResolver,C:\repos\jacobdufault_forge\Forge.Utilities\SerializationHelpers.cs,CreateObjectContract,The length of the statement  "                            throw new InvalidOperationException("The type " + objectType.FullName + " has a JsonObject attribute' but it does not specify MemberSerialization.OptIn"); " is 154.
Long Statement,Forge.Utilities,TypeMetadata,C:\repos\jacobdufault_forge\Forge.Utilities\TypeMetadata.cs,CreateInstance,The length of the statement  "                throw new InvalidOperationException("Unable to create instance of " + ReflectedType.FullName + "; there is no default constructor"' e); " is 135.
Long Statement,Forge.Utilities,TypeMetadata,C:\repos\jacobdufault_forge\Forge.Utilities\TypeMetadata.cs,CreateInstance,The length of the statement  "                throw new InvalidOperationException("Constructor of " + ReflectedType.FullName + " threw an exception when creating an instance"' e); " is 133.
Complex Conditional,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The conditional expression  "i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false)"  is complex.
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else if (n == '7') _stringBuilder.Append(arg7);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else if (n == '7') _stringBuilder.Append(arg7);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else if (n == '7') _stringBuilder.Append(arg7);                          else if (n == '8') _stringBuilder.Append(arg8);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else if (n == '7') _stringBuilder.Append(arg7);                          else if (n == '8') _stringBuilder.Append(arg8);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else if (n == '7') _stringBuilder.Append(arg7);                          else if (n == '8') _stringBuilder.Append(arg8);                          else if (n == '9') _stringBuilder.Append(arg9);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,FastStringFormat,C:\repos\jacobdufault_forge\Forge.Utilities\FastStringFormat.cs,Format,The following statement contains a magic number: lock (_stringBuilder) {                  _stringBuilder.Length = 0;                    int length = format.Length;                  int start = 0' current = 0;                    while (current < length) {                      char c = format[current];                        if (c == '{') {                          Contract.Requires(format[current + 2] == '}'' "Character after replacement group must be a }");                          if (start != current) _stringBuilder.Append(format' start' current - start);                            char n = format[current + 1];                          // variable code                          if (n == '0') _stringBuilder.Append(arg0);                          else if (n == '1') _stringBuilder.Append(arg1);                          else if (n == '2') _stringBuilder.Append(arg2);                          else if (n == '3') _stringBuilder.Append(arg3);                          else if (n == '4') _stringBuilder.Append(arg4);                          else if (n == '5') _stringBuilder.Append(arg5);                          else if (n == '6') _stringBuilder.Append(arg6);                          else if (n == '7') _stringBuilder.Append(arg7);                          else if (n == '8') _stringBuilder.Append(arg8);                          else if (n == '9') _stringBuilder.Append(arg9);                          else throw new ArgumentException("Invalid replacement group in format string " + format);                            current += 2;                          start = current + 1;                      }                        ++current;                  }                    if (start != current) _stringBuilder.Append(format' start' length - start);                  return _stringBuilder.ToString();              }
Magic Number,Forge.Utilities,RandomExtensionMethods,C:\repos\jacobdufault_forge\Forge.Utilities\GameRandom.cs,NextLong,The following statement contains a magic number: do {                  byte[] buf = new byte[8];                  random.NextBytes(buf);                  ulongRand = (ulong)BitConverter.ToInt64(buf' 0);              } while (ulongRand > ulong.MaxValue - ((ulong.MaxValue % uRange) + 1) % uRange);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,ShiftDecimal,The following statement contains a magic number: int digitBase = 10;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,GetDigitCount,The following statement contains a magic number: while (number >= 10) {                  number /= 10;                  digits += 1;              }
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,GetDigitCount,The following statement contains a magic number: while (number >= 10) {                  number /= 10;                  digits += 1;              }
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,FromParts,The following statement contains a magic number: if (PostDecimal != 0)                  f.RawValue += (Real.Create(PostDecimal) / 1000).RawValue;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sqrt,The following statement contains a magic number: byte numberOfIterations = 8;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sqrt,The following statement contains a magic number: if (f.RawValue > 0x64000)                  numberOfIterations = 12;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sqrt,The following statement contains a magic number: if (f.RawValue > 0x3e8000)                  numberOfIterations = 16;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: for (; i < 0; i += Real.Create(25736' false))                  ;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i > Real.Create(25736' false))                  i %= Real.Create(25736' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i > Real.Create(25736' false))                  i %= Real.Create(25736' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: Real k = (i * Real.Create(10' false)) / Real.Create(714' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: Real k = (i * Real.Create(10' false)) / Real.Create(714' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (i != 0 && i != Real.Create(6434' false) && i != Real.Create(12868' false) &&                  i != Real.Create(19302' false) && i != Real.Create(25736' false))                  j = (i * Real.Create(100' false)) / Real.Create(714' false) - k * Real.Create(10' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (k <= Real.Create(90' false))                  return sin_lookup(k' j);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (k <= Real.Create(180' false))                  return sin_lookup(Real.Create(180' false) - k' j);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (k <= Real.Create(180' false))                  return sin_lookup(Real.Create(180' false) - k' j);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (k <= Real.Create(270' false))                  return sin_lookup(k - Real.Create(180' false)' j).Inverse;              else                  return sin_lookup(Real.Create(360' false) - k' j).Inverse;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (k <= Real.Create(270' false))                  return sin_lookup(k - Real.Create(180' false)' j).Inverse;              else                  return sin_lookup(Real.Create(360' false) - k' j).Inverse;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Sin,The following statement contains a magic number: if (k <= Real.Create(270' false))                  return sin_lookup(k - Real.Create(180' false)' j).Inverse;              else                  return sin_lookup(Real.Create(360' false) - k' j).Inverse;
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,sin_lookup,The following statement contains a magic number: if (j > 0 && j < Real.Create(10' false) && i < Real.Create(90' false))                  return Real.Create(SIN_TABLE[i.RawValue]' false) +                      ((Real.Create(SIN_TABLE[i.RawValue + 1]' false) - Real.Create(SIN_TABLE[i.RawValue]' false)) /                      Real.Create(10' false)) * j;              else                  return Real.Create(SIN_TABLE[i.RawValue]' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,sin_lookup,The following statement contains a magic number: if (j > 0 && j < Real.Create(10' false) && i < Real.Create(90' false))                  return Real.Create(SIN_TABLE[i.RawValue]' false) +                      ((Real.Create(SIN_TABLE[i.RawValue + 1]' false) - Real.Create(SIN_TABLE[i.RawValue]' false)) /                      Real.Create(10' false)) * j;              else                  return Real.Create(SIN_TABLE[i.RawValue]' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,sin_lookup,The following statement contains a magic number: if (j > 0 && j < Real.Create(10' false) && i < Real.Create(90' false))                  return Real.Create(SIN_TABLE[i.RawValue]' false) +                      ((Real.Create(SIN_TABLE[i.RawValue + 1]' false) - Real.Create(SIN_TABLE[i.RawValue]' false)) /                      Real.Create(10' false)) * j;              else                  return Real.Create(SIN_TABLE[i.RawValue]' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Cos,The following statement contains a magic number: return Sin(i + Real.Create(6435' false));
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Asin,The following statement contains a magic number: Real f1 = mul(mul(mul(mul(Real.Create(145103 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(599880 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(1420468 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(3592413 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(26353447 >> Real.SHIFT_AMOUNT' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Asin,The following statement contains a magic number: Real f1 = mul(mul(mul(mul(Real.Create(145103 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(599880 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(1420468 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(3592413 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(26353447 >> Real.SHIFT_AMOUNT' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Asin,The following statement contains a magic number: Real f1 = mul(mul(mul(mul(Real.Create(145103 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(599880 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(1420468 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(3592413 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(26353447 >> Real.SHIFT_AMOUNT' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Asin,The following statement contains a magic number: Real f1 = mul(mul(mul(mul(Real.Create(145103 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(599880 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(1420468 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(3592413 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(26353447 >> Real.SHIFT_AMOUNT' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Asin,The following statement contains a magic number: Real f1 = mul(mul(mul(mul(Real.Create(145103 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(599880 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(1420468 >> Real.SHIFT_AMOUNT' false)' F) -                  Real.Create(3592413 >> Real.SHIFT_AMOUNT' false)' F) +                  Real.Create(26353447 >> Real.SHIFT_AMOUNT' false);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Asin,The following statement contains a magic number: Real f2 = PI / Real.Create(2' true) - (Sqrt(Real.OneF - F) * f1);
Magic Number,Forge.Utilities,Real,C:\repos\jacobdufault_forge\Forge.Utilities\Real.cs,Atan2,The following statement contains a magic number: if (F2 > 0)                  result = Atan(F1 / F2);              else if (F2 < 0) {                  if (F1 >= 0)                      result = (PI - Atan(Abs(F1 / F2)));                  else                      result = (PI - Atan(Abs(F1 / F2))).Inverse;              }              else                  result = (F1 >= 0 ? PI : PI.Inverse) / Real.Create(2' true);
Magic Number,Forge.Utilities,FlexibleTypeConverter,C:\repos\jacobdufault_forge\Forge.Utilities\SerializationHelpers.cs,ReadJson,The following statement contains a magic number: if (options.Length >= 2) {                      assemblyHint = options[1];                  }
Magic Number,Forge.Utilities,Tuple<T1;T2>,C:\repos\jacobdufault_forge\Forge.Utilities\Tuple.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(Item2' null) == false) {                  hc = (hc << 3) ^ EqualityComparer<T2>.Default.GetHashCode(Item2);              }
Magic Number,Forge.Utilities,Tuple<T1;T2;T3>,C:\repos\jacobdufault_forge\Forge.Utilities\Tuple.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(Item2' null) == false) {                  hc = (hc << 3) ^ EqualityComparer<T2>.Default.GetHashCode(Item2);              }
Magic Number,Forge.Utilities,Tuple<T1;T2;T3>,C:\repos\jacobdufault_forge\Forge.Utilities\Tuple.cs,GetHashCode,The following statement contains a magic number: if (ReferenceEquals(Item2' null) == false) {                  hc = (hc << 3) ^ EqualityComparer<T3>.Default.GetHashCode(Item3);              }
Magic Number,Forge.Utilities,Vector2r,C:\repos\jacobdufault_forge\Forge.Utilities\Vector2r.cs,GetHashCode,The following statement contains a magic number: int hash = 5;
Magic Number,Forge.Utilities,Vector2r,C:\repos\jacobdufault_forge\Forge.Utilities\Vector2r.cs,GetHashCode,The following statement contains a magic number: hash *= (29 + X.GetHashCode());
Magic Number,Forge.Utilities,Vector2r,C:\repos\jacobdufault_forge\Forge.Utilities\Vector2r.cs,GetHashCode,The following statement contains a magic number: hash *= (29 + Z.GetHashCode());
