Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Forge.Networking.Core,NetworkContext,C:\repos\jacobdufault_forge\Forge.Networking\Core\NetworkContext.cs,CreateClient,The length of the statement  "                Log<NetworkContext>.Info("Trying to connect to " + ip + " on port " + Configuration.Port + " with hailing message " + serializedHail); " is 134.
Missing Default,Forge.Networking.Core,NetworkContext,C:\repos\jacobdufault_forge\Forge.Networking\Core\NetworkContext.cs,Update,The following switch statement is missing a default case: switch (status) {                              case NetConnectionStatus.Connected:                                  foreach (var montitor in _connectionMonitors) {                                      montitor.OnConnected((Player)msg.SenderConnection.Tag);                                  }                                  break;                                case NetConnectionStatus.Disconnected:                                  foreach (var monitor in _connectionMonitors) {                                      monitor.OnDisconnected((Player)msg.SenderConnection.Tag);                                  }                                  break;                          }
Missing Default,Forge.Networking.Core,NetworkContext,C:\repos\jacobdufault_forge\Forge.Networking\Core\NetworkContext.cs,SendMessage,The following switch statement is missing a default case: switch (recipient) {                  case NetworkMessageRecipient.All:                      if (IsClient) {                          var msg = CreateMessage(LocalPlayer' message' broadcast: true);                          _client.SendMessage(msg' NetDeliveryMethod.ReliableOrdered);                      }                      else {                          var msg = CreateMessage(LocalPlayer' message' broadcast: false);                          Log<NetworkContext>.Info("Sending message {0} to all connections ({1})"'                              SerializationHelpers.Serialize(message)'                              string.Join("' "' _server.Connections.Select(c => ((Player)c.Tag).Name).ToArray()));                            _server.SendToAll(msg' NetDeliveryMethod.ReliableOrdered);                          _dispatcher.InvokeHandlers(LocalPlayer' message);                      }                      break;                    case NetworkMessageRecipient.Clients: {                          if (IsServer == false) {                              throw new InvalidOperationException("Only the server can send messages to clients");                          }                            var msg = CreateMessage(LocalPlayer' message' broadcast: false);                          NetPeer peer = Peer;                            // only send the message if we have someone to send it to                          if (peer.ConnectionsCount > 0) {                              peer.SendMessage(msg' peer.Connections' NetDeliveryMethod.ReliableOrdered' 0);                          }                          break;                      }                    case NetworkMessageRecipient.Server: {                          if (IsServer) {                              _dispatcher.InvokeHandlers(LocalPlayer' message);                          }                            else {                              var msg = CreateMessage(LocalPlayer' message' broadcast: false);                              _client.ServerConnection.SendMessage(msg' NetDeliveryMethod.ReliableOrdered' 0);                          }                          break;                      }              }
