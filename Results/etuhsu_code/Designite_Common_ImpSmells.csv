Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,NextToken,The method has 185 lines of code.
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,NextToken,Cyclomatic complexity of the method is 111
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindMethod,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindIndexer,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindBestMethod,The method has 7 parameters.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,The length of the statement  "		if (isEquality && ((!left.Type.IsValueType && !right.Type.IsValueType) || (left.Type == typeof(Guid) && right.Type == typeof(Guid)))) { " is 135.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,The conditional expression  "isEquality && ((!left.Type.IsValueType && !right.Type.IsValueType) || (left.Type == typeof(Guid) && right.Type == typeof(Guid)))"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' Res.IifRequiresThreeArgs);  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\etuhsu_code\asp.net\Extjs和asp.net项目集成\开源框架完美组合之Spring.NET_NHibernate_ASP.NET_MVC_jQuery_easyUI\WeCompanySite\Common\DynamicLibrary.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
