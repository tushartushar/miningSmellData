Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,Cyclomatic complexity of the method is 11
Complex Method,Ernzo.Windows.DirectShowLib.MMStreaming,MMAudioStream,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\MMAudioStream.cs,GetSampleData,Cyclomatic complexity of the method is 8
Complex Method,Ernzo.Windows.DirectShowLib.MMStreaming,MSStatus,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\MMStreaming.cs,GetErrorText,Cyclomatic complexity of the method is 43
Long Parameter List,Ernzo.Windows.DirectShowLib,IGraphConfig,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\DirectShowBase.cs,Reconnect,The method has 6 parameters.
Long Parameter List,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The method has 6 parameters.
Long Parameter List,Ernzo.Windows.WaveAudio,WaveInput,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveAudio.cs,waveInOpen,The method has 6 parameters.
Long Parameter List,Ernzo.Windows.WaveAudio,WaveOutput,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveAudio.cs,waveOutOpen,The method has 6 parameters.
Long Parameter List,Ernzo.Windows.WaveAudio,MixerDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveAudio.cs,mixerOpen,The method has 5 parameters.
Long Parameter List,Ernzo.Windows.WaveAudio,WaveInDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveInDevice.cs,waveInProc,The method has 5 parameters.
Long Parameter List,Ernzo.Windows.WaveAudio,WaveOutDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveOutDevice.cs,waveOutProc,The method has 5 parameters.
Long Parameter List,Ernzo.Windows.DirectShowLib.MMStreaming,IAMMediaTypeStream,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\MMStreaming.cs,CreateSample,The method has 5 parameters.
Long Statement,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The length of the statement  "	if (pRealIn.Length < NumSamples || (pImagIn != null && pImagIn.Length < NumSamples) || pRealOut.Length < NumSamples || pImagOut.Length < NumSamples) { " is 150.
Long Statement,Ernzo.Windows.WaveAudio,WaveInDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveInDevice.cs,GetDeviceStatus,The length of the statement  "	WaveStatus wStatus = (WaveStatus)Interlocked.CompareExchange (ref _DeviceState' (int)WaveStatus.waveClosed' (int)WaveStatus.waveClosed); " is 136.
Long Statement,Ernzo.Windows.WaveAudio,WaveInDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveInDevice.cs,Open,The length of the statement  "		mmr = WaveInput.waveInOpen (ref _hWaveIn' deviceId' ref wfmt.wfmt.Format' Marshal.GetFunctionPointerForDelegate (_Callback)' IntPtr.Zero' WaveConstants.CALLBACK_FUNCTION); " is 171.
Long Statement,Ernzo.Windows.WaveAudio,WaveOutDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveOutDevice.cs,GetDeviceStatus,The length of the statement  "	WaveStatus wStatus = (WaveStatus)Interlocked.CompareExchange (ref _DeviceState' (int)WaveStatus.waveClosed' (int)WaveStatus.waveClosed); " is 136.
Long Statement,Ernzo.Windows.WaveAudio,WaveOutDevice,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveOutDevice.cs,Open,The length of the statement  "		mmr = WaveOutput.waveOutOpen (ref _hWaveOut' deviceId' ref wfmt.wfmt.Format' Marshal.GetFunctionPointerForDelegate (_Callback)' IntPtr.Zero' WaveConstants.CALLBACK_FUNCTION); " is 174.
Long Statement,Ernzo.Windows.DirectShowLib.MMStreaming,MSStatus,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\MMStreaming.cs,GetErrorText,The length of the statement  "		errText = "An IMediaStream object could not be removed from an IMultiMediaStream object because it still contains at least one allocated sample."; " is 146.
Complex Conditional,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The conditional expression  "pRealIn.Length < NumSamples || (pImagIn != null && pImagIn.Length < NumSamples) || pRealOut.Length < NumSamples || pImagOut.Length < NumSamples"  is complex.
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,NextPowerOfTwo,The following statement contains a magic number: x = x | (x >> 2);  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,NextPowerOfTwo,The following statement contains a magic number: x = x | (x >> 4);  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,NextPowerOfTwo,The following statement contains a magic number: x = x | (x >> 8);  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,NextPowerOfTwo,The following statement contains a magic number: x = x | (x >> 16);  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,IndexToFrequency,The following statement contains a magic number: if (Index >= NumSamples)  	return 0.0;  else if (Index <= NumSamples / 2)  	return (double)Index / (double)NumSamples;  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,IndexToFrequency,The following statement contains a magic number: if (Index <= NumSamples / 2)  	return (double)Index / (double)NumSamples;  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The following statement contains a magic number: for (BlockSize = 2; BlockSize <= NumSamples; BlockSize <<= 1) {  	double delta_angle = angle_numerator / (double)BlockSize;  	double sm2 = Math.Sin (-2 * delta_angle);  	double sm1 = Math.Sin (-delta_angle);  	double cm2 = Math.Cos (-2 * delta_angle);  	double cm1 = Math.Cos (-delta_angle);  	double w = 2 * cm1;  	double ar0' ar1' ar2;  	double ai0' ai1' ai2;  	for (i = 0; i < NumSamples; i += BlockSize) {  		ar2 = cm2;  		ar1 = cm1;  		ai2 = sm2;  		ai1 = sm1;  		for (j = i' n = 0; n < BlockEnd; j++' n++) {  			ar0 = w * ar1 - ar2;  			ar2 = ar1;  			ar1 = ar0;  			ai0 = w * ai1 - ai2;  			ai2 = ai1;  			ai1 = ai0;  			k = j + BlockEnd;  			tr = ar0 * pRealOut [k] - ai0 * pImagOut [k];  			ti = ar0 * pImagOut [k] + ai0 * pRealOut [k];  			pRealOut [k] = (pRealOut [j] - tr);  			pImagOut [k] = (pImagOut [j] - ti);  			pRealOut [j] += (tr);  			pImagOut [j] += (ti);  		}  	}  	BlockEnd = BlockSize;  }  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The following statement contains a magic number: for (BlockSize = 2; BlockSize <= NumSamples; BlockSize <<= 1) {  	double delta_angle = angle_numerator / (double)BlockSize;  	double sm2 = Math.Sin (-2 * delta_angle);  	double sm1 = Math.Sin (-delta_angle);  	double cm2 = Math.Cos (-2 * delta_angle);  	double cm1 = Math.Cos (-delta_angle);  	double w = 2 * cm1;  	double ar0' ar1' ar2;  	double ai0' ai1' ai2;  	for (i = 0; i < NumSamples; i += BlockSize) {  		ar2 = cm2;  		ar1 = cm1;  		ai2 = sm2;  		ai1 = sm1;  		for (j = i' n = 0; n < BlockEnd; j++' n++) {  			ar0 = w * ar1 - ar2;  			ar2 = ar1;  			ar1 = ar0;  			ai0 = w * ai1 - ai2;  			ai2 = ai1;  			ai1 = ai0;  			k = j + BlockEnd;  			tr = ar0 * pRealOut [k] - ai0 * pImagOut [k];  			ti = ar0 * pImagOut [k] + ai0 * pRealOut [k];  			pRealOut [k] = (pRealOut [j] - tr);  			pImagOut [k] = (pImagOut [j] - ti);  			pRealOut [j] += (tr);  			pImagOut [j] += (ti);  		}  	}  	BlockEnd = BlockSize;  }  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The following statement contains a magic number: for (BlockSize = 2; BlockSize <= NumSamples; BlockSize <<= 1) {  	double delta_angle = angle_numerator / (double)BlockSize;  	double sm2 = Math.Sin (-2 * delta_angle);  	double sm1 = Math.Sin (-delta_angle);  	double cm2 = Math.Cos (-2 * delta_angle);  	double cm1 = Math.Cos (-delta_angle);  	double w = 2 * cm1;  	double ar0' ar1' ar2;  	double ai0' ai1' ai2;  	for (i = 0; i < NumSamples; i += BlockSize) {  		ar2 = cm2;  		ar1 = cm1;  		ai2 = sm2;  		ai1 = sm1;  		for (j = i' n = 0; n < BlockEnd; j++' n++) {  			ar0 = w * ar1 - ar2;  			ar2 = ar1;  			ar1 = ar0;  			ai0 = w * ai1 - ai2;  			ai2 = ai1;  			ai1 = ai0;  			k = j + BlockEnd;  			tr = ar0 * pRealOut [k] - ai0 * pImagOut [k];  			ti = ar0 * pImagOut [k] + ai0 * pRealOut [k];  			pRealOut [k] = (pRealOut [j] - tr);  			pImagOut [k] = (pImagOut [j] - ti);  			pRealOut [j] += (tr);  			pImagOut [j] += (ti);  		}  	}  	BlockEnd = BlockSize;  }  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The following statement contains a magic number: for (BlockSize = 2; BlockSize <= NumSamples; BlockSize <<= 1) {  	double delta_angle = angle_numerator / (double)BlockSize;  	double sm2 = Math.Sin (-2 * delta_angle);  	double sm1 = Math.Sin (-delta_angle);  	double cm2 = Math.Cos (-2 * delta_angle);  	double cm1 = Math.Cos (-delta_angle);  	double w = 2 * cm1;  	double ar0' ar1' ar2;  	double ai0' ai1' ai2;  	for (i = 0; i < NumSamples; i += BlockSize) {  		ar2 = cm2;  		ar1 = cm1;  		ai2 = sm2;  		ai1 = sm1;  		for (j = i' n = 0; n < BlockEnd; j++' n++) {  			ar0 = w * ar1 - ar2;  			ar2 = ar1;  			ar1 = ar0;  			ai0 = w * ai1 - ai2;  			ai2 = ai1;  			ai1 = ai0;  			k = j + BlockEnd;  			tr = ar0 * pRealOut [k] - ai0 * pImagOut [k];  			ti = ar0 * pImagOut [k] + ai0 * pRealOut [k];  			pRealOut [k] = (pRealOut [j] - tr);  			pImagOut [k] = (pImagOut [j] - ti);  			pRealOut [j] += (tr);  			pImagOut [j] += (ti);  		}  	}  	BlockEnd = BlockSize;  }  
Magic Number,Ernzo.DSP,FFT,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\FFT.cs,Compute,The following statement contains a magic number: BlockSize = 2
Magic Number,Ernzo.Windows.WaveAudio,WaveFormat,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveBase.cs,SetPCMFormat,The following statement contains a magic number: wfmt.Format.nBlockAlign = (short)unchecked(wfmt.Format.nChannels * (wfmt.Format.wBitsPerSample / 8));  
Magic Number,Ernzo.Windows.WaveAudio,WaveInStatus,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveInDevice.cs,GetErrorText,The following statement contains a magic number: WaveInput.waveInGetErrorTextW (mmr' message' 256);  
Magic Number,Ernzo.Windows.WaveAudio,WaveOutStatus,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\WaveOutDevice.cs,GetErrorText,The following statement contains a magic number: WaveOutput.waveOutGetErrorTextW (mmr' message' 256);  
Missing Default,Ernzo.Windows.DirectShowLib.MMStreaming,MSStatus,C:\repos\spark-div_signalanalyzer2\3rdparty\WindowsMedia\MMStreaming.cs,GetErrorText,The following switch statement is missing a default case: switch (errorCode) {  case MSStatus.MS_S_OK:  case MSStatus.MS_S_FALSE:  	errText = "Operation succeeds.";  	break;  case MSStatus.MS_S_PENDING:  	errText = "Sample update is not yet complete.";  	break;  case MSStatus.MS_S_NOUPDATE:  	errText = "Sample was not updated after forced completion.";  	break;  case MSStatus.MS_S_ENDOFSTREAM:  	errText = "End of stream. Sample not updated.";  	break;  case MSStatus.MS_E_SAMPLEALLOC:  	errText = "An IMediaStream object could not be removed from an IMultiMediaStream object because it still contains at least one allocated sample.";  	break;  case MSStatus.MS_E_PURPOSEID:  	errText = "The specified purpose ID can't be used for the call.";  	break;  case MSStatus.MS_E_NOSTREAM:  	errText = "No stream can be found with the specified attributes.";  	break;  case MSStatus.MS_E_NOSEEKING:  	errText = "Seeking not supported for this IMultiMediaStream object.";  	break;  case MSStatus.MS_E_INCOMPATIBLE:  	errText = "The stream formats are not compatible.";  	break;  case MSStatus.MS_E_BUSY:  	errText = "The sample is busy.";  	break;  case MSStatus.MS_E_NOTINIT:  	errText = "The object can't accept the call because its initialize function or equivalent has not been called.";  	break;  case MSStatus.MS_E_SOURCEALREADYDEFINED:  	errText = "Source already defined.";  	break;  case MSStatus.MS_E_INVALIDSTREAMTYPE:  	errText = "The stream type is not valid for this operation.";  	break;  case MSStatus.MS_E_NOTRUNNING:  	errText = "The IMultiMediaStream object is not in running state.";  	break;  }  
