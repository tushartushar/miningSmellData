Implementation smell,Namespace,Class,File,Method,Description
Long Statement,IO,TinySerializer,C:\repos\yingDev_WGestures\NativeMultiFileArchiveLib\TinySerializer.cs,SerializeCompressed,The length of the statement  "            // deflate is chosen over GZip as there is no header information' which wastes additional space in a space critical operation. " is 126.
Magic Number,NativeMultiFileArchiveLib,IndexHandler,C:\repos\yingDev_WGestures\NativeMultiFileArchiveLib\StreamingArchiveFile.cs,readNextIndexDataLength,The following statement contains a magic number: byte[] lengthBuffer = new byte[2];
Magic Number,NativeMultiFileArchiveLib,IndexHandler,C:\repos\yingDev_WGestures\NativeMultiFileArchiveLib\StreamingArchiveFile.cs,readNextIndexDataLength,The following statement contains a magic number: fs.Read(lengthBuffer' 0' 2);
Magic Number,IO,TinySerializer,C:\repos\yingDev_WGestures\NativeMultiFileArchiveLib\TinySerializer.cs,Deflate,The following statement contains a magic number: using (MemoryStream inputStream = new MemoryStream(data))              {                  using (MemoryStream outputStream = new MemoryStream())                  {                      using (DeflateStream df = new DeflateStream(outputStream' CompressionMode.Compress' true))                      {                          // write the input stream into the compression stream:                          inputStream.CopyTo(df' 1024);                            // return the underlying memory stream:                          return outputStream.ToArray();                      }                  }              }
Magic Number,IO,TinySerializer,C:\repos\yingDev_WGestures\NativeMultiFileArchiveLib\TinySerializer.cs,Inflate,The following statement contains a magic number: using (MemoryStream input = new MemoryStream(data))              {                  using (DeflateStream decompressionStream = new DeflateStream(input' CompressionMode.Decompress' true))                  {                      using (MemoryStream output = new MemoryStream())                      {                          decompressionStream.CopyTo(output' 1024);                          return output.ToArray();                      }                  }              }
