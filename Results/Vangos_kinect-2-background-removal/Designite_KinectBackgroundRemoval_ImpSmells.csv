Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,Cyclomatic complexity of the method is 8
Long Statement,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The length of the statement  "	if (((depthWidth * depthHeight) == _depthData.Length) && ((colorWidth * colorHeight * BYTES_PER_PIXEL) == _colorData.Length) && ((bodyIndexWidth * bodyIndexHeight) == _bodyData.Length)) { " is 187.
Long Statement,KinectBackgroundRemoval,MainWindow,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "		_reader = _sensor.OpenMultiSourceFrameReader (FrameSourceTypes.Color | FrameSourceTypes.Depth | FrameSourceTypes.BodyIndex); " is 124.
Complex Conditional,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The conditional expression  "(colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)"  is complex.
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (((depthWidth * depthHeight) == _depthData.Length) && ((colorWidth * colorHeight * BYTES_PER_PIXEL) == _colorData.Length) && ((bodyIndexWidth * bodyIndexHeight) == _bodyData.Length)) {  	depthFrame.CopyFrameDataToArray (_depthData);  	if (colorFrame.RawColorImageFormat == ColorImageFormat.Bgra) {  		colorFrame.CopyRawFrameDataToArray (_colorData);  	}  	else {  		colorFrame.CopyConvertedFrameDataToArray (_colorData' ColorImageFormat.Bgra);  	}  	bodyIndexFrame.CopyFrameDataToArray (_bodyData);  	_coordinateMapper.MapDepthFrameToColorSpace (_depthData' _colorPoints);  	Array.Clear (_displayPixels' 0' _displayPixels.Length);  	for (int y = 0; y < depthHeight; ++y) {  		for (int x = 0; x < depthWidth; ++x) {  			int depthIndex = (y * depthWidth) + x;  			byte player = _bodyData [depthIndex];  			if (player != 0xff) {  				ColorSpacePoint colorPoint = _colorPoints [depthIndex];  				int colorX = (int)Math.Floor (colorPoint.X + 0.5);  				int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  				if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  					int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  					int displayIndex = depthIndex * BYTES_PER_PIXEL;  					_displayPixels [displayIndex + 0] = _colorData [colorIndex];  					_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  					_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  					_displayPixels [displayIndex + 3] = 0xff;  				}  			}  		}  	}  	_bitmap.Lock ();  	Marshal.Copy (_displayPixels' 0' _bitmap.BackBuffer' _displayPixels.Length);  	_bitmap.AddDirtyRect (new Int32Rect (0' 0' depthWidth' depthHeight));  	_bitmap.Unlock ();  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (((depthWidth * depthHeight) == _depthData.Length) && ((colorWidth * colorHeight * BYTES_PER_PIXEL) == _colorData.Length) && ((bodyIndexWidth * bodyIndexHeight) == _bodyData.Length)) {  	depthFrame.CopyFrameDataToArray (_depthData);  	if (colorFrame.RawColorImageFormat == ColorImageFormat.Bgra) {  		colorFrame.CopyRawFrameDataToArray (_colorData);  	}  	else {  		colorFrame.CopyConvertedFrameDataToArray (_colorData' ColorImageFormat.Bgra);  	}  	bodyIndexFrame.CopyFrameDataToArray (_bodyData);  	_coordinateMapper.MapDepthFrameToColorSpace (_depthData' _colorPoints);  	Array.Clear (_displayPixels' 0' _displayPixels.Length);  	for (int y = 0; y < depthHeight; ++y) {  		for (int x = 0; x < depthWidth; ++x) {  			int depthIndex = (y * depthWidth) + x;  			byte player = _bodyData [depthIndex];  			if (player != 0xff) {  				ColorSpacePoint colorPoint = _colorPoints [depthIndex];  				int colorX = (int)Math.Floor (colorPoint.X + 0.5);  				int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  				if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  					int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  					int displayIndex = depthIndex * BYTES_PER_PIXEL;  					_displayPixels [displayIndex + 0] = _colorData [colorIndex];  					_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  					_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  					_displayPixels [displayIndex + 3] = 0xff;  				}  			}  		}  	}  	_bitmap.Lock ();  	Marshal.Copy (_displayPixels' 0' _bitmap.BackBuffer' _displayPixels.Length);  	_bitmap.AddDirtyRect (new Int32Rect (0' 0' depthWidth' depthHeight));  	_bitmap.Unlock ();  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (((depthWidth * depthHeight) == _depthData.Length) && ((colorWidth * colorHeight * BYTES_PER_PIXEL) == _colorData.Length) && ((bodyIndexWidth * bodyIndexHeight) == _bodyData.Length)) {  	depthFrame.CopyFrameDataToArray (_depthData);  	if (colorFrame.RawColorImageFormat == ColorImageFormat.Bgra) {  		colorFrame.CopyRawFrameDataToArray (_colorData);  	}  	else {  		colorFrame.CopyConvertedFrameDataToArray (_colorData' ColorImageFormat.Bgra);  	}  	bodyIndexFrame.CopyFrameDataToArray (_bodyData);  	_coordinateMapper.MapDepthFrameToColorSpace (_depthData' _colorPoints);  	Array.Clear (_displayPixels' 0' _displayPixels.Length);  	for (int y = 0; y < depthHeight; ++y) {  		for (int x = 0; x < depthWidth; ++x) {  			int depthIndex = (y * depthWidth) + x;  			byte player = _bodyData [depthIndex];  			if (player != 0xff) {  				ColorSpacePoint colorPoint = _colorPoints [depthIndex];  				int colorX = (int)Math.Floor (colorPoint.X + 0.5);  				int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  				if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  					int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  					int displayIndex = depthIndex * BYTES_PER_PIXEL;  					_displayPixels [displayIndex + 0] = _colorData [colorIndex];  					_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  					_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  					_displayPixels [displayIndex + 3] = 0xff;  				}  			}  		}  	}  	_bitmap.Lock ();  	Marshal.Copy (_displayPixels' 0' _bitmap.BackBuffer' _displayPixels.Length);  	_bitmap.AddDirtyRect (new Int32Rect (0' 0' depthWidth' depthHeight));  	_bitmap.Unlock ();  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (((depthWidth * depthHeight) == _depthData.Length) && ((colorWidth * colorHeight * BYTES_PER_PIXEL) == _colorData.Length) && ((bodyIndexWidth * bodyIndexHeight) == _bodyData.Length)) {  	depthFrame.CopyFrameDataToArray (_depthData);  	if (colorFrame.RawColorImageFormat == ColorImageFormat.Bgra) {  		colorFrame.CopyRawFrameDataToArray (_colorData);  	}  	else {  		colorFrame.CopyConvertedFrameDataToArray (_colorData' ColorImageFormat.Bgra);  	}  	bodyIndexFrame.CopyFrameDataToArray (_bodyData);  	_coordinateMapper.MapDepthFrameToColorSpace (_depthData' _colorPoints);  	Array.Clear (_displayPixels' 0' _displayPixels.Length);  	for (int y = 0; y < depthHeight; ++y) {  		for (int x = 0; x < depthWidth; ++x) {  			int depthIndex = (y * depthWidth) + x;  			byte player = _bodyData [depthIndex];  			if (player != 0xff) {  				ColorSpacePoint colorPoint = _colorPoints [depthIndex];  				int colorX = (int)Math.Floor (colorPoint.X + 0.5);  				int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  				if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  					int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  					int displayIndex = depthIndex * BYTES_PER_PIXEL;  					_displayPixels [displayIndex + 0] = _colorData [colorIndex];  					_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  					_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  					_displayPixels [displayIndex + 3] = 0xff;  				}  			}  		}  	}  	_bitmap.Lock ();  	Marshal.Copy (_displayPixels' 0' _bitmap.BackBuffer' _displayPixels.Length);  	_bitmap.AddDirtyRect (new Int32Rect (0' 0' depthWidth' depthHeight));  	_bitmap.Unlock ();  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (((depthWidth * depthHeight) == _depthData.Length) && ((colorWidth * colorHeight * BYTES_PER_PIXEL) == _colorData.Length) && ((bodyIndexWidth * bodyIndexHeight) == _bodyData.Length)) {  	depthFrame.CopyFrameDataToArray (_depthData);  	if (colorFrame.RawColorImageFormat == ColorImageFormat.Bgra) {  		colorFrame.CopyRawFrameDataToArray (_colorData);  	}  	else {  		colorFrame.CopyConvertedFrameDataToArray (_colorData' ColorImageFormat.Bgra);  	}  	bodyIndexFrame.CopyFrameDataToArray (_bodyData);  	_coordinateMapper.MapDepthFrameToColorSpace (_depthData' _colorPoints);  	Array.Clear (_displayPixels' 0' _displayPixels.Length);  	for (int y = 0; y < depthHeight; ++y) {  		for (int x = 0; x < depthWidth; ++x) {  			int depthIndex = (y * depthWidth) + x;  			byte player = _bodyData [depthIndex];  			if (player != 0xff) {  				ColorSpacePoint colorPoint = _colorPoints [depthIndex];  				int colorX = (int)Math.Floor (colorPoint.X + 0.5);  				int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  				if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  					int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  					int displayIndex = depthIndex * BYTES_PER_PIXEL;  					_displayPixels [displayIndex + 0] = _colorData [colorIndex];  					_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  					_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  					_displayPixels [displayIndex + 3] = 0xff;  				}  			}  		}  	}  	_bitmap.Lock ();  	Marshal.Copy (_displayPixels' 0' _bitmap.BackBuffer' _displayPixels.Length);  	_bitmap.AddDirtyRect (new Int32Rect (0' 0' depthWidth' depthHeight));  	_bitmap.Unlock ();  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int y = 0; y < depthHeight; ++y) {  	for (int x = 0; x < depthWidth; ++x) {  		int depthIndex = (y * depthWidth) + x;  		byte player = _bodyData [depthIndex];  		if (player != 0xff) {  			ColorSpacePoint colorPoint = _colorPoints [depthIndex];  			int colorX = (int)Math.Floor (colorPoint.X + 0.5);  			int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  			if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  				int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  				int displayIndex = depthIndex * BYTES_PER_PIXEL;  				_displayPixels [displayIndex + 0] = _colorData [colorIndex];  				_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  				_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  				_displayPixels [displayIndex + 3] = 0xff;  			}  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int y = 0; y < depthHeight; ++y) {  	for (int x = 0; x < depthWidth; ++x) {  		int depthIndex = (y * depthWidth) + x;  		byte player = _bodyData [depthIndex];  		if (player != 0xff) {  			ColorSpacePoint colorPoint = _colorPoints [depthIndex];  			int colorX = (int)Math.Floor (colorPoint.X + 0.5);  			int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  			if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  				int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  				int displayIndex = depthIndex * BYTES_PER_PIXEL;  				_displayPixels [displayIndex + 0] = _colorData [colorIndex];  				_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  				_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  				_displayPixels [displayIndex + 3] = 0xff;  			}  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int y = 0; y < depthHeight; ++y) {  	for (int x = 0; x < depthWidth; ++x) {  		int depthIndex = (y * depthWidth) + x;  		byte player = _bodyData [depthIndex];  		if (player != 0xff) {  			ColorSpacePoint colorPoint = _colorPoints [depthIndex];  			int colorX = (int)Math.Floor (colorPoint.X + 0.5);  			int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  			if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  				int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  				int displayIndex = depthIndex * BYTES_PER_PIXEL;  				_displayPixels [displayIndex + 0] = _colorData [colorIndex];  				_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  				_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  				_displayPixels [displayIndex + 3] = 0xff;  			}  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int y = 0; y < depthHeight; ++y) {  	for (int x = 0; x < depthWidth; ++x) {  		int depthIndex = (y * depthWidth) + x;  		byte player = _bodyData [depthIndex];  		if (player != 0xff) {  			ColorSpacePoint colorPoint = _colorPoints [depthIndex];  			int colorX = (int)Math.Floor (colorPoint.X + 0.5);  			int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  			if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  				int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  				int displayIndex = depthIndex * BYTES_PER_PIXEL;  				_displayPixels [displayIndex + 0] = _colorData [colorIndex];  				_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  				_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  				_displayPixels [displayIndex + 3] = 0xff;  			}  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int y = 0; y < depthHeight; ++y) {  	for (int x = 0; x < depthWidth; ++x) {  		int depthIndex = (y * depthWidth) + x;  		byte player = _bodyData [depthIndex];  		if (player != 0xff) {  			ColorSpacePoint colorPoint = _colorPoints [depthIndex];  			int colorX = (int)Math.Floor (colorPoint.X + 0.5);  			int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  			if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  				int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  				int displayIndex = depthIndex * BYTES_PER_PIXEL;  				_displayPixels [displayIndex + 0] = _colorData [colorIndex];  				_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  				_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  				_displayPixels [displayIndex + 3] = 0xff;  			}  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int x = 0; x < depthWidth; ++x) {  	int depthIndex = (y * depthWidth) + x;  	byte player = _bodyData [depthIndex];  	if (player != 0xff) {  		ColorSpacePoint colorPoint = _colorPoints [depthIndex];  		int colorX = (int)Math.Floor (colorPoint.X + 0.5);  		int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  		if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  			int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  			int displayIndex = depthIndex * BYTES_PER_PIXEL;  			_displayPixels [displayIndex + 0] = _colorData [colorIndex];  			_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  			_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  			_displayPixels [displayIndex + 3] = 0xff;  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int x = 0; x < depthWidth; ++x) {  	int depthIndex = (y * depthWidth) + x;  	byte player = _bodyData [depthIndex];  	if (player != 0xff) {  		ColorSpacePoint colorPoint = _colorPoints [depthIndex];  		int colorX = (int)Math.Floor (colorPoint.X + 0.5);  		int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  		if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  			int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  			int displayIndex = depthIndex * BYTES_PER_PIXEL;  			_displayPixels [displayIndex + 0] = _colorData [colorIndex];  			_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  			_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  			_displayPixels [displayIndex + 3] = 0xff;  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int x = 0; x < depthWidth; ++x) {  	int depthIndex = (y * depthWidth) + x;  	byte player = _bodyData [depthIndex];  	if (player != 0xff) {  		ColorSpacePoint colorPoint = _colorPoints [depthIndex];  		int colorX = (int)Math.Floor (colorPoint.X + 0.5);  		int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  		if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  			int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  			int displayIndex = depthIndex * BYTES_PER_PIXEL;  			_displayPixels [displayIndex + 0] = _colorData [colorIndex];  			_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  			_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  			_displayPixels [displayIndex + 3] = 0xff;  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int x = 0; x < depthWidth; ++x) {  	int depthIndex = (y * depthWidth) + x;  	byte player = _bodyData [depthIndex];  	if (player != 0xff) {  		ColorSpacePoint colorPoint = _colorPoints [depthIndex];  		int colorX = (int)Math.Floor (colorPoint.X + 0.5);  		int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  		if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  			int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  			int displayIndex = depthIndex * BYTES_PER_PIXEL;  			_displayPixels [displayIndex + 0] = _colorData [colorIndex];  			_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  			_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  			_displayPixels [displayIndex + 3] = 0xff;  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: for (int x = 0; x < depthWidth; ++x) {  	int depthIndex = (y * depthWidth) + x;  	byte player = _bodyData [depthIndex];  	if (player != 0xff) {  		ColorSpacePoint colorPoint = _colorPoints [depthIndex];  		int colorX = (int)Math.Floor (colorPoint.X + 0.5);  		int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  		if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  			int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  			int displayIndex = depthIndex * BYTES_PER_PIXEL;  			_displayPixels [displayIndex + 0] = _colorData [colorIndex];  			_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  			_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  			_displayPixels [displayIndex + 3] = 0xff;  		}  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (player != 0xff) {  	ColorSpacePoint colorPoint = _colorPoints [depthIndex];  	int colorX = (int)Math.Floor (colorPoint.X + 0.5);  	int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  	if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  		int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  		int displayIndex = depthIndex * BYTES_PER_PIXEL;  		_displayPixels [displayIndex + 0] = _colorData [colorIndex];  		_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  		_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  		_displayPixels [displayIndex + 3] = 0xff;  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (player != 0xff) {  	ColorSpacePoint colorPoint = _colorPoints [depthIndex];  	int colorX = (int)Math.Floor (colorPoint.X + 0.5);  	int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  	if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  		int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  		int displayIndex = depthIndex * BYTES_PER_PIXEL;  		_displayPixels [displayIndex + 0] = _colorData [colorIndex];  		_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  		_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  		_displayPixels [displayIndex + 3] = 0xff;  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (player != 0xff) {  	ColorSpacePoint colorPoint = _colorPoints [depthIndex];  	int colorX = (int)Math.Floor (colorPoint.X + 0.5);  	int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  	if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  		int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  		int displayIndex = depthIndex * BYTES_PER_PIXEL;  		_displayPixels [displayIndex + 0] = _colorData [colorIndex];  		_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  		_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  		_displayPixels [displayIndex + 3] = 0xff;  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (player != 0xff) {  	ColorSpacePoint colorPoint = _colorPoints [depthIndex];  	int colorX = (int)Math.Floor (colorPoint.X + 0.5);  	int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  	if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  		int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  		int displayIndex = depthIndex * BYTES_PER_PIXEL;  		_displayPixels [displayIndex + 0] = _colorData [colorIndex];  		_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  		_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  		_displayPixels [displayIndex + 3] = 0xff;  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if (player != 0xff) {  	ColorSpacePoint colorPoint = _colorPoints [depthIndex];  	int colorX = (int)Math.Floor (colorPoint.X + 0.5);  	int colorY = (int)Math.Floor (colorPoint.Y + 0.5);  	if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  		int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  		int displayIndex = depthIndex * BYTES_PER_PIXEL;  		_displayPixels [displayIndex + 0] = _colorData [colorIndex];  		_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  		_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  		_displayPixels [displayIndex + 3] = 0xff;  	}  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  	int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  	int displayIndex = depthIndex * BYTES_PER_PIXEL;  	_displayPixels [displayIndex + 0] = _colorData [colorIndex];  	_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  	_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  	_displayPixels [displayIndex + 3] = 0xff;  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  	int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  	int displayIndex = depthIndex * BYTES_PER_PIXEL;  	_displayPixels [displayIndex + 0] = _colorData [colorIndex];  	_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  	_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  	_displayPixels [displayIndex + 3] = 0xff;  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: if ((colorX >= 0) && (colorX < colorWidth) && (colorY >= 0) && (colorY < colorHeight)) {  	int colorIndex = ((colorY * colorWidth) + colorX) * BYTES_PER_PIXEL;  	int displayIndex = depthIndex * BYTES_PER_PIXEL;  	_displayPixels [displayIndex + 0] = _colorData [colorIndex];  	_displayPixels [displayIndex + 1] = _colorData [colorIndex + 1];  	_displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  	_displayPixels [displayIndex + 3] = 0xff;  }  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: _displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: _displayPixels [displayIndex + 2] = _colorData [colorIndex + 2];  
Magic Number,KinectBackgroundRemoval,BackgroundRemovalTool,C:\repos\Vangos_kinect-2-background-removal\KinectBackgroundRemoval\BackgroundRemovalTool.cs,GreenScreen,The following statement contains a magic number: _displayPixels [displayIndex + 3] = 0xff;  
