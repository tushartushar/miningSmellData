Implementation smell,Namespace,Class,File,Method,Description
Long Method,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The method has 140 lines of code.
Complex Method,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,Function,Cyclomatic complexity of the method is 9
Complex Method,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,Function,Cyclomatic complexity of the method is 13
Complex Method,YAMP.Io,DiskFunctionLoader,C:\repos\FlorianRappl_YAMP\YAMP.Io\Loaders\DiskFunctionLoader.cs,Load,Cyclomatic complexity of the method is 8
Long Statement,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ASCIILoad,The length of the statement  "                var lines = file_string.Split('\n').Select(line => line.Split(new [] { ' '' '\t'' '''' '\r' }' StringSplitOptions.RemoveEmptyEntries)).ToList(); " is 144.
Long Statement,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ASCIILoad,The length of the statement  "                while (numberOfHeaderLines < numberOfLines && !Double.TryParse(lines[numberOfHeaderLines].FirstOrDefault()' out parseResult)) " is 125.
Long Statement,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ASCIILoad,The length of the statement  "                while (numberOfFooterLines < numberOfLines - numberOfHeaderLines && !Double.TryParse(lines[numberOfLines - 1 - numberOfFooterLines].FirstOrDefault()' out parseResult)) " is 167.
Long Statement,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ASCIILoad,The length of the statement  "                var tokensPerLine = lines.Select(line => line.Length).SkipWhile((item' index) => index < numberOfHeaderLines).Reverse().SkipWhile((item' index) => index < numberOfFooterLines).Reverse().ToList(); " is 195.
Long Statement,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ASCIILoad,The length of the statement  "                        if (Double.TryParse(lines[numberOfHeaderLines + i][j]' NumberStyles.Any' System.Globalization.CultureInfo.InvariantCulture.NumberFormat' out parseResult)) " is 154.
Complex Conditional,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The conditional expression  "bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Canonical ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppPArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppRgb"  is complex.
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,Load,The following statement contains a magic number: var lenbuffer = new Byte[4];
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var fs = File.Open(filename' FileMode.Open))              {                  var file_bytes = new Byte[fs.Length];                  fs.Read(file_bytes' 0' 8);                    var png_magic_number = new Byte[] { 0x89' 0x50' 0x4e' 0x47' 0x0d' 0x0a' 0x1a' 0x0a };                    if (!file_bytes.Take(8).Select((b' i) => b == png_magic_number[i]).Contains(false))                      imageType = "png";                    var tiff_magic_number_0 = new Byte[] { 0x49' 0x49' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_0[i]).Contains(false))                      imageType = "tiff";                    var tiff_magic_number_1 = new Byte[] { 0x4d' 0x4d' 0x2a' 0x00 };                    if (!file_bytes.Take(4).Select((b' i) => b == tiff_magic_number_1[i]).Contains(false))                      imageType = "tiff";                    var bmp_magic_number = new Byte[] { 0x42' 0x4D };                    if (!file_bytes.Take(2).Select((b' i) => b == bmp_magic_number[i]).Contains(false))                      imageType = "bmp";                    var gif_magic_number_0 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x37' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_0[i]).Contains(false))                      imageType = "gif";                    var gif_magic_number_1 = new Byte[] { 0x47' 0x49' 0x46' 0x38' 0x39' 0x61 };                    if (!file_bytes.Take(6).Select((b' i) => b == gif_magic_number_1[i]).Contains(false))                      imageType = "gif";                    var jpg_magic_number = new Byte[] { 0xff' 0xd8 };                    if (!file_bytes.Take(2).Select((b' i) => b == jpg_magic_number[i]).Contains(false))                      imageType = "jpg";              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var bmp = new Bitmap(filename))              {                  var result = default(MatrixValue);                    if (bmp == null)                  {                      error = true;                      result = new MatrixValue();                  }                  else                  {                      var height = bmp.Height;                      var width = bmp.Width;                        var rect = new Rectangle(0' 0' bmp.Width' bmp.Height);                      var bmpData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.ReadOnly' bmp.PixelFormat);                      var ptr = bmpData.Scan0;                      var bytes = Math.Abs(bmpData.Stride) * bmp.Height;                      var rgbValues = new Byte[bytes];                      System.Runtime.InteropServices.Marshal.Copy(ptr' rgbValues' 0' bytes);                      bmp.UnlockBits(bmpData);                      var bytesPerPixel = 0;                        if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Canonical ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppPArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppRgb)                      {                          bytesPerPixel = 4;                      }                      else if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format24bppRgb)                      {                          bytesPerPixel = 3;                      }                      else                      {                          throw new YAMPPixelFormatNotSupportedException(filename);                      }                        if (Double.IsNaN(coarsening))                      {                          const Double maxPixelPerDirection = 100.0;                            if (width > maxPixelPerDirection || height > maxPixelPerDirection)                          {                              coarsening = Math.Max(width / maxPixelPerDirection' height / maxPixelPerDirection);                          }                          else                          {                              coarsening = 1.0;                          }                      }                        if (coarsening < 1.0)                      {                          throw new YAMPArgumentInvalidException("Load"' "ImageCoarsening");                      }                        var cI = 1.0 / coarsening;                      var finalWidth = (Int32)(width * cI);                      var finalHeight = (Int32)(height * cI);                        var count = new Byte[finalHeight' finalWidth];                      var rvalues = new Double[finalHeight' finalWidth];                      var gvalues = new Double[finalHeight' finalWidth];                      var bvalues = new Double[finalHeight' finalWidth];                        for (var i = 0; i < width; i++)                      {                          var idx = (Int32)(i * cI);                            if (idx >= finalWidth)                          {                              idx = finalWidth - 1;                          }                            for (var j = 0; j < height; j++)                          {                              var jdx = (Int32)(j * cI);                                if (jdx >= finalHeight)                              {                                  jdx = finalHeight - 1;                              }                                rvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 2];                              gvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 1];                              bvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 0];                              count[jdx' idx]++;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              var cinv = 1.0 / count[i' j];                              rvalues[i' j] *= cinv;                              gvalues[i' j] *= cinv;                              bvalues[i' j] *= cinv;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              rvalues[i' j] = (Int32)rvalues[i' j];                              gvalues[i' j] = (Int32)gvalues[i' j];                              bvalues[i' j] = (Int32)bvalues[i' j];                                rvalues[i' j] *= rfactor;                              gvalues[i' j] *= gfactor;                              bvalues[i' j] *= bfactor;                                rvalues[i' j] += gvalues[i' j] + bvalues[i' j];                          }                      }                        return new MatrixValue(rvalues);                  }                    return result;              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var bmp = new Bitmap(filename))              {                  var result = default(MatrixValue);                    if (bmp == null)                  {                      error = true;                      result = new MatrixValue();                  }                  else                  {                      var height = bmp.Height;                      var width = bmp.Width;                        var rect = new Rectangle(0' 0' bmp.Width' bmp.Height);                      var bmpData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.ReadOnly' bmp.PixelFormat);                      var ptr = bmpData.Scan0;                      var bytes = Math.Abs(bmpData.Stride) * bmp.Height;                      var rgbValues = new Byte[bytes];                      System.Runtime.InteropServices.Marshal.Copy(ptr' rgbValues' 0' bytes);                      bmp.UnlockBits(bmpData);                      var bytesPerPixel = 0;                        if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Canonical ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppPArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppRgb)                      {                          bytesPerPixel = 4;                      }                      else if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format24bppRgb)                      {                          bytesPerPixel = 3;                      }                      else                      {                          throw new YAMPPixelFormatNotSupportedException(filename);                      }                        if (Double.IsNaN(coarsening))                      {                          const Double maxPixelPerDirection = 100.0;                            if (width > maxPixelPerDirection || height > maxPixelPerDirection)                          {                              coarsening = Math.Max(width / maxPixelPerDirection' height / maxPixelPerDirection);                          }                          else                          {                              coarsening = 1.0;                          }                      }                        if (coarsening < 1.0)                      {                          throw new YAMPArgumentInvalidException("Load"' "ImageCoarsening");                      }                        var cI = 1.0 / coarsening;                      var finalWidth = (Int32)(width * cI);                      var finalHeight = (Int32)(height * cI);                        var count = new Byte[finalHeight' finalWidth];                      var rvalues = new Double[finalHeight' finalWidth];                      var gvalues = new Double[finalHeight' finalWidth];                      var bvalues = new Double[finalHeight' finalWidth];                        for (var i = 0; i < width; i++)                      {                          var idx = (Int32)(i * cI);                            if (idx >= finalWidth)                          {                              idx = finalWidth - 1;                          }                            for (var j = 0; j < height; j++)                          {                              var jdx = (Int32)(j * cI);                                if (jdx >= finalHeight)                              {                                  jdx = finalHeight - 1;                              }                                rvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 2];                              gvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 1];                              bvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 0];                              count[jdx' idx]++;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              var cinv = 1.0 / count[i' j];                              rvalues[i' j] *= cinv;                              gvalues[i' j] *= cinv;                              bvalues[i' j] *= cinv;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              rvalues[i' j] = (Int32)rvalues[i' j];                              gvalues[i' j] = (Int32)gvalues[i' j];                              bvalues[i' j] = (Int32)bvalues[i' j];                                rvalues[i' j] *= rfactor;                              gvalues[i' j] *= gfactor;                              bvalues[i' j] *= bfactor;                                rvalues[i' j] += gvalues[i' j] + bvalues[i' j];                          }                      }                        return new MatrixValue(rvalues);                  }                    return result;              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var bmp = new Bitmap(filename))              {                  var result = default(MatrixValue);                    if (bmp == null)                  {                      error = true;                      result = new MatrixValue();                  }                  else                  {                      var height = bmp.Height;                      var width = bmp.Width;                        var rect = new Rectangle(0' 0' bmp.Width' bmp.Height);                      var bmpData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.ReadOnly' bmp.PixelFormat);                      var ptr = bmpData.Scan0;                      var bytes = Math.Abs(bmpData.Stride) * bmp.Height;                      var rgbValues = new Byte[bytes];                      System.Runtime.InteropServices.Marshal.Copy(ptr' rgbValues' 0' bytes);                      bmp.UnlockBits(bmpData);                      var bytesPerPixel = 0;                        if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Canonical ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppPArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppRgb)                      {                          bytesPerPixel = 4;                      }                      else if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format24bppRgb)                      {                          bytesPerPixel = 3;                      }                      else                      {                          throw new YAMPPixelFormatNotSupportedException(filename);                      }                        if (Double.IsNaN(coarsening))                      {                          const Double maxPixelPerDirection = 100.0;                            if (width > maxPixelPerDirection || height > maxPixelPerDirection)                          {                              coarsening = Math.Max(width / maxPixelPerDirection' height / maxPixelPerDirection);                          }                          else                          {                              coarsening = 1.0;                          }                      }                        if (coarsening < 1.0)                      {                          throw new YAMPArgumentInvalidException("Load"' "ImageCoarsening");                      }                        var cI = 1.0 / coarsening;                      var finalWidth = (Int32)(width * cI);                      var finalHeight = (Int32)(height * cI);                        var count = new Byte[finalHeight' finalWidth];                      var rvalues = new Double[finalHeight' finalWidth];                      var gvalues = new Double[finalHeight' finalWidth];                      var bvalues = new Double[finalHeight' finalWidth];                        for (var i = 0; i < width; i++)                      {                          var idx = (Int32)(i * cI);                            if (idx >= finalWidth)                          {                              idx = finalWidth - 1;                          }                            for (var j = 0; j < height; j++)                          {                              var jdx = (Int32)(j * cI);                                if (jdx >= finalHeight)                              {                                  jdx = finalHeight - 1;                              }                                rvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 2];                              gvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 1];                              bvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 0];                              count[jdx' idx]++;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              var cinv = 1.0 / count[i' j];                              rvalues[i' j] *= cinv;                              gvalues[i' j] *= cinv;                              bvalues[i' j] *= cinv;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              rvalues[i' j] = (Int32)rvalues[i' j];                              gvalues[i' j] = (Int32)gvalues[i' j];                              bvalues[i' j] = (Int32)bvalues[i' j];                                rvalues[i' j] *= rfactor;                              gvalues[i' j] *= gfactor;                              bvalues[i' j] *= bfactor;                                rvalues[i' j] += gvalues[i' j] + bvalues[i' j];                          }                      }                        return new MatrixValue(rvalues);                  }                    return result;              }
Magic Number,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,ImageLoad,The following statement contains a magic number: using (var bmp = new Bitmap(filename))              {                  var result = default(MatrixValue);                    if (bmp == null)                  {                      error = true;                      result = new MatrixValue();                  }                  else                  {                      var height = bmp.Height;                      var width = bmp.Width;                        var rect = new Rectangle(0' 0' bmp.Width' bmp.Height);                      var bmpData = bmp.LockBits(rect' System.Drawing.Imaging.ImageLockMode.ReadOnly' bmp.PixelFormat);                      var ptr = bmpData.Scan0;                      var bytes = Math.Abs(bmpData.Stride) * bmp.Height;                      var rgbValues = new Byte[bytes];                      System.Runtime.InteropServices.Marshal.Copy(ptr' rgbValues' 0' bytes);                      bmp.UnlockBits(bmpData);                      var bytesPerPixel = 0;                        if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Canonical ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppPArgb ||                          bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppRgb)                      {                          bytesPerPixel = 4;                      }                      else if (bmp.PixelFormat == System.Drawing.Imaging.PixelFormat.Format24bppRgb)                      {                          bytesPerPixel = 3;                      }                      else                      {                          throw new YAMPPixelFormatNotSupportedException(filename);                      }                        if (Double.IsNaN(coarsening))                      {                          const Double maxPixelPerDirection = 100.0;                            if (width > maxPixelPerDirection || height > maxPixelPerDirection)                          {                              coarsening = Math.Max(width / maxPixelPerDirection' height / maxPixelPerDirection);                          }                          else                          {                              coarsening = 1.0;                          }                      }                        if (coarsening < 1.0)                      {                          throw new YAMPArgumentInvalidException("Load"' "ImageCoarsening");                      }                        var cI = 1.0 / coarsening;                      var finalWidth = (Int32)(width * cI);                      var finalHeight = (Int32)(height * cI);                        var count = new Byte[finalHeight' finalWidth];                      var rvalues = new Double[finalHeight' finalWidth];                      var gvalues = new Double[finalHeight' finalWidth];                      var bvalues = new Double[finalHeight' finalWidth];                        for (var i = 0; i < width; i++)                      {                          var idx = (Int32)(i * cI);                            if (idx >= finalWidth)                          {                              idx = finalWidth - 1;                          }                            for (var j = 0; j < height; j++)                          {                              var jdx = (Int32)(j * cI);                                if (jdx >= finalHeight)                              {                                  jdx = finalHeight - 1;                              }                                rvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 2];                              gvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 1];                              bvalues[jdx' idx] += rgbValues[(j * width + i) * bytesPerPixel + 0];                              count[jdx' idx]++;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              var cinv = 1.0 / count[i' j];                              rvalues[i' j] *= cinv;                              gvalues[i' j] *= cinv;                              bvalues[i' j] *= cinv;                          }                      }                        for (var i = 0; i < finalHeight; i++)                      {                          for (var j = 0; j < finalWidth; j++)                          {                              rvalues[i' j] = (Int32)rvalues[i' j];                              gvalues[i' j] = (Int32)gvalues[i' j];                              bvalues[i' j] = (Int32)bvalues[i' j];                                rvalues[i' j] *= rfactor;                              gvalues[i' j] *= gfactor;                              bvalues[i' j] *= bfactor;                                rvalues[i' j] += gvalues[i' j] + bvalues[i' j];                          }                      }                        return new MatrixValue(rvalues);                  }                    return result;              }
Magic Number,YAMP.Io,LsFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LsFunction.cs,Limit,The following statement contains a magic number: if (p.Length > 29)              {                  return p.Substring(0' 29) + "...";              }
Magic Number,YAMP.Io,LsFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LsFunction.cs,Limit,The following statement contains a magic number: if (p.Length > 29)              {                  return p.Substring(0' 29) + "...";              }
Duplicate Code,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,Function,The method contains a code clone-set at the following line numbers (starting from the method definition): ((33' 57)' (63' 87))
Missing Default,YAMP.Io,LoadFunction,C:\repos\FlorianRappl_YAMP\YAMP.Io\Functions\LoadFunction.cs,Function,The following switch statement is missing a default case: switch (type)              {                  case FileType.Text:                      var table = ASCIILoad(filename.Value' out error);                        if (!error)                      {                          var suffix = -1;                          var name = "data";                            do                          {                              suffix++;                          }                          while (Context.Variables.ContainsKey(name + suffix));                            Context.AssignVariable(name + suffix' table);                          count = 1;                      }                        break;                    case FileType.Image:                      var data = ImageLoad(filename.Value' out error);                        if (!error)                      {                          var suffix = -1;                          var name = "image";                            do                          {                              suffix++;                          }                          while (Context.Variables.ContainsKey(name + suffix));                            Context.AssignVariable(name + suffix' data);                          count = 1;                      }                        break;                    case FileType.Binary:  			        var v = Load(filename.Value' out error);                        if(!error)  			        {  				        foreach (var key in v.Keys)  					        Context.AssignVariable(key' v[key]);    				        count = v.Count;  			        }                        break;              }
