Implementation smell,Namespace,Class,File,Method,Description
Long Method,YAMP.Physics,CombinedUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\CombinedUnit.cs,Parse,The method has 103 lines of code.
Complex Method,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,Cyclomatic complexity of the method is 8
Complex Method,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,Cyclomatic complexity of the method is 8
Complex Method,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,Cyclomatic complexity of the method is 19
Complex Method,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,Cyclomatic complexity of the method is 8
Complex Method,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,Cyclomatic complexity of the method is 8
Complex Method,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Pl,Cyclomatic complexity of the method is 9
Complex Method,YAMP.Physics,ZernikeFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ZernikeFunction.cs,Zernike,Cyclomatic complexity of the method is 9
Complex Method,YAMP.Physics,CombinedUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\CombinedUnit.cs,Unpack,Cyclomatic complexity of the method is 14
Complex Method,YAMP.Physics,CombinedUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\CombinedUnit.cs,Parse,Cyclomatic complexity of the method is 22
Complex Method,YAMP.Physics,CombinedUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\CombinedUnit.cs,GetToken,Cyclomatic complexity of the method is 8
Long Parameter List,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,CGCoefficients,The method has 5 parameters. Parameters: j1' j2' j' m1' m2
Long Identifier,YAMP.Physics,HermiteFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\HermiteFunction.cs,HermitePolynomial,The length of the parameter two_z_to_the_n_minus_2_times_m is 30.
Long Statement,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The length of the statement  "                // Our series development (DLMF 19.36.2) goes up to O(e^6). In order that the neglected term e^7 <~ 1.0E-16' we need e <~ 0.005. " is 128.
Long Statement,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The length of the statement  "                    var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5 " is 122.
Long Statement,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The length of the statement  "                    var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0; " is 151.
Complex Conditional,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The conditional expression  "((x == 0.0) && ((y == 0.0) || (z == 0.0))) || ((y == 0.0) && (z == 0.0))"  is complex.
Complex Conditional,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The conditional expression  "(s > max_bits && q < 1.0) || (s > 0.5 * max_bits && q < 0.25)"  is complex.
Complex Conditional,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The conditional expression  "(sabs > max_bits && qabs < 1.0) || (sabs > 0.5 * max_bits && qabs < 0.25)"  is complex.
Virtual Method Call from Constructor,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,PhysicalUnit,The constructor "PhysicalUnit" calls a virtual method "SetPrefixes".
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var c4 = Math.Pow(2.0' 2.0 / 3.0);
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var c4 = Math.Pow(2.0' 2.0 / 3.0);
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var c4 = Math.Pow(2.0' 2.0 / 3.0);
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var m = (x + y + 3.0 * z) / 5.0;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var m = (x + y + 3.0 * z) / 5.0;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var E2 = xy - 6.0 * zz;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var E3 = (3.0 * xy - 8.0 * zz) * dz;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var E3 = (3.0 * xy - 8.0 * zz) * dz;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var E4 = 3.0 * (xy - zz) * zz;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: var F = 1.0 - 3.0 / 14.0 * E2 - E3 / 6.0 + 9.0 / 88.0 * E2 * E2 - 3.0 / 22.0 * E4 + 9.0 / 52.0 * E2 * E3 - 3.0 / 26.0 * E5                          - E2 * E2 * E2 / 16.0 + 3.0 / 40.0 * E3 * E3 + 3.0 / 20.0 * E2 * E4;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: return F / Math.Pow(m' 3.0 / 2.0) + t;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: return F / Math.Pow(m' 3.0 / 2.0) + t;
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: e < 0.005
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: t += 3.0 / Math.Sqrt(z) / (z + lambda);
Magic Number,YAMP.Physics,CarlsonDFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonDFunction.cs,CarlsonD,The following statement contains a magic number: n < 250
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var m = (x + y + z) / 3.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: var F = 1.0 - E2 / 10.0 - E3 / 14.0 + E2 * E2 / 24.0 + 3.0 * E2 * E3 / 44.0 - 5.0 / 208.0 * E2 * E2 * E2 + 3.0 / 104.0 * E3 * E3 - E2 * E2 * E3 / 16.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: e < 0.01
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: x = (x + lambda) / 4.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: y = (y + lambda) / 4.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: z = (z + lambda) / 4.0;
Magic Number,YAMP.Physics,CarlsonFFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\CarlsonFFunction.cs,CarlsonF,The following statement contains a magic number: n < 250
Magic Number,YAMP.Physics,InvTangentFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\InvTangentFunction.cs,Function,The following statement contains a magic number: return Function(new ScalarValue(2)' z);
Magic Number,YAMP.Physics,InvTangentFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\InvTangentFunction.cs,Function,The following statement contains a magic number: return Function(new ScalarValue(2)' Z);
Magic Number,YAMP.Physics,ChebyshevFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ChebyshevFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                          var s = 1;                            for (var k = 0; k <= m; k++)                          {                              var nom = s * Helpers.Factorial(n - k - 1) * Math.Pow(2 * x' n - 2 * k);                              var den = Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k);                              s *= (-1);                              sum += nom / den;                          }                            return n / 2.0 * sum;                      };              }
Magic Number,YAMP.Physics,ChebyshevFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ChebyshevFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                          var s = 1;                            for (var k = 0; k <= m; k++)                          {                              var nom = s * Helpers.Factorial(n - k - 1) * Math.Pow(2 * x' n - 2 * k);                              var den = Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k);                              s *= (-1);                              sum += nom / den;                          }                            return n / 2.0 * sum;                      };              }
Magic Number,YAMP.Physics,ChebyshevFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ChebyshevFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                          var s = 1;                            for (var k = 0; k <= m; k++)                          {                              var nom = s * Helpers.Factorial(n - k - 1) * Math.Pow(2 * x' n - 2 * k);                              var den = Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k);                              s *= (-1);                              sum += nom / den;                          }                            return n / 2.0 * sum;                      };              }
Magic Number,YAMP.Physics,ChebyshevFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ChebyshevFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                          var s = 1;                            for (var k = 0; k <= m; k++)                          {                              var nom = s * Helpers.Factorial(n - k - 1) * Math.Pow(2 * x' n - 2 * k);                              var den = Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k);                              s *= (-1);                              sum += nom / den;                          }                            return n / 2.0 * sum;                      };              }
Magic Number,YAMP.Physics,ChebyshevFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ChebyshevFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                          var s = 1;                            for (var k = 0; k <= m; k++)                          {                              var nom = s * Helpers.Factorial(n - k - 1) * Math.Pow(2 * x' n - 2 * k);                              var den = Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k);                              s *= (-1);                              sum += nom / den;                          }                            return n / 2.0 * sum;                      };              }
Magic Number,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,Function,The following statement contains a magic number: M[l' 2] = new ScalarValue(m1);
Magic Number,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,Function,The following statement contains a magic number: M[l' 3] = new ScalarValue(m2);
Magic Number,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,Function,The following statement contains a magic number: M[l' 4] = new ScalarValue(j);
Magic Number,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,Function,The following statement contains a magic number: M[l' 5] = new ScalarValue(v);
Magic Number,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,CGCoefficients,The following statement contains a magic number: var f2 = factorial(j1 + m1) * factorial(j1 - m1) * factorial(j + m) * factorial(j - m) * (2.0 * j + 1.0);
Magic Number,YAMP.Physics,ClebschFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\ClebschFunction.cs,isNotHalf,The following statement contains a magic number: return Math.IEEERemainder(j.Re' 0.5) != 0.0;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: var max_bits = 54.0;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: (s > max_bits && q < 1.0) || (s > 0.5 * max_bits && q < 0.25)
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: (s > max_bits && q < 1.0) || (s > 0.5 * max_bits && q < 0.25)
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: const int jmax = 12;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: const int kmax = 10;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: var ans = pmax * ((kmax + q) / (s - 1.0) + 0.5);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: Math.Abs(delta / ans) < 0.5 * Double.Epsilon
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: scp *= (s + 2 * j + 1) * (s + 2 * j + 2);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: scp *= (s + 2 * j + 1) * (s + 2 * j + 2);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: scp *= (s + 2 * j + 1) * (s + 2 * j + 2);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: var max_bits = 54.0;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: (sabs > max_bits && qabs < 1.0) || (sabs > 0.5 * max_bits && qabs < 0.25)
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: (sabs > max_bits && qabs < 1.0) || (sabs > 0.5 * max_bits && qabs < 0.25)
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: const int jmax = 12;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: const int kmax = 10;
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: var ans = pmax * ((kmax + q) / (s - 1.0) + 0.5);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: (delta / ans).Abs() < 0.5 * Double.Epsilon
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: scp *= (s + 2 * j + 1) * (s + 2 * j + 2);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: scp *= (s + 2 * j + 1) * (s + 2 * j + 2);
Magic Number,YAMP.Physics,HzetaFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\HzetaFunction.cs,HurwitzZeta,The following statement contains a magic number: scp *= (s + 2 * j + 1) * (s + 2 * j + 2);
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogInversion,The following statement contains a magic number: int nh = n / 2;
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogInversion,The following statement contains a magic number: j = 2 * r;
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogInversion,The following statement contains a magic number: s = 2.0 * s;
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogNeg3,The following statement contains a magic number: return (z + 4.0 * zz + z * zz) / pp.Square();
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogNeg4,The following statement contains a magic number: return (z + 11.0 * zz + 11.0 * zz * z + zz * zz) / (pppp * p);
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogNeg4,The following statement contains a magic number: return (z + 11.0 * zz + 11.0 * zz * z + zz * zz) / (pppp * p);
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,PolylogZetaNegative,The following statement contains a magic number: return s * (Math.Pow(2.0' 1 - n) - 1.0);
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: n == 2
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: n == -2
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: n == -3
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: n == -4
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: n < -4
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: ah > 3.0
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: s += z * z * z / Math.Pow(3.0' n);
Magic Number,YAMP.Physics,PolyLogFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PolyLogFunction.cs,Polylog,The following statement contains a magic number: s += z * z / Math.Pow(2.0' n);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const int NTERM1 = 25;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const int NTERM2 = 14;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const int NTERM3 = 21;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const double XLOW = 4.4703484e-8;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const double XMAX = 1.797693e308;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const double XHIGH1 = 5.1982303e8;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: const double XHIGH2 = 2.5220158e17;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: double T = (4.0 * x - 24.0) / (x + 24.0);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: double T = (4.0 * x - 24.0) / (x + 24.0);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: double T = (4.0 * x - 24.0) / (x + 24.0);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: x <= 16.0
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL0,The following statement contains a magic number: double test = Math.Log(ch1) - LNR2PI - Math.Log(x) / 2.0 + x;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const int NTERM1 = 24;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const int NTERM2 = 13;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const int NTERM3 = 22;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const double XLOW1 = 5.7711949e-8;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const double XLOW2 = 3.3354714e-154;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const double XMAX = 1.797693e308;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const double XHIGH1 = 5.19823025e8;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: const double XHIGH2 = 2.7021597e17;
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: double t = (4.0 * x - 24.0) / (x + 24.0);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: double t = (4.0 * x - 24.0) / (x + 24.0);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: double t = (4.0 * x - 24.0) / (x + 24.0);
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: x <= 16.0
Magic Number,YAMP.Physics,StruveFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\StruveFunction.cs,StruveL1,The following statement contains a magic number: double test = Math.Log(ch1) - LNR2PI - Math.Log(x) / 2.0 + x;
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticK,The following statement contains a magic number: k < 0.25
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticSeries,The following statement contains a magic number: z = z * (2 * n - 1) / (2 * n) * k;
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticSeries,The following statement contains a magic number: z = z * (2 * n - 1) / (2 * n) * k;
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticSeries,The following statement contains a magic number: n < 250
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAsymptotic,The following statement contains a magic number: var q = Math.Log(1.0 / k1) + 2.0 * Helpers.LogTwo;
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAsymptotic,The following statement contains a magic number: p *= k1 / m * (m - 0.5);
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAsymptotic,The following statement contains a magic number: q -= 1.0 / m / (2 * m - 1);
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAsymptotic,The following statement contains a magic number: m < 250
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAGM,The following statement contains a magic number: var tol = Math.Pow(2.0' -24);
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAGM,The following statement contains a magic number: var tol = Math.Pow(2.0' -24);
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAGM,The following statement contains a magic number: var am = (a + b) / 2.0;
Magic Number,YAMP.Physics,EllipticKFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Integrals\EllipticKFunction.cs,EllipticAGM,The following statement contains a magic number: n < 250
Magic Number,YAMP.Physics,GegenbauerFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\GegenbauerFunction.cs,Gegenbauer,The following statement contains a magic number: var C1 = 2.0 * alpha * x;
Magic Number,YAMP.Physics,GegenbauerFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\GegenbauerFunction.cs,Gegenbauer,The following statement contains a magic number: var Ck = (2 * x * (k + alpha - 1) * C1 - (k + 2 * alpha - 2) * C0) / k;
Magic Number,YAMP.Physics,GegenbauerFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\GegenbauerFunction.cs,Gegenbauer,The following statement contains a magic number: var Ck = (2 * x * (k + alpha - 1) * C1 - (k + 2 * alpha - 2) * C0) / k;
Magic Number,YAMP.Physics,GegenbauerFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\GegenbauerFunction.cs,Gegenbauer,The following statement contains a magic number: var Ck = (2 * x * (k + alpha - 1) * C1 - (k + 2 * alpha - 2) * C0) / k;
Magic Number,YAMP.Physics,HermiteFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\HermiteFunction.cs,HermitePolynomial,The following statement contains a magic number: var mh = m / 2;
Magic Number,YAMP.Physics,HermiteFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\HermiteFunction.cs,HermitePolynomial,The following statement contains a magic number: var two_z = z * 2;
Magic Number,YAMP.Physics,HermiteFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\HermiteFunction.cs,HermitePolynomial,The following statement contains a magic number: var two_z_to_the_n_minus_2_times_m = m % 2 == 0 ? ScalarValue.One : two_z;
Magic Number,YAMP.Physics,HermiteFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\HermiteFunction.cs,HermitePolynomial,The following statement contains a magic number: p += s / (Helpers.Factorial(k) * Helpers.Factorial(m - 2 * k)) * two_z_to_the_n_minus_2_times_m;
Magic Number,YAMP.Physics,JacobiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\JacobiFunction.cs,JacobiPolynomial,The following statement contains a magic number: k < n / 2 + 1
Magic Number,YAMP.Physics,JacobiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\JacobiFunction.cs,JacobiPolynomial,The following statement contains a magic number: z_minus_1_over_2 /= 2;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,LambertW,The following statement contains a magic number: (x + EI).Abs() < 1e-6
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,LambertW,The following statement contains a magic number: abs < EI / 2.0
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,Halley,The following statement contains a magic number: var dw = f / ((w0 + 1.0) * e - ((w0 + 2.0) / (w0 + 1.0)) * f / 2.0);
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,Halley,The following statement contains a magic number: var dw = f / ((w0 + 1.0) * e - ((w0 + 2.0) / (w0 + 1.0)) * f / 2.0);
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,Halley,The following statement contains a magic number: i < 250
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesZero,The following statement contains a magic number: return x - xx + (3.0 / 2.0) * xx * x - (8.0 / 3.0) * xx * xx;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesZero,The following statement contains a magic number: return x - xx + (3.0 / 2.0) * xx * x - (8.0 / 3.0) * xx * xx;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesZero,The following statement contains a magic number: return x - xx + (3.0 / 2.0) * xx * x - (8.0 / 3.0) * xx * xx;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesZero,The following statement contains a magic number: return x - xx + (3.0 / 2.0) * xx * x - (8.0 / 3.0) * xx * xx;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesSmall,The following statement contains a magic number: var p = (2.0 * (Math.E * x + 1.0)).Sqrt();
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesSmall,The following statement contains a magic number: return -1.0 + p - pp / 3.0 + (11.0 / 72.0) * pp * p - (43.0 / 540.0) * pp * pp;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesSmall,The following statement contains a magic number: return -1.0 + p - pp / 3.0 + (11.0 / 72.0) * pp * p - (43.0 / 540.0) * pp * pp;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesSmall,The following statement contains a magic number: return -1.0 + p - pp / 3.0 + (11.0 / 72.0) * pp * p - (43.0 / 540.0) * pp * pp;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesSmall,The following statement contains a magic number: return -1.0 + p - pp / 3.0 + (11.0 / 72.0) * pp * p - (43.0 / 540.0) * pp * pp;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesSmall,The following statement contains a magic number: return -1.0 + p - pp / 3.0 + (11.0 / 72.0) * pp * p - (43.0 / 540.0) * pp * pp;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesLarge,The following statement contains a magic number: return L1 - L2 + L2L1 + (L2 - 2.0) * L2L1 / L1 / 2.0;
Magic Number,YAMP.Physics,LambertFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\LambertFunction.cs,SeriesLarge,The following statement contains a magic number: return L1 - L2 + L2L1 + (L2 - 2.0) * L2L1 / L1 / 2.0;
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,LegendreFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\LegendreFunction.cs,GetPolynom,The following statement contains a magic number: switch (n)              {                  case 0:                      return x => 1.0;                  case 1:                      return x => x;                  case 2:                      return x => 1.5 * x * x - 0.5;                  case 3:                      return x => 2.5 * x * x * x - 1.5 * x;                  case 4:                      return x => (35.0 * x * x * x * x - 30.0 * x * x + 3.0) / 8.0;                  case 5:                      return x => (63.0 * x * x * x * x * x - 70.0 * x * x * x + 15.0 * x) / 8.0;                  case 6:                      return x => (231.0 * x * x * x * x * x * x - 315.0 * x * x * x * x + 105 * x * x - 5.0) / 16.0;                  default:                      return x =>                      {                          var sum = 0.0;                          var m = n / 2;                            for(var k = 0; k <= m; k++)                          {                              var nom = Helpers.Factorial(2 * n - 2 * k) * Math.Pow(x' n - 2 * k);                              var den = Helpers.Factorial(n - k) * Helpers.Factorial(n - 2 * k) * Helpers.Factorial(k) * Math.Pow(2' n);                              sum += nom / den;                          }                            return sum;                      };              }
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi,The following statement contains a magic number: n % 2 == 0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi,The following statement contains a magic number: n % 2 == 0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi1,The following statement contains a magic number: x == 0.0 || x == -1.0 || x == -2.0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi1,The following statement contains a magic number: z.Re == 0.0 || z.Re == -1.0 || z.Re == -2.0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,PsiXgt0,The following statement contains a magic number: n % 2 == 0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,PsiXgt0,The following statement contains a magic number: n % 2 == 0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0rhp,The following statement contains a magic number: double sp = Math.Sqrt(20.0 + z.Im);
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0rhp,The following statement contains a magic number: double sn = Math.Sqrt(20.0 - z.Im);
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0rhp,The following statement contains a magic number: z.Re < 20.0 && Math.Abs(z.Im) < 20.0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0rhp,The following statement contains a magic number: z.Re < 20.0 && Math.Abs(z.Im) < 20.0
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0asymptotic,The following statement contains a magic number: const double c1 = -0.1;
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0asymptotic,The following statement contains a magic number: const double c2 = 1.0 / 21.0;
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0asymptotic,The following statement contains a magic number: const double c3 = -0.05;
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0asymptotic,The following statement contains a magic number: const double c4 = -1.0 / 12.0;
Magic Number,YAMP.Physics,PsiFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\PsiFunction.cs,Psi0asymptotic,The following statement contains a magic number: cs = cs + (zi * (-0.5));
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog,The following statement contains a magic number: f = -Math.PI * Math.PI / 6.0 - ln * ln / 2.0 - DiLog(1.0 / z);
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog,The following statement contains a magic number: f = -Math.PI * Math.PI / 6.0 - ln * ln / 2.0 - DiLog(1.0 / z);
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog0,The following statement contains a magic number: k < 250
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog1,The following statement contains a magic number: var f = new ScalarValue(Math.PI * Math.PI / 6.0);
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog1,The following statement contains a magic number: k < 250
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog_Log_Series,The following statement contains a magic number: var f = Math.PI * Math.PI / 6.0 + ln * (1.0 - (-ln).Ln()) - ln2 / 4.0;
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog_Log_Series,The following statement contains a magic number: var f = Math.PI * Math.PI / 6.0 + ln * (1.0 - (-ln).Ln()) - ln2 / 4.0;
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog_Log_Series,The following statement contains a magic number: p *= ln2 / (2 * k + 1) / (2 * k);
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog_Log_Series,The following statement contains a magic number: p *= ln2 / (2 * k + 1) / (2 * k);
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog_Log_Series,The following statement contains a magic number: f += (-Helpers.BernoulliNumbers[k] / (2 * k)) * p;
Magic Number,YAMP.Physics,SpenceFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\SpenceFunction.cs,DiLog_Log_Series,The following statement contains a magic number: k < 17
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Pl,The following statement contains a magic number: double u = l + 0.5;
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Pl,The following statement contains a magic number: B00 = (1.0 + th * th / 15.0) / 24.0;
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Pl,The following statement contains a magic number: B00 = (1.0 + th * th / 15.0) / 24.0;
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Pl,The following statement contains a magic number: pre = 1.0 + th * th / 12.0;
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Pl,The following statement contains a magic number: th < 1.2207031250000000e-04
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var pre = Math.Sqrt((2.0 * l + 1.0) / (4.0 * Math.PI));
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var pre = Math.Sqrt((2.0 * l + 1.0) / (4.0 * Math.PI));
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double sgn = m % 2 == 1 ? -1.0 : 1.0;
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double y_mmp1_factor = x * Math.Sqrt(2.0 * m + 3.0);
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double y_mmp1_factor = x * Math.Sqrt(2.0 * m + 3.0);
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double lnpoch = Gamma.LogGamma(m + 0.5) - Gamma.LogGamma(m);
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double expf = Math.Exp(0.5 * (lnpoch + m * lncirc) - 0.25 * Helpers.LogPI);
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double expf = Math.Exp(0.5 * (lnpoch + m * lncirc) - 0.25 * Helpers.LogPI);
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: double sr = Math.Sqrt((2.0 + 1.0 / m) / Helpers.FourPI);
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var factor1 = Math.Sqrt(rat1 * (2.0 * ell + 1.0) * (2.0 * ell - 1.0));
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var factor1 = Math.Sqrt(rat1 * (2.0 * ell + 1.0) * (2.0 * ell - 1.0));
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var factor2 = Math.Sqrt(rat1 * rat2 * (2.0 * ell + 1.0) / (2.0 * ell - 3.0));
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var factor2 = Math.Sqrt(rat1 * rat2 * (2.0 * ell + 1.0) / (2.0 * ell - 3.0));
Magic Number,YAMP.Physics,YlmFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Special\YlmFunction.cs,Plm,The following statement contains a magic number: var factor2 = Math.Sqrt(rat1 * rat2 * (2.0 * ell + 1.0) / (2.0 * ell - 3.0));
Magic Number,YAMP.Physics,ZernikeFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ZernikeFunction.cs,Zernike,The following statement contains a magic number: (n - m) % 2 != 0
Magic Number,YAMP.Physics,ZernikeFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ZernikeFunction.cs,Zernike,The following statement contains a magic number: k += 2;
Magic Number,YAMP.Physics,ZernikeFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ZernikeFunction.cs,Zernike,The following statement contains a magic number: var r0 = ((2 * k) * rho * r1 - (k + m) * r2) / (k - m);
Magic Number,YAMP.Physics,ZernikeFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ZernikeFunction.cs,Zernike,The following statement contains a magic number: var rp = (2 * (k + 1) * rho * r0 - (k - m) * r1) / (k + m + 2);
Magic Number,YAMP.Physics,ZernikeFunction,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Functions\Polynomials\ZernikeFunction.cs,Zernike,The following statement contains a magic number: var rp = (2 * (k + 1) * rho * r0 - (k - m) * r1) / (k + m + 2);
Magic Number,YAMP.Physics,CombinedUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\CombinedUnit.cs,Sqrt,The following statement contains a magic number: return Raise(0.5);
Magic Number,YAMP.Physics,gUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\GUnit.cs,gUnit,The following statement contains a magic number: Add("lb"' 0.002205);
Magic Number,YAMP.Physics,KUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\KUnit.cs,KUnit,The following statement contains a magic number: Add("°C"' 1.0' -273.16);
Magic Number,YAMP.Physics,KUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\KUnit.cs,KUnit,The following statement contains a magic number: Add("°F"' 9.0 / 5.0' -460.0);
Magic Number,YAMP.Physics,KUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\KUnit.cs,KUnit,The following statement contains a magic number: Add("°F"' 9.0 / 5.0' -460.0);
Magic Number,YAMP.Physics,KUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\KUnit.cs,KUnit,The following statement contains a magic number: Add("°F"' 9.0 / 5.0' -460.0);
Magic Number,YAMP.Physics,mUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\mUnit.cs,mUnit,The following statement contains a magic number: Add("yd"' 1.0936).Add("in"' 39.370).Add("ft"' 3.2808).Add("Å"' 1e10);
Magic Number,YAMP.Physics,mUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\mUnit.cs,mUnit,The following statement contains a magic number: Add("yd"' 1.0936).Add("in"' 39.370).Add("ft"' 3.2808).Add("Å"' 1e10);
Magic Number,YAMP.Physics,mUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\mUnit.cs,mUnit,The following statement contains a magic number: Add("yd"' 1.0936).Add("in"' 39.370).Add("ft"' 3.2808).Add("Å"' 1e10);
Magic Number,YAMP.Physics,mUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\mUnit.cs,mUnit,The following statement contains a magic number: Add("yd"' 1.0936).Add("in"' 39.370).Add("ft"' 3.2808).Add("Å"' 1e10);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("da"' 10);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("h"' 100);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("k"' 1e3);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("M"' 1e6);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("G"' 1e9);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("T"' 1e12);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("P"' 1e15);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("E"' 1e18);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("Z"' 1e21);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("Y"' 1e24);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("d"' 1e-1);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("c"' 1e-2);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("m"' 1e-3);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("µ"' 1e-6);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("n"' 1e-9);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("p"' 1e-12);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("f"' 1e-15);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("a"' 1e-18);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("z"' 1e-21);
Magic Number,YAMP.Physics,PhysicalUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\PhysicalUnit.cs,SetPrefixes,The following statement contains a magic number: _prefixes.Add("y"' 1e-24);
Magic Number,YAMP.Physics,sUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\sUnit.cs,sUnit,The following statement contains a magic number: Add("d"' 1.0 / 86400.0);
Magic Number,YAMP.Physics,sUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\sUnit.cs,sUnit,The following statement contains a magic number: Add("h"' 1.0 / 3600.0);
Magic Number,YAMP.Physics,sUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\sUnit.cs,sUnit,The following statement contains a magic number: Add("yr"' 1.0 / (86400.0 * 365.25));
Magic Number,YAMP.Physics,sUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\sUnit.cs,sUnit,The following statement contains a magic number: Add("yr"' 1.0 / (86400.0 * 365.25));
Magic Number,YAMP.Physics,UnitValue,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Values\UnitValue.cs,Deserialize,The following statement contains a magic number: unit.Im = BitConverter.ToDouble(content' 8);
Magic Number,YAMP.Physics,UnitValue,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Values\UnitValue.cs,Deserialize,The following statement contains a magic number: var str = new char[BitConverter.ToInt32(content' 16)];
Magic Number,YAMP.Physics,UnitValue,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Values\UnitValue.cs,Deserialize,The following statement contains a magic number: str[i] = BitConverter.ToChar(content' 20 + 2 * i);
Magic Number,YAMP.Physics,UnitValue,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Values\UnitValue.cs,Deserialize,The following statement contains a magic number: str[i] = BitConverter.ToChar(content' 20 + 2 * i);
Missing Default,YAMP.Physics,CombinedUnit,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Physics\Units\CombinedUnit.cs,Parse,The following switch statement is missing a default case: switch (op)                  {                      case Token.Multiply:                          if (current == Token.Number)                              _factor *= Math.Pow(ConvertToDouble(result)' r);                          else if (current == Token.Letter)                              AddUnit(units' result' r);                          else                              throw new YAMPUnitParseException(i' unit.Substring(i));                          break;                        case Token.Divide:                          if (current == Token.Number)                              _factor /= Math.Pow(ConvertToDouble(result)' r);                          else if (current == Token.Letter)                              AddUnit(units' result' -r);                          else                              throw new YAMPUnitParseException(i' unit.Substring(i));                          break;                        case Token.Power:                          if (current != Token.Number)                              throw new YAMPUnitParseException(i' unit.Substring(i));                            var exp = ConvertToDouble(result);                          AddUnit(units' _lastAddedUnit' _lastAddedFactor * (exp - 1));                          break;                  }
