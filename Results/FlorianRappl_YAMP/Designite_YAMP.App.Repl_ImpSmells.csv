Implementation smell,Namespace,Class,File,Method,Description
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,AdditionBenchmark,The following statement contains a magic number: var n = 10000;
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,MatrixBenchmark,The following statement contains a magic number: for (var n = 20; n <= 500; n += 20)              {                  var m = n;                  var A = new YAMP.MatrixValue(n' m);                  var B = new YAMP.MatrixValue(m' n);                  A.Randomize();                  B.Randomize();                    A[n' m] = YAMP.ScalarValue.One;                  B[m' n] = YAMP.ScalarValue.One;                    var sw = Stopwatch.StartNew();                  var C =  A * B;                  sw.Stop();                    #region Outputs                    //---                  // Output for usual multiplication                  //---                  //Time for n = 20' m = 20 : 22 ms                  //Time for n = 40' m = 40 : 222 ms                  //Time for n = 60' m = 60 : 1328 ms                  //Time for n = 80' m = 80 : 3107 ms                  //Time for n = 100' m = 100 : 8244 ms                   // stop ...                    //---                  // Output for BLAS L3 multiplication (1st order approx.)                  //---                  //Time for n = 20' m = 20 : 7 ms                  //Time for n = 40' m = 40 : 8 ms                  //Time for n = 60' m = 60 : 28 ms                  //Time for n = 80' m = 80 : 51 ms                  //Time for n = 100' m = 100 : 135 ms                  //Time for n = 120' m = 120 : 273 ms                  //Time for n = 140' m = 140 : 281 ms                  //Time for n = 160' m = 160 : 387 ms                  //Time for n = 180' m = 180 : 585 ms                  //Time for n = 200' m = 200 : 845 ms                  //Time for n = 220' m = 220 : 1196 ms                  //Time for n = 240' m = 240 : 1709 ms                  //Time for n = 260' m = 260 : 2318 ms                  //Time for n = 280' m = 280 : 2451 ms                  //Time for n = 300' m = 300 : 2771 ms                  // and so on !                    //---                  /// Output for copying arrays only (required for perf. BLAS L3)                  //---                  //Time for n = 20' m = 20 : 7 ms                  //Time for n = 40' m = 40 : 15 ms                  //Time for n = 60' m = 60 : 20 ms                  //Time for n = 80' m = 80 : 37 ms                  //Time for n = 100' m = 100 : 78 ms                  //Time for n = 120' m = 120 : 158 ms                  //Time for n = 140' m = 140 : 207 ms                  //Time for n = 160' m = 160 : 276 ms                  //Time for n = 180' m = 180 : 411 ms                  //Time for n = 200' m = 200 : 628 ms                  //Time for n = 220' m = 220 : 897 ms                  //Time for n = 240' m = 240 : 1271 ms                  //Time for n = 260' m = 260 : 1703 ms                  //Time for n = 280' m = 280 : 1956 ms                  //Time for n = 300' m = 300 : 1974 ms                  // and so on !                    #endregion                    Console.WriteLine("Time for n = {0}' m = {1} : {2} ms"' n' m' sw.ElapsedMilliseconds);              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,MatrixBenchmark,The following statement contains a magic number: for (var n = 20; n <= 500; n += 20)              {                  var m = n;                  var A = new YAMP.MatrixValue(n' m);                  var B = new YAMP.MatrixValue(m' n);                  A.Randomize();                  B.Randomize();                    A[n' m] = YAMP.ScalarValue.One;                  B[m' n] = YAMP.ScalarValue.One;                    var sw = Stopwatch.StartNew();                  var C =  A * B;                  sw.Stop();                    #region Outputs                    //---                  // Output for usual multiplication                  //---                  //Time for n = 20' m = 20 : 22 ms                  //Time for n = 40' m = 40 : 222 ms                  //Time for n = 60' m = 60 : 1328 ms                  //Time for n = 80' m = 80 : 3107 ms                  //Time for n = 100' m = 100 : 8244 ms                   // stop ...                    //---                  // Output for BLAS L3 multiplication (1st order approx.)                  //---                  //Time for n = 20' m = 20 : 7 ms                  //Time for n = 40' m = 40 : 8 ms                  //Time for n = 60' m = 60 : 28 ms                  //Time for n = 80' m = 80 : 51 ms                  //Time for n = 100' m = 100 : 135 ms                  //Time for n = 120' m = 120 : 273 ms                  //Time for n = 140' m = 140 : 281 ms                  //Time for n = 160' m = 160 : 387 ms                  //Time for n = 180' m = 180 : 585 ms                  //Time for n = 200' m = 200 : 845 ms                  //Time for n = 220' m = 220 : 1196 ms                  //Time for n = 240' m = 240 : 1709 ms                  //Time for n = 260' m = 260 : 2318 ms                  //Time for n = 280' m = 280 : 2451 ms                  //Time for n = 300' m = 300 : 2771 ms                  // and so on !                    //---                  /// Output for copying arrays only (required for perf. BLAS L3)                  //---                  //Time for n = 20' m = 20 : 7 ms                  //Time for n = 40' m = 40 : 15 ms                  //Time for n = 60' m = 60 : 20 ms                  //Time for n = 80' m = 80 : 37 ms                  //Time for n = 100' m = 100 : 78 ms                  //Time for n = 120' m = 120 : 158 ms                  //Time for n = 140' m = 140 : 207 ms                  //Time for n = 160' m = 160 : 276 ms                  //Time for n = 180' m = 180 : 411 ms                  //Time for n = 200' m = 200 : 628 ms                  //Time for n = 220' m = 220 : 897 ms                  //Time for n = 240' m = 240 : 1271 ms                  //Time for n = 260' m = 260 : 1703 ms                  //Time for n = 280' m = 280 : 1956 ms                  //Time for n = 300' m = 300 : 1974 ms                  // and so on !                    #endregion                    Console.WriteLine("Time for n = {0}' m = {1} : {2} ms"' n' m' sw.ElapsedMilliseconds);              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,MatrixBenchmark,The following statement contains a magic number: for (var n = 20; n <= 500; n += 20)              {                  var m = n;                  var A = new YAMP.MatrixValue(n' m);                  var B = new YAMP.MatrixValue(m' n);                  A.Randomize();                  B.Randomize();                    A[n' m] = YAMP.ScalarValue.One;                  B[m' n] = YAMP.ScalarValue.One;                    var sw = Stopwatch.StartNew();                  var C =  A * B;                  sw.Stop();                    #region Outputs                    //---                  // Output for usual multiplication                  //---                  //Time for n = 20' m = 20 : 22 ms                  //Time for n = 40' m = 40 : 222 ms                  //Time for n = 60' m = 60 : 1328 ms                  //Time for n = 80' m = 80 : 3107 ms                  //Time for n = 100' m = 100 : 8244 ms                   // stop ...                    //---                  // Output for BLAS L3 multiplication (1st order approx.)                  //---                  //Time for n = 20' m = 20 : 7 ms                  //Time for n = 40' m = 40 : 8 ms                  //Time for n = 60' m = 60 : 28 ms                  //Time for n = 80' m = 80 : 51 ms                  //Time for n = 100' m = 100 : 135 ms                  //Time for n = 120' m = 120 : 273 ms                  //Time for n = 140' m = 140 : 281 ms                  //Time for n = 160' m = 160 : 387 ms                  //Time for n = 180' m = 180 : 585 ms                  //Time for n = 200' m = 200 : 845 ms                  //Time for n = 220' m = 220 : 1196 ms                  //Time for n = 240' m = 240 : 1709 ms                  //Time for n = 260' m = 260 : 2318 ms                  //Time for n = 280' m = 280 : 2451 ms                  //Time for n = 300' m = 300 : 2771 ms                  // and so on !                    //---                  /// Output for copying arrays only (required for perf. BLAS L3)                  //---                  //Time for n = 20' m = 20 : 7 ms                  //Time for n = 40' m = 40 : 15 ms                  //Time for n = 60' m = 60 : 20 ms                  //Time for n = 80' m = 80 : 37 ms                  //Time for n = 100' m = 100 : 78 ms                  //Time for n = 120' m = 120 : 158 ms                  //Time for n = 140' m = 140 : 207 ms                  //Time for n = 160' m = 160 : 276 ms                  //Time for n = 180' m = 180 : 411 ms                  //Time for n = 200' m = 200 : 628 ms                  //Time for n = 220' m = 220 : 897 ms                  //Time for n = 240' m = 240 : 1271 ms                  //Time for n = 260' m = 260 : 1703 ms                  //Time for n = 280' m = 280 : 1956 ms                  //Time for n = 300' m = 300 : 1974 ms                  // and so on !                    #endregion                    Console.WriteLine("Time for n = {0}' m = {1} : {2} ms"' n' m' sw.ElapsedMilliseconds);              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,MakeTenK,The following statement contains a magic number: var l = new string[10000];
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: var count = 100000;
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: using (var fs = File.CreateText(BMK_FILE))              {                  for (var i = 0; i < count; i++)                  {                      length = r.Next(2' 14);                      fs.Write(r.Next(-100' 100));                        for (var j = 0; j < length; j++)                      {                          fs.Write(operators[r.Next(0' operators.Length)]);                          fs.Write(r.Next(-100' 100));                      }                        if (i < count - 1)                          fs.WriteLine();                  }              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: using (var fs = File.CreateText(BMK_FILE))              {                  for (var i = 0; i < count; i++)                  {                      length = r.Next(2' 14);                      fs.Write(r.Next(-100' 100));                        for (var j = 0; j < length; j++)                      {                          fs.Write(operators[r.Next(0' operators.Length)]);                          fs.Write(r.Next(-100' 100));                      }                        if (i < count - 1)                          fs.WriteLine();                  }              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: using (var fs = File.CreateText(BMK_FILE))              {                  for (var i = 0; i < count; i++)                  {                      length = r.Next(2' 14);                      fs.Write(r.Next(-100' 100));                        for (var j = 0; j < length; j++)                      {                          fs.Write(operators[r.Next(0' operators.Length)]);                          fs.Write(r.Next(-100' 100));                      }                        if (i < count - 1)                          fs.WriteLine();                  }              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: using (var fs = File.CreateText(BMK_FILE))              {                  for (var i = 0; i < count; i++)                  {                      length = r.Next(2' 14);                      fs.Write(r.Next(-100' 100));                        for (var j = 0; j < length; j++)                      {                          fs.Write(operators[r.Next(0' operators.Length)]);                          fs.Write(r.Next(-100' 100));                      }                        if (i < count - 1)                          fs.WriteLine();                  }              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: using (var fs = File.CreateText(BMK_FILE))              {                  for (var i = 0; i < count; i++)                  {                      length = r.Next(2' 14);                      fs.Write(r.Next(-100' 100));                        for (var j = 0; j < length; j++)                      {                          fs.Write(operators[r.Next(0' operators.Length)]);                          fs.Write(r.Next(-100' 100));                      }                        if (i < count - 1)                          fs.WriteLine();                  }              }
Magic Number,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,GenerateBenchmarks,The following statement contains a magic number: using (var fs = File.CreateText(BMK_FILE))              {                  for (var i = 0; i < count; i++)                  {                      length = r.Next(2' 14);                      fs.Write(r.Next(-100' 100));                        for (var j = 0; j < length; j++)                      {                          fs.Write(operators[r.Next(0' operators.Length)]);                          fs.Write(r.Next(-100' 100));                      }                        if (i < count - 1)                          fs.WriteLine();                  }              }
Magic Number,YAMPConsole,Repl,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Repl.cs,Run,The following statement contains a magic number: parser.AddCustomConstant("R"' 2.53);
Magic Number,YAMPConsole.Formatter,MarkdownFile,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Formatter\MarkdownFormatter.cs,AddCode,The following statement contains a magic number: var intend = "".PadLeft(4);
Missing Default,YAMPConsole,Benchmarks,C:\repos\FlorianRappl_YAMP\YAMP.App.Repl\Benchmarks.cs,RunBenchmark,The following switch statement is missing a default case: switch (which)              {                  case BenchmarkKind.Standard:                      //         UB                      //YAMP  : 154 ms                      //LLMP  : 108 ms                      //MP    : 4134 ms                      //MPTK  : 375 ms                      //MPNET : 3054 ms                      //MFP   : 88 ms                      //CALEN : 33 ms                      //NCALC : 420 ms                      lines = MakeTenK("2-3*5+7/2-8*2");                      break;                    case BenchmarkKind.File:                      //         UB                      //YAMP  : 2084 ms                      //LLMP  : 1072 ms                      //MP    : 372847 ms                      //MPTK  : ---                      //MPNET : ---                      //MFP   : ---                      //CALEN : 271 ms                      //NCALC : ---                      if (!File.Exists(BMK_FILE))                          GenerateBenchmarks();                        lines = File.ReadAllLines(BMK_FILE);                      break;                    case BenchmarkKind.Little:                      //         UB                      //YAMP  : 71 ms                      //LLMP  : 59 ms                      //MP    : 1840 ms                      //MPTK  : 87 ms                      //MPNET : 3232 ms                      //MFP   : 37 ms                      //CALEN : 23 ms                      //NCALC : 247 ms                      lines = MakeTenK("2+3");                      break;                    case BenchmarkKind.Thomson:                      //         UB                      //YAMP  : 193 ms                      //LLMP  : 138 ms                      //MP    : 11508 ms                      //MPTK  : 647 ms                      //MPNET : 3827 ms                      //MFP   : ---                      //CALEN : 41 ms                      //NCALC : ---                      lines = MakeTenK("2-(3*5)^2+7/(2-8)*2");                      break;              }
