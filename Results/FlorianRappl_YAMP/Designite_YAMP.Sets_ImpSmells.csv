Implementation smell,Namespace,Class,File,Method,Description
Long Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,DoRemove,The method has 140 lines of code.
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,SortedSet,Cyclomatic complexity of the method is 11
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,AddIfNotPresent,Cyclomatic complexity of the method is 8
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,DoRemove,Cyclomatic complexity of the method is 17
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,CopyTo,Cyclomatic complexity of the method is 8
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,UnionWith,Cyclomatic complexity of the method is 9
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,ConstructRootFromSortedArray,Cyclomatic complexity of the method is 9
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,IntersectWith,Cyclomatic complexity of the method is 8
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,ExceptWith,Cyclomatic complexity of the method is 9
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,IsProperSupersetOf,Cyclomatic complexity of the method is 8
Complex Method,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,CheckUniqueAndUnfoundElements,Cyclomatic complexity of the method is 8
Complex Method,YAMPSystem.Collections.Generic,TreeSubSet,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,InOrderTreeWalk,Cyclomatic complexity of the method is 10
Complex Method,YAMP.Sets,ValueWrap,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\Values\SetValue.cs,CompareTo,Cyclomatic complexity of the method is 8
Long Parameter List,YAMPSystem.Collections.Generic,TreeSubSet,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,TreeSubSet,The method has 5 parameters. Parameters: Underlying' Min' Max' lowerBoundActive' upperBoundActive
Long Identifier,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,,The length of the parameter SR_Arg_RankMultiDimNotSupported is 31.
Long Identifier,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,,The length of the parameter SR_ArgumentOutOfRange_NeedNonNegNum is 35.
Long Identifier,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,,The length of the parameter SR_SortedSet_LowerValueGreaterThanUpperValue is 44.
Long Identifier,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,,The length of the parameter SR_InvalidOperation_EnumFailedVersion is 37.
Long Identifier,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,,The length of the parameter SR_InvalidOperation_EnumOpCantHappen is 36.
Long Statement,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,ReplaceNode,The length of the statement  "                Debug.Assert((successor.Right == null && successor.IsRed) || (successor.Right.IsRed && !successor.IsRed)' "Successor must be in valid state"); " is 142.
Long Statement,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,Overlaps,The length of the statement  "            if (asSorted != null && AreComparersEqual(this' asSorted) && (_comparer.Compare(Min' asSorted.Max) > 0 || _comparer.Compare(Max' asSorted.Min) < 0)) " is 148.
Long Statement,YAMPSystem.Collections.Generic,TreeSubSet,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,InOrderTreeWalk,The length of the statement  "                Stack<Node> stack = new Stack<Node>(2 * (int)SortedSet<T>.log2(_count + 1)); //this is not exactly right if count is out of date' but the stack can grow " is 152.
Long Statement,YAMP.Sets,SetValue,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\Values\SetValue.cs,CreateSet,The length of the statement  "            return ordered ? (ISetValueDictionary)new SortedSetValueWrap(source) : (ISetValueDictionary)new HashSetValueWrap(source); " is 121.
Complex Conditional,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,UnionWith,The conditional expression  "s != null && t == null && AreComparersEqual(this' s) && (s.Count > this.Count / 2)"  is complex.
Complex Conditional,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,Overlaps,The conditional expression  "asSorted != null && AreComparersEqual(this' asSorted) && (_comparer.Compare(Min' asSorted.Max) > 0 || _comparer.Compare(Max' asSorted.Min) < 0)"  is complex.
Magic Number,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,SortedSet,The following statement contains a magic number: Stack<Node> theirStack = new Stack<SortedSet<T>.Node>(2 * log2(baseSortedSet.Count) + 2);
Magic Number,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,SortedSet,The following statement contains a magic number: Stack<Node> theirStack = new Stack<SortedSet<T>.Node>(2 * log2(baseSortedSet.Count) + 2);
Magic Number,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,SortedSet,The following statement contains a magic number: Stack<Node> myStack = new Stack<SortedSet<T>.Node>(2 * log2(baseSortedSet.Count) + 2);
Magic Number,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,SortedSet,The following statement contains a magic number: Stack<Node> myStack = new Stack<SortedSet<T>.Node>(2 * log2(baseSortedSet.Count) + 2);
Magic Number,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,InOrderTreeWalk,The following statement contains a magic number: Stack<Node> stack = new Stack<Node>(2 * (int)(SortedSet<T>.log2(Count + 1)));
Magic Number,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,UnionWith,The following statement contains a magic number: s != null && t == null && AreComparersEqual(this' s) && (s.Count > this.Count / 2)
Magic Number,YAMPSystem.Collections.Generic,TreeSubSet,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,InOrderTreeWalk,The following statement contains a magic number: Stack<Node> stack = new Stack<Node>(2 * (int)SortedSet<T>.log2(_count + 1));
Magic Number,YAMPSystem.Collections.Generic,Enumerator,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,Enumerator,The following statement contains a magic number: _stack = new Stack<SortedSet<T>.Node>(2 * (int)SortedSet<T>.log2(set.Count + 1));
Magic Number,YAMPSystem.Collections.Generic,Enumerator,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,Enumerator,The following statement contains a magic number: _stack = new Stack<SortedSet<T>.Node>(2 * (int)SortedSet<T>.log2(set.Count + 1));
Magic Number,YAMP.Sets,SetValue,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\Values\SetValue.cs,DeserializeString,The following statement contains a magic number: var buffer = new Byte[4];
Missing Default,YAMPSystem.Collections.Generic,SortedSet<T>,D:\research\architectureSmells\repos\FlorianRappl_YAMP\YAMP.Sets\External\CoreFX\SortedSet.cs,DoRemove,The following switch statement is missing a default case: switch (rotation)                              {                                  case TreeRotation.RightRotation:                                      Debug.Assert(parent.Left == sibling' "sibling must be left child of parent!");                                      Debug.Assert(sibling.Left.IsRed' "Left child of sibling must be red!");                                      sibling.Left.IsRed = false;                                      newGrandParent = RotateRight(parent);                                      break;                                  case TreeRotation.LeftRotation:                                      Debug.Assert(parent.Right == sibling' "sibling must be left child of parent!");                                      Debug.Assert(sibling.Right.IsRed' "Right child of sibling must be red!");                                      sibling.Right.IsRed = false;                                      newGrandParent = RotateLeft(parent);                                      break;                                    case TreeRotation.RightLeftRotation:                                      Debug.Assert(parent.Right == sibling' "sibling must be left child of parent!");                                      Debug.Assert(sibling.Left.IsRed' "Left child of sibling must be red!");                                      newGrandParent = RotateRightLeft(parent);                                      break;                                    case TreeRotation.LeftRightRotation:                                      Debug.Assert(parent.Left == sibling' "sibling must be left child of parent!");                                      Debug.Assert(sibling.Right.IsRed' "Right child of sibling must be red!");                                      newGrandParent = RotateLeftRight(parent);                                      break;                              }
