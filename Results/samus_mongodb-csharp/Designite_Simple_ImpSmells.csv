Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Simple,MainClass,C:\repos\samus_mongodb-csharp\examples\Simple\Main.cs,Main,The length of the statement  "                    Console.WriteLine("Count by LINQ on typed collection2: {0}"' db.GetCollection<SubClass>().Linq().Count(x => x.Corners > 1)); " is 124.
Long Statement,Simple,MainClass,C:\repos\samus_mongodb-csharp\examples\Simple\Main.cs,Main,The length of the statement  "                    //Console.WriteLine("Count by LINQ on typed collection3: {0}"' db.GetCollection<SubClass>().Count(new { Corners = Op.GreaterThan(1) })); " is 136.
Magic Number,Simple,MainClass,C:\repos\samus_mongodb-csharp\examples\Simple\Main.cs,Main,The following statement contains a magic number: using (Mongo mongo = new Mongo(config.BuildConfiguration()))              {                  mongo.Connect();                  try                  {                      var db = mongo.GetDatabase("TestDb");                      var collection = db.GetCollection<MyClass>();                        MyClass square = new MyClass()                      {                          Corners = 4'                          Name = "Square"                      };                        MyClass circle = new MyClass()                      {                          Corners = 0'                          Name = "Circle"                      };                        SubClass sub = new SubClass()                      {                          Name = "SubClass"'                          Corners = 6'                          Ratio = 3.43                      };                        collection.Save(square);                      collection.Save(circle);                      collection.Save(sub);                        var superclass = (from item in db.GetCollection<MyClass>("MyClass").Linq()                                  where item.Corners > 1                                  select item.Corners).ToList();                        var subclass = (from item in db.GetCollection<SubClass>("MyClass").Linq()                                      where item.Ratio > 1                                      select item.Corners).ToList();                        Console.WriteLine("Count by LINQ on typed collection: {0}"' collection.Linq().Count(x => x.Corners > 1));                      Console.WriteLine("Count by LINQ on typed collection2: {0}"' db.GetCollection<SubClass>().Linq().Count(x => x.Corners > 1));                      //Console.WriteLine("Count by LINQ on typed collection3: {0}"' db.GetCollection<SubClass>().Count(new { Corners = Op.GreaterThan(1) }));                      Console.WriteLine("Count on typed collection: {0}"' collection.Count(new { Corners = Op.GreaterThan(1) }));                        var coll = db.GetCollection("MyClass");                      var count = coll.Count(new Document("Corners"' Op.GreaterThan(1)));                      Console.WriteLine("Count: {0}"' count);                      Console.ReadKey();                  }                  finally                  {                      mongo.Disconnect();                  }              }
Magic Number,Simple,MainClass,C:\repos\samus_mongodb-csharp\examples\Simple\Main.cs,Main,The following statement contains a magic number: using (Mongo mongo = new Mongo(config.BuildConfiguration()))              {                  mongo.Connect();                  try                  {                      var db = mongo.GetDatabase("TestDb");                      var collection = db.GetCollection<MyClass>();                        MyClass square = new MyClass()                      {                          Corners = 4'                          Name = "Square"                      };                        MyClass circle = new MyClass()                      {                          Corners = 0'                          Name = "Circle"                      };                        SubClass sub = new SubClass()                      {                          Name = "SubClass"'                          Corners = 6'                          Ratio = 3.43                      };                        collection.Save(square);                      collection.Save(circle);                      collection.Save(sub);                        var superclass = (from item in db.GetCollection<MyClass>("MyClass").Linq()                                  where item.Corners > 1                                  select item.Corners).ToList();                        var subclass = (from item in db.GetCollection<SubClass>("MyClass").Linq()                                      where item.Ratio > 1                                      select item.Corners).ToList();                        Console.WriteLine("Count by LINQ on typed collection: {0}"' collection.Linq().Count(x => x.Corners > 1));                      Console.WriteLine("Count by LINQ on typed collection2: {0}"' db.GetCollection<SubClass>().Linq().Count(x => x.Corners > 1));                      //Console.WriteLine("Count by LINQ on typed collection3: {0}"' db.GetCollection<SubClass>().Count(new { Corners = Op.GreaterThan(1) }));                      Console.WriteLine("Count on typed collection: {0}"' collection.Count(new { Corners = Op.GreaterThan(1) }));                        var coll = db.GetCollection("MyClass");                      var count = coll.Count(new Document("Corners"' Op.GreaterThan(1)));                      Console.WriteLine("Count: {0}"' count);                      Console.ReadKey();                  }                  finally                  {                      mongo.Disconnect();                  }              }
Magic Number,Simple,MainClass,C:\repos\samus_mongodb-csharp\examples\Simple\Main.cs,Main,The following statement contains a magic number: using (Mongo mongo = new Mongo(config.BuildConfiguration()))              {                  mongo.Connect();                  try                  {                      var db = mongo.GetDatabase("TestDb");                      var collection = db.GetCollection<MyClass>();                        MyClass square = new MyClass()                      {                          Corners = 4'                          Name = "Square"                      };                        MyClass circle = new MyClass()                      {                          Corners = 0'                          Name = "Circle"                      };                        SubClass sub = new SubClass()                      {                          Name = "SubClass"'                          Corners = 6'                          Ratio = 3.43                      };                        collection.Save(square);                      collection.Save(circle);                      collection.Save(sub);                        var superclass = (from item in db.GetCollection<MyClass>("MyClass").Linq()                                  where item.Corners > 1                                  select item.Corners).ToList();                        var subclass = (from item in db.GetCollection<SubClass>("MyClass").Linq()                                      where item.Ratio > 1                                      select item.Corners).ToList();                        Console.WriteLine("Count by LINQ on typed collection: {0}"' collection.Linq().Count(x => x.Corners > 1));                      Console.WriteLine("Count by LINQ on typed collection2: {0}"' db.GetCollection<SubClass>().Linq().Count(x => x.Corners > 1));                      //Console.WriteLine("Count by LINQ on typed collection3: {0}"' db.GetCollection<SubClass>().Count(new { Corners = Op.GreaterThan(1) }));                      Console.WriteLine("Count on typed collection: {0}"' collection.Count(new { Corners = Op.GreaterThan(1) }));                        var coll = db.GetCollection("MyClass");                      var count = coll.Count(new Document("Corners"' Op.GreaterThan(1)));                      Console.WriteLine("Count: {0}"' count);                      Console.ReadKey();                  }                  finally                  {                      mongo.Disconnect();                  }              }
Magic Number,Simple,OidExtensions,C:\repos\samus_mongodb-csharp\examples\Simple\Main.cs,ToOid,The following statement contains a magic number: if(str.Length == 24)              return new Oid(str);
