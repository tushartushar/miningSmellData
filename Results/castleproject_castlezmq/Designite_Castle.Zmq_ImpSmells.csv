Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,Cyclomatic complexity of the method is 9
Complex Method,Castle.Zmq,Polling,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Polling.cs,InternalFireEvents64,Cyclomatic complexity of the method is 9
Complex Method,Castle.Zmq,Polling,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Polling.cs,InternalFireEvents86,Cyclomatic complexity of the method is 9
Long Parameter List,Castle.Zmq,SocketExtensions,C:\repos\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Connect,The method has 5 parameters. Parameters: source' transport' address' port' timeout
Long Parameter List,Castle.Zmq,SocketExtensions,C:\repos\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Bind,The method has 5 parameters. Parameters: source' transport' address' port' timeout
Long Parameter List,Castle.Zmq,SocketExtensions,C:\repos\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Send,The method has 5 parameters. Parameters: source' message' encoding' hasMoreToSend' noWait
Long Parameter List,Castle.Zmq.Extensions,Device,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Extensions\Device.cs,Device,The method has 6 parameters. Parameters: ctx' frontEndEndpoint' backendEndpoint' frontendType' backendType' enableCapture
Long Parameter List,Castle.Zmq.Extensions,WorkerPool,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Extensions\WorkerPool.cs,WorkerPool,The method has 6 parameters. Parameters: ctx' frontEndEndpoint' backendEndpoint' proc' workers' enableCapture
Long Identifier,Castle.Zmq.Counters,PerfCounters,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Counters\PerfCounters.cs,,The length of the parameter NumberOfCallForwardedToFrontend is 31.
Long Identifier,Castle.Zmq.Counters,PerfCounters,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Counters\PerfCounters.cs,,The length of the parameter NumberOfCallForwardedToBackend is 30.
Long Statement,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,The length of the statement  "				throw new InvalidOperationException("Unable to load libzmq " + (Environment.Is64BitProcess ? "x64" : "win32") + " from " + tempFile); " is 133.
Long Statement,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The length of the statement  "					.Aggregate(""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine); " is 120.
Long Statement,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The length of the statement  "							.Aggregate(""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine); " is 120.
Long Statement,Castle.Zmq.Counters,PerfCounterRegistry,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Counters\PerfCounterRegistry.cs,CreatePerfCounters,The length of the statement  "			PerformanceCounterCategory.Create(CategoryName' "0MQ Performance Counters"' PerformanceCounterCategoryType.MultiInstance' toCreate); " is 132.
Empty Catch Block,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,The method has an empty catch block.
Empty Catch Block,Castle.Zmq,Monitor,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Monitor.cs,FireEvent,The method has an empty catch block.
Empty Catch Block,Castle.Zmq.Extensions,BasePublisher<T>,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Extensions\BasePublisher.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Castle.Zmq.Extensions,BaseSubscriber<T>,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Extensions\BaseSubscriber.cs,Dispose,The method has an empty catch block.
Magic Number,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,The following statement contains a magic number: var bitnessPath = String.Format("x{0}"' Environment.Is64BitProcess ? 64 : 86);
Magic Number,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,The following statement contains a magic number: var bitnessPath = String.Format("x{0}"' Environment.Is64BitProcess ? 64 : 86);
Magic Number,Castle.Zmq,Context,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The following statement contains a magic number: if (this._contextPtr != IntPtr.Zero)  			{  				var ev = this.Disposing;  				if (ev != null)  				{  					// Notifying of pre-context-termination  					ev();  				}    				Native.Context.zmq_ctx_shutdown(this._contextPtr); // discard any error    #if DEBUG  				var message = this.GetTrackedSockets()  					.Aggregate(""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine);    				System.Diagnostics.Trace.TraceError("Socket tracking: " + message);  				System.Diagnostics.Debug.WriteLine("Socket tracking: " + message);  				if (LogAdapter.LogEnabled)  				{  					LogAdapter.LogError("Context"' "Socket tracking: " + message);  				}    				var t = new System.Threading.Thread(() =>  				{  					Thread.Sleep(2000);    					var message2 =   						this.GetTrackedSockets()  							.Aggregate(""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine);    					System.Diagnostics.Trace.TraceError("Socket tracking: " + message2);  					System.Diagnostics.Debug.WriteLine("Socket tracking: " + message2);  					if (LogAdapter.LogEnabled)  					{  						LogAdapter.LogError("Context"' "**** STILL Hanging **** - Socket tracking: " + message2);  					}  				});  				t.Start();  #endif    				var error = Native.Context.zmq_ctx_term(this._contextPtr);  				if (error == Native.ErrorCode)  				{  					// Not good' but we can't throw an exception in the Dispose  					var msg = "Error disposing context: " + Native.LastErrorString();  					System.Diagnostics.Trace.TraceError(msg);  					System.Diagnostics.Debug.WriteLine(msg);    					if (LogAdapter.LogEnabled)  					{  						LogAdapter.LogError("Context"' msg);  					}  				}    				ev = this.Disposed;  				if (ev != null)  				{  					// Notifying of post-context-termination  					ev();  				}  			}
Magic Number,Castle.Zmq,Socket,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Native\Native.Socket.cs,Connect,The following statement contains a magic number: if (res == Native.ErrorCode)  			{  				if (Native.LastError() == 128)  				{  					System.Diagnostics.Debugger.Break();  				}  				Native.ThrowZmqError("Connecting " + endpoint);  			}
Magic Number,Castle.Zmq.Extensions,BaseSubscriber<T>,C:\repos\castleproject_castlezmq\src\Castle.Zmq\Extensions\BaseSubscriber.cs,OnRecvWorker,The following statement contains a magic number: try  			{  				while (_started)  				{  					polling.Poll(1000);  				}  			}  			catch (ZmqException e)  			{  				if (LogAdapter.LogEnabled)  				{  					LogAdapter.LogDebug(this.GetType().FullName' "BaseSubscriber exception. Disposing. Details: " + e.ToString());  				}    				this.Dispose();  			}
Missing Default,Castle.Zmq,MonitoredSocket,C:\repos\castleproject_castlezmq\src\Castle.Zmq\MonitoredSocket.cs,MonitoredSocket,The following switch statement is missing a default case: switch (args.Event)  				{  					case MonitorEvents.BindFailed:  					case MonitorEvents.AcceptFailed:  					case MonitorEvents.CloseFailed:  						if (!_inError)  						{  							_inError = true;  							Thread.MemoryBarrier();    							FireError(args);  						}  						break;  					case MonitorEvents.ConnectRetried:  					case MonitorEvents.Closed:  					case MonitorEvents.Disconnected:  						if (!_disconnected)  						{  							_disconnected = true;  							_connected = false;  							Thread.MemoryBarrier();    							FireDisconnected(args);  						}  						break;  					case MonitorEvents.Connected:  					case MonitorEvents.Listening:  						if (!_connected)  						{  							_connected = true;  							_inError = _disconnected = false;  							Thread.MemoryBarrier();    							FireConnected(args);  						}  						break;  				}
