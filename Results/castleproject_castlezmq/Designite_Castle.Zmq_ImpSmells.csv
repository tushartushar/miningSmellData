Implementation smell,Namespace,Class,File,Method,Description
Long Method,Castle.Zmq.Extensions,Device,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\Device.cs,Start,The method has 79 lines of code.
Complex Method,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,Cyclomatic complexity of the method is 10
Complex Method,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,Cyclomatic complexity of the method is 8
Complex Method,Castle.Zmq,Monitor,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Monitor.cs,EventsWorker,Cyclomatic complexity of the method is 16
Complex Method,Castle.Zmq,Polling,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Polling.cs,Poll,Cyclomatic complexity of the method is 7
Complex Method,Castle.Zmq,Polling,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Polling.cs,InternalFireEvents64,Cyclomatic complexity of the method is 9
Complex Method,Castle.Zmq,Polling,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Polling.cs,InternalFireEvents86,Cyclomatic complexity of the method is 9
Complex Method,Castle.Zmq,Socket,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Socket.cs,Socket,Cyclomatic complexity of the method is 8
Long Parameter List,Castle.Zmq,Monitor,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Monitor.cs,Monitor,The method has 4 parameters.
Long Parameter List,Castle.Zmq,Socket,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Socket.cs,InternalSetOption,The method has 4 parameters.
Long Parameter List,Castle.Zmq,SocketExtensions,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Connect,The method has 5 parameters.
Long Parameter List,Castle.Zmq,SocketExtensions,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Disconnect,The method has 4 parameters.
Long Parameter List,Castle.Zmq,SocketExtensions,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Bind,The method has 5 parameters.
Long Parameter List,Castle.Zmq,SocketExtensions,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Unbind,The method has 4 parameters.
Long Parameter List,Castle.Zmq,SocketExtensions,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Send,The method has 4 parameters.
Long Parameter List,Castle.Zmq,SocketExtensions,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\SocketExtensions.cs,Send,The method has 5 parameters.
Long Parameter List,Castle.Zmq.Extensions,Device,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\Device.cs,Device,The method has 6 parameters.
Long Parameter List,Castle.Zmq.Extensions,Forwarder,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\Forwarder.cs,Forwarder,The method has 4 parameters.
Long Parameter List,Castle.Zmq.Extensions,SharedQueue,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\SharedQueue.cs,SharedQueue,The method has 4 parameters.
Long Parameter List,Castle.Zmq.Extensions,WorkerPool,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\WorkerPool.cs,WorkerPool,The method has 6 parameters.
Long Statement,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,The length of the statement  "		throw new InvalidOperationException ("Unable to load libzmq " + (Environment.Is64BitProcess ? "x64" : "win32") + " from " + tempFile); " is 134.
Long Statement,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The length of the statement  "		var message = this.GetTrackedSockets ().Aggregate (""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine); " is 160.
Long Statement,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The length of the statement  "			var message2 = this.GetTrackedSockets ().Aggregate (""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine); " is 161.
Long Statement,Castle.Zmq.Counters,PerfCounterRegistry,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Counters\PerfCounterRegistry.cs,CreatePerfCounters,The length of the statement  "	PerformanceCounterCategory.Create (CategoryName' "0MQ Performance Counters"' PerformanceCounterCategoryType.MultiInstance' toCreate); " is 133.
Long Statement,Castle.Zmq.Counters,PerfCounterRegistry,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Counters\PerfCounterRegistry.cs,GetInstanceName,The length of the statement  "	var port = System.Configuration.ConfigurationManager.AppSettings.Get ("listening_port") ?? System.Configuration.ConfigurationManager.AppSettings.Get ("hosting:app") ?? " - "; " is 174.
Empty Catch Block,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,LoadEmbeddedLibary,The method has an empty catch block.
Empty Catch Block,Castle.Zmq,Monitor,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Monitor.cs,FireEvent,The method has an empty catch block.
Empty Catch Block,Castle.Zmq.Extensions,BasePublisher,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\BasePublisher.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Castle.Zmq.Extensions,BaseSubscriber,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\BaseSubscriber.cs,Dispose,The method has an empty catch block.
Magic Number,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The following statement contains a magic number: if (this._contextPtr != IntPtr.Zero) {  	var ev = this.Disposing;  	if (ev != null) {  		// Notifying of pre-context-termination  		ev ();  	}  	Native.Context.zmq_ctx_shutdown (this._contextPtr);  	// discard any error  	#if DEBUG  	var message = this.GetTrackedSockets ().Aggregate (""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine);  	System.Diagnostics.Trace.TraceError ("Socket tracking: " + message);  	System.Diagnostics.Debug.WriteLine ("Socket tracking: " + message);  	if (LogAdapter.LogEnabled) {  		LogAdapter.LogError ("Context"' "Socket tracking: " + message);  	}  	var t = new System.Threading.Thread (() => {  		Thread.Sleep (2000);  		var message2 = this.GetTrackedSockets ().Aggregate (""' (prev' tuple) => prev + "Socket " + tuple.Item1.SocketType + " at " + tuple.Item2 + Environment.NewLine);  		System.Diagnostics.Trace.TraceError ("Socket tracking: " + message2);  		System.Diagnostics.Debug.WriteLine ("Socket tracking: " + message2);  		if (LogAdapter.LogEnabled) {  			LogAdapter.LogError ("Context"' "**** STILL Hanging **** - Socket tracking: " + message2);  		}  	});  	t.Start ();  	#endif  	var error = Native.Context.zmq_ctx_term (this._contextPtr);  	if (error == Native.ErrorCode) {  		// Not good' but we can't throw an exception in the Dispose  		var msg = "Error disposing context: " + Native.LastErrorString ();  		System.Diagnostics.Trace.TraceError (msg);  		System.Diagnostics.Debug.WriteLine (msg);  		if (LogAdapter.LogEnabled) {  			LogAdapter.LogError ("Context"' msg);  		}  	}  	ev = this.Disposed;  	if (ev != null) {  		// Notifying of post-context-termination  		ev ();  	}  }  
Magic Number,Castle.Zmq,Context,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Context.cs,InternalDispose,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,Castle.Zmq,Socket,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Socket.cs,Connect,The following statement contains a magic number: if (res == Native.ErrorCode) {  	if (Native.LastError () == 128) {  		System.Diagnostics.Debugger.Break ();  	}  	Native.ThrowZmqError ("Connecting " + endpoint);  }  
Magic Number,Castle.Zmq,Socket,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Socket.cs,Connect,The following statement contains a magic number: if (Native.LastError () == 128) {  	System.Diagnostics.Debugger.Break ();  }  
Magic Number,Castle.Zmq.Extensions,BaseSubscriber,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\BaseSubscriber.cs,OnRecvWorker,The following statement contains a magic number: try {  	while (_started) {  		polling.Poll (1000);  	}  } catch (ZmqException e) {  	if (LogAdapter.LogEnabled) {  		LogAdapter.LogDebug (this.GetType ().FullName' "BaseSubscriber exception. Disposing. Details: " + e.ToString ());  	}  	this.Dispose ();  }  
Magic Number,Castle.Zmq.Extensions,BaseSubscriber,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\BaseSubscriber.cs,OnRecvWorker,The following statement contains a magic number: while (_started) {  	polling.Poll (1000);  }  
Magic Number,Castle.Zmq.Extensions,BaseSubscriber,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\Extensions\BaseSubscriber.cs,OnRecvWorker,The following statement contains a magic number: polling.Poll (1000);  
Missing Default,Castle.Zmq,MonitoredSocket,D:\newReposJune17\castleproject_castlezmq\src\Castle.Zmq\MonitoredSocket.cs,MonitoredSocket,The following switch statement is missing a default case: switch (args.Event) {  case MonitorEvents.BindFailed:  case MonitorEvents.AcceptFailed:  case MonitorEvents.CloseFailed:  	if (!_inError) {  		_inError = true;  		Thread.MemoryBarrier ();  		FireError (args);  	}  	break;  case MonitorEvents.ConnectRetried:  case MonitorEvents.Closed:  case MonitorEvents.Disconnected:  	if (!_disconnected) {  		_disconnected = true;  		_connected = false;  		Thread.MemoryBarrier ();  		FireDisconnected (args);  	}  	break;  case MonitorEvents.Connected:  case MonitorEvents.Listening:  	if (!_connected) {  		_connected = true;  		_inError = _disconnected = false;  		Thread.MemoryBarrier ();  		FireConnected (args);  	}  	break;  }  
