Implementation smell,Namespace,Class,File,Method,Description
Long Method,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The method has 185 lines of code.
Complex Method,FarNet.Tools,InteractiveEditor,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Interactive.cs,CommandArea,Cyclomatic complexity of the method is 9
Complex Method,FarNet.Tools,InteractiveEditor,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Interactive.cs,DoInvoke,Cyclomatic complexity of the method is 9
Complex Method,FarNet.Tools,XPathObjectNode,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathObjectNode.cs,ActivateSimple,Cyclomatic complexity of the method is 11
Complex Method,FarNet.Tools,XPathObjectNode,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathObjectNode.cs,ActivateSuperFileElements,Cyclomatic complexity of the method is 8
Complex Method,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,DoInvokeWide,Cyclomatic complexity of the method is 10
Complex Method,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,DoInvokeDeep,Cyclomatic complexity of the method is 10
Complex Method,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,DoInvokeXPath,Cyclomatic complexity of the method is 12
Complex Method,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,Show,Cyclomatic complexity of the method is 8
Complex Method,FarNet.Tools,SuperExplorer,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperExplorer.cs,CommitFiles,Cyclomatic complexity of the method is 16
Complex Method,FarNet.Tools,SuperExplorer,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperExplorer.cs,ExportFiles,Cyclomatic complexity of the method is 17
Complex Method,FarNet.Tools,XPathObjectNavigator,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathObjectNavigator.cs,IsDescendant,Cyclomatic complexity of the method is 8
Complex Method,FarNet.Tools,XPathInput,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathInput.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,Cyclomatic complexity of the method is 23
Complex Method,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,Abort,Cyclomatic complexity of the method is 9
Long Parameter List,FarNet.Tools,InteractiveEditor,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Interactive.cs,InteractiveEditor,The method has 5 parameters. Parameters: editor' history' outputMark1' outputMark2' outputMark3
Long Parameter List,FarNet.Tools,XPathObjectNode,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathObjectNode.cs,XPathObjectNode,The method has 6 parameters. Parameters: context' target' name' parent' siblings' index
Long Parameter List,FarNet.Tools,SuperExplorer,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperExplorer.cs,DeleteFilesOfExplorer,The method has 6 parameters. Parameters: explorer' xfilesToDelete' xfilesToStay' mode' force' codata
Long Parameter List,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,Abort,The method has 6 parameters. Parameters: thread' triesWithAllValidations' triesIgnoringUserValidations' triesAllowingUsingsToFail' finalizeWithNormalAbort' stateInfo
Long Statement,FarNet.Tools,Progress,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Progress.cs,FormatProgress,The length of the statement  "			return new string(SOLID_BLOCK' n) + new string(EMPTY_BLOCK' PROGRESS_WIDTH - n) + string.Format(null' "{0'3}%"' percentage); " is 124.
Long Statement,FarNet.Tools,SuperExplorer,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperExplorer.cs,DeleteFilesOfExplorer,The length of the statement  "					foreach (SuperFile xfile in SuperFile.SuperFilesOfExplorerFiles(xfilesToDelete' argsDelete.FilesToStay' explorer.FileComparer)) " is 127.
Long Statement,FarNet.Tools,SuperExplorer,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperExplorer.cs,ExportFiles,The length of the statement  "					Log.Source.TraceInformation("ExportFiles Count='{0}' Location='{1}' DirectoryName='{2}'"' filesToExport.Count' explorer.Location' args.DirectoryName); " is 150.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "						// The thread terminated just when we are trying to Abort it. So' we will return true to tell that the "Abort" succeeded. " is 121.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "			// We asked the thread to suspend' but the thread may take some time to be really suspended' so we will wait until it is no more in "SuspendRequested" state. " is 157.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "				// If we try to Abort the thread when it is starting (really soon)' it will not have any frames. Calling an abort here caused some dead-locks for me' " is 149.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "				// In fact' we check this: If the method returns IDisposable' then we can't abort. If this is not the case' then if we are inside a catch or finally " is 148.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "				// block' we can abort' as such blocks delay the normal abort and' so' even if an internal call is inside a constructor of an IDisposable' we " is 141.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "				// And finally' if we are not in a problematic frame or in a guaranteed frame' we check if the method has try blocks. If it has' we consider " is 140.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "				// we can't abort. Note that if you do a try/catch and then an infinite loop' this check will consider the method to be inabortable. " is 132.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "					attributes = (HostProtectionAttribute[])method.DeclaringType.GetCustomAttributes(typeof(HostProtectionAttribute)' false); " is 121.
Long Statement,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The length of the statement  "					attributes = (HostProtectionAttribute[])method.DeclaringType.Assembly.GetCustomAttributes(typeof(HostProtectionAttribute)' false); " is 130.
Complex Conditional,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,DoInvokeXPath,The conditional expression  "Filter != null && currentFile.IsDirectory && (!Directory || !Filter(currentFile.Explorer' currentFile.File))"  is complex.
Complex Conditional,FarNet.Tools,XPathInput,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathInput.cs,Parse,The conditional expression  "text.StartsWith("'"' StringComparison.Ordinal) && text.EndsWith("'"' StringComparison.Ordinal) ||  					text.StartsWith("\""' StringComparison.Ordinal) && text.EndsWith("\""' StringComparison.Ordinal)"  is complex.
Virtual Method Call from Constructor,FarNet.Tools,HistoryMenu,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\HistoryMenu.cs,HistoryMenu,The constructor "HistoryMenu" calls a virtual method "CreateListMenu".
Virtual Method Call from Constructor,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,Form,The constructor "Form" calls a virtual method "CreateDialog".
Virtual Method Call from Constructor,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,Form,The constructor "Form" calls a virtual method "AddBox".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddListBox".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddListBox".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The constructor "SubsetForm" calls a virtual method "AddButton".
Empty Catch Block,FarNet.Tools,SuperFile,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperFile.cs,HashSuperFiles,The method has an empty catch block.
Empty Catch Block,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The method has an empty catch block.
Magic Number,FarNet.Tools,HistoryLog,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\HistoryLog.cs,ReadLines,The following statement contains a magic number: try  			{  				var lines = File.ReadAllLines(_fileName);  				if (lines.Length > _maximumCount + _maximumCount / 10)  					return Update(lines);  				else  					return lines;  			}  			catch (FileNotFoundException)  			{  				return new string[0];  			}
Magic Number,FarNet.Tools,HistoryMenu,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\HistoryMenu.cs,HistoryMenu,The following statement contains a magic number: Menu.ScreenMargin = 2;
Magic Number,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,Form,The following statement contains a magic number: Box = Dialog.AddBox(3' 1' 0' 0' string.Empty);
Magic Number,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,SetSize,The following statement contains a magic number: if (width <= 4 || height <= 2) throw new ArgumentException("Too small value.");
Magic Number,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,SetSize,The following statement contains a magic number: if (width <= 4 || height <= 2) throw new ArgumentException("Too small value.");
Magic Number,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,SetSize,The following statement contains a magic number: Box.Rect = new Place(3' 1' width - 4' height - 2);
Magic Number,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,SetSize,The following statement contains a magic number: Box.Rect = new Place(3' 1' width - 4' height - 2);
Magic Number,FarNet.Tools,Form,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Form.cs,SetSize,The following statement contains a magic number: Box.Rect = new Place(3' 1' width - 4' height - 2);
Magic Number,FarNet.Tools,Progress,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Progress.cs,SetProgressValue,The following statement contains a magic number: if (maximumValue <= 0 || currentValue >= maximumValue)  				_percentage = 100;
Magic Number,FarNet.Tools,Progress,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Progress.cs,SetProgressValue,The following statement contains a magic number: _percentage = (int)(currentValue * 100 / maximumValue);
Magic Number,FarNet.Tools,Progress,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Progress.cs,Build,The following statement contains a magic number: if (_percentage < 0)  			{  				// time span' mind unwanted milliseconds  				progress = (new TimeSpan(0' 0' (int)_stopwatch.Elapsed.TotalSeconds)).ToString();  				  				// 1) window title  				title = progress + " " + result[0];  				  				// 2) ensure fixed box width  				progress = progress.PadRight(TEXT_WIDTH);  			}  			else  			{  				// thermometer  				progress = FormatProgress(_percentage);    				// icon progress  				Far.Api.UI.SetProgressValue(_percentage' 100);    				// window title  				title = string.Format(null' "{0}% {1}"' _percentage' result[0]);  			}
Magic Number,FarNet.Tools,Progress,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Progress.cs,FormatProgress,The following statement contains a magic number: int n = PROGRESS_WIDTH * percentage / 100;
Magic Number,FarNet.Tools,Progress,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Progress.cs,FormatProgress,The following statement contains a magic number: if (n > PROGRESS_WIDTH)  			{  				n = PROGRESS_WIDTH;  			}  			// leave 1 not filled  			else if (n == PROGRESS_WIDTH)  			{  				if (percentage < 100)  					--n;  			}  			// fill at least 1  			else if (n == 0)  			{  				if (percentage > 0)  					n = 1;  			}
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,OnClosing,The following statement contains a magic number: lock (_lock)  			{  				// allow the dialog to close if the form is closed  				if (_isClosed)  					return;    				// do not close if cannot or aborted  				if (!CanCancel || AbortCanceling())  				{  					e.Ignore = true;  					return;  				}    				// flag  				_isCanceled = true;    				// abort  				if (_jobThread != null)  					Pfz.Threading.SafeAbort.Abort(_jobThread' 4000' 2000' 1000' true);    				// notify  				if (Canceled != null)  					Canceled(this' null);  			}
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,OnClosing,The following statement contains a magic number: lock (_lock)  			{  				// allow the dialog to close if the form is closed  				if (_isClosed)  					return;    				// do not close if cannot or aborted  				if (!CanCancel || AbortCanceling())  				{  					e.Ignore = true;  					return;  				}    				// flag  				_isCanceled = true;    				// abort  				if (_jobThread != null)  					Pfz.Threading.SafeAbort.Abort(_jobThread' 4000' 2000' 1000' true);    				// notify  				if (Canceled != null)  					Canceled(this' null);  			}
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,OnClosing,The following statement contains a magic number: lock (_lock)  			{  				// allow the dialog to close if the form is closed  				if (_isClosed)  					return;    				// do not close if cannot or aborted  				if (!CanCancel || AbortCanceling())  				{  					e.Ignore = true;  					return;  				}    				// flag  				_isCanceled = true;    				// abort  				if (_jobThread != null)  					Pfz.Threading.SafeAbort.Abort(_jobThread' 4000' 2000' 1000' true);    				// notify  				if (Canceled != null)  					Canceled(this' null);  			}
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: SetSize(Progress.FORM_WIDTH' (CanCancel ? 7 : 5) + _LineCount);
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: SetSize(Progress.FORM_WIDTH' (CanCancel ? 7 : 5) + _LineCount);
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: for (int iLine = 0; iLine < _LineCount; ++iLine)  				_textActivity[iLine] = Dialog.AddText(5' -1' 5 + Progress.TEXT_WIDTH - 1' string.Empty);
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: for (int iLine = 0; iLine < _LineCount; ++iLine)  				_textActivity[iLine] = Dialog.AddText(5' -1' 5 + Progress.TEXT_WIDTH - 1' string.Empty);
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: _textProgress = Dialog.AddText(5' -1' 5 + Progress.TEXT_WIDTH - 1' string.Empty);
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: _textProgress = Dialog.AddText(5' -1' 5 + Progress.TEXT_WIDTH - 1' string.Empty);
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Init,The following statement contains a magic number: if (CanCancel)  			{  				Dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton button = Dialog.AddButton(0' -1' _jobThread == null ? "Cancel" : "Abort");  				button.CenterGroup = true;  				Dialog.Default = button;  			}
Magic Number,FarNet.Tools,ProgressForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\ProgressForm.cs,Invoke,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,InvokeWithProgress,The following statement contains a magic number: using (var progress = new ProgressBox(Res.Searching))  			{  				progress.LineCount = 2;  				return DoInvoke(progress);  			}
Magic Number,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,OnPanelEscaping,The following statement contains a magic number: if (ask == 2 && toStop)  				Stopping = true;
Magic Number,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,DoInvokeWide,The following statement contains a magic number: while (queue.Count > 0 && !Stopping)  			{  				// cancel?  				if (progress != null && UIUserStop())  					break;    				// current  				var explorer = queue.Dequeue();  				++ProcessedDirectoryCount;    				// progress  				if (progress != null && progress.ElapsedFromShow.TotalMilliseconds > 500)  				{  					var directoryPerSecond = ProcessedDirectoryCount / progress.ElapsedFromStart.TotalSeconds;  					progress.Activity = string.Format(null' Res.SearchActivityWide'  						FoundFileCount' ProcessedDirectoryCount' queue.Count' directoryPerSecond);  					progress.ShowProgress();  				}    				var args = new GetFilesEventArgs(ExplorerModes.Find);  				foreach (var file in explorer.GetFiles(args))  				{  					// stop?  					if (Stopping)  						break;    					// process and add  					bool add = Directory || !file.IsDirectory;  					if (add && Filter != null)  						add = Filter(explorer' file);  					if (add)  					{  						++FoundFileCount;  						yield return new SuperFile(explorer' file);  					}    					// skip if flat or leaf  					if (!Recurse || !file.IsDirectory)  						continue;    					Explorer explorer2 = SuperExplorer.ExploreSuperDirectory(explorer' ExplorerModes.Find' file);  					if (explorer2 != null)  						queue.Enqueue(explorer2);  				}  			}
Magic Number,FarNet.Tools,SearchFileCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SearchFileCommand.cs,DoInvokeDeep,The following statement contains a magic number: if (progress != null && progress.ElapsedFromShow.TotalMilliseconds > 500)  			{  				var directoryPerSecond = ProcessedDirectoryCount / progress.ElapsedFromStart.TotalSeconds;  				progress.Activity = string.Format(null' Res.SearchActivityDeep'  					FoundFileCount' ProcessedDirectoryCount' directoryPerSecond);  				progress.ShowProgress();  			}
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: const int L1 = 4;
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: const int R2 = DLG_XSIZE - 5;
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: const int R1 = (L1 + R2) / 2;
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: const int BB = DLG_YSIZE - 4;
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: _ListBox1 = Dialog.AddListBox(L1' 2' R1' BB' "Available");
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: _ListBox2 = Dialog.AddListBox(L2' 2' R2' BB' "Selected");
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,SubsetForm,The following statement contains a magic number: const int yButton = DLG_YSIZE - 3;
Magic Number,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,DoDown,The following statement contains a magic number: if (selected2 >= 0 && selected2 < _ListBox2.Items.Count - 2)  			{  				FarItem item = _ListBox2.Items[selected2];  				FarItem next = _ListBox2.Items[selected2 + 1];  				_ListBox2.Items[selected2] = next;  				_ListBox2.Items[selected2 + 1] = item;  				_ListBox2.Selected = selected2 + 1;  			}
Magic Number,FarNet.Tools,XPathInput,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathInput.cs,Parse,The following statement contains a magic number: for (i = 0; i < lines.Length; ++i)  			{  				var line = lines[i].Trim();    			repeat:    				// empty line  				if (line.Length == 0)  					continue;    				// comment  				if (comment)  				{  					int index = line.IndexOf(":)"' StringComparison.Ordinal);  					if (index < 0)  						continue;  					  					line = line.Substring(index + 2).Trim();  					comment = false;  					goto repeat;  				}  				else if (line.StartsWith("(:"' StringComparison.Ordinal))  				{  					line = line.Substring(2);  					comment = true;  					goto repeat;  				}    				var match = regex1.Match(line);  				if (!match.Success)  					break;    				var name = match.Groups[1].Value;  				var text = match.Groups[2].Value;  				match = regex2.Match(text);  				if (match.Success)  				{  					// prompt  					text = Far.Api.Input("Variable: " + name' "XPathVariable"' "Input variable");  					if (text == null)  					{  						result.Variables.Add(name' string.Empty);  						continue;  					}    					double adouble;  					if (double.TryParse(text' out adouble))  						result.Variables.Add(name' adouble);  					else  						result.Variables.Add(name' text);  					continue;  				}    				match = regex3.Match(text);  				if (!match.Success)  					throw new InvalidOperationException("declare variable: expected 'external' or ':='");    				text = match.Groups[1].Value;  				if (text.StartsWith("'"' StringComparison.Ordinal) && text.EndsWith("'"' StringComparison.Ordinal) ||  					text.StartsWith("\""' StringComparison.Ordinal) && text.EndsWith("\""' StringComparison.Ordinal))  				{  					result.Variables.Add(name' text.Substring(1' text.Length - 2));  				}  				else  				{  					double adouble;  					if (!double.TryParse(text' out adouble))  						throw new InvalidOperationException("Not supported variable value.");  					result.Variables.Add(name' adouble);  				}  			}
Magic Number,FarNet.Tools,XPathInput,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathInput.cs,Parse,The following statement contains a magic number: for (i = 0; i < lines.Length; ++i)  			{  				var line = lines[i].Trim();    			repeat:    				// empty line  				if (line.Length == 0)  					continue;    				// comment  				if (comment)  				{  					int index = line.IndexOf(":)"' StringComparison.Ordinal);  					if (index < 0)  						continue;  					  					line = line.Substring(index + 2).Trim();  					comment = false;  					goto repeat;  				}  				else if (line.StartsWith("(:"' StringComparison.Ordinal))  				{  					line = line.Substring(2);  					comment = true;  					goto repeat;  				}    				var match = regex1.Match(line);  				if (!match.Success)  					break;    				var name = match.Groups[1].Value;  				var text = match.Groups[2].Value;  				match = regex2.Match(text);  				if (match.Success)  				{  					// prompt  					text = Far.Api.Input("Variable: " + name' "XPathVariable"' "Input variable");  					if (text == null)  					{  						result.Variables.Add(name' string.Empty);  						continue;  					}    					double adouble;  					if (double.TryParse(text' out adouble))  						result.Variables.Add(name' adouble);  					else  						result.Variables.Add(name' text);  					continue;  				}    				match = regex3.Match(text);  				if (!match.Success)  					throw new InvalidOperationException("declare variable: expected 'external' or ':='");    				text = match.Groups[1].Value;  				if (text.StartsWith("'"' StringComparison.Ordinal) && text.EndsWith("'"' StringComparison.Ordinal) ||  					text.StartsWith("\""' StringComparison.Ordinal) && text.EndsWith("\""' StringComparison.Ordinal))  				{  					result.Variables.Add(name' text.Substring(1' text.Length - 2));  				}  				else  				{  					double adouble;  					if (!double.TryParse(text' out adouble))  						throw new InvalidOperationException("Not supported variable value.");  					result.Variables.Add(name' adouble);  				}  			}
Magic Number,FarNet.Tools,XPathInput,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathInput.cs,Parse,The following statement contains a magic number: for (i = 0; i < lines.Length; ++i)  			{  				var line = lines[i].Trim();    			repeat:    				// empty line  				if (line.Length == 0)  					continue;    				// comment  				if (comment)  				{  					int index = line.IndexOf(":)"' StringComparison.Ordinal);  					if (index < 0)  						continue;  					  					line = line.Substring(index + 2).Trim();  					comment = false;  					goto repeat;  				}  				else if (line.StartsWith("(:"' StringComparison.Ordinal))  				{  					line = line.Substring(2);  					comment = true;  					goto repeat;  				}    				var match = regex1.Match(line);  				if (!match.Success)  					break;    				var name = match.Groups[1].Value;  				var text = match.Groups[2].Value;  				match = regex2.Match(text);  				if (match.Success)  				{  					// prompt  					text = Far.Api.Input("Variable: " + name' "XPathVariable"' "Input variable");  					if (text == null)  					{  						result.Variables.Add(name' string.Empty);  						continue;  					}    					double adouble;  					if (double.TryParse(text' out adouble))  						result.Variables.Add(name' adouble);  					else  						result.Variables.Add(name' text);  					continue;  				}    				match = regex3.Match(text);  				if (!match.Success)  					throw new InvalidOperationException("declare variable: expected 'external' or ':='");    				text = match.Groups[1].Value;  				if (text.StartsWith("'"' StringComparison.Ordinal) && text.EndsWith("'"' StringComparison.Ordinal) ||  					text.StartsWith("\""' StringComparison.Ordinal) && text.EndsWith("\""' StringComparison.Ordinal))  				{  					result.Variables.Add(name' text.Substring(1' text.Length - 2));  				}  				else  				{  					double adouble;  					if (!double.TryParse(text' out adouble))  						throw new InvalidOperationException("Not supported variable value.");  					result.Variables.Add(name' adouble);  				}  			}
Magic Number,FarNet.Tools,XPathInput,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XPathInput.cs,Parse,The following statement contains a magic number: for (i = 0; i < lines.Length; ++i)  			{  				var line = lines[i].Trim();    			repeat:    				// empty line  				if (line.Length == 0)  					continue;    				// comment  				if (comment)  				{  					int index = line.IndexOf(":)"' StringComparison.Ordinal);  					if (index < 0)  						continue;  					  					line = line.Substring(index + 2).Trim();  					comment = false;  					goto repeat;  				}  				else if (line.StartsWith("(:"' StringComparison.Ordinal))  				{  					line = line.Substring(2);  					comment = true;  					goto repeat;  				}    				var match = regex1.Match(line);  				if (!match.Success)  					break;    				var name = match.Groups[1].Value;  				var text = match.Groups[2].Value;  				match = regex2.Match(text);  				if (match.Success)  				{  					// prompt  					text = Far.Api.Input("Variable: " + name' "XPathVariable"' "Input variable");  					if (text == null)  					{  						result.Variables.Add(name' string.Empty);  						continue;  					}    					double adouble;  					if (double.TryParse(text' out adouble))  						result.Variables.Add(name' adouble);  					else  						result.Variables.Add(name' text);  					continue;  				}    				match = regex3.Match(text);  				if (!match.Success)  					throw new InvalidOperationException("declare variable: expected 'external' or ':='");    				text = match.Groups[1].Value;  				if (text.StartsWith("'"' StringComparison.Ordinal) && text.EndsWith("'"' StringComparison.Ordinal) ||  					text.StartsWith("\""' StringComparison.Ordinal) && text.EndsWith("\""' StringComparison.Ordinal))  				{  					result.Variables.Add(name' text.Substring(1' text.Length - 2));  				}  				else  				{  					double adouble;  					if (!double.TryParse(text' out adouble))  						throw new InvalidOperationException("Not supported variable value.");  					result.Variables.Add(name' adouble);  				}  			}
Missing Default,FarNet.Tools,InteractiveEditor,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\Interactive.cs,KeyPressed,The following switch statement is missing a default case: switch (key.VirtualKeyCode)  			{  				case KeyCode.Enter:  					{  						if (key.IsShift())  							return DoInvoke();  						break;  					}  				case KeyCode.Delete:  					{  						if (key.IsShift())  						{  							DoDelete();  							return true;  						}  						break;  					}  				case KeyCode.F6:  					{  						if (key.Is())  						{  							DoHistory();  							return true;  						}  						break;  					}  			}
Missing Default,FarNet.Tools,SubsetForm,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SubsetForm.cs,OnKeyPressed,The following switch statement is missing a default case: switch (e.Key.VirtualKeyCode)  			{  				case KeyCode.UpArrow:  					if (e.Key.IsCtrl())  					{  						e.Ignore = true;  						Dialog.SetFocus(_ListBox2.Id);  						DoUp();  						return;  					}  					break;  				case KeyCode.DownArrow:  					if (e.Key.IsCtrl())  					{  						e.Ignore = true;  						Dialog.SetFocus(_ListBox2.Id);  						DoDown();  						return;  					}  					break;  				case KeyCode.Tab:  					if (Dialog.Focused == _ListBox2)  					{  						e.Ignore = true;  						Dialog.SetFocus(_ListBox1.Id);  						return;  					}  					break;  				case KeyCode.Enter:  				case KeyCode.Spacebar:  					if (Dialog.Focused == _ListBox1)  					{  						e.Ignore = true;  						DoAdd();  						return;  					}  					else if (Dialog.Focused == _ListBox2)  					{  						e.Ignore = true;  						DoRemove();  						return;  					}  					break;  			}
Missing Default,FarNet.Tools,SuperPanel,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SuperPanel.cs,UIKeyPressed,The following switch statement is missing a default case: switch (key.VirtualKeyCode)  			{  				case KeyCode.F7:    					if (key.Is())  					{  						var files = SelectedFiles;  						if (files.Count > 0)  						{  							Explorer.RemoveFiles(files);  							Update(false);  							Redraw();  						}  						return true;  					}    					break;    				case KeyCode.PageUp:    					if (key.IsCtrl())  					{  							var efile = (SuperFile)CurrentFile;  							if (efile == null)  								break;    							var panel = efile.Explorer.CreatePanel();  							panel.PostFile(efile.File);  							panel.OpenChild(this);  							return true;  					}  					  					break;  			}
Missing Default,FarNet.Tools,XPathXsltContext,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\XmlTools.cs,ResolveFunction,The following switch statement is missing a default case: switch (name)  			{  				case "compare": return new XsltFunctionCompare();  				case "equals": return new XsltFunctionEquals();  				case "is-match": return new XsltFunctionIsMatch();  #if DEBUG  				case "to-upper": return new XsltFunctionToUpper();  #endif  			}
Missing Default,Pfz.Threading,SafeAbort,C:\repos\nightroman_FarNet\FarNet\FarNet.Tools\SafeAbort.cs,AbortIfSafe,The following switch statement is missing a default case: switch (thread.ThreadState & ~(ThreadState.Suspended | ThreadState.SuspendRequested))  				{  					case ThreadState.Aborted:  					case ThreadState.Stopped:  						// The thread terminated just when we are trying to Abort it. So' we will return true to tell that the "Abort" succeeded.  						return true;  				}
