Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FarNet.Works,ConfigCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigCommand.cs,Show,Cyclomatic complexity of the method is 11
Complex Method,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,Cyclomatic complexity of the method is 14
Complex Method,FarNet.Works,ConfigUICulture,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigUICulture.cs,Show,Cyclomatic complexity of the method is 9
Complex Method,FarNet.Works.Config,SettingsUI,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\SettingsUI.cs,ShowSettings,Cyclomatic complexity of the method is 8
Long Parameter List,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,AddOption,The method has 5 parameters. Parameters: dialog' text' option' defaultOptions' currentOptions
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "CreateDialog".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddBox".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddText".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddEdit".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddText".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddEdit".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddText".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The constructor "ConfigDrawerDialog" calls a virtual method "AddButton".
Virtual Method Call from Constructor,FarNet.Works.Config,SettingsExplorer,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\SettingsExplorer.cs,SettingsExplorer,The constructor "SettingsExplorer" calls a virtual method "GetModuleManager".
Magic Number,FarNet.Works,ConfigCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigCommand.cs,Show,The following statement contains a magic number: for (; ; )  			{  				int widthName = 9; // Name  				int widthPref = 6; // Prefix  				foreach (IModuleCommand it in commands)  				{  					if (widthName < it.Name.Length)  						widthName = it.Name.Length;  					if (widthPref < it.Prefix.Length)  						widthPref = it.Prefix.Length;  				}  				string format = "{0'-" + widthPref + "} : {1'-" + widthName + "} : {2}";    				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Prefix"' "Name"' "Address")).Disabled = true;  				foreach (IModuleCommand it in commands)  					menu.Add(string.Format(null' format' it.Prefix' it.Name' it.Manager.ModuleName + "\\" + it.Id)).Data = it;    				if (!menu.Show())  					return;    				FarItem mi = menu.Items[menu.Selected];  				IModuleCommand command = (IModuleCommand)mi.Data;    				IInputBox ib = Far.Api.CreateInputBox();  				ib.EmptyEnabled = true;  				ib.HelpTopic = helpTopic;  				ib.Prompt = "Prefix";  				ib.Text = command.Prefix;  				ib.Title = command.Name;    				string prefix = null;  				while (ib.Show())  				{  					prefix = ib.Text.Trim();  					if (prefix.IndexOf(' ') >= 0 || prefix.IndexOf(':') >= 0)  					{  						Far.Api.Message("Prefix must not contain ' ' or ':'.");  						prefix = null;  						continue;  					}  					break;  				}  				if (prefix == null)  					continue;    				// reset  				command.Prefix = prefix;  				command.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigCommand,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigCommand.cs,Show,The following statement contains a magic number: for (; ; )  			{  				int widthName = 9; // Name  				int widthPref = 6; // Prefix  				foreach (IModuleCommand it in commands)  				{  					if (widthName < it.Name.Length)  						widthName = it.Name.Length;  					if (widthPref < it.Prefix.Length)  						widthPref = it.Prefix.Length;  				}  				string format = "{0'-" + widthPref + "} : {1'-" + widthName + "} : {2}";    				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Prefix"' "Name"' "Address")).Disabled = true;  				foreach (IModuleCommand it in commands)  					menu.Add(string.Format(null' format' it.Prefix' it.Name' it.Manager.ModuleName + "\\" + it.Id)).Data = it;    				if (!menu.Show())  					return;    				FarItem mi = menu.Items[menu.Selected];  				IModuleCommand command = (IModuleCommand)mi.Data;    				IInputBox ib = Far.Api.CreateInputBox();  				ib.EmptyEnabled = true;  				ib.HelpTopic = helpTopic;  				ib.Prompt = "Prefix";  				ib.Text = command.Prefix;  				ib.Title = command.Name;    				string prefix = null;  				while (ib.Show())  				{  					prefix = ib.Text.Trim();  					if (prefix.IndexOf(' ') >= 0 || prefix.IndexOf(':') >= 0)  					{  						Far.Api.Message("Prefix must not contain ' ' or ':'.");  						prefix = null;  						continue;  					}  					break;  				}  				if (prefix == null)  					continue;    				// reset  				command.Prefix = prefix;  				command.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Dialog = Far.Api.CreateDialog(-1' -1' 77' 8);
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Dialog = Far.Api.CreateDialog(-1' -1' 77' 8);
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Dialog.AddBox(3' 1' 0' 0' drawer.Name);
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: int x = 14;
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Dialog.AddText(5' -1' 0' "&Mask");
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Mask = Dialog.AddEdit(x' 0' 71' drawer.Mask);
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Dialog.AddText(5' -1' 0' "&Priority");
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Priority = Dialog.AddEdit(x' 0' 71' string.Format(null' "{0}"' drawer.Priority));
Magic Number,FarNet.Works,ConfigDrawerDialog,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigDrawer.cs,ConfigDrawerDialog,The following statement contains a magic number: Dialog.AddText(5' -1' 0' string.Empty).Separator = 1;
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,Show,The following statement contains a magic number: for (; ; )  			{  				// format  				int widthName = 9; // Name  				int widthAttr = 7; // Options  				if (sorted.Count > 0)  				{  					widthName = Math.Max(widthName' sorted.Max(x => getMenuText(x).Length));  					widthAttr = Math.Max(widthAttr' sorted.Max(x => x.Options.ToString().Length));  				}  				widthName += 3;  				string format = "{0'-" + widthName + "} : {1'-" + widthAttr + "} : {2}";    				// refill  				menu.Items.Clear();  				menu.Add(string.Format(null' format' "Title"' "Options"' "Address")).Disabled = true;  				foreach (IModuleTool it in sorted)  				{  					// 1) restore the current item' its index vary due to sorting with new hotkeys  					if (tool != null && it == tool)  						menu.Selected = menu.Items.Count;    					// 2) add the item  					menu.Add(string.Format(null' format' getMenuText(it)' it.Options' it.Manager.ModuleName + "\\" + it.Id)).Data = it;  				}    				// show  				if (!menu.Show())  					return;    				// the tool  				tool = (IModuleTool)menu.SelectedData;    				// dialog  				IDialog dialog = Far.Api.CreateDialog(-1' -1' 77' 12);  				dialog.HelpTopic = helpTopic;  				dialog.AddBox(3' 1' 0' 0' tool.Name);    				ModuleToolOptions defaultOptions = tool.DefaultOptions;  				ModuleToolOptions currentOptions = tool.Options;    				ICheckBox cbPanels = AddOption(dialog' "&Panels"' ModuleToolOptions.Panels' defaultOptions' currentOptions);  				ICheckBox cbEditor = AddOption(dialog' "&Editor"' ModuleToolOptions.Editor' defaultOptions' currentOptions);  				ICheckBox cbViewer = AddOption(dialog' "&Viewer"' ModuleToolOptions.Viewer' defaultOptions' currentOptions);  				ICheckBox cbDialog = AddOption(dialog' "&Dialog"' ModuleToolOptions.Dialog' defaultOptions' currentOptions);  				ICheckBox cbConfig = AddOption(dialog' "&Config"' ModuleToolOptions.Config' defaultOptions' currentOptions);  				ICheckBox cbDisk = AddOption(dialog' "Dis&k"' ModuleToolOptions.Disk' defaultOptions' currentOptions);    				dialog.AddText(5' -1' 0' string.Empty).Separator = 1;    				IButton buttonOK = dialog.AddButton(0' -1' "Ok");  				buttonOK.CenterGroup = true;  				dialog.Default = buttonOK;  				dialog.Cancel = dialog.AddButton(0' 0' "Cancel");  				dialog.Cancel.CenterGroup = true;    				if (!dialog.Show())  					continue;    				// new options  				ModuleToolOptions newOptions = ModuleToolOptions.None;  				if (cbPanels.Selected > 0) newOptions = newOptions | ModuleToolOptions.Panels;  				if (cbEditor.Selected > 0) newOptions = newOptions | ModuleToolOptions.Editor;  				if (cbViewer.Selected > 0) newOptions = newOptions | ModuleToolOptions.Viewer;  				if (cbDialog.Selected > 0) newOptions = newOptions | ModuleToolOptions.Dialog;  				if (cbConfig.Selected > 0) newOptions = newOptions | ModuleToolOptions.Config;  				if (cbDisk.Selected > 0) newOptions = newOptions | ModuleToolOptions.Disk;  				  				tool.Options = newOptions;  				tool.Manager.SaveSettings();  			}
Magic Number,FarNet.Works,ConfigTool,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\ConfigTool.cs,AddOption,The following statement contains a magic number: ICheckBox result = dialog.AddCheckBox(5' -1' text);
Missing Default,FarNet.Works.Config,SettingsPanel,C:\repos\nightroman_FarNet\FarNet\FarNet.Works.Config\SettingsPanel.cs,UIKeyPressed,The following switch statement is missing a default case: switch (key.VirtualKeyCode)  			{  				case KeyCode.F1:    					if (key.Is())  					{  						Far.Api.ShowHelp(Far.Api.GetType().Assembly.Location' SettingsUI.HelpSettings' HelpOptions.None);  						return true;  					}    					break;    				case KeyCode.Delete:  				case KeyCode.F8:    					SetDefaults();  					return true;  			}
