Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FarNet.Explore,Parser,C:\repos\nightroman_FarNet\Explore\Parser.cs,Tokenize,Cyclomatic complexity of the method is 13
Complex Method,FarNet.Explore,TheCommand,C:\repos\nightroman_FarNet\Explore\TheCommand.cs,Invoke,Cyclomatic complexity of the method is 9
Magic Number,FarNet.Explore,Parser,C:\repos\nightroman_FarNet\Explore\Parser.cs,Tokenize,The following statement contains a magic number: for (; ; )  			{  				int n = reader.Read();  				  				// end of text  				if (n < 0)  				{  					// error on quote  					if (quote)  						throw new InvalidOperationException("Expected '\"'' found end of text.");  					  					// add the token  					if (sb.Length > 0)  						list.Add(sb.ToString());  					  					// done  					return list;  				}    				// white space  				if (n < 33)  				{  					// quote' add the space  					if (quote)  					{  						sb.Append((char)n);  						continue;  					}    					// token started' complete  					if (sb.Length > 0)  					{  						// add the token  						var token = sb.ToString();  						list.Add(token);  						  						// the last token? add the rest of text  						foreach(var last in lasts)  						{  							if (string.Equals(token' last' StringComparison.OrdinalIgnoreCase))  							{  								list.Add(reader.ReadToEnd().Trim());  								return list;  							}  						}  						  						// reset  						sb.Length = 0;  						continue;  					}    					// skip white space  					continue;  				}    				// quote  				if (n == '"')  				{  					// started  					if (quote)  					{  						// double quote' add one  						if (reader.Peek() == '"')  						{  							sb.Append('"');  							reader.Read();  							continue;  						}    						// single' stop quote' add token  						quote = false;  						list.Add(sb.ToString());  						sb.Length = 0;  						continue;  					}    					// start quote  					quote = true;  					continue;  				}    				// add the char  				sb.Append((char)n);  			}
Missing Default,FarNet.Explore,TheCommand,C:\repos\nightroman_FarNet\Explore\TheCommand.cs,Invoke,The following switch statement is missing a default case: switch (parameter)  				{  					case "-XPath":  						{  							search.XPath = tokens[iToken + 1];  							if (search.XPath.Length == 0)  								throw new ModuleException("Invalid -XPath.");  							iToken = tokens.Count;  							break;  						}  					case "-XFile":  						{  							if (++iToken >= token.Length) throw new ModuleException("Invalid -XFile.");  							search.XFile = tokens[iToken];  							break;  						}  					case "-Depth":  						{  							if (++iToken >= token.Length) throw new ModuleException("Invalid -Depth.");  							search.Depth = int.Parse(tokens[iToken]);  							break;  						}  					case "-Directory":  						{  							search.Directory = true;  							break;  						}  					case "-Recurse":  						{  							search.Recurse = true;  							break;  						}  					case "-Asynchronous":  						{  							async = true;  							break;  						}  				}
