Implementation smell,Namespace,Class,File,Method,Description
Long Method,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,The method has 130 lines of code.
Complex Method,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,Cyclomatic complexity of the method is 21
Complex Method,SoundInTheory.DynamicImage.Util,ColorExtensionMethods,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\ColorExtensionMethods.cs,GetHue,Cyclomatic complexity of the method is 8
Long Parameter List,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The method has 6 parameters. Parameters: x' y' nw' ne' sw' se
Long Parameter List,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The method has 6 parameters. Parameters: x' y' nw' ne' sw' se
Long Parameter List,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,FilterPixelsNearestNeighbor,The method has 5 parameters. Parameters: source' destination' width' height' transformedSpace
Long Parameter List,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,FilterPixelsBilinear,The method has 5 parameters. Parameters: source' destination' width' height' transformedSpace
Long Parameter List,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,GetPixel,The method has 5 parameters. Parameters: bitmap' x' y' width' height
Long Parameter List,SoundInTheory.DynamicImage.Filters,ResizeFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ResizeFilter.cs,CalculateOutputDimensions,The method has 6 parameters. Parameters: nInputWidth' nInputHeight' nRequestedWidth' nRequestedHeight' nOutputWidth' nOutputHeight
Long Parameter List,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,CreateSpline,The method has 6 parameters. Parameters: pts' tension' tensions' isClosed' isFilled' tolerance
Long Parameter List,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The method has 8 parameters. Parameters: points' pt0' pt1' pt2' pt3' T1' T2' tolerance
Long Parameter List,SoundInTheory.DynamicImage.Util,ObjectExtensionMethods,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\Object.extensions.cs,SetValue,The method has 5 parameters. Parameters: parentObject' hierarchicalPropertyName' value' separator' ignoreCase
Long Statement,SoundInTheory.DynamicImage,DynamicImageModule,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\DynamicImageModule.cs,OnContextPostAuthorizeRequest,The length of the statement  "			if (!string.IsNullOrEmpty(app.Context.Request.Path) && VirtualPathUtility.ToAppRelative(app.Context.Request.Path).StartsWith("~/Assets/Images/DynamicImages/"' StringComparison.InvariantCultureIgnoreCase)) " is 204.
Long Statement,SoundInTheory.DynamicImage.Caching,DiskCacheProviderBase,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Caching\DiskCacheProviderBase.cs,GetDiskCacheFilePath,The length of the statement  "				throw new InvalidOperationException("HttpContext.Current is null; SqlCacheProviderBase only supports being run within the context of a web request."); " is 150.
Long Statement,SoundInTheory.DynamicImage.Caching,DiskCacheProviderBase,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Caching\DiskCacheProviderBase.cs,SaveImageToDiskCache,The length of the statement  "			string filePath = httpContext.Server.MapPath(GetDiskCacheFilePath(httpContext' cacheKey' generatedImage.Properties.FileExtension)); " is 131.
Long Statement,SoundInTheory.DynamicImage.Caching,DiskCacheProviderBase,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Caching\DiskCacheProviderBase.cs,DeleteImageFromDiskCache,The length of the statement  "			string filePath = httpContext.Server.MapPath(GetDiskCacheFilePath(httpContext' cacheKey' imageProperties.FileExtension)); " is 121.
Long Statement,SoundInTheory.DynamicImage.Caching,XmlCacheProvider,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Caching\XmlCacheProvider.cs,GetImageProperties,The length of the statement  "			imageProperties.Format = (DynamicImageFormat)Enum.Parse(typeof(DynamicImageFormat)' itemElement.Attribute("format").Value); " is 123.
Long Statement,SoundInTheory.DynamicImage.Filters,CurvesAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\CurvesAdjustmentFilter.cs,GetEffect,The length of the statement  "					curvesLookup[x' y] = Color.FromRgb((byte) CubicSplineUtility.InterpolateSpline(xValues' yValues' derivatives' y)' 0' 0); " is 120.
Long Statement,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The length of the statement  "					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2)); " is 139.
Long Statement,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The length of the statement  "					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2); " is 171.
Long Statement,SoundInTheory.DynamicImage.Filters,ShinyFloorFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ShinyFloorFilter.cs,ApplyFilter,The length of the statement  "			dc.DrawImage(new CroppedBitmap(source.InnerBitmap' new Int32Rect(0' source.Height - reflectionHeight' source.Width' reflectionHeight))' " is 135.
Long Statement,SoundInTheory.DynamicImage.Sources,SqlDatabaseImageSource,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Sources\SqlDatabaseImageSource.cs,GetBitmap,The length of the statement  "					throw new InvalidOperationException(string.Format("Expected object of type '{0}' but found object of type '{1}'"' typeof(byte[]).FullName' value.GetType().FullName)); " is 166.
Long Statement,SoundInTheory.DynamicImage.Util,CubicSplineUtility,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CubicSplineUtility.cs,InterpolateSpline,The length of the statement  "			return a * y[klo] + b * y[khi] + ((a * a * a - a) * derivatives[klo] + (b * b * b - b) * derivatives[khi]) * (h * h) / 6.0f; " is 124.
Long Statement,SoundInTheory.DynamicImage.Util,ObjectExtensionMethods,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\Object.extensions.cs,SetValue,The length of the statement  "			string[] propertyNames = hierarchicalPropertyName.Split(new string[] { separator }' StringSplitOptions.RemoveEmptyEntries); " is 123.
Long Statement,SoundInTheory.DynamicImage.Util,ObjectExtensionMethods,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\Object.extensions.cs,SetValue,The length of the statement  "			BindingFlags propertySearchBindingFlags = ((ignoreCase) ? BindingFlags.IgnoreCase : BindingFlags.Default) | BindingFlags.Instance | BindingFlags.Public; " is 152.
Long Statement,SoundInTheory.DynamicImage.Util,ObjectExtensionMethods,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\Object.extensions.cs,SetValue,The length of the statement  "					throw new Exception(string.Format("Could not find property '{0}' on object of type '{1}'"' propertyNames[i]' currentObject.GetType().FullName)); " is 144.
Complex Conditional,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,Unit,The conditional expression  "((ch < '0') || (ch > '9')) && (((ch != '-') && (ch != '.')) && (ch != '''))"  is complex.
Complex Conditional,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,FilterPixelsNearestNeighbor,The conditional expression  "output.X < 0 || srcX >= srcWidth || output.Y < 0 || srcY >= srcHeight"  is complex.
Complex Conditional,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,FilterPixelsBilinear,The conditional expression  "srcX >= 0 && srcX < srcWidth1 && srcY >= 0 && srcY < srcHeight1"  is complex.
Complex Conditional,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,GetPixel,The conditional expression  "x < 0 || x >= width || y < 0 || y >= height"  is complex.
Empty Catch Block,SoundInTheory.DynamicImage,DynamicImageModule,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\DynamicImageModule.cs,SetHeaders,The method has an empty catch block.
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: float h = (hsv.H / 255.0f * 360.0f) % 360;
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: if (s == 0)  			{  				// If s is 0' all colors are the same.  				// This is some flavor of gray.  				r = v;  				g = v;  				b = v;  			}  			else  			{  				// The color wheel consists of 6 sectors.  				// Figure out which sector you're in.  				float sectorPos = h / 60.0f;  				int sectorNumber = (int) Math.Floor(sectorPos);    				// Get the fractional part of the sector.  				// That is' how many degrees into the sector  				// are you?  				float fractionalSector = sectorPos - sectorNumber;    				// Calculate values for the three axes  				// of the color.   				float p = v * (1 - s);  				float q = v * (1 - (s * fractionalSector));  				float t = v * (1 - (s * (1 - fractionalSector)));    				// Assign the fractional colors to r' g' and b  				// based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = v;  						b = p;  						break;  					case 2:  						r = p;  						g = v;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = v;  						break;  					case 4:  						r = t;  						g = p;  						b = v;  						break;  					case 5:  						r = v;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: if (s == 0)  			{  				// If s is 0' all colors are the same.  				// This is some flavor of gray.  				r = v;  				g = v;  				b = v;  			}  			else  			{  				// The color wheel consists of 6 sectors.  				// Figure out which sector you're in.  				float sectorPos = h / 60.0f;  				int sectorNumber = (int) Math.Floor(sectorPos);    				// Get the fractional part of the sector.  				// That is' how many degrees into the sector  				// are you?  				float fractionalSector = sectorPos - sectorNumber;    				// Calculate values for the three axes  				// of the color.   				float p = v * (1 - s);  				float q = v * (1 - (s * fractionalSector));  				float t = v * (1 - (s * (1 - fractionalSector)));    				// Assign the fractional colors to r' g' and b  				// based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = v;  						b = p;  						break;  					case 2:  						r = p;  						g = v;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = v;  						break;  					case 4:  						r = t;  						g = p;  						b = v;  						break;  					case 5:  						r = v;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: if (s == 0)  			{  				// If s is 0' all colors are the same.  				// This is some flavor of gray.  				r = v;  				g = v;  				b = v;  			}  			else  			{  				// The color wheel consists of 6 sectors.  				// Figure out which sector you're in.  				float sectorPos = h / 60.0f;  				int sectorNumber = (int) Math.Floor(sectorPos);    				// Get the fractional part of the sector.  				// That is' how many degrees into the sector  				// are you?  				float fractionalSector = sectorPos - sectorNumber;    				// Calculate values for the three axes  				// of the color.   				float p = v * (1 - s);  				float q = v * (1 - (s * fractionalSector));  				float t = v * (1 - (s * (1 - fractionalSector)));    				// Assign the fractional colors to r' g' and b  				// based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = v;  						b = p;  						break;  					case 2:  						r = p;  						g = v;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = v;  						break;  					case 4:  						r = t;  						g = p;  						b = v;  						break;  					case 5:  						r = v;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: if (s == 0)  			{  				// If s is 0' all colors are the same.  				// This is some flavor of gray.  				r = v;  				g = v;  				b = v;  			}  			else  			{  				// The color wheel consists of 6 sectors.  				// Figure out which sector you're in.  				float sectorPos = h / 60.0f;  				int sectorNumber = (int) Math.Floor(sectorPos);    				// Get the fractional part of the sector.  				// That is' how many degrees into the sector  				// are you?  				float fractionalSector = sectorPos - sectorNumber;    				// Calculate values for the three axes  				// of the color.   				float p = v * (1 - s);  				float q = v * (1 - (s * fractionalSector));  				float t = v * (1 - (s * (1 - fractionalSector)));    				// Assign the fractional colors to r' g' and b  				// based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = v;  						b = p;  						break;  					case 2:  						r = p;  						g = v;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = v;  						break;  					case 4:  						r = t;  						g = p;  						b = v;  						break;  					case 5:  						r = v;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: return Color.FromRgb((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: return Color.FromRgb((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following statement contains a magic number: return Color.FromRgb((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,The following statement contains a magic number: foreach (Layer layer in this.VisibleLayers)  			{  				if (layer.Bitmap != null && layer.Anchor != AnchorStyles.None)  				{  					// Set X.  					switch (layer.Anchor)  					{  						case AnchorStyles.BottomCenter :  						case AnchorStyles.MiddleCenter :  						case AnchorStyles.TopCenter :  							layer.X = (outputWidth - layer.Size.Value.Width) / 2;  							break;  						case AnchorStyles.BottomLeft :  						case AnchorStyles.MiddleLeft :  						case AnchorStyles.TopLeft :  							layer.X = layer.AnchorPadding;  							break;  						case AnchorStyles.BottomRight:  						case AnchorStyles.MiddleRight:  						case AnchorStyles.TopRight:  							layer.X = outputWidth - layer.Size.Value.Width - layer.AnchorPadding;  							break;  					}    					// Set Y.  					switch (layer.Anchor)  					{  						case AnchorStyles.BottomCenter:  						case AnchorStyles.BottomLeft:  						case AnchorStyles.BottomRight:  							layer.Y = outputHeight - layer.Size.Value.Height - layer.AnchorPadding;  							break;  						case AnchorStyles.MiddleCenter:  						case AnchorStyles.MiddleLeft:  						case AnchorStyles.MiddleRight:  							layer.Y = (outputHeight - layer.Size.Value.Height) / 2;  							break;  						case AnchorStyles.TopCenter:  						case AnchorStyles.TopLeft:  						case AnchorStyles.TopRight:  							layer.Y = layer.AnchorPadding;  							break;  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,The following statement contains a magic number: foreach (Layer layer in this.VisibleLayers)  			{  				if (layer.Bitmap != null && layer.Anchor != AnchorStyles.None)  				{  					// Set X.  					switch (layer.Anchor)  					{  						case AnchorStyles.BottomCenter :  						case AnchorStyles.MiddleCenter :  						case AnchorStyles.TopCenter :  							layer.X = (outputWidth - layer.Size.Value.Width) / 2;  							break;  						case AnchorStyles.BottomLeft :  						case AnchorStyles.MiddleLeft :  						case AnchorStyles.TopLeft :  							layer.X = layer.AnchorPadding;  							break;  						case AnchorStyles.BottomRight:  						case AnchorStyles.MiddleRight:  						case AnchorStyles.TopRight:  							layer.X = outputWidth - layer.Size.Value.Width - layer.AnchorPadding;  							break;  					}    					// Set Y.  					switch (layer.Anchor)  					{  						case AnchorStyles.BottomCenter:  						case AnchorStyles.BottomLeft:  						case AnchorStyles.BottomRight:  							layer.Y = outputHeight - layer.Size.Value.Height - layer.AnchorPadding;  							break;  						case AnchorStyles.MiddleCenter:  						case AnchorStyles.MiddleLeft:  						case AnchorStyles.MiddleRight:  							layer.Y = (outputHeight - layer.Size.Value.Height) / 2;  							break;  						case AnchorStyles.TopCenter:  						case AnchorStyles.TopLeft:  						case AnchorStyles.TopRight:  							layer.Y = layer.AnchorPadding;  							break;  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,The following statement contains a magic number: if (ImageFormat == DynamicImageFormat.Bmp || ImageFormat == DynamicImageFormat.Jpeg)  			{  				output.Lock();  				for (int y = 0; y < output.Height; ++y)  					for (int x = 0; x < output.Width; ++x)  					{  						Color c = output[x' y];  						//if (output[x' y].A == 0 && output[x' y].R == 0 && output[x' y].G == 0 && output[x' y].B == 0)  						output[x' y] = Color.FromArgb(255' c.R' c.G' c.B);  					}  				output.Unlock();  			}
Magic Number,SoundInTheory.DynamicImage,DynamicImageModule,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\DynamicImageModule.cs,HandleRequest,The following statement contains a magic number: if (config != null && config.BrowserCaching != null && config.BrowserCaching.Enabled)  			{  				DateTime tempDate = DynamicImageCacheManager.GetImageLastModifiedDate(context' cacheProviderKey' fileExtension);  				DateTime lastModifiedDate = new DateTime(tempDate.Year' tempDate.Month' tempDate.Day' tempDate.Hour' tempDate.Minute'  					tempDate.Second' 0); // This code copied from System.Web.StaticFileHandler.ProcessRequestInternal  				DateTime now = DateTime.Now;  				if (lastModifiedDate > now)  					lastModifiedDate = new DateTime(now.Ticks - (now.Ticks % 0x989680L));    				string eTag = GenerateETag(lastModifiedDate' now);    				context.Items["BrowserCachingEnabled"] = true;  				context.Items["ContentExpires"] = now.Add(config.BrowserCaching.Duration);  				context.Items["ContentETag"] = eTag;    				// Check if we actually need to send back the image.  				if (!IsImageModified(context' lastModifiedDate' eTag))  				{  					//context.Response.SuppressContent = true;  					context.Response.StatusCode = 304;  					context.Response.StatusDescription = "Not Modified";    					// Explicitly set the Content-Length header so the client doesn't wait for  					// content but keeps the connection open for other requests  					context.Response.AddHeader("Content-Length"' "0");    					SetHeaders(context);    					context.Response.End();    					return;  				}  			}
Magic Number,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,Unit,The following statement contains a magic number: if (value < -32768 || value > 0x7fff)  				throw new ArgumentOutOfRangeException("value");
Magic Number,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,Unit,The following statement contains a magic number: if (string.IsNullOrEmpty(value))  			{  				_value = 0.0f;  				_type = (UnitType) 0;  			}  			else  			{  				if (culture == null)  					culture = CultureInfo.CurrentCulture;    				string str = value.Trim().ToLower(CultureInfo.InvariantCulture);  				int length = str.Length;  				int num2 = -1;  				for (int i = 0; i < length; i++)  				{  					char ch = str[i];  					if (((ch < '0') || (ch > '9')) && (((ch != '-') && (ch != '.')) && (ch != ''')))  						break;  					num2 = i;  				}  				if (num2 == -1)  					throw new FormatException(string.Format("'{0}' cannot be parsed as a unit as there are no numeric values in it. Examples of valid unit strings are '30px' and '50%'."' value));    				if (num2 < (length - 1))  					_type = GetTypeFromString(str.Substring(num2 + 1).Trim());  				else  					_type = defaultType;    				string text = str.Substring(0' num2 + 1);  				try  				{  					TypeConverter converter = new SingleConverter();  					_value = (float) converter.ConvertFromString(null' culture' text);  					if (_type == UnitType.Pixel)  						_value = (int) _value;  				}  				catch  				{  					throw new FormatException(string.Format("The numeric part ('{1}') of '{0}' cannot be parsed as a numeric part of a {2} unit."' value' text' _type.ToString("G")));  				}    				if ((_value < -32768.0) || (_value > 32767.0))  					throw new ArgumentOutOfRangeException("value");  			}
Magic Number,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,Unit,The following statement contains a magic number: if (string.IsNullOrEmpty(value))  			{  				_value = 0.0f;  				_type = (UnitType) 0;  			}  			else  			{  				if (culture == null)  					culture = CultureInfo.CurrentCulture;    				string str = value.Trim().ToLower(CultureInfo.InvariantCulture);  				int length = str.Length;  				int num2 = -1;  				for (int i = 0; i < length; i++)  				{  					char ch = str[i];  					if (((ch < '0') || (ch > '9')) && (((ch != '-') && (ch != '.')) && (ch != ''')))  						break;  					num2 = i;  				}  				if (num2 == -1)  					throw new FormatException(string.Format("'{0}' cannot be parsed as a unit as there are no numeric values in it. Examples of valid unit strings are '30px' and '50%'."' value));    				if (num2 < (length - 1))  					_type = GetTypeFromString(str.Substring(num2 + 1).Trim());  				else  					_type = defaultType;    				string text = str.Substring(0' num2 + 1);  				try  				{  					TypeConverter converter = new SingleConverter();  					_value = (float) converter.ConvertFromString(null' culture' text);  					if (_type == UnitType.Pixel)  						_value = (int) _value;  				}  				catch  				{  					throw new FormatException(string.Format("The numeric part ('{1}') of '{0}' cannot be parsed as a numeric part of a {2} unit."' value' text' _type.ToString("G")));  				}    				if ((_value < -32768.0) || (_value > 32767.0))  					throw new ArgumentOutOfRangeException("value");  			}
Magic Number,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,GetCalculatedValue,The following statement contains a magic number: switch (dimension.Type)  			{  				case UnitType.Pixel:  					return (int)dimension.Value;  				case UnitType.Percentage:  					return (int)((dimension.Value / 100.0) * sourceDimension);  				default:  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return (_value.GetHashCode() * 397) ^ _type.GetHashCode();  			}
Magic Number,SoundInTheory.DynamicImage.Caching,DiskCacheProviderBase,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Caching\DiskCacheProviderBase.cs,GetDiskCacheFilePath,The following statement contains a magic number: string cachePathWithHash = CachePath + "/" + cacheProviderKey.Substring(0' 2);
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,CreateImage,The following statement contains a magic number: Rect bounds = new Rect(StrokeWidth / 2' StrokeWidth / 2'  				CalculatedWidth - StrokeWidth'  				CalculatedHeight - StrokeWidth);
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,CreateImage,The following statement contains a magic number: Rect bounds = new Rect(StrokeWidth / 2' StrokeWidth / 2'  				CalculatedWidth - StrokeWidth'  				CalculatedHeight - StrokeWidth);
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,CreateImage,The following statement contains a magic number: PathGeometry geometry = CanonicalSplineHelper.CreateSpline(points' Roundness / 100.0' null' true' true' 0.25);
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,CreateImage,The following statement contains a magic number: PathGeometry geometry = CanonicalSplineHelper.CreateSpline(points' Roundness / 100.0' null' true' true' 0.25);
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,GetPoints,The following statement contains a magic number: double deltaAngle = (Math.PI * 2) / Sides;
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,GetPoints,The following statement contains a magic number: double halfWidth = bounds.Width / 2;
Magic Number,SoundInTheory.DynamicImage.Layers,PolygonShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\PolygonShapeLayer.cs,GetPoints,The following statement contains a magic number: double halfHeight = bounds.Height / 2;
Magic Number,SoundInTheory.DynamicImage.Layers,MandelbrotFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\MandelbrotFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: for (i = 0; i < MaxIterations; i++)  			{  				// Remember value of previous iteration.  				float oldRe = newRe;  				float oldIm = newIm;    				// Calculate real and imaginary parts.  				newRe = oldRe * oldRe - oldIm * oldIm + pr;  				newIm = 2.0f * oldRe * oldIm + pi;    				// If the point is outside the circle with radius 2' stop.  				if ((newRe * newRe + newIm * newIm) > 4)  					break;  			}
Magic Number,SoundInTheory.DynamicImage.Layers,MandelbrotFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\MandelbrotFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: return new ColorHsv { H = i % 256' S = 255' V = 255 * ((i < this.MaxIterations) ? 1 : 0) };
Magic Number,SoundInTheory.DynamicImage.Layers,MandelbrotFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\MandelbrotFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: return new ColorHsv { H = i % 256' S = 255' V = 255 * ((i < this.MaxIterations) ? 1 : 0) };
Magic Number,SoundInTheory.DynamicImage.Layers,MandelbrotFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\MandelbrotFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: return new ColorHsv { H = i % 256' S = 255' V = 255 * ((i < this.MaxIterations) ? 1 : 0) };
Magic Number,SoundInTheory.DynamicImage.Layers,JuliaFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\JuliaFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: for (i = 0; i < MaxIterations; i++)  			{  				// Remember value of previous iteration.  				float oldRe = newRe;  				float oldIm = newIm;    				// Calculate real and imaginary parts.  				newRe = oldRe * oldRe - oldIm * oldIm + this.ConstantReal;  				newIm = 2.0f * oldRe * oldIm + this.ConstantImaginary;    				// If the point is outside the circle with radius 2' stop.  				if ((newRe * newRe + newIm * newIm) > 4)  					break;  			}
Magic Number,SoundInTheory.DynamicImage.Layers,JuliaFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\JuliaFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: return new ColorHsv { H = i % 256' S = 255' V = 255 * ((i < this.MaxIterations) ? 1 : 0) };
Magic Number,SoundInTheory.DynamicImage.Layers,JuliaFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\JuliaFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: return new ColorHsv { H = i % 256' S = 255' V = 255 * ((i < this.MaxIterations) ? 1 : 0) };
Magic Number,SoundInTheory.DynamicImage.Layers,JuliaFractalLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\JuliaFractalLayer.cs,CalculateFractalColour,The following statement contains a magic number: return new ColorHsv { H = i % 256' S = 255' V = 255 * ((i < this.MaxIterations) ? 1 : 0) };
Magic Number,SoundInTheory.DynamicImage.Layers,RectangleShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\RectangleShapeLayer.cs,CreateImage,The following statement contains a magic number: Rect bounds = new Rect(StrokeWidth / 2' StrokeWidth / 2'  				CalculatedWidth - StrokeWidth'  				CalculatedHeight - StrokeWidth);
Magic Number,SoundInTheory.DynamicImage.Layers,RectangleShapeLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\RectangleShapeLayer.cs,CreateImage,The following statement contains a magic number: Rect bounds = new Rect(StrokeWidth / 2' StrokeWidth / 2'  				CalculatedWidth - StrokeWidth'  				CalculatedHeight - StrokeWidth);
Magic Number,SoundInTheory.DynamicImage.Layers,TextLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\TextLayer.cs,CalculateHorizontalPosition,The following statement contains a magic number: switch (HorizontalTextAlignment)  			{  				case TextAlignment.Left:  				case TextAlignment.Justify :  					return 0;  				case TextAlignment.Right:  					if (Width != null)  						return Width.Value - measuredWidth;  					return 0;  				case TextAlignment.Center :  					if (Width != null)  						return (Width.Value - measuredWidth) / 2;  					return 0;  				default:  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Layers,TextLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\TextLayer.cs,CalculateVerticalPosition,The following statement contains a magic number: switch (VerticalTextAlignment)  			{  				case VerticalAlignment.Top :  					return 0;  				case VerticalAlignment.Bottom :  					if (Height != null)  						return Height.Value - measuredHeight;  					return 0;  				case VerticalAlignment.Center :  					if (Height != null)  						return (Height.Value - measuredHeight) / 2;  					return 0;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Layers,VideoLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\VideoLayer.cs,CreateImage,The following statement contains a magic number: Monitor.Wait(monitorObject' 1000);
Magic Number,SoundInTheory.DynamicImage.Layers,VideoLayer,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Layers\VideoLayer.cs,CreateImage,The following statement contains a magic number: Monitor.Wait(monitorObject' 1000);
Magic Number,SoundInTheory.DynamicImage.Filters,ColorKeyFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ColorKeyFilter.cs,GetEffect,The following statement contains a magic number: return new ColorKeyEffect  			{  				ColorTolerance = ColorTolerance / 255.0'  				TransparentColor = transparentColor  			};
Magic Number,SoundInTheory.DynamicImage.Filters,BorderFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\BorderFilter.cs,GetDestinationDimensions,The following statement contains a magic number: width = source.Width + Width * 2;
Magic Number,SoundInTheory.DynamicImage.Filters,BorderFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\BorderFilter.cs,GetDestinationDimensions,The following statement contains a magic number: height = source.Height + Width * 2;
Magic Number,SoundInTheory.DynamicImage.Filters,RoundCornersFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RoundCornersFilter.cs,GetDestinationDimensions,The following statement contains a magic number: width = source.Width + BorderWidth * 2;
Magic Number,SoundInTheory.DynamicImage.Filters,RoundCornersFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RoundCornersFilter.cs,GetDestinationDimensions,The following statement contains a magic number: height = source.Height + BorderWidth * 2;
Magic Number,SoundInTheory.DynamicImage.Filters,RoundCornersFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RoundCornersFilter.cs,ApplyFilter,The following statement contains a magic number: dc.DrawRoundedRectangle(null' new Pen(new SolidColorBrush(BorderColor)' BorderWidth)'  				new Rect(BorderWidth / 2.0' BorderWidth / 2.0' width - BorderWidth' height - BorderWidth)'  				Roundness' Roundness);
Magic Number,SoundInTheory.DynamicImage.Filters,RoundCornersFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RoundCornersFilter.cs,ApplyFilter,The following statement contains a magic number: dc.DrawRoundedRectangle(null' new Pen(new SolidColorBrush(BorderColor)' BorderWidth)'  				new Rect(BorderWidth / 2.0' BorderWidth / 2.0' width - BorderWidth' height - BorderWidth)'  				Roundness' Roundness);
Magic Number,SoundInTheory.DynamicImage.Filters,TransferFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransferFilter.cs,GetEffect,The following statement contains a magic number: FastBitmap transferLookup = new FastBitmap(1' 256);
Magic Number,SoundInTheory.DynamicImage.Filters,TransferFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransferFilter.cs,GetEffect,The following statement contains a magic number: for (int y = 0; y < 256; ++y)  			{  				byte colorComponent = (byte) (255 * GetTransferFunctionValue(y / 255.0f));  				transferLookup[0' y] = Color.FromRgb(colorComponent' colorComponent' colorComponent);  			}
Magic Number,SoundInTheory.DynamicImage.Filters,TransferFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransferFilter.cs,GetEffect,The following statement contains a magic number: for (int y = 0; y < 256; ++y)  			{  				byte colorComponent = (byte) (255 * GetTransferFunctionValue(y / 255.0f));  				transferLookup[0' y] = Color.FromRgb(colorComponent' colorComponent' colorComponent);  			}
Magic Number,SoundInTheory.DynamicImage.Filters,SolarizeFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\SolarizeFilter.cs,GetTransferFunctionValue,The following statement contains a magic number: return (value > 0.5f) ? 2 * (value - 0.5f) : 2 * (0.5f - value);
Magic Number,SoundInTheory.DynamicImage.Filters,SolarizeFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\SolarizeFilter.cs,GetTransferFunctionValue,The following statement contains a magic number: return (value > 0.5f) ? 2 * (value - 0.5f) : 2 * (0.5f - value);
Magic Number,SoundInTheory.DynamicImage.Filters,CurvesAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\CurvesAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: if (curves.Count < 4)  				throw new DynamicImageException(  					"At least 4 curves (corresponding to Composite' Red' Green' Blue) must be specified.");
Magic Number,SoundInTheory.DynamicImage.Filters,CurvesAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\CurvesAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: FastBitmap curvesLookup = new FastBitmap(4' 256);
Magic Number,SoundInTheory.DynamicImage.Filters,CurvesAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\CurvesAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: FastBitmap curvesLookup = new FastBitmap(4' 256);
Magic Number,SoundInTheory.DynamicImage.Filters,CurvesAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\CurvesAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: for (int x = 0; x < 4; ++x)  			{  				IEnumerable<CurvePoint> points = curves[x].Points.Cast<CurvePoint>();  				float[] xValues = points.Select(p => (float) p.Input).ToArray();  				float[] yValues = points.Select(p => (float) p.Output).ToArray();  				float[] derivatives = CubicSplineUtility.CalculateSpline(xValues' yValues);  				for (int y = 0; y < 256; ++y)  					curvesLookup[x' y] = Color.FromRgb((byte) CubicSplineUtility.InterpolateSpline(xValues' yValues' derivatives' y)' 0' 0);  			}
Magic Number,SoundInTheory.DynamicImage.Filters,CurvesAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\CurvesAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: for (int x = 0; x < 4; ++x)  			{  				IEnumerable<CurvePoint> points = curves[x].Points.Cast<CurvePoint>();  				float[] xValues = points.Select(p => (float) p.Input).ToArray();  				float[] yValues = points.Select(p => (float) p.Output).ToArray();  				float[] derivatives = CubicSplineUtility.CalculateSpline(xValues' yValues);  				for (int y = 0; y < 256; ++y)  					curvesLookup[x' y] = Color.FromRgb((byte) CubicSplineUtility.InterpolateSpline(xValues' yValues' derivatives' y)' 0' 0);  			}
Magic Number,SoundInTheory.DynamicImage.Filters,UnsharpMaskFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\UnsharpMaskFilter.cs,GetEffect,The following statement contains a magic number: return new UnsharpMaskEffect  			{  				BlurMask = blurredImage'  				Amount = Amount / 100.0'  				Threshold = Threshold  			};
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: gradientStops.Add(new GradientStop(Color.FromArgb(0' 0' 0' 0)' 0.5));
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: gradientStops.Add(new GradientStop(Color.FromArgb(180' 0' 0' 0)' 1.3));
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: gradientStops.Add(new GradientStop(Color.FromArgb(180' 0' 0' 0)' 1.3));
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: gradientStops.Add(new GradientStop(Color.FromArgb(230' 0' 0' 0)' 1.7));
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: gradientStops.Add(new GradientStop(Color.FromArgb(230' 0' 0' 0)' 1.7));
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: RadialGradientBrush brush = new RadialGradientBrush(gradientStops)  			{  				GradientOrigin = new Point(0.5' 0.5)'  				Center = new Point(0.5' 0.45)'  				RadiusX = 0.5'  				RadiusY = 0.5  			};
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: RadialGradientBrush brush = new RadialGradientBrush(gradientStops)  			{  				GradientOrigin = new Point(0.5' 0.5)'  				Center = new Point(0.5' 0.45)'  				RadiusX = 0.5'  				RadiusY = 0.5  			};
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: RadialGradientBrush brush = new RadialGradientBrush(gradientStops)  			{  				GradientOrigin = new Point(0.5' 0.5)'  				Center = new Point(0.5' 0.45)'  				RadiusX = 0.5'  				RadiusY = 0.5  			};
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: RadialGradientBrush brush = new RadialGradientBrush(gradientStops)  			{  				GradientOrigin = new Point(0.5' 0.5)'  				Center = new Point(0.5' 0.45)'  				RadiusX = 0.5'  				RadiusY = 0.5  			};
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: RadialGradientBrush brush = new RadialGradientBrush(gradientStops)  			{  				GradientOrigin = new Point(0.5' 0.5)'  				Center = new Point(0.5' 0.45)'  				RadiusX = 0.5'  				RadiusY = 0.5  			};
Magic Number,SoundInTheory.DynamicImage.Filters,VignetteFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\VignetteFilter.cs,ApplyFilter,The following statement contains a magic number: RadialGradientBrush brush = new RadialGradientBrush(gradientStops)  			{  				GradientOrigin = new Point(0.5' 0.5)'  				Center = new Point(0.5' 0.45)'  				RadiusX = 0.5'  				RadiusY = 0.5  			};
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int a0 = (nw >> 24) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int r0 = (nw >> 16) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int g0 = (nw >> 8) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int a1 = (ne >> 24) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int r1 = (ne >> 16) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int g1 = (ne >> 8) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int a2 = (sw >> 24) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int r2 = (sw >> 16) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int g2 = (sw >> 8) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int a3 = (se >> 24) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int r3 = (se >> 16) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: int g3 = (se >> 8) & 0xff;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: return (a << 24) | (r << 16) | (g << 8) | b;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: return (a << 24) | (r << 16) | (g << 8) | b;
Magic Number,SoundInTheory.DynamicImage.Filters,ImageMath,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ImageMath.cs,BilinearInterpolate,The following statement contains a magic number: return (a << 24) | (r << 16) | (g << 8) | b;
Magic Number,SoundInTheory.DynamicImage.Filters,OuterGlowFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\OuterGlowFilter.cs,GetPadding,The following statement contains a magic number: return new Vector(Size * 2' Size * 2);
Magic Number,SoundInTheory.DynamicImage.Filters,OuterGlowFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\OuterGlowFilter.cs,GetPadding,The following statement contains a magic number: return new Vector(Size * 2' Size * 2);
Magic Number,SoundInTheory.DynamicImage.Filters,ColorTintFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ColorTintFilter.cs,GetEffect,The following statement contains a magic number: return new ColorTintEffect  			{  				Amount = Amount/100.0'  				RequiredColor = Color  			};
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,FeatherFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\FeatherFilter.cs,GetEffect,The following statement contains a magic number: switch (Shape)  			{  				case FeatherShape.Rectangle :  					dc.DrawRectangle(new SolidColorBrush(Colors.White)' null' new Rect(Radius' Radius' source.Width - Radius * 2' source.Height - Radius * 2));  					break;  				case FeatherShape.Oval :  					dc.DrawEllipse(new SolidColorBrush(Colors.White)' null' new Point(source.Width / 2.0' source.Height / 2.0)' source.Width / 2 - Radius * 2' source.Height / 2 - Radius * 2);  					break;  				default :  					throw new NotSupportedException();  			}
Magic Number,SoundInTheory.DynamicImage.Filters,DropShadowFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\DropShadowFilter.cs,GetOffsetSize,The following statement contains a magic number: float radians = MathUtility.ToRadians(Angle + 180);
Magic Number,SoundInTheory.DynamicImage.Filters,BrightnessAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\BrightnessAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: return new BrightnessAdjustmentEffect  			{  				Level = this.Level/100.0  			};
Magic Number,SoundInTheory.DynamicImage.Filters,ContrastAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ContrastAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: return new ContrastAdjustmentEffect  			{  				Level = (Level + 100) / 40.0  			};
Magic Number,SoundInTheory.DynamicImage.Filters,ContrastAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ContrastAdjustmentFilter.cs,GetEffect,The following statement contains a magic number: return new ContrastAdjustmentEffect  			{  				Level = (Level + 100) / 40.0  			};
Magic Number,SoundInTheory.DynamicImage.Filters,OpacityAdjustmentFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\OpacityAdjustmentFilter.cs,ApplyFilter,The following statement contains a magic number: dc.PushOpacity(Opacity/100.0);
Magic Number,SoundInTheory.DynamicImage.Filters,ResizeFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ResizeFilter.cs,GetDestinationDimensions,The following statement contains a magic number: switch (Mode)  			{  				case ResizeMode.UseWidth:  					if (EnlargeImage || calculatedWidth < source.Width)  						requestedWidth = calculatedWidth;  					break;  				case ResizeMode.UseHeight:  					if (EnlargeImage || calculatedHeight < source.Height)  						requestedHeight = calculatedHeight;  					break;  				case ResizeMode.Fill:  					requestedWidth = calculatedWidth;  					requestedHeight = calculatedHeight;  					break;  				case ResizeMode.Uniform:  					// If both requested dimensions are greater than source image' we don't need to do any resizing.  					if (this.EnlargeImage || (calculatedWidth < source.Width || calculatedHeight < source.Height))  					{  						// Calculate requested width and height so as not to squash image.  						int tempWidth' tempHeight;    						// First' resize based on max width and check whether resized height will be more than max height.  						CalculateOutputDimensions(source.Width' source.Height' calculatedWidth' null' out tempWidth' out tempHeight);  						if (tempHeight > calculatedHeight)  						{  							// If so' we need to resize based on max height instead.  							requestedHeight = calculatedHeight;  						}  						else  						{  							// If not' we have our max dimension.  							requestedWidth = calculatedWidth;  						}  					}  					break;  				case ResizeMode.UniformFill:  					// Resize based on width first. If this means that height is less than target height' we resize based on height.  					if (this.EnlargeImage || (calculatedWidth < source.Width || calculatedHeight < source.Height))  					{  						// Calculate requested width and height so as not to squash image.  						int tempWidth' tempHeight;    						// First' resize based on width and check whether resized height will be more than max height.  						CalculateOutputDimensions(source.Width' source.Height' calculatedWidth' null' out tempWidth' out tempHeight);  						if (tempHeight < calculatedHeight)  						{  							// If so' we need to resize based on max height instead.  							requestedHeight = calculatedHeight;    							CalculateOutputDimensions(source.Width' source.Height' null' calculatedHeight' out tempWidth' out tempHeight);    							// Then crop width and calculate offset.  							requestedWidth = calculatedWidth;  							_sourceWidth = (int)((calculatedWidth / (float)tempWidth) * source.Width);  							_xOffset = (source.Width - _sourceWidth) / 2;  						}  						else  						{  							// If not' we have our max dimension.  							requestedWidth = calculatedWidth;    							// Then crop height and calculate offset.  							requestedHeight = calculatedHeight;  							_sourceHeight = (int)((calculatedHeight / (float)tempHeight) * source.Height);  							_yOffset = (source.Height - _sourceHeight) / 2;  						}  					}  					break;  			}
Magic Number,SoundInTheory.DynamicImage.Filters,ResizeFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ResizeFilter.cs,GetDestinationDimensions,The following statement contains a magic number: switch (Mode)  			{  				case ResizeMode.UseWidth:  					if (EnlargeImage || calculatedWidth < source.Width)  						requestedWidth = calculatedWidth;  					break;  				case ResizeMode.UseHeight:  					if (EnlargeImage || calculatedHeight < source.Height)  						requestedHeight = calculatedHeight;  					break;  				case ResizeMode.Fill:  					requestedWidth = calculatedWidth;  					requestedHeight = calculatedHeight;  					break;  				case ResizeMode.Uniform:  					// If both requested dimensions are greater than source image' we don't need to do any resizing.  					if (this.EnlargeImage || (calculatedWidth < source.Width || calculatedHeight < source.Height))  					{  						// Calculate requested width and height so as not to squash image.  						int tempWidth' tempHeight;    						// First' resize based on max width and check whether resized height will be more than max height.  						CalculateOutputDimensions(source.Width' source.Height' calculatedWidth' null' out tempWidth' out tempHeight);  						if (tempHeight > calculatedHeight)  						{  							// If so' we need to resize based on max height instead.  							requestedHeight = calculatedHeight;  						}  						else  						{  							// If not' we have our max dimension.  							requestedWidth = calculatedWidth;  						}  					}  					break;  				case ResizeMode.UniformFill:  					// Resize based on width first. If this means that height is less than target height' we resize based on height.  					if (this.EnlargeImage || (calculatedWidth < source.Width || calculatedHeight < source.Height))  					{  						// Calculate requested width and height so as not to squash image.  						int tempWidth' tempHeight;    						// First' resize based on width and check whether resized height will be more than max height.  						CalculateOutputDimensions(source.Width' source.Height' calculatedWidth' null' out tempWidth' out tempHeight);  						if (tempHeight < calculatedHeight)  						{  							// If so' we need to resize based on max height instead.  							requestedHeight = calculatedHeight;    							CalculateOutputDimensions(source.Width' source.Height' null' calculatedHeight' out tempWidth' out tempHeight);    							// Then crop width and calculate offset.  							requestedWidth = calculatedWidth;  							_sourceWidth = (int)((calculatedWidth / (float)tempWidth) * source.Width);  							_xOffset = (source.Width - _sourceWidth) / 2;  						}  						else  						{  							// If not' we have our max dimension.  							requestedWidth = calculatedWidth;    							// Then crop height and calculate offset.  							requestedHeight = calculatedHeight;  							_sourceHeight = (int)((calculatedHeight / (float)tempHeight) * source.Height);  							_yOffset = (source.Height - _sourceHeight) / 2;  						}  					}  					break;  			}
Magic Number,SoundInTheory.DynamicImage.Filters,RotationFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RotationFilter.cs,GetDestinationDimensions,The following statement contains a magic number: _rotateTransform = new RotateTransform(Angle' source.Width / 2.0' source.Height / 2.0);
Magic Number,SoundInTheory.DynamicImage.Filters,RotationFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RotationFilter.cs,GetDestinationDimensions,The following statement contains a magic number: _rotateTransform = new RotateTransform(Angle' source.Width / 2.0' source.Height / 2.0);
Magic Number,SoundInTheory.DynamicImage.Filters,RotationFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RotationFilter.cs,GetDestinationDimensions,The following statement contains a magic number: for (int i = 0; i < 4; i++)  				rect = Rect.Union(rect' points[i]);
Magic Number,SoundInTheory.DynamicImage.Filters,RotationFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RotationFilter.cs,GetDestinationDimensions,The following statement contains a magic number: for (int i = 0; i < 4; i++)  			{  				points[i].X -= rect.Left;  				points[i].Y -= rect.Top;  			}
Magic Number,SoundInTheory.DynamicImage.Filters,RotationFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RotationFilter.cs,ApplyFilter,The following statement contains a magic number: dc.PushTransform(new TransformGroup  			{  				Children = new TransformCollection  				{  					_rotateTransform'  					new TranslateTransform((width - source.Width) / 2.0' (height - source.Height) / 2.0)  				}  			});
Magic Number,SoundInTheory.DynamicImage.Filters,RotationFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\RotationFilter.cs,ApplyFilter,The following statement contains a magic number: dc.PushTransform(new TransformGroup  			{  				Children = new TransformCollection  				{  					_rotateTransform'  					new TranslateTransform((width - source.Width) / 2.0' (height - source.Height) / 2.0)  				}  			});
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,CreateSpline,The following statement contains a magic number: if (pts.Count < 2)  				return pathGeometry;    			else if (pts.Count == 2)  			{  				if (!isClosed)  				{  					Segment(polyLineSegment.Points' pts[0]' pts[0]' pts[1]' pts[1]' tension' tension' tolerance);  				}  				else  				{  					Segment(polyLineSegment.Points' pts[1]' pts[0]' pts[1]' pts[0]' tension' tension' tolerance);  					Segment(polyLineSegment.Points' pts[0]' pts[1]' pts[0]' pts[1]' tension' tension' tolerance);  				}  			}  			else  			{  				bool useTensionCollection = tensions != null && tensions.Count > 0;    				for (int i = 0; i < pts.Count; i++)  				{  					double T1 = useTensionCollection ? tensions[i % tensions.Count] : tension;  					double T2 = useTensionCollection ? tensions[(i + 1) % tensions.Count] : tension;    					if (i == 0)  					{  						Segment(polyLineSegment.Points' isClosed ? pts[pts.Count - 1] : pts[0]'  																						pts[0]' pts[1]' pts[2]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 2)  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]'  																						isClosed ? pts[0] : pts[i + 1]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 1)  					{  						if (isClosed)  						{  							Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[0]' pts[1]' T1' T2' tolerance);  						}  					}    					else  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]' pts[i + 2]' T1' T2' tolerance);  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,CreateSpline,The following statement contains a magic number: if (pts.Count < 2)  				return pathGeometry;    			else if (pts.Count == 2)  			{  				if (!isClosed)  				{  					Segment(polyLineSegment.Points' pts[0]' pts[0]' pts[1]' pts[1]' tension' tension' tolerance);  				}  				else  				{  					Segment(polyLineSegment.Points' pts[1]' pts[0]' pts[1]' pts[0]' tension' tension' tolerance);  					Segment(polyLineSegment.Points' pts[0]' pts[1]' pts[0]' pts[1]' tension' tension' tolerance);  				}  			}  			else  			{  				bool useTensionCollection = tensions != null && tensions.Count > 0;    				for (int i = 0; i < pts.Count; i++)  				{  					double T1 = useTensionCollection ? tensions[i % tensions.Count] : tension;  					double T2 = useTensionCollection ? tensions[(i + 1) % tensions.Count] : tension;    					if (i == 0)  					{  						Segment(polyLineSegment.Points' isClosed ? pts[pts.Count - 1] : pts[0]'  																						pts[0]' pts[1]' pts[2]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 2)  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]'  																						isClosed ? pts[0] : pts[i + 1]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 1)  					{  						if (isClosed)  						{  							Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[0]' pts[1]' T1' T2' tolerance);  						}  					}    					else  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]' pts[i + 2]' T1' T2' tolerance);  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,CreateSpline,The following statement contains a magic number: if (pts.Count < 2)  				return pathGeometry;    			else if (pts.Count == 2)  			{  				if (!isClosed)  				{  					Segment(polyLineSegment.Points' pts[0]' pts[0]' pts[1]' pts[1]' tension' tension' tolerance);  				}  				else  				{  					Segment(polyLineSegment.Points' pts[1]' pts[0]' pts[1]' pts[0]' tension' tension' tolerance);  					Segment(polyLineSegment.Points' pts[0]' pts[1]' pts[0]' pts[1]' tension' tension' tolerance);  				}  			}  			else  			{  				bool useTensionCollection = tensions != null && tensions.Count > 0;    				for (int i = 0; i < pts.Count; i++)  				{  					double T1 = useTensionCollection ? tensions[i % tensions.Count] : tension;  					double T2 = useTensionCollection ? tensions[(i + 1) % tensions.Count] : tension;    					if (i == 0)  					{  						Segment(polyLineSegment.Points' isClosed ? pts[pts.Count - 1] : pts[0]'  																						pts[0]' pts[1]' pts[2]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 2)  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]'  																						isClosed ? pts[0] : pts[i + 1]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 1)  					{  						if (isClosed)  						{  							Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[0]' pts[1]' T1' T2' tolerance);  						}  					}    					else  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]' pts[i + 2]' T1' T2' tolerance);  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,CreateSpline,The following statement contains a magic number: if (pts.Count < 2)  				return pathGeometry;    			else if (pts.Count == 2)  			{  				if (!isClosed)  				{  					Segment(polyLineSegment.Points' pts[0]' pts[0]' pts[1]' pts[1]' tension' tension' tolerance);  				}  				else  				{  					Segment(polyLineSegment.Points' pts[1]' pts[0]' pts[1]' pts[0]' tension' tension' tolerance);  					Segment(polyLineSegment.Points' pts[0]' pts[1]' pts[0]' pts[1]' tension' tension' tolerance);  				}  			}  			else  			{  				bool useTensionCollection = tensions != null && tensions.Count > 0;    				for (int i = 0; i < pts.Count; i++)  				{  					double T1 = useTensionCollection ? tensions[i % tensions.Count] : tension;  					double T2 = useTensionCollection ? tensions[(i + 1) % tensions.Count] : tension;    					if (i == 0)  					{  						Segment(polyLineSegment.Points' isClosed ? pts[pts.Count - 1] : pts[0]'  																						pts[0]' pts[1]' pts[2]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 2)  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]'  																						isClosed ? pts[0] : pts[i + 1]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 1)  					{  						if (isClosed)  						{  							Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[0]' pts[1]' T1' T2' tolerance);  						}  					}    					else  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]' pts[i + 2]' T1' T2' tolerance);  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,CreateSpline,The following statement contains a magic number: if (pts.Count < 2)  				return pathGeometry;    			else if (pts.Count == 2)  			{  				if (!isClosed)  				{  					Segment(polyLineSegment.Points' pts[0]' pts[0]' pts[1]' pts[1]' tension' tension' tolerance);  				}  				else  				{  					Segment(polyLineSegment.Points' pts[1]' pts[0]' pts[1]' pts[0]' tension' tension' tolerance);  					Segment(polyLineSegment.Points' pts[0]' pts[1]' pts[0]' pts[1]' tension' tension' tolerance);  				}  			}  			else  			{  				bool useTensionCollection = tensions != null && tensions.Count > 0;    				for (int i = 0; i < pts.Count; i++)  				{  					double T1 = useTensionCollection ? tensions[i % tensions.Count] : tension;  					double T2 = useTensionCollection ? tensions[(i + 1) % tensions.Count] : tension;    					if (i == 0)  					{  						Segment(polyLineSegment.Points' isClosed ? pts[pts.Count - 1] : pts[0]'  																						pts[0]' pts[1]' pts[2]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 2)  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]'  																						isClosed ? pts[0] : pts[i + 1]' T1' T2' tolerance);  					}    					else if (i == pts.Count - 1)  					{  						if (isClosed)  						{  							Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[0]' pts[1]' T1' T2' tolerance);  						}  					}    					else  					{  						Segment(polyLineSegment.Points' pts[i - 1]' pts[i]' pts[i + 1]' pts[i + 2]' T1' T2' tolerance);  					}  				}  			}
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double AX = SX1 + SX2 + 2 * pt1.X - 2 * pt2.X;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double AX = SX1 + SX2 + 2 * pt1.X - 2 * pt2.X;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double AY = SY1 + SY2 + 2 * pt1.Y - 2 * pt2.Y;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double AY = SY1 + SY2 + 2 * pt1.Y - 2 * pt2.Y;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double BX = -2 * SX1 - SX2 - 3 * pt1.X + 3 * pt2.X;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double BX = -2 * SX1 - SX2 - 3 * pt1.X + 3 * pt2.X;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double BX = -2 * SX1 - SX2 - 3 * pt1.X + 3 * pt2.X;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double BY = -2 * SY1 - SY2 - 3 * pt1.Y + 3 * pt2.Y;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double BY = -2 * SY1 - SY2 - 3 * pt1.Y + 3 * pt2.Y;
Magic Number,SoundInTheory.DynamicImage.Util,CanonicalSplineHelper,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CanonicalSplineUtility.cs,Segment,The following statement contains a magic number: double BY = -2 * SY1 - SY2 - 3 * pt1.Y + 3 * pt2.Y;
Magic Number,SoundInTheory.DynamicImage.Util,ColorExtensionMethods,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\ColorExtensionMethods.cs,GetSaturation,The following statement contains a magic number: if (num6 <= 0.5)  			{  				return ((num4 - num5) / (num4 + num5));  			}
Magic Number,SoundInTheory.DynamicImage.Util,CubicSplineUtility,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\CubicSplineUtility.cs,CalculateSpline,The following statement contains a magic number: for (int k = n - 2; k >= 0; --k)  				result[k] = result[k] * result[k + 1] + u[k];
Magic Number,SoundInTheory.DynamicImage.Util,FastBitmap,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\FastBitmap.cs,FastBitmap,The following statement contains a magic number: InnerBitmap = new WriteableBitmap(width' height' 96' 96' PixelFormats.Pbgra32' null);
Magic Number,SoundInTheory.DynamicImage.Util,FastBitmap,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\FastBitmap.cs,FastBitmap,The following statement contains a magic number: InnerBitmap = new WriteableBitmap(width' height' 96' 96' PixelFormats.Pbgra32' null);
Magic Number,SoundInTheory.DynamicImage.Util,BigEndianBinaryReader,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\PhotoshopCurvesReader.cs,ReadUInt16,The following statement contains a magic number: byte[] bytes = ReadBytes(2);
Magic Number,SoundInTheory.DynamicImage.Util,BigEndianBinaryReader,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\PhotoshopCurvesReader.cs,ReadUInt16,The following statement contains a magic number: return (ushort)(bytes[0] << 8 | bytes[1]);
Magic Number,SoundInTheory.DynamicImage.Util,RenderTargetBitmapUtility,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\RenderTargetBitmapUtility.cs,CreateRenderTargetBitmap,The following statement contains a magic number: return new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Pbgra32);
Magic Number,SoundInTheory.DynamicImage.Util,RenderTargetBitmapUtility,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\RenderTargetBitmapUtility.cs,CreateRenderTargetBitmap,The following statement contains a magic number: return new RenderTargetBitmap(width' height' 96' 96' PixelFormats.Pbgra32);
Magic Number,SoundInTheory.DynamicImage.Util,Util,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\Util.cs,Base16Encode,The following statement contains a magic number: StringBuilder sb = new StringBuilder(bytes.Length * 2);
Magic Number,SoundInTheory.DynamicImage.Util,Util,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Util\Util.cs,Base16Encode,The following statement contains a magic number: foreach (byte b in bytes)  				sb.Append(b.ToString("x").PadLeft(2' '0'));
Missing Default,SoundInTheory.DynamicImage,ColorHsv,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\ColorHsv.cs,ToColor,The following switch statement is missing a default case: switch (sectorNumber)  				{  					case 0:  						r = v;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = v;  						b = p;  						break;  					case 2:  						r = p;  						g = v;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = v;  						break;  					case 4:  						r = t;  						g = p;  						b = v;  						break;  					case 5:  						r = v;  						g = p;  						b = q;  						break;  				}
Missing Default,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,The following switch statement is missing a default case: switch (layer.Anchor)  					{  						case AnchorStyles.BottomCenter :  						case AnchorStyles.MiddleCenter :  						case AnchorStyles.TopCenter :  							layer.X = (outputWidth - layer.Size.Value.Width) / 2;  							break;  						case AnchorStyles.BottomLeft :  						case AnchorStyles.MiddleLeft :  						case AnchorStyles.TopLeft :  							layer.X = layer.AnchorPadding;  							break;  						case AnchorStyles.BottomRight:  						case AnchorStyles.MiddleRight:  						case AnchorStyles.TopRight:  							layer.X = outputWidth - layer.Size.Value.Width - layer.AnchorPadding;  							break;  					}
Missing Default,SoundInTheory.DynamicImage,Composition,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Composition.cs,CreateImage,The following switch statement is missing a default case: switch (layer.Anchor)  					{  						case AnchorStyles.BottomCenter:  						case AnchorStyles.BottomLeft:  						case AnchorStyles.BottomRight:  							layer.Y = outputHeight - layer.Size.Value.Height - layer.AnchorPadding;  							break;  						case AnchorStyles.MiddleCenter:  						case AnchorStyles.MiddleLeft:  						case AnchorStyles.MiddleRight:  							layer.Y = (outputHeight - layer.Size.Value.Height) / 2;  							break;  						case AnchorStyles.TopCenter:  						case AnchorStyles.TopLeft:  						case AnchorStyles.TopRight:  							layer.Y = layer.AnchorPadding;  							break;  					}
Missing Default,SoundInTheory.DynamicImage,Unit,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Unit.cs,GetStringFromType,The following switch statement is missing a default case: switch (type)  			{  				case UnitType.Pixel:  					return "px";    				case UnitType.Percentage:  					return "%";  			}
Missing Default,SoundInTheory.DynamicImage.Filters,TransformFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\TransformFilter.cs,GetPixel,The following switch statement is missing a default case: switch (EdgeAction)  				{  					case EdgeAction.Wrap:  						return bitmap[ImageMath.Mod(x' width)' ImageMath.Mod(y' height)];  					case EdgeAction.Clamp:  						return bitmap[ImageMath.Clamp(x' 0' width - 1)' ImageMath.Clamp(y' 0' height - 1)];  					case EdgeAction.RgbClamp:  					{  						Color edgeColour = bitmap[ImageMath.Clamp(x' 0' width - 1)' ImageMath.Clamp(y' 0' height - 1)];  						return Color.FromArgb(0' edgeColour.R' edgeColour.G' edgeColour.B);  					}  					case EdgeAction.Zero:  						return Colors.Transparent;  				}
Missing Default,SoundInTheory.DynamicImage.Filters,ResizeFilter,C:\repos\sitdap_dynamic-image\src\SoundInTheory.DynamicImage\Filters\ResizeFilter.cs,GetDestinationDimensions,The following switch statement is missing a default case: switch (Mode)  			{  				case ResizeMode.UseWidth:  					if (EnlargeImage || calculatedWidth < source.Width)  						requestedWidth = calculatedWidth;  					break;  				case ResizeMode.UseHeight:  					if (EnlargeImage || calculatedHeight < source.Height)  						requestedHeight = calculatedHeight;  					break;  				case ResizeMode.Fill:  					requestedWidth = calculatedWidth;  					requestedHeight = calculatedHeight;  					break;  				case ResizeMode.Uniform:  					// If both requested dimensions are greater than source image' we don't need to do any resizing.  					if (this.EnlargeImage || (calculatedWidth < source.Width || calculatedHeight < source.Height))  					{  						// Calculate requested width and height so as not to squash image.  						int tempWidth' tempHeight;    						// First' resize based on max width and check whether resized height will be more than max height.  						CalculateOutputDimensions(source.Width' source.Height' calculatedWidth' null' out tempWidth' out tempHeight);  						if (tempHeight > calculatedHeight)  						{  							// If so' we need to resize based on max height instead.  							requestedHeight = calculatedHeight;  						}  						else  						{  							// If not' we have our max dimension.  							requestedWidth = calculatedWidth;  						}  					}  					break;  				case ResizeMode.UniformFill:  					// Resize based on width first. If this means that height is less than target height' we resize based on height.  					if (this.EnlargeImage || (calculatedWidth < source.Width || calculatedHeight < source.Height))  					{  						// Calculate requested width and height so as not to squash image.  						int tempWidth' tempHeight;    						// First' resize based on width and check whether resized height will be more than max height.  						CalculateOutputDimensions(source.Width' source.Height' calculatedWidth' null' out tempWidth' out tempHeight);  						if (tempHeight < calculatedHeight)  						{  							// If so' we need to resize based on max height instead.  							requestedHeight = calculatedHeight;    							CalculateOutputDimensions(source.Width' source.Height' null' calculatedHeight' out tempWidth' out tempHeight);    							// Then crop width and calculate offset.  							requestedWidth = calculatedWidth;  							_sourceWidth = (int)((calculatedWidth / (float)tempWidth) * source.Width);  							_xOffset = (source.Width - _sourceWidth) / 2;  						}  						else  						{  							// If not' we have our max dimension.  							requestedWidth = calculatedWidth;    							// Then crop height and calculate offset.  							requestedHeight = calculatedHeight;  							_sourceHeight = (int)((calculatedHeight / (float)tempHeight) * source.Height);  							_yOffset = (source.Height - _sourceHeight) / 2;  						}  					}  					break;  			}
