Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The method has 342 lines of code.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "                                 <tr><td>" + x[0].ToString(CultureInfo.InvariantCulture) + @"</td><td>" + returnvalue + @"</td></tr></table><div style='clear:both;'></div>"; " is 140.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr> " is 135.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br /> " is 124.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr> " is 135.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br /> " is 123.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<tr><td style='text-align:center'>" + x.ToString(CultureInfo.InvariantCulture) + @"</td><td style='text-align:right'>" + Converter.From(Base.Base10' x.ToString(CultureInfo.InvariantCulture)).To(Base.Base2) + @"</td></tr> " is 220.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<tr><td style='text-align:center'>" + y.ToString(CultureInfo.InvariantCulture) + @"</td><td style='text-align:right'>" + Converter.From(Base.Base10' y.ToString(CultureInfo.InvariantCulture)).To(Base.Base2) + @"</td></tr> " is 220.
Long Statement,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The length of the statement  "<tr><td style='text-align:center'>" + returnValue.ToString() + @"</td><td style='text-align:right'>" + Converter.From(Base.Base10' returnValue.ToString()).To(Base.Base2) + @"</td></tr> " is 184.
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("table"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                                        return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                                return 0;                      }                  }                    if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                                isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      parser.Parse(Request["expression"]);                        resultA += "<tr><td>" +parser.LocalVariables["x"] + "</td><td>"  + x[0] + "</td></tr>";                                            list.Add(x[0]);                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                                           //parser.Parse(Request["expression"]);                      //parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                  }                  else                  {                      //IsDone = true;                                            resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                                           isStart = false;                        return 1;                  }                                   return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("table"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                                        return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                                return 0;                      }                  }                    if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                                isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      parser.Parse(Request["expression"]);                        resultA += "<tr><td>" +parser.LocalVariables["x"] + "</td><td>"  + x[0] + "</td></tr>";                                            list.Add(x[0]);                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                                           //parser.Parse(Request["expression"]);                      //parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                  }                  else                  {                      //IsDone = true;                                            resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                                           isStart = false;                        return 1;                  }                                   return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("table"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                                        return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                                return 0;                      }                  }                    if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                                isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      parser.Parse(Request["expression"]);                        resultA += "<tr><td>" +parser.LocalVariables["x"] + "</td><td>"  + x[0] + "</td></tr>";                                            list.Add(x[0]);                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                                           //parser.Parse(Request["expression"]);                      //parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                  }                  else                  {                      //IsDone = true;                                            resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                                           isStart = false;                        return 1;                  }                                   return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("table"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                                        return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                                return 0;                      }                  }                    if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                                isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      parser.Parse(Request["expression"]);                        resultA += "<tr><td>" +parser.LocalVariables["x"] + "</td><td>"  + x[0] + "</td></tr>";                                            list.Add(x[0]);                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                                           //parser.Parse(Request["expression"]);                      //parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                  }                  else                  {                      //IsDone = true;                                            resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                                           isStart = false;                        return 1;                  }                                   return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("table"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                                        return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                                return 0;                      }                  }                    if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                                isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      parser.Parse(Request["expression"]);                        resultA += "<tr><td>" +parser.LocalVariables["x"] + "</td><td>"  + x[0] + "</td></tr>";                                            list.Add(x[0]);                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                                           //parser.Parse(Request["expression"]);                      //parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                  }                  else                  {                      //IsDone = true;                                            resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                                           isStart = false;                        return 1;                  }                                   return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("table"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                                        return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                                return 0;                      }                  }                    if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                                isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      parser.Parse(Request["expression"]);                        resultA += "<tr><td>" +parser.LocalVariables["x"] + "</td><td>"  + x[0] + "</td></tr>";                                            list.Add(x[0]);                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                                           //parser.Parse(Request["expression"]);                      //parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                  }                  else                  {                      //IsDone = true;                                            resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression=" + Request["expression"].Replace("table"' "sum") + @"' style='margin:3px;float:right;'>(sum)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                                           isStart = false;                        return 1;                  }                                   return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("sum"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x.Length < 3)                  {                      resultA += "Error: the function requires 3 parameters.";                      return 0;                  }                    if (x.Length == 4)                  {                      if (x[3] <= 0)                      {                          resultA += "Error: the step cannot be zero.";                                            return 0;                      }                                    }                  if (isStart == false)                  {                      parser.LocalVariables["x"] = x[1];                        isStart = true;                      resultA += "<table style='border:1px solid green;margin:3px;float:left;'><tr><th>x</th><th>f(x)</th></tr>";                  }                    if (parser.LocalVariables["x"] <= x[2])                  {                      list.Add(x[0]);                        resultA += "<tr><td>" + parser.LocalVariables["x"] + "</td><td>" + list.SumOfListElements() + "</td></tr>";                        parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                        parser.Parse(Request["expression"]);                      parser.LocalVariables["x"] += x.Length == 3 ? 1 : x[3];                    }                  else                  {                      //IsDone = true;                        resultA += @"</table>  <table style='border:1px solid green;margin:3px;float:right;'><tr><th>Sum</th><th>Mean</th><th>Median</th></tr>  <tr><td>" + (double)list.SumOfListElements() + @"</td><td>" + (double)list.Mean() + @"</td><td>" + (double)list.Median() + @"</td></tr>  </table>  <br />  <br />  <br />  <a href='?expression="+ Request["expression"].Replace("sum"'"table")+ @"' style='margin:3px;float:right;'>(table)</a><br />  <br />  <a href='?expression=seq()' style='margin:3px;float:right;'>(more)</a>  <div style='clear:both;'></div>";                        isStart = false;                      return 1;                  }                      return 1;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("d"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x[0]==0 && x.Length < 2)                  {                      resultA += "Error: Please enter a function. The derivative is calculated with respect to x' i.e. d/dx(f(x)).";                      return 0;                  }                    if (x.Length < 2)                  {                      resultA += "Error: Please provide me with an x coordinate.";                      return 0;                  }                    if (!isUpper)                  {                                            parser.LocalVariables["x"] = x[1] + h;                        if (!isParserDone)                      {                          isParserDone = true;                          parser.Parse(Request["expression"]);                          isParserDone = false;                                                }                        if (isParserDone)                      {                          isUpper = true;                          upper = x[0];                      }                        //IsParserDone = false;                  }                    if (!isLower && isUpper && isParserDone == false )                  {                      //lower = x[0];                      parser.LocalVariables["x"] = x[1];                        if (!isParserDone2)                      {                          isParserDone2 = true;                                                   parser.Parse(Request["expression"]);                          isParserDone2 = false;                          //IsUpper = true;                                               }                        if (isParserDone2)                      {                          isLower = true;                          lower = x[0];                      }                  }                    //check the no. of times this is executed.                  if (isLower && isUpper && !isParserDone2)                      return Math.Round((upper - lower)/h);                    return 0;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("d"' x =>              {                  // remake this method' so that the the parser.LocalVariables["x"] < parser.LocalVariables["table_max"]                  // is in front of everything. then' we can reuse  the newWindow check code                  GC.Collect();                    if (x[0]==0 && x.Length < 2)                  {                      resultA += "Error: Please enter a function. The derivative is calculated with respect to x' i.e. d/dx(f(x)).";                      return 0;                  }                    if (x.Length < 2)                  {                      resultA += "Error: Please provide me with an x coordinate.";                      return 0;                  }                    if (!isUpper)                  {                                            parser.LocalVariables["x"] = x[1] + h;                        if (!isParserDone)                      {                          isParserDone = true;                          parser.Parse(Request["expression"]);                          isParserDone = false;                                                }                        if (isParserDone)                      {                          isUpper = true;                          upper = x[0];                      }                        //IsParserDone = false;                  }                    if (!isLower && isUpper && isParserDone == false )                  {                      //lower = x[0];                      parser.LocalVariables["x"] = x[1];                        if (!isParserDone2)                      {                          isParserDone2 = true;                                                   parser.Parse(Request["expression"]);                          isParserDone2 = false;                          //IsUpper = true;                                               }                        if (isParserDone2)                      {                          isLower = true;                          lower = x[0];                      }                  }                    //check the no. of times this is executed.                  if (isLower && isUpper && !isParserDone2)                      return Math.Round((upper - lower)/h);                    return 0;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("if"' x =>              {                  if (x[0] == 1)                      return x[1];                    return x.Length == 3 ? x[2] : 0;              });
Magic Number,ProjectWebsite,Default,C:\repos\MathosProject_Mathos-Project\ProjectWebsite\Default.aspx.cs,Page_Load,The following statement contains a magic number: parser.LocalFunctions.Add("if"' x =>              {                  if (x[0] == 1)                      return x[1];                    return x.Length == 3 ? x[2] : 0;              });
