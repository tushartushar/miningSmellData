Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,Integrate,The method has 5 parameters. Parameters: expression' lowerLimit' upperLimit' integrationAlgorithm' numberOfIntervals
Long Identifier,Laboratory.Module,EquationSolver,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\EquationSolver.aspx.cs,,The length of the parameter QuadraticEquationElapsedTimeLabel is 33.
Long Statement,Laboratory.Module,Uncertainty,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Uncertainty.aspx.cs,Pow,The length of the statement  "            //double[] fact = { 1' 1' 2' 6' 24' 120' 720' 5040' 40320' 362880' 3628800' 39916800' 479001600' 6227020800' 87178291200' 1307674368000' 20922789888000' 355687428096000' 6402373705728000' 121645100408832000' 2432902008176640000' 51090942171709440000d' 1124000727777607680000d }; " is 278.
Long Statement,Laboratory.Module,Uncertainty,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Uncertainty.aspx.cs,Pow,The length of the statement  "                //    decimal nom = System.Convert.ToDecimal( pow( exp * (decimal)Math.Log((double)x)' i)); // (decimal)(Math.Pow((double)exp'i)*  Math.Pow( (double)exp * Math.Log(Math.Abs((double)x))'i)); " is 189.
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: switch (DropDownList1.SelectedIndex)              {                  case 0:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;                  case 1:                      a = (Speed) Enum.Parse(typeof (Speed)' DropDownList2.SelectedValue' true);                      b = (Speed) Enum.Parse(typeof (Speed)' DropDownList3.SelectedValue' true);                      break;                  case 2:                      a = (Mass) Enum.Parse(typeof (Mass)' DropDownList2.SelectedValue' true);                      b = (Mass) Enum.Parse(typeof (Mass)' DropDownList3.SelectedValue' true);                      break;                  case 3:                      a = (Area) Enum.Parse(typeof (Area)' DropDownList2.SelectedValue' true);                      b = (Area) Enum.Parse(typeof (Area)' DropDownList3.SelectedValue' true);                      break;                  case 4:                      a = (Volume) Enum.Parse(typeof (Volume)' DropDownList2.SelectedValue' true);                      b = (Volume) Enum.Parse(typeof (Volume)' DropDownList3.SelectedValue' true);                      break;                  case 5:                      a = (Base) Enum.Parse(typeof (Base)' DropDownList2.SelectedValue' true);                      b = (Base) Enum.Parse(typeof (Base)' DropDownList3.SelectedValue' true);                      break;                  case 6:                      a = (Angle) Enum.Parse(typeof (Angle)' DropDownList2.SelectedValue' true);                      b = (Angle) Enum.Parse(typeof (Angle)' DropDownList3.SelectedValue' true);                      break;                  case 7:                      a = (Power) Enum.Parse(typeof (Power)' DropDownList2.SelectedValue' true);                      b = (Power) Enum.Parse(typeof (Power)' DropDownList3.SelectedValue' true);                      break;                  case 8:                      a = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList2.SelectedValue' true);                      b = (Pressure) Enum.Parse(typeof (Pressure)' DropDownList3.SelectedValue' true);                      break;                  case 9:                      a = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList2.SelectedValue' true);                      b = (Temperature) Enum.Parse(typeof (Temperature)' DropDownList3.SelectedValue' true);                      break;                  default:                      a = (Length) Enum.Parse(typeof (Length)' DropDownList2.SelectedValue' true);                      b = (Length) Enum.Parse(typeof (Length)' DropDownList3.SelectedValue' true);                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,CalculateButton_Click,The following statement contains a magic number: try              {                  var watch = new Stopwatch();                  watch.Start();                    TextBox2.Text = DropDownList1.SelectedIndex != 5                      ? Mathos.Converter.Converter.From(a' Convert.ToDouble(TextBox1.Text))                          .To(b)                          .ToString(CultureInfo.InvariantCulture)                      : Mathos.Converter.Converter.From((Base) a' TextBox1.Text).To((Base) b);                    watch.Stop();                  ElapsedTimeLabel.Text = string.Format("Elapsed time: {0} ms"' watch.Elapsed.TotalMilliseconds);              }              catch              {                  TextBox2.Text = "Error!";              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Converter,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Converter.aspx.cs,SetValues,The following statement contains a magic number: switch (type)              {                  case 0:                      itemvalues = Enum.GetNames(typeof (Length));                      break;                  case 1:                      itemvalues = Enum.GetNames(typeof (Speed));                      break;                  case 2:                      itemvalues = Enum.GetNames(typeof (Mass));                      break;                  case 3:                      itemvalues = Enum.GetNames(typeof (Area));                      break;                  case 4:                      itemvalues = Enum.GetNames(typeof (Volume));                      break;                  case 5:                      itemvalues = Enum.GetNames(typeof (Base));                      break;                  case 6:                      itemvalues = Enum.GetNames(typeof (Angle));                      break;                  case 7:                      itemvalues = Enum.GetNames(typeof (Power));                      break;                  case 8:                      itemvalues = Enum.GetNames(typeof (Pressure));                      break;                  case 9:                      itemvalues = Enum.GetNames(typeof (Temperature));                      break;                  default:                      itemvalues = Enum.GetNames(typeof (Length));                      break;              }
Magic Number,Laboratory.Module,Factorial,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Factorial.aspx.cs,CalculateButton_Click,The following statement contains a magic number: try              {                  if (NumberText.Text.Length < 5)                  {                      var watch = new Stopwatch();                      watch.Start();                        ResultTextbox.Text =                          Get.FactorialBigInteger(Convert.ToInt64(NumberText.Text)).ToString();                        watch.Stop();                      ElapsedTimeLabel.Text = string.Format("Elapsed time: {0} ms"' watch.Elapsed.TotalMilliseconds);                  }                  else                  {                      ErrorLabel.Text = "At this stage' the number is bigger than the set limit.";                  }              }              catch              {                  ErrorLabel.Text = "Error!";              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingTrapezoidalRule,The following statement contains a magic number: for (var i = 1; i < numberOfIntervals; i++)              {                  parser.LocalVariables["x"] = lowerLimit + i*sizeOfInterval;                  sum += parser.ProgrammaticallyParse(expression)*2;              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingTrapezoidalRule,The following statement contains a magic number: var result = sum*sizeOfInterval/2;
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingSimpsonsRule,The following statement contains a magic number: for (var i = 1; i < numberOfIntervals; i += 2)              {                  parser.LocalVariables["x"] = lowerLimit + sizeOfInterval*i;                  sum += 4*parser.ProgrammaticallyParse(expression);              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingSimpsonsRule,The following statement contains a magic number: for (var i = 1; i < numberOfIntervals; i += 2)              {                  parser.LocalVariables["x"] = lowerLimit + sizeOfInterval*i;                  sum += 4*parser.ProgrammaticallyParse(expression);              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingSimpsonsRule,The following statement contains a magic number: for (var i = 2; i < numberOfIntervals - 1; i += 2)              {                  parser.LocalVariables["x"] = lowerLimit + sizeOfInterval*i;                  sum += 2*parser.ProgrammaticallyParse(expression);              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingSimpsonsRule,The following statement contains a magic number: for (var i = 2; i < numberOfIntervals - 1; i += 2)              {                  parser.LocalVariables["x"] = lowerLimit + sizeOfInterval*i;                  sum += 2*parser.ProgrammaticallyParse(expression);              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingSimpsonsRule,The following statement contains a magic number: for (var i = 2; i < numberOfIntervals - 1; i += 2)              {                  parser.LocalVariables["x"] = lowerLimit + sizeOfInterval*i;                  sum += 2*parser.ProgrammaticallyParse(expression);              }
Magic Number,Laboratory.Module,IntegralApproximation,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\IntegralApproximation.aspx.cs,IntegrateUsingSimpsonsRule,The following statement contains a magic number: var result = sum*sizeOfInterval/3;
Magic Number,Laboratory.Module,NumberChecker,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\NumberChecker.aspx.cs,CalculateButton_Click,The following statement contains a magic number: if (DropDownList1.SelectedIndex == 2)                  ResultLabel.Text = Check.IsEven(Convert.ToInt64(TextBox1.Text)) ? "True!" : "False!";
Magic Number,Laboratory.Module,NumberChecker,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\NumberChecker.aspx.cs,CalculateButton_Click,The following statement contains a magic number: if (DropDownList1.SelectedIndex == 3)                  ResultLabel.Text = Check.IsOdd(Convert.ToInt64(TextBox1.Text)) ? "True!" : "False!";
Magic Number,Laboratory.Module,NumberChecker,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\NumberChecker.aspx.cs,CalculateButton_Click,The following statement contains a magic number: if (DropDownList1.SelectedIndex == 4)                  ResultLabel.Text = Check.IsPrime(Convert.ToInt64(TextBox1.Text)) ? "True!" : "False!";
Magic Number,Laboratory.Module,Uncertainty,C:\repos\MathosProject_Mathos-Project\Laboratory\Module\Uncertainty.aspx.cs,Page_Load,The following statement contains a magic number: _parser.LocalFunctions.Add("ln"' x => DecimalArithmetic.Ln(x[0]' 2000));
