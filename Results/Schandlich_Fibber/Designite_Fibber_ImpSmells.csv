Implementation smell,Namespace,Class,File,Method,Description
Long Method,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The method has 128 lines of code.
Long Method,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The method has 128 lines of code.
Long Method,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The method has 110 lines of code.
Complex Method,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,Cyclomatic complexity of the method is 8
Complex Method,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,Cyclomatic complexity of the method is 8
Long Statement,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,MaxDepth,The length of the statement  "            if (depth < 1 || depth > 10) { throw new ArgumentException("depth must be greater than or equal to 1 and less than or equal to 10."' "depth"); } " is 144.
Long Statement,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The length of the statement  "                    else if (propertyType.IsPublic && !propertyType.IsPrimitive && propertyType.IsClass && !propertyType.IsValueType && !propertyType.IsAbstract) " is 141.
Long Statement,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The length of the statement  "                    else if (propertyType.IsPublic && !propertyType.IsPrimitive && propertyType.IsClass && !propertyType.IsValueType && !propertyType.IsAbstract) " is 141.
Long Statement,Fibber,FibberConfiguration,C:\repos\Schandlich_Fibber\src\Fibber\FibberConfiguration.cs,For,The length of the statement  "            if (TypeGenerators.ContainsKey(typeof(T))) { throw new ArgumentException(string.Format("There is already a generator registered for type: {0}."' typeof(T).ToString())); } " is 170.
Long Statement,Fibber,FibberConfiguration,C:\repos\Schandlich_Fibber\src\Fibber\FibberConfiguration.cs,For,The length of the statement  "            if (TypeGenerators.ContainsKey(typeof(T))) { throw new ArgumentException(string.Format("There is already a generator registered for type: {0}."' typeof(T).ToString())); } " is 170.
Long Statement,Fibber,FibberConfiguration,C:\repos\Schandlich_Fibber\src\Fibber\FibberConfiguration.cs,For,The length of the statement  "            if (TypeGenerators.ContainsKey(typeof(T))) { throw new ArgumentException(string.Format("There is already a generator registered for type: {0}."' typeof(T).ToString())); } " is 170.
Long Statement,Fibber,FibberConfiguration,C:\repos\Schandlich_Fibber\src\Fibber\FibberConfiguration.cs,For,The length of the statement  "            if (TypeGenerators.ContainsKey(typeof(T))) { throw new ArgumentException(string.Format("There is already a generator registered for type: {0}."' typeof(T).ToString())); } " is 170.
Complex Conditional,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The conditional expression  "propertyType.IsPublic && !propertyType.IsPrimitive && propertyType.IsClass && !propertyType.IsValueType && !propertyType.IsAbstract"  is complex.
Complex Conditional,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The conditional expression  "propertyType.IsPublic && !propertyType.IsPrimitive && propertyType.IsClass && !propertyType.IsValueType && !propertyType.IsAbstract"  is complex.
Empty Catch Block,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,Fib,The method has an empty catch block.
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,MaxDepth,The following statement contains a magic number: if (depth < 1 || depth > 10) { throw new ArgumentException("depth must be greater than or equal to 1 and less than or equal to 10."' "depth"); }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following statement contains a magic number: if (property.CanWrite)              {                  switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateBool,The following statement contains a magic number: return Convert.ToBoolean(_randomGen.Value.Next(2));
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateByteArray,The following statement contains a magic number: var size = _randomGen.Value.Next(1' 128);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateDateTime,The following statement contains a magic number: var seconds = _randomGen.Value.Next(-17776000' 17776000);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateDateTime,The following statement contains a magic number: var seconds = _randomGen.Value.Next(-17776000' 17776000);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateDateTimeOffset,The following statement contains a magic number: var seconds = _randomGen.Value.Next(-17776000' 17776000);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateDateTimeOffset,The following statement contains a magic number: var seconds = _randomGen.Value.Next(-17776000' 17776000);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateDecimal,The following statement contains a magic number: byte scale = (byte)_randomGen.Value.Next(29);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateDecimal,The following statement contains a magic number: bool sign = _randomGen.Value.Next(2) == 1;
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateGuid,The following statement contains a magic number: var guid = new byte[16];
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateFloat,The following statement contains a magic number: var returnValue = ((float)_randomGen.Value.Next() / 2147483648);
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateString,The following statement contains a magic number: if (includeSpaces)              {                  for (int i = 0; i < length; i++)                  {                      var randomByte = (byte)_randomGen.Value.Next(54' 123);                        if (randomByte < 65)                      {                          returnValue[i] = (byte)32;                      }                      else                      {                          returnValue[i] = randomByte;                      }                  }              }              else              {                  for (int i = 0; i < length; i++)                  {                      returnValue[i] = (byte)_randomGen.Value.Next(65' 123);                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateString,The following statement contains a magic number: if (includeSpaces)              {                  for (int i = 0; i < length; i++)                  {                      var randomByte = (byte)_randomGen.Value.Next(54' 123);                        if (randomByte < 65)                      {                          returnValue[i] = (byte)32;                      }                      else                      {                          returnValue[i] = randomByte;                      }                  }              }              else              {                  for (int i = 0; i < length; i++)                  {                      returnValue[i] = (byte)_randomGen.Value.Next(65' 123);                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateString,The following statement contains a magic number: if (includeSpaces)              {                  for (int i = 0; i < length; i++)                  {                      var randomByte = (byte)_randomGen.Value.Next(54' 123);                        if (randomByte < 65)                      {                          returnValue[i] = (byte)32;                      }                      else                      {                          returnValue[i] = randomByte;                      }                  }              }              else              {                  for (int i = 0; i < length; i++)                  {                      returnValue[i] = (byte)_randomGen.Value.Next(65' 123);                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateString,The following statement contains a magic number: if (includeSpaces)              {                  for (int i = 0; i < length; i++)                  {                      var randomByte = (byte)_randomGen.Value.Next(54' 123);                        if (randomByte < 65)                      {                          returnValue[i] = (byte)32;                      }                      else                      {                          returnValue[i] = randomByte;                      }                  }              }              else              {                  for (int i = 0; i < length; i++)                  {                      returnValue[i] = (byte)_randomGen.Value.Next(65' 123);                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateString,The following statement contains a magic number: if (includeSpaces)              {                  for (int i = 0; i < length; i++)                  {                      var randomByte = (byte)_randomGen.Value.Next(54' 123);                        if (randomByte < 65)                      {                          returnValue[i] = (byte)32;                      }                      else                      {                          returnValue[i] = randomByte;                      }                  }              }              else              {                  for (int i = 0; i < length; i++)                  {                      returnValue[i] = (byte)_randomGen.Value.Next(65' 123);                  }              }
Magic Number,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateString,The following statement contains a magic number: if (includeSpaces)              {                  for (int i = 0; i < length; i++)                  {                      var randomByte = (byte)_randomGen.Value.Next(54' 123);                        if (randomByte < 65)                      {                          returnValue[i] = (byte)32;                      }                      else                      {                          returnValue[i] = randomByte;                      }                  }              }              else              {                  for (int i = 0; i < length; i++)                  {                      returnValue[i] = (byte)_randomGen.Value.Next(65' 123);                  }              }
Missing Default,Fibber,FibberEngine,C:\repos\Schandlich_Fibber\src\Fibber\FibberEngine.cs,GenerateRandomValue,The following switch statement is missing a default case: switch (randoms)                  {                      case RandGen.Bool:                          {                              var value = this.GenerateBool();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Byte:                          {                              var value = this.GenerateByte();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ByteArray:                          {                              var value = this.GenerateByteArray();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTime:                          {                              var value = this.GenerateDateTime();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.DateTimeOffset:                          {                              var value = this.GenerateDateTimeOffset();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Decimal:                          {                              var value = this.GenerateDecimal();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Guid:                          {                              var value = this.GenerateGuid();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Float:                          {                              var value = this.GenerateFloat();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int16:                          {                              var value = this.GenerateInt16();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int32:                          {                              var value = this.GenerateInt32();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.Int64:                          {                              var value = this.GenerateInt64();                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortString:                          {                              var value = this.GenerateString(1' 31' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.ShortStringNoSpaces:                          {                              var value = this.GenerateString(1' 31' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.String:                          {                              var value = this.GenerateString(31' 61' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.StringNoSpaces:                          {                              var value = this.GenerateString(31' 61' false);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeString:                          {                              var value = this.GenerateString(61' 256' true);                              property.SetValue(item' value' null);                          }                            break;                      case RandGen.LargeStringNoSpaces:                          {                              var value = this.GenerateString(61' 256' false);                              property.SetValue(item' value' null);                          }                            break;                  }
