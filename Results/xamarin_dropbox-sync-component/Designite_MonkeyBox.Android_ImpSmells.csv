Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,GetMonkeys,Cyclomatic complexity of the method is 9
Long Statement,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,BootstrapDropbox,The length of the statement  "                    Log("Account.LinkedAccountChanged"' "Now linked to {0}"' e.P1 != null ? e.P1.AccountInfo != null ? e.P1.AccountInfo.DisplayName : "nobody" : "null"); " is 149.
Long Statement,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,BootstrapDropbox,The length of the statement  "                    Log("Account.LinkedAccountChanged"' "Now unlinked from {0}"' e.P1 != null ? e.P1.AccountInfo != null ? e.P1.AccountInfo.DisplayName : "nobody" : "null"); " is 153.
Long Statement,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,Log,The length of the statement  "            var tag = String.Format("{0} {1}.{2}"' GetType ().Name' CurrentMonkey == null ? String.Empty : CurrentMonkey.Name' location); " is 125.
Magic Number,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,IsWithinCircularBounds,The following statement contains a magic number: var yy = Math.Sqrt(r2 - xx*xx) + 0.5;
Magic Number,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,GetMonkeys,The following statement contains a magic number: var values = new List<Monkey>(6);
Magic Number,MonkeyBox.Android,MainActivity,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\MainActivity.cs,GetMonkeys,The following statement contains a magic number: results.Count > 6
Magic Number,MonkeyBox,Monkey,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\Monkey.cs,ToFields,The following statement contains a magic number: fields.Set ("Rotation"' Math.PI * Rotation / 180f);
Magic Number,MonkeyBox,Monkey,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\Monkey.cs,Monkey,The following statement contains a magic number: Scale = (float)Math.Max(random.NextDouble()'.33);
Missing Default,Android.Views,MoveGestureDetector,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\Gestures\MoveGestureDetector.cs,HandleStartProgressEvent,The following switch statement is missing a default case: switch (actionCode)  			{  				case MotionEventActions.Down:  				{  					ResetState();  					// In case we missed an UP/CANCEL event  					mPrevEvent = MotionEvent.Obtain(evt);  					mTimeDelta = 0;  					UpdateStateByEvent(evt);  					break;  				}    				case MotionEventActions.Move:  				{  					mGestureInProgress = mListener.OnMoveBegin(this);  					break;  				}  			}
Missing Default,Android.Views,MoveGestureDetector,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\Gestures\MoveGestureDetector.cs,HandleInProgressEvent,The following switch statement is missing a default case: switch (actionCode)  			{  				case MotionEventActions.Up:  				case MotionEventActions.Cancel:  				{  					mListener.OnMoveEnd(this);  					ResetState();  					break;  				}    				case MotionEventActions.Move:  				{  					UpdateStateByEvent(evt);  					// Only accept the event if our relative pressure is within  					// a certain limit. This can help filter shaky data as a  					// finger is lifted.  					if (mCurrPressure / mPrevPressure > PressureThreshold)  					{  						bool updatePrevious = mListener.OnMove(this);  						if (updatePrevious)  						{  							mPrevEvent.Recycle();  							mPrevEvent = MotionEvent.Obtain(evt);  						}  					}  					break;  				}  			}
Missing Default,Android.Views,RotateGestureDetector,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\Gestures\RotateGestureDetector.cs,HandleStartProgressEvent,The following switch statement is missing a default case: switch (actionCode)  			{  				case MotionEventActions.PointerDown:  				{  					// At least the second finger is on screen now  					ResetState();  					// In case we missed an UP/CANCEL event  					mPrevEvent = MotionEvent.Obtain(evt);  					mTimeDelta = 0;  					UpdateStateByEvent(evt);  					// See if we have a sloppy gesture  					mSloppyGesture = IsSloppyGesture(evt);  					if (!mSloppyGesture)  					{  						// No' start gesture now  						mGestureInProgress = mListener.OnRotateBegin(this);  					}  					break;  				}    				case MotionEventActions.Move:  				{  					if (!mSloppyGesture)  					{  						break;  					}  					// See if we still have a sloppy gesture  					mSloppyGesture = IsSloppyGesture(evt);  					if (!mSloppyGesture)  					{  						// No' start normal gesture now  						mGestureInProgress = mListener.OnRotateBegin(this);  					}  					break;  				}    				case MotionEventActions.PointerUp:  				{  					if (!mSloppyGesture)  					{  						break;  					}  					break;  				}  			}
Missing Default,Android.Views,RotateGestureDetector,D:\research\architectureSmells\repos\xamarin_dropbox-sync-component\source\samples\MonkeyBox.Android\Gestures\RotateGestureDetector.cs,HandleInProgressEvent,The following switch statement is missing a default case: switch (actionCode)  			{  				case MotionEventActions.PointerUp:  				{  					// Gesture ended but   					UpdateStateByEvent(evt);  					if (!mSloppyGesture)  					{  						mListener.OnRotateEnd(this);  					}  					ResetState();  					break;  				}    				case MotionEventActions.Cancel:  				{  					if (!mSloppyGesture)  					{  						mListener.OnRotateEnd(this);  					}  					ResetState();  					break;  				}    				case MotionEventActions.Move:  				{  					UpdateStateByEvent(evt);  					// Only accept the event if our relative pressure is within  					// a certain limit. This can help filter shaky data as a  					// finger is lifted.  					if (mCurrPressure / mPrevPressure > PressureThreshold)  					{  						bool updatePrevious = mListener.OnRotate(this);  						if (updatePrevious)  						{  							mPrevEvent.Recycle();  							mPrevEvent = MotionEvent.Obtain(evt);  						}  					}  					break;  				}  			}
