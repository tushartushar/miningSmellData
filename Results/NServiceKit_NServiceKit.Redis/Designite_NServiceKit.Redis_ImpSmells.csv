Implementation smell,Namespace,Class,File,Method,Description
Long Method,NServiceKit.Redis.Pipeline,QueuedRedisOperation,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Pipeline\QueuedRedisOperation.cs,ProcessResult,The method has 129 lines of code.
Complex Method,NServiceKit.Redis,PooledRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\PooledRedisClientManager.Disposable.cs,GetStats,Cyclomatic complexity of the method is 11
Complex Method,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ParseSingleLine,Cyclomatic complexity of the method is 10
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeFromSortedSetByLowestScore,The method has 5 parameters. Parameters: setId' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeFromSortedSetByLowestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeFromSortedSetByLowestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeWithScoresFromSortedSetByLowestScore,The method has 5 parameters. Parameters: setId' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeWithScoresFromSortedSetByLowestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeWithScoresFromSortedSetByLowestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeFromSortedSetByHighestScore,The method has 5 parameters. Parameters: setId' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeFromSortedSetByHighestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeFromSortedSetByHighestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeWithScoresFromSortedSetByHighestScore,The method has 5 parameters. Parameters: setId' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeWithScoresFromSortedSetByHighestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRangeWithScoresFromSortedSetByHighestScore,The method has 5 parameters. Parameters: setId' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis,PooledRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\PooledRedisClientManager.Disposable.cs,PooledRedisClientManager,The method has 6 parameters. Parameters: readWriteHosts' readOnlyHosts' config' initalDb' poolSizeMultiplier' poolTimeOutSeconds
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,Set,The method has 5 parameters. Parameters: key' value' expirySeconds' expiryMs' exists
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,GetRange,The method has 5 parameters. Parameters: commandBytes' setId' min' max' withScores
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,GetRangeByScore,The method has 7 parameters. Parameters: commandBytes' setId' min' max' skip' take' withScores
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,GetRangeByScore,The method has 7 parameters. Parameters: commandBytes' setId' min' max' skip' take' withScores
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRangeByScore,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRangeByScore,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRangeByScoreWithScores,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRangeByScoreWithScores,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRevRangeByScore,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRevRangeByScore,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRevRangeByScoreWithScores,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZRevRangeByScoreWithScores,The method has 5 parameters. Parameters: setId' min' max' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeFromSortedSetByLowestScore,The method has 5 parameters. Parameters: set' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeFromSortedSetByLowestScore,The method has 5 parameters. Parameters: set' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeWithScoresFromSortedSetByLowestScore,The method has 5 parameters. Parameters: set' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeWithScoresFromSortedSetByLowestScore,The method has 5 parameters. Parameters: set' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeFromSortedSetByHighestScore,The method has 5 parameters. Parameters: set' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeFromSortedSetByHighestScore,The method has 5 parameters. Parameters: set' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeWithScoresFromSortedSetByHighestScore,The method has 5 parameters. Parameters: set' fromStringScore' toStringScore' skip' take
Long Parameter List,NServiceKit.Redis.Generic,RedisTypedClient<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedClient_App.cs,GetRangeWithScoresFromSortedSetByHighestScore,The method has 5 parameters. Parameters: set' fromScore' toScore' skip' take
Long Parameter List,NServiceKit.Redis.Support.Locking,IDistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\IDistributedLock.cs,Lock,The method has 5 parameters. Parameters: key' acquisitionTimeout' lockTimeout' lockExpire' client
Long Parameter List,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The method has 5 parameters. Parameters: key' acquisitionTimeout' lockTimeout' lockExpire' client
Long Parameter List,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,RedisSequentialWorkQueue,The method has 5 parameters. Parameters: maxReadPoolSize' maxWritePoolSize' host' port' dequeueLockTimeout
Long Parameter List,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,RedisSequentialWorkQueue,The method has 6 parameters. Parameters: maxReadPoolSize' maxWritePoolSize' host' port' queueName' dequeueLockTimeout
Long Parameter List,NServiceKit.Redis.Support.Queue.Implementation,DequeueManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,DequeueManager,The method has 6 parameters. Parameters: clientManager' workQueue' workItemId' dequeueLockKey' numberOfDequeuedItems' dequeueLockTimeout
Long Parameter List,NServiceKit.Redis.Support.Queue.Implementation,RedisChronologicalWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisChronologicalWorkQueue.cs,RedisChronologicalWorkQueue,The method has 5 parameters. Parameters: maxReadPoolSize' maxWritePoolSize' host' port' queueName
Long Parameter List,NServiceKit.Redis.Support.Queue.Implementation,RedisSimpleWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSimpleWorkQueue.cs,RedisSimpleWorkQueue,The method has 5 parameters. Parameters: maxReadPoolSize' maxWritePoolSize' host' port' queueName
Long Parameter List,NServiceKit.Redis.Support.Queue.Implementation,RedisWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisWorkQueue.cs,RedisWorkQueue,The method has 5 parameters. Parameters: maxReadPoolSize' maxWritePoolSize' host' port' queueName
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetRegisteredTypeIdsWithinPipeline,The length of the parameter registeredTypeIdsWithinPipeline is 31.
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,RegisterTypeId,The length of the parameter registeredTypeIdsWithinPipeline is 31.
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,RegisterTypeIds,The length of the parameter registeredTypeIdsWithinPipeline is 31.
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,RemoveTypeIds,The length of the parameter registeredTypeIdsWithinPipeline is 31.
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,RemoveTypeIds,The length of the parameter registeredTypeIdsWithinPipeline is 31.
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,AddTypeIdsRegisteredDuringPipeline,The length of the parameter registeredTypeIdsWithinPipeline is 31.
Long Identifier,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,,The length of the parameter registeredTypeIdsWithinPipelineMap is 34.
Long Statement,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,AddRangeToSortedSetWithScores,The length of the statement  "			var byteValuesWithScore = valuesWithScore.Select(x => new KeyValuePair<byte[]' double>(x.Key.ToUtf8Bytes()' x.Value)).ToList(); " is 127.
Long Statement,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,Migrate,The length of the statement  "			SendExpectSuccess(Commands.Migrate' host.ToUtf8Bytes()' port.ToUtf8Bytes()' destinationDb.ToUtf8Bytes()' timeoutMs.ToUtf8Bytes()); " is 130.
Long Statement,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,Scan,The length of the statement  "            return SendExpectDeeplyNestedMultiData(Commands.Scan' cursor.ToUtf8Bytes()' "MATCH".ToUtf8Bytes()' pattern.ToUtf8Bytes()' "COUNT".ToUtf8Bytes()' count.Value.ToUtf8Bytes()); " is 172.
Long Statement,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,BRPopLPush,The length of the statement  "            byte[][] result= SendExpectMultiData(Commands.BRPopLPush' fromListId.ToUtf8Bytes()' toListId.ToUtf8Bytes()' timeOutSecs.ToUtf8Bytes()); " is 135.
Long Statement,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,HIncrbyFloat,The length of the statement  "			return SendExpectDouble(Commands.HIncrByFloat' hashId.ToUtf8Bytes()' key' incrementBy.ToString(CultureInfo.InvariantCulture).ToUtf8Bytes()); " is 140.
Long Statement,NServiceKit.Redis.Messaging,MessageHandlerWorker,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\MessageHandlerWorker.cs,Run,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Starting) != WorkerStatus.Starting) return; " is 122.
Long Statement,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,RunLoop,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Starting) != WorkerStatus.Starting) return; " is 122.
Long Statement,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,Start,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Starting' WorkerStatus.Stopped) == WorkerStatus.Stopped) //Should only be 1 thread past this point " is 155.
Long Statement,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,Start,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Starting' WorkerStatus.Stopped) == WorkerStatus.Stopped) //Should only be 1 thread past this point " is 155.
Long Statement,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,RunLoop,The length of the statement  "            if (Interlocked.CompareExchange(ref status' WorkerStatus.Started' WorkerStatus.Starting) != WorkerStatus.Starting) return; " is 122.
Long Statement,NServiceKit.Redis.Support,OrderedDictionary<TKey;TValue>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\OrderedDictionary.cs,RemoveAt,The length of the statement  "				throw new ArgumentOutOfRangeException("index"' "'index' must be non-negative and less than the size of the collection"); " is 120.
Long Statement,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Unlock,The length of the statement  "                    Debug.WriteLine(String.Format("Unlock(): Failed to unlock key {0}; lock has been identifed as a zombie and harvested "' key)); " is 126.
Long Statement,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,Enqueue,The length of the statement  "                        pipe.QueueCommand(r => ((RedisNativeClient)r).RPush(queueNamespace.GlobalCacheKey(workItemId)' client.Serialize(workItem))); " is 124.
Long Statement,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,Dequeue,The length of the statement  "                        workItemDequeueManager = new DequeueManager(clientManager' this' workItemId' GlobalDequeueLockKey(workItemId)' workItems.Count' dequeueLockTimeout); " is 148.
Virtual Method Call from Constructor,NServiceKit.Redis,BasicRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\BasicRedisClientManager.cs,BasicRedisClientManager,The constructor "BasicRedisClientManager" calls a virtual method "OnStart".
Virtual Method Call from Constructor,NServiceKit.Redis,PooledRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\PooledRedisClientManager.Disposable.cs,PooledRedisClientManager,The constructor "PooledRedisClientManager" calls a virtual method "OnStart".
Virtual Method Call from Constructor,NServiceKit.Redis,RedisAllPurposePipeline,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Pipeline\RedisAllPurposePipeline.cs,RedisAllPurposePipeline,The constructor "RedisAllPurposePipeline" calls a virtual method "Init".
Empty Catch Block,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,SafeConnectionClose,The method has an empty catch block.
Empty Catch Block,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,SafeConnectionClose,The method has an empty catch block.
Magic Number,NServiceKit.Redis,BufferPool,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\BufferPool.cs,ResizeAndFlushLeft,The following statement contains a magic number: int newLength = buffer.Length * 2;
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetSlowlog,The following statement contains a magic number: for(int i = 0; i < data.Length; i++)              {                  var log = (object[])data[i];                    var arguments = ((object[]) log[3]).OfType<byte[]>()                      .Select(t => t.FromUtf8Bytes())                      .ToArray();                      list[i] = new SlowlogItem(                      int.Parse((string) log[0]' CultureInfo.InvariantCulture)'                      DateTimeExtensions.FromUnixTime(int.Parse((string) log[1]' CultureInfo.InvariantCulture))'                      int.Parse((string) log[2]' CultureInfo.InvariantCulture)'                      arguments                      );              }
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetSlowlog,The following statement contains a magic number: for(int i = 0; i < data.Length; i++)              {                  var log = (object[])data[i];                    var arguments = ((object[]) log[3]).OfType<byte[]>()                      .Select(t => t.FromUtf8Bytes())                      .ToArray();                      list[i] = new SlowlogItem(                      int.Parse((string) log[0]' CultureInfo.InvariantCulture)'                      DateTimeExtensions.FromUnixTime(int.Parse((string) log[1]' CultureInfo.InvariantCulture))'                      int.Parse((string) log[2]' CultureInfo.InvariantCulture)'                      arguments                      );              }
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetAllEntriesFromHash,The following statement contains a magic number: for (var i = 0; i < multiDataList.Length; i += 2)  			{  				var key = multiDataList[i].FromUtf8Bytes();  				map[key] = multiDataList[i + 1].FromUtf8Bytes();  			}
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 1)  				lexicalValue += value[0] * (int)Math.Pow(256' 3);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 1)  				lexicalValue += value[0] * (int)Math.Pow(256' 3);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 2)  				lexicalValue += value[1] * (int)Math.Pow(256' 2);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 2)  				lexicalValue += value[1] * (int)Math.Pow(256' 2);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 2)  				lexicalValue += value[1] * (int)Math.Pow(256' 2);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 3)  				lexicalValue += value[2] * (int)Math.Pow(256' 1);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 3)  				lexicalValue += value[2] * (int)Math.Pow(256' 1);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 3)  				lexicalValue += value[2] * (int)Math.Pow(256' 1);
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 4)  				lexicalValue += value[3];
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,GetLexicalScore,The following statement contains a magic number: if (value.Length >= 4)  				lexicalValue += value[3];
Magic Number,NServiceKit.Redis,RedisClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisClient_Slowlog.cs,CreateSortedScoreMap,The following statement contains a magic number: for (var i = 0; i < multiDataList.Length; i += 2)  			{  				var key = multiDataList[i].FromUtf8Bytes();  				double value;                  double.TryParse(multiDataList[i + 1].FromUtf8Bytes()' NumberStyles.Any' CultureInfo.InvariantCulture' out value);  				map[key] = value;  			}
Magic Number,NServiceKit.Redis,ShardedConnectionPool,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\ShardedConnectionPool.cs,ShardedConnectionPool,The following statement contains a magic number: this.PoolTimeout = 1000;
Magic Number,NServiceKit.Redis,PooledRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\PooledRedisClientManager.Disposable.cs,PooledRedisClientManager,The following statement contains a magic number: this.PoolSizeMultiplier = poolSizeMultiplier ?? 10;
Magic Number,NServiceKit.Redis,PooledRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\PooledRedisClientManager.Disposable.cs,PooledRedisClientManager,The following statement contains a magic number: this.PoolTimeout = poolTimeOutSeconds != null                  ? poolTimeOutSeconds * 1000                  : 2000;
Magic Number,NServiceKit.Redis,PooledRedisClientManager,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\PooledRedisClientManager.Disposable.cs,PooledRedisClientManager,The following statement contains a magic number: this.PoolTimeout = poolTimeOutSeconds != null                  ? poolTimeOutSeconds * 1000                  : 2000;
Magic Number,NServiceKit.Redis,RedisLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisLock.cs,RedisLock,The following statement contains a magic number: ExecExtensions.RetryUntilTrue(  				() =>  				    {                          //This pattern is taken from the redis command for SETNX http://redis.io/commands/setnx  				                                  //Calculate a unix time for when the lock should expire                          TimeSpan realSpan = timeOut ?? new TimeSpan(365' 0' 0' 0); //if nothing is passed in the timeout hold for a year  				        DateTime expireTime = DateTime.UtcNow.Add(realSpan);  				        string lockString = (expireTime.ToUnixTimeMs() + 1).ToString();                                                    //Try to set the lock' if it does not exist this will succeed and the lock is obtained  				        var nx = redisClient.SetEntryIfNotExists(key' lockString);                          if (nx)                              return true;                            //If we've gotten here then a key for the lock is present. This could be because the lock is                          //correctly acquired or it could be because a client that had acquired the lock crashed (or didn't release it properly).                          //Therefore we need to get the value of the lock to see when it should expire  				        string lockExpireString = redisClient.Get<string>(key);                          long lockExpireTime;                          if (!long.TryParse(lockExpireString' out lockExpireTime))                              return false;                          //If the expire time is greater than the current time then we can't let the lock go yet                          if (lockExpireTime > DateTime.UtcNow.ToUnixTimeMs())                              return false;                            //If the expire time is less than the current time then it wasn't released properly and we can attempt to                           //acquire the lock. This is done by setting the lock to our timeout string AND checking to make sure                          //that what is returned is the old timeout string in order to account for a possible race condition.                          return redisClient.GetAndSetEntry(key' lockString) == lockExpireString;  				    }'  				timeOut  			);
Magic Number,NServiceKit.Redis,RedisSubscription,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisSubscription.cs,ParseSubscriptionResults,The following statement contains a magic number: int componentsPerMsg = IsPSubscription ? 4 : 3;
Magic Number,NServiceKit.Redis,RedisSubscription,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisSubscription.cs,ParseSubscriptionResults,The following statement contains a magic number: int componentsPerMsg = IsPSubscription ? 4 : 3;
Magic Number,NServiceKit.Redis,RedisSubscription,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisSubscription.cs,ParseSubscriptionResults,The following statement contains a magic number: for (var i = 0; i < multiBytes.Length; i += componentsPerMsg)              {                  var messageType = multiBytes[i];                  var channel = multiBytes[i + 1].FromUtf8Bytes();                  if (SubscribeWord.AreEqual(messageType)                      || PSubscribeWord.AreEqual(messageType))                  {                      IsPSubscription = PSubscribeWord.AreEqual(messageType);                        this.SubscriptionCount = int.Parse(multiBytes[i + MsgIndex].FromUtf8Bytes());                        activeChannels.Add(channel);                        if (this.OnSubscribe != null)                      {                          this.OnSubscribe(channel);                      }                  }                  else if (UnSubscribeWord.AreEqual(messageType)                      || PUnSubscribeWord.AreEqual(messageType))                  {                      this.SubscriptionCount = int.Parse(multiBytes[i + 2].FromUtf8Bytes());                        activeChannels.Remove(channel);                        if (this.OnUnSubscribe != null)                      {                          this.OnUnSubscribe(channel);                      }                  }                  else if (MessageWord.AreEqual(messageType))                  {                      var message = multiBytes[i + MsgIndex].FromUtf8Bytes();                        if (this.OnMessage != null)                      {                          this.OnMessage(channel' message);                      }                  }                  else if (PMessageWord.AreEqual(messageType))                  {                      var message = multiBytes[i + MsgIndex + 1].FromUtf8Bytes();                      channel = multiBytes[i + 2].FromUtf8Bytes();                      if (this.OnMessage != null)                      {                          this.OnMessage(channel' message);                      }                  }                  else                  {                      throw new RedisException(                          "Invalid state. Expected [[p]subscribe|[p]unsubscribe|message] got: " + messageType.FromUtf8Bytes());                  }              }
Magic Number,NServiceKit.Redis,RedisSubscription,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisSubscription.cs,ParseSubscriptionResults,The following statement contains a magic number: for (var i = 0; i < multiBytes.Length; i += componentsPerMsg)              {                  var messageType = multiBytes[i];                  var channel = multiBytes[i + 1].FromUtf8Bytes();                  if (SubscribeWord.AreEqual(messageType)                      || PSubscribeWord.AreEqual(messageType))                  {                      IsPSubscription = PSubscribeWord.AreEqual(messageType);                        this.SubscriptionCount = int.Parse(multiBytes[i + MsgIndex].FromUtf8Bytes());                        activeChannels.Add(channel);                        if (this.OnSubscribe != null)                      {                          this.OnSubscribe(channel);                      }                  }                  else if (UnSubscribeWord.AreEqual(messageType)                      || PUnSubscribeWord.AreEqual(messageType))                  {                      this.SubscriptionCount = int.Parse(multiBytes[i + 2].FromUtf8Bytes());                        activeChannels.Remove(channel);                        if (this.OnUnSubscribe != null)                      {                          this.OnUnSubscribe(channel);                      }                  }                  else if (MessageWord.AreEqual(messageType))                  {                      var message = multiBytes[i + MsgIndex].FromUtf8Bytes();                        if (this.OnMessage != null)                      {                          this.OnMessage(channel' message);                      }                  }                  else if (PMessageWord.AreEqual(messageType))                  {                      var message = multiBytes[i + MsgIndex + 1].FromUtf8Bytes();                      channel = multiBytes[i + 2].FromUtf8Bytes();                      if (this.OnMessage != null)                      {                          this.OnMessage(channel' message);                      }                  }                  else                  {                      throw new RedisException(                          "Invalid state. Expected [[p]subscribe|[p]unsubscribe|message] got: " + messageType.FromUtf8Bytes());                  }              }
Magic Number,NServiceKit.Redis,RedisTransaction,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Transaction\RedisTransaction.cs,Commit,The following statement contains a magic number: try              {                  _numCommands = QueuedCommands.Count / 2;                    //insert multi command at beginning                  QueuedCommands.Insert(0' new QueuedRedisCommand()                  {                      VoidReturnCommand = r => Init()'                      VoidReadCommand = RedisClient.ExpectOk'                  });                      //the first half of the responses will be "QUEUED"'                  // so insert reading of multiline after these responses                  QueuedCommands.Insert(_numCommands + 1' new QueuedRedisOperation()                  {                      IntReadCommand = RedisClient.ReadMultiDataResultCount'                      OnSuccessIntCallback = handleMultiDataResultCount                  });                    // add Exec command at end (not queued)                  QueuedCommands.Add(new RedisCommand()                  {                      VoidReturnCommand = r => Exec()                  });                    //execute transaction                  Exec();                                    /////////////////////////////                  //receive expected results                  foreach (var queuedCommand in QueuedCommands)                  {                      queuedCommand.ProcessResult();                  }              }              catch (RedisTransactionFailedException)              {                  rc = false;              }              finally              {                  RedisClient.Transaction = null;                  ClosePipeline();                  RedisClient.AddTypeIdsRegisteredDuringPipeline();              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,Scan,The following statement contains a magic number: if (count == null)                  count = 10;
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: var mergedBytes = new byte[2 + pairs.Count * 2][];
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: var mergedBytes = new byte[2 + pairs.Count * 2][];
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToFastUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToFastUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToFastUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToFastUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: var mergedBytes = new byte[2 + pairs.Count * 2][];
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: var mergedBytes = new byte[2 + pairs.Count * 2][];
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ZAdd,The following statement contains a magic number: for (var i = 0; i < pairs.Count; i++)              {                  mergedBytes[i * 2 + 2] = pairs[i].Value.ToUtf8Bytes();                  mergedBytes[i * 2 + 3] = pairs[i].Key;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,Connect,The following statement contains a magic number: try              {                  if (ConnectTimeout == 0)                  {                      socket.Connect(Host' Port);                  }                  else                  {                      var connectResult = socket.BeginConnect(Host' Port' null' null);                      connectResult.AsyncWaitHandle.WaitOne(ConnectTimeout' true);                  }                    if (!socket.Connected)                  {                      socket.Close();                      socket = null;                      HadExceptions = true;                      return;                  }                  Bstream = new BufferedStream(new NetworkStream(socket)' 16 * 1024);                    if (Password != null)                      SendExpectSuccess(Commands.Auth' Password.ToUtf8Bytes());                    if (db != 0)                      SendExpectSuccess(Commands.Select' db.ToUtf8Bytes());                    var ipEndpoint = socket.LocalEndPoint as IPEndPoint;                  clientPort = ipEndpoint != null ? ipEndpoint.Port : -1;                  lastCommand = null;                  lastSocketException = null;                  LastConnectedAtTimestamp = Stopwatch.GetTimestamp();                    if (ConnectionFilter != null)                  {                      ConnectionFilter(this);                  }              }              catch (SocketException ex)              {                  if (socket != null)                      socket.Close();                  socket = null;                    HadExceptions = true;                  var throwEx = new RedisException("could not connect to redis Instance at " + Host + ":" + Port' ex);                  log.Error(throwEx.Message' ex);                  throw throwEx;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,Connect,The following statement contains a magic number: try              {                  if (ConnectTimeout == 0)                  {                      socket.Connect(Host' Port);                  }                  else                  {                      var connectResult = socket.BeginConnect(Host' Port' null' null);                      connectResult.AsyncWaitHandle.WaitOne(ConnectTimeout' true);                  }                    if (!socket.Connected)                  {                      socket.Close();                      socket = null;                      HadExceptions = true;                      return;                  }                  Bstream = new BufferedStream(new NetworkStream(socket)' 16 * 1024);                    if (Password != null)                      SendExpectSuccess(Commands.Auth' Password.ToUtf8Bytes());                    if (db != 0)                      SendExpectSuccess(Commands.Select' db.ToUtf8Bytes());                    var ipEndpoint = socket.LocalEndPoint as IPEndPoint;                  clientPort = ipEndpoint != null ? ipEndpoint.Port : -1;                  lastCommand = null;                  lastSocketException = null;                  LastConnectedAtTimestamp = Stopwatch.GetTimestamp();                    if (ConnectionFilter != null)                  {                      ConnectionFilter(this);                  }              }              catch (SocketException ex)              {                  if (socket != null)                      socket.Close();                  socket = null;                    HadExceptions = true;                  var throwEx = new RedisException("could not connect to redis Instance at " + Host + ":" + Port' ex);                  log.Error(throwEx.Message' ex);                  throw throwEx;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,IsSocketConnected,The following statement contains a magic number: var part1 = socket.Poll(1000' SelectMode.SelectRead);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,GetCmdBytes,The following statement contains a magic number: var cmdBytes = new byte[1 + strLinesLength + 2];
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,GetCmdBytes,The following statement contains a magic number: cmdBytes[2 + strLinesLength] = 0x0A;
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,CmdLog,The following statement contains a magic number: if (this.lastCommand.Length > 100)              {                  this.lastCommand = this.lastCommand.Substring(0' 100) + "...";              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,CmdLog,The following statement contains a magic number: if (this.lastCommand.Length > 100)              {                  this.lastCommand = this.lastCommand.Substring(0' 100) + "...";              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ExpectSuccess,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") && s.Length >= 4 ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ExpectSuccess,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") && s.Length >= 4 ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ExpectWord,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ExpectCode,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadInt,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadLong,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ParseSingleLine,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(r.StartsWith("-ERR") ? r.Substring(5) : r.Substring(1));
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadMultiData,The following statement contains a magic number: switch (c)              {                  // Some commands like BRPOPLPUSH may return Bulk Reply instead of Multi-bulk                  case '$':                      var t = new byte[2][];                      t[1] = ParseSingleLine(string.Concat(char.ToString((char)c)' s));                      return t;                    case '-':                      throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);                    case '*':                      int count;                      if (int.TryParse(s' out count))                      {                          if (count == -1)                          {                              //redis is in an invalid state                              return new byte[0][];                          }                            var result = new byte[count][];                            for (int i = 0; i < count; i++)                              result[i] = ReadData();                            return result;                      }                      break;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadMultiData,The following statement contains a magic number: switch (c)              {                  // Some commands like BRPOPLPUSH may return Bulk Reply instead of Multi-bulk                  case '$':                      var t = new byte[2][];                      t[1] = ParseSingleLine(string.Concat(char.ToString((char)c)' s));                      return t;                    case '-':                      throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);                    case '*':                      int count;                      if (int.TryParse(s' out count))                      {                          if (count == -1)                          {                              //redis is in an invalid state                              return new byte[0][];                          }                            var result = new byte[count][];                            for (int i = 0; i < count; i++)                              result[i] = ReadData();                            return result;                      }                      break;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadDeeplyNestedMultiDataItem,The following statement contains a magic number: switch (c)              {                  case '$':                      return ParseSingleLine(string.Concat(char.ToString((char)c)' s));                    case '-':                      throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);                    case '*':                      int count;                      if (int.TryParse(s' out count))                      {                          var array = new object[count];                          for (int i = 0; i < count; i++)                          {                              array[i] = ReadDeeplyNestedMultiDataItem();                          }                            return array;                      }                      break;                    default:                      return s;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadMultiDataResultCount,The following statement contains a magic number: if (c == '-')                  throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,MergeCommandWithKeysAndValues,The following statement contains a magic number: var keysAndValuesLength = keys.Length * 2 + keyValueStartIndex;
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,MergeCommandWithKeysAndValues,The following statement contains a magic number: for (var i = keyValueStartIndex; i < keysAndValuesLength; i += 2)              {                  keysAndValues[i] = keys[j];                  keysAndValues[i + 1] = values[j];                  j++;              }
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,MergeCommandWithArgs,The following statement contains a magic number: var mergedBytes = new byte[2 + args.Length][];
Magic Number,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,MergeCommandWithArgs,The following statement contains a magic number: for (var i = 0; i < args.Length; i++)              {                  mergedBytes[i + 2] = args[i];              }
Magic Number,NServiceKit.Redis.Generic,RedisTypedTransaction<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Generic\RedisTypedTransaction.cs,Commit,The following statement contains a magic number: try              {                  _numCommands = QueuedCommands.Count / 2;                    //insert multi command at beginning                  QueuedCommands.Insert(0' new QueuedRedisCommand()                  {                      VoidReturnCommand = r => Init()'                      VoidReadCommand = RedisClient.ExpectOk'                  });                      //the first half of the responses will be "QUEUED"'                  // so insert reading of multiline after these responses                  QueuedCommands.Insert(_numCommands + 1' new QueuedRedisOperation()                  {                      IntReadCommand = RedisClient.ReadMultiDataResultCount'                      OnSuccessIntCallback = handleMultiDataResultCount                  });                    // add Exec command at end (not queued)                  QueuedCommands.Add(new RedisCommand()                  {                      VoidReturnCommand = r => Exec()                  });                    //execute transaction                  Exec();                    /////////////////////////////                  //receive expected results                  foreach (var queuedCommand in QueuedCommands)                  {                      queuedCommand.ProcessResult();                  }              }              catch (RedisTransactionFailedException)              {                  rc = false;              }              finally              {                  RedisClient.Transaction = null;                  ClosePipeline();                  RedisClient.AddTypeIdsRegisteredDuringPipeline();              }
Magic Number,NServiceKit.Redis.Messaging,MessageHandlerWorker,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\MessageHandlerWorker.cs,Stop,The following statement contains a magic number: if (Interlocked.CompareExchange(ref status' WorkerStatus.Stopping' WorkerStatus.Started) == WorkerStatus.Started)              {                  Log.Debug("Stopping MQ Handler Worker: {0}...".Fmt(QueueName));                  Thread.Sleep(100);                  lock (msgLock)                  {                      Monitor.Pulse(msgLock);                  }              }
Magic Number,NServiceKit.Redis.Messaging,MessageHandlerWorker,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\MessageHandlerWorker.cs,KillBgThreadIfExists,The following statement contains a magic number: try              {                  if (bgThread != null && bgThread.IsAlive)                  {                      //give it a small chance to die gracefully                      if (!bgThread.Join(500))                      {                          //Ideally we shouldn't get here' but lets try our hardest to clean it up                          Log.Warn("Interrupting previous Background Worker: " + bgThread.Name);                          bgThread.Interrupt();                          if (!bgThread.Join(TimeSpan.FromSeconds(3)))                          {                              Log.Warn(bgThread.Name + " just wont die' so we're now aborting it...");                              bgThread.Abort();                          }                      }                  }              }              finally              {                  bgThread = null;                  status = WorkerStatus.Stopped;              }
Magic Number,NServiceKit.Redis.Messaging,MessageHandlerWorker,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\MessageHandlerWorker.cs,KillBgThreadIfExists,The following statement contains a magic number: try              {                  if (bgThread != null && bgThread.IsAlive)                  {                      //give it a small chance to die gracefully                      if (!bgThread.Join(500))                      {                          //Ideally we shouldn't get here' but lets try our hardest to clean it up                          Log.Warn("Interrupting previous Background Worker: " + bgThread.Name);                          bgThread.Interrupt();                          if (!bgThread.Join(TimeSpan.FromSeconds(3)))                          {                              Log.Warn(bgThread.Name + " just wont die' so we're now aborting it...");                              bgThread.Abort();                          }                      }                  }              }              finally              {                  bgThread = null;                  status = WorkerStatus.Stopped;              }
Magic Number,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,SleepBackOffMultiplier,The following statement contains a magic number: const int MaxSleepMs = 60 * 1000;
Magic Number,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,SleepBackOffMultiplier,The following statement contains a magic number: const int MaxSleepMs = 60 * 1000;
Magic Number,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,SleepBackOffMultiplier,The following statement contains a magic number: var nextTry = Math.Min(                  rand.Next((int)Math.Pow(continuousErrorsCount' 3)' (int)Math.Pow(continuousErrorsCount + 1' 3) + 1)'                  MaxSleepMs);
Magic Number,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,SleepBackOffMultiplier,The following statement contains a magic number: var nextTry = Math.Min(                  rand.Next((int)Math.Pow(continuousErrorsCount' 3)' (int)Math.Pow(continuousErrorsCount + 1' 3) + 1)'                  MaxSleepMs);
Magic Number,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,KillBgThreadIfExists,The following statement contains a magic number: if (bgThread != null && bgThread.IsAlive)              {                  //give it a small chance to die gracefully                  if (!bgThread.Join(500))                  {                      //Ideally we shouldn't get here' but lets try our hardest to clean it up                      Log.Warn("Interrupting previous Background Thread: " + bgThread.Name);                      bgThread.Interrupt();                      if (!bgThread.Join(TimeSpan.FromSeconds(3)))                      {                          Log.Warn(bgThread.Name + " just wont die' so we're now aborting it...");                          bgThread.Abort();                      }                  }                  bgThread = null;              }
Magic Number,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,KillBgThreadIfExists,The following statement contains a magic number: if (bgThread != null && bgThread.IsAlive)              {                  //give it a small chance to die gracefully                  if (!bgThread.Join(500))                  {                      //Ideally we shouldn't get here' but lets try our hardest to clean it up                      Log.Warn("Interrupting previous Background Thread: " + bgThread.Name);                      bgThread.Interrupt();                      if (!bgThread.Join(TimeSpan.FromSeconds(3)))                      {                          Log.Warn(bgThread.Name + " just wont die' so we're now aborting it...");                          bgThread.Abort();                      }                  }                  bgThread = null;              }
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,RedisMqServer,The following statement contains a magic number: this.KeepAliveRetryAfterMs = 2000;
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,KillBgThreadIfExists,The following statement contains a magic number: if (bgThread != null && bgThread.IsAlive)              {                  //give it a small chance to die gracefully                  if (!bgThread.Join(500))                  {                      //Ideally we shouldn't get here' but lets try our hardest to clean it up                      Log.Warn("Interrupting previous Background Thread: " + bgThread.Name);                      bgThread.Interrupt();                      if (!bgThread.Join(TimeSpan.FromSeconds(3)))                      {                          Log.Warn(bgThread.Name + " just wont die' so we're now aborting it...");                          bgThread.Abort();                      }                  }                  bgThread = null;              }
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,KillBgThreadIfExists,The following statement contains a magic number: if (bgThread != null && bgThread.IsAlive)              {                  //give it a small chance to die gracefully                  if (!bgThread.Join(500))                  {                      //Ideally we shouldn't get here' but lets try our hardest to clean it up                      Log.Warn("Interrupting previous Background Thread: " + bgThread.Name);                      bgThread.Interrupt();                      if (!bgThread.Join(TimeSpan.FromSeconds(3)))                      {                          Log.Warn(bgThread.Name + " just wont die' so we're now aborting it...");                          bgThread.Abort();                      }                  }                  bgThread = null;              }
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,SleepBackOffMultiplier,The following statement contains a magic number: const int MaxSleepMs = 60 * 1000;
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,SleepBackOffMultiplier,The following statement contains a magic number: const int MaxSleepMs = 60 * 1000;
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,SleepBackOffMultiplier,The following statement contains a magic number: var nextTry = Math.Min(                  rand.Next((int)Math.Pow(continuousErrorsCount' 3)' (int)Math.Pow(continuousErrorsCount + 1' 3) + 1)'                  MaxSleepMs);
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,SleepBackOffMultiplier,The following statement contains a magic number: var nextTry = Math.Min(                  rand.Next((int)Math.Pow(continuousErrorsCount' 3)' (int)Math.Pow(continuousErrorsCount + 1' 3) + 1)'                  MaxSleepMs);
Magic Number,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,Dispose,The following statement contains a magic number: try              {                  Thread.Sleep(100); //give it a small chance to die gracefully                  KillBgThreadIfExists();              }              catch (Exception ex)              {                  if (this.ErrorHandler != null) this.ErrorHandler(ex);              }
Magic Number,NServiceKit.Redis.Messaging,RedisMessageQueueClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMessageQueueClient.cs,RedisMessageQueueClient,The following statement contains a magic number: this.MaxSuccessQueueSize = 100;
Magic Number,NServiceKit.Redis.Messaging,RedisMessageQueueClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMessageQueueClient.cs,Get,The following statement contains a magic number: return unblockingKeyAndValue.Length != 2                   ? null                   : unblockingKeyAndValue[1];
Magic Number,NServiceKit.Redis.Support,ConsistentHash<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\ConsistentHash.cs,ModifiedBinarySearch,The following statement contains a magic number: while (max - min > 1)  			{  				int mid = (max + min) / 2;  				if (sortedArray[mid] >= val)  				{  					max = mid;  				}  				else  				{  					min = mid;  				}  			}
Magic Number,NServiceKit.Redis.Support,ConsistentHash<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\ConsistentHash.cs,Md5Hash,The following statement contains a magic number: using (var hash = MD5.Create())  			{  				byte[] data = hash.ComputeHash(Encoding.UTF8.GetBytes(key));  				var a = BitConverter.ToUInt64(data' 0);  				var b = BitConverter.ToUInt64(data' 8);  				ulong hashCode = a ^ b;  				return hashCode;  			}
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The following statement contains a magic number: const int sleepIfLockSet = 200;
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The following statement contains a magic number: acquisitionTimeout *= 1000;
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The following statement contains a magic number: var ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The following statement contains a magic number: while (wasSet == LOCK_NOT_ACQUIRED && totalTime < acquisitionTimeout)  			{  				int count = 0;  				while (wasSet == 0 && count < tryCount && totalTime < acquisitionTimeout)  				{  					System.Threading.Thread.Sleep(sleepIfLockSet);  					totalTime += sleepIfLockSet;					  					ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  					newLockExpire = CalculateLockExpire(ts' lockTimeout);                      wasSet = localClient.SetNX(key' BitConverter.GetBytes(newLockExpire));  					count++;  				}  				// acquired lock!                  if (wasSet != LOCK_NOT_ACQUIRED) break;    				// handle possibliity of crashed client still holding the lock                  using (var pipe = localClient.CreatePipeline())  				{  				    long lockValue=0;  					pipe.QueueCommand(r => ((RedisNativeClient)r).Watch(key));  					pipe.QueueCommand(r => ((RedisNativeClient)r).Get(key)' x => lockValue = (x != null) ? BitConverter.ToInt64(x'0) : 0);  					pipe.Flush();    					// if lock value is 0 (key is empty)' or expired' then we can try to acquire it                      ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  					if (lockValue < ts.TotalSeconds)  					{  						ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  						newLockExpire = CalculateLockExpire(ts' lockTimeout);  						using (var trans = localClient.CreateTransaction())  						{  							var expire = newLockExpire;  							trans.QueueCommand(r => ((RedisNativeClient)r).Set(key' BitConverter.GetBytes(expire)));  							if (trans.Commit())  								wasSet = LOCK_RECOVERED; //recovered lock!  						}  					}  					else  					{                          localClient.UnWatch();  					}  				}                  if (wasSet != LOCK_NOT_ACQUIRED) break;  				System.Threading.Thread.Sleep(sleepIfLockSet);  				totalTime += sleepIfLockSet;  			}
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The following statement contains a magic number: while (wasSet == LOCK_NOT_ACQUIRED && totalTime < acquisitionTimeout)  			{  				int count = 0;  				while (wasSet == 0 && count < tryCount && totalTime < acquisitionTimeout)  				{  					System.Threading.Thread.Sleep(sleepIfLockSet);  					totalTime += sleepIfLockSet;					  					ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  					newLockExpire = CalculateLockExpire(ts' lockTimeout);                      wasSet = localClient.SetNX(key' BitConverter.GetBytes(newLockExpire));  					count++;  				}  				// acquired lock!                  if (wasSet != LOCK_NOT_ACQUIRED) break;    				// handle possibliity of crashed client still holding the lock                  using (var pipe = localClient.CreatePipeline())  				{  				    long lockValue=0;  					pipe.QueueCommand(r => ((RedisNativeClient)r).Watch(key));  					pipe.QueueCommand(r => ((RedisNativeClient)r).Get(key)' x => lockValue = (x != null) ? BitConverter.ToInt64(x'0) : 0);  					pipe.Flush();    					// if lock value is 0 (key is empty)' or expired' then we can try to acquire it                      ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  					if (lockValue < ts.TotalSeconds)  					{  						ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  						newLockExpire = CalculateLockExpire(ts' lockTimeout);  						using (var trans = localClient.CreateTransaction())  						{  							var expire = newLockExpire;  							trans.QueueCommand(r => ((RedisNativeClient)r).Set(key' BitConverter.GetBytes(expire)));  							if (trans.Commit())  								wasSet = LOCK_RECOVERED; //recovered lock!  						}  					}  					else  					{                          localClient.UnWatch();  					}  				}                  if (wasSet != LOCK_NOT_ACQUIRED) break;  				System.Threading.Thread.Sleep(sleepIfLockSet);  				totalTime += sleepIfLockSet;  			}
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,Lock,The following statement contains a magic number: while (wasSet == LOCK_NOT_ACQUIRED && totalTime < acquisitionTimeout)  			{  				int count = 0;  				while (wasSet == 0 && count < tryCount && totalTime < acquisitionTimeout)  				{  					System.Threading.Thread.Sleep(sleepIfLockSet);  					totalTime += sleepIfLockSet;					  					ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  					newLockExpire = CalculateLockExpire(ts' lockTimeout);                      wasSet = localClient.SetNX(key' BitConverter.GetBytes(newLockExpire));  					count++;  				}  				// acquired lock!                  if (wasSet != LOCK_NOT_ACQUIRED) break;    				// handle possibliity of crashed client still holding the lock                  using (var pipe = localClient.CreatePipeline())  				{  				    long lockValue=0;  					pipe.QueueCommand(r => ((RedisNativeClient)r).Watch(key));  					pipe.QueueCommand(r => ((RedisNativeClient)r).Get(key)' x => lockValue = (x != null) ? BitConverter.ToInt64(x'0) : 0);  					pipe.Flush();    					// if lock value is 0 (key is empty)' or expired' then we can try to acquire it                      ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  					if (lockValue < ts.TotalSeconds)  					{  						ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));  						newLockExpire = CalculateLockExpire(ts' lockTimeout);  						using (var trans = localClient.CreateTransaction())  						{  							var expire = newLockExpire;  							trans.QueueCommand(r => ((RedisNativeClient)r).Set(key' BitConverter.GetBytes(expire)));  							if (trans.Commit())  								wasSet = LOCK_RECOVERED; //recovered lock!  						}  					}  					else  					{                          localClient.UnWatch();  					}  				}                  if (wasSet != LOCK_NOT_ACQUIRED) break;  				System.Threading.Thread.Sleep(sleepIfLockSet);  				totalTime += sleepIfLockSet;  			}
Magic Number,NServiceKit.Redis.Support.Locking,DistributedLock,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Locking\DistributedLock.cs,CalculateLockExpire,The following statement contains a magic number: return (long)(ts.TotalSeconds + timeout + 1.5);
Magic Number,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,PrepareNextWorkItem,The following statement contains a magic number: if (ts.TotalMinutes > 5)              {                  HarvestZombies();                  harvestTime = now;              }
Magic Number,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,HarvestZombies,The following statement contains a magic number: using (var disposableClient = clientManager.GetDisposableClient<SerializingRedisClient>())              {                  var client = disposableClient.Client;                  var dequeueWorkItemIds = client.SMembers(dequeueIdSet);                  if (dequeueWorkItemIds.Length == 0) return false;                    var keys = new string[dequeueWorkItemIds.Length];                  for (int i = 0; i < dequeueWorkItemIds.Length; ++i)                      keys[i] = GlobalDequeueLockKey(client.Deserialize(dequeueWorkItemIds[i]));                  var dequeueLockVals = client.MGet(keys);                    var ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));                  for (int i = 0; i < dequeueLockVals.Length; ++i)                  {                      double lockValue = (dequeueLockVals[i] != null) ? BitConverter.ToInt64(dequeueLockVals[i]' 0) : 0;                      if (lockValue < ts.TotalSeconds)                          rc |= TryForceReleaseLock(client' (string) client.Deserialize(dequeueWorkItemIds[i]));                  }              }
Magic Number,NServiceKit.Redis.Support.Queue.Implementation,RedisSequentialWorkQueue<T>,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Support\Queue\Implementation\RedisSequentialWorkQueue.Locks.cs,TryForceReleaseLock,The following statement contains a magic number: var ts = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0));
Missing Default,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,GetEntryType,The following switch statement is missing a default case: switch (Type(key))              {                  case "none":                      return RedisKeyType.None;                  case "string":                      return RedisKeyType.String;                  case "set":                      return RedisKeyType.Set;                  case "list":                      return RedisKeyType.List;                  case "zset":                      return RedisKeyType.SortedSet;                  case "hash":                      return RedisKeyType.Hash;              }
Missing Default,NServiceKit.Redis,RedisNativeClient,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\RedisNativeClient.cs,ReadMultiData,The following switch statement is missing a default case: switch (c)              {                  // Some commands like BRPOPLPUSH may return Bulk Reply instead of Multi-bulk                  case '$':                      var t = new byte[2][];                      t[1] = ParseSingleLine(string.Concat(char.ToString((char)c)' s));                      return t;                    case '-':                      throw CreateResponseError(s.StartsWith("ERR") ? s.Substring(4) : s);                    case '*':                      int count;                      if (int.TryParse(s' out count))                      {                          if (count == -1)                          {                              //redis is in an invalid state                              return new byte[0][];                          }                            var result = new byte[count][];                            for (int i = 0; i < count; i++)                              result[i] = ReadData();                            return result;                      }                      break;              }
Missing Default,NServiceKit.Redis.Messaging,RedisMqHost,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqHost.cs,GetStatus,The following switch statement is missing a default case: switch (Interlocked.CompareExchange(ref status' 0' 0))              {                  case WorkerStatus.Disposed:                      return "Disposed";                  case WorkerStatus.Stopped:                      return "Stopped";                  case WorkerStatus.Stopping:                      return "Stopping";                  case WorkerStatus.Starting:                      return "Starting";                  case WorkerStatus.Started:                      return "Started";              }
Missing Default,NServiceKit.Redis.Messaging,RedisMqServer,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\RedisMqServer.cs,GetStatus,The following switch statement is missing a default case: switch (Interlocked.CompareExchange(ref status' 0' 0))              {                  case WorkerStatus.Disposed:                      return "Disposed";                  case WorkerStatus.Stopped:                      return "Stopped";                  case WorkerStatus.Stopping:                      return "Stopping";                  case WorkerStatus.Starting:                      return "Starting";                  case WorkerStatus.Started:                      return "Started";              }
Missing Default,NServiceKit.Redis.Messaging,WorkerStatus,C:\repos\NServiceKit_NServiceKit.Redis\src\NServiceKit.Redis\Messaging\WorkerStatus.cs,ToString,The following switch statement is missing a default case: switch (workerStatus)              {                  case Disposed:                      return "Disposed";                  case Stopped:                      return "Stopped";                  case Stopping:                      return "Stopping";                  case Starting:                      return "Starting";                  case Started:                      return "Started";              }
