Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,sones.Plugins.SonesGQL.DBExport,GraphDBExport_GQL,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBExport\Implementations\GraphDBExport\GraphDBExport_GQL.cs,Export,The method has 9 parameters. Parameters: destination' myGrammar' myGraphDB' myGraphQL' mySecurityToken' myTransactionToken' myVertexTypes' myEdgeTypes' myDumpType
Long Parameter List,sones.Plugins.SonesGQL.DBExport,GraphDBExport_GQL,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBExport\Implementations\GraphDBExport\GraphDBExport_GQL.cs,Export,The method has 8 parameters. Parameters: myGrammar' myGraphDB' myGraphQL' mySecurityToken' myTransactionToken' myVertexTypes' myEdgeTypes' myDumpType
Long Parameter List,sones.Plugins.SonesGQL.DBExport,GraphDBExport_GQL,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBExport\Implementations\GraphDBExport\GraphDBExport_GQL.cs,AddVertexTypeAndAttributesRecursivly,The method has 5 parameters. Parameters: myGraphDB' mySecurityToken' myTransactionToken' type' types
Long Parameter List,sones.Plugins.SonesGQL.DBExport,GraphDBExport_GQL,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBExport\Implementations\GraphDBExport\GraphDBExport_GQL.cs,AddEdgeTypeAndAttributesRecursivly,The method has 5 parameters. Parameters: myGraphDB' mySecurityToken' myTransactionToken' type' types
Magic Number,sones.Plugins.SonesGQL.DBExport,GraphDBExport_GQL,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBExport\Implementations\GraphDBExport\GraphDBExport_GQL.cs,OpenStream,The following statement contains a magic number: if (String.IsNullOrEmpty(destination))              {                  _TypeOfOutputDestination = TypeOfOutputDestination.QueryResult;              }              else if (destination.ToLower().StartsWith(@"file:\\"))              {                  #region file:                    _TypeOfOutputDestination = TypeOfOutputDestination.File;                  try                  {                      if (!destination.EndsWith(".gql"))                          destination = new StringBuilder(destination).Append(".gql").ToString();                        _Stream = new StreamWriter(File.Create(destination.Substring(@"file:\\".Length).TrimStart('\\')));                  }                  catch (Exception ex)                  {                      throw new StreamWriterException("System.IO.StreamWriter"' "Error create File."' ex);                  }                    #endregion              }              else if (destination.ToLower().StartsWith("http://"))              {                  #region http                    _TypeOfOutputDestination = TypeOfOutputDestination.Http;                  try                  {                      _HttpWebRequest = (HttpWebRequest)WebRequest.Create(destination);                      _HttpWebRequest.Method = "PUT";                      _HttpWebRequest.Timeout = 1000;                      _Stream = new StreamWriter(_HttpWebRequest.GetRequestStream());                  }                  catch (Exception ex)                  {                      throw new StreamWriterException("System.IO.StreamWriter"' "Error on HttpWebRequest."' ex);                  }                    #endregion              }              else              {                  throw new InvalidDumpLocationException(destination' @"file:\\"' "http://"' "");              }
