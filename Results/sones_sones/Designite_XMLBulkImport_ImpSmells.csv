Implementation smell,Namespace,Class,File,Method,Description
Long Method,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteInsert,The method has 133 lines of code.
Complex Method,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteImport,Cyclomatic complexity of the method is 11
Complex Method,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteInsert,Cyclomatic complexity of the method is 11
Complex Method,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteSingleLink,Cyclomatic complexity of the method is 11
Complex Method,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteMultiLink,Cyclomatic complexity of the method is 9
Complex Method,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteLink,Cyclomatic complexity of the method is 10
Long Parameter List,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,Add,The method has 5 parameters. Parameters: mySourceVertexTypeID' mySourceVertexID' myTargetVertexTypeID' myTargetVertexID' myPropertyID
Long Parameter List,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,Import,The method has 11 parameters. Parameters: myLocation' myGraphDB' myGraphQL' mySecurityToken' myTransactionToken' myParallelTasks' myComments' myOffset' myLimit' myVerbosityType' myOptions
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,Location,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\Location.cs,ExecuteStore,The length of the statement  "            var stream = new FileStream(myPath' FileMode.Create' FileAccess.Write' FileShare.None' Environment.SystemPageSize' FileOptions.SequentialScan); " is 143.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,Initialize,The length of the statement  "                (long)(2147480000 / IncomingEdge.Size)'                     //about 2GB (max data size in .NET) divided by the size of edges" is 124.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,Import,The length of the statement  "            _resultingFS = (IGraphFS) typeof(SonesGraphDB).GetField("_iGraphFS"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(_db);" is 131.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,GetResult,The length of the statement  "            return new VertexView(new Dictionary<string' object> { { "Number of import statements:"' _currentImport } }' null).SingleEnumerable();" is 134.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,InsertIncomingEdges,The length of the statement  "                    _resultingFS.UpdateVertex(_security' _transaction' toAdd[0].TargetVertexID' toAdd[0].TargetVertexTypeID' ConvertIncomingEdgesToUpdateDefinition(toAdd)' false);" is 159.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,InsertIncomingEdges,The length of the statement  "                        _logger.Log(Level.SEVERE' "An exception was thrown:{0}\n{1}"' current.GetType().FullName' current.StackTrace.ToString());" is 121.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteInsert,The length of the statement  "                var forResultingFS = new VertexAddDefinition(vertexID' vertexTypeID' edition' hyper' single' null' null' comment' creation' modification' structured' unstructured);" is 164.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteInsert,The length of the statement  "                    _logger.Log(Level.SEVERE' "An exception was thrown:{0}\n{1}"' current.GetType().FullName' current.StackTrace.ToString());" is 121.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ConvertOutgoingEdges,The length of the statement  "                var add = new HyperEdgeAddDefinition(propID' _edgeTypes[propID]' mySource' multiLink.Links.Select(_ => ConvertLink(_' propID' mySource))' null' date' date' null' null);" is 168.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ConvertLink,The length of the statement  "            return new SingleEdgeAddDefinition(myPropertyID' _edgeTypes[myPropertyID]' mySource' target' comment' creation' modification' null' null);" is 138.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ConvertStructuredProperties,The length of the statement  "                        _logger.Log(Level.WARNING' String.Format("Could not convert {0} into {1} of vertex type {2} and property {3}"' value.Value' _propertyTypes[id].Name' myVertexType.Name' value.Key));" is 180.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,GenerateUpdateDefinition,The length of the statement  "            return new VertexUpdateDefinition(mySingleEdgeUpdate: new SingleEdgeUpdate(myOutgoingSingleEdges)' myHyperEdgeUpdate: new HyperEdgeUpdate(myOutgoingHyperEdges)' myToBeAddedIncomingEdges: myIncomingEdges);" is 204.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,CreateSingleEdgeUpdateDefinition,The length of the statement  "                new VertexInformation(sourceVertex.VertexTypeID' sourceVertex.VertexID' sourceVertex.VertexRevisionID' sourceVertex.EditionName)'" is 129.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,CreateSingleEdgeUpdateDefinition,The length of the statement  "                new VertexInformation(targetVertex.VertexTypeID' targetVertex.VertexID' targetVertex.VertexRevisionID' targetVertex.EditionName)'" is 129.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,CreateSingleEdgeUpdateDefinition,The length of the statement  "                    structuredProperties != null && structuredProperties.Count() > 0 ? structuredProperties.ToDictionary(key => key.Item1' value => value.Item2) : null)'" is 149.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,CreateSingleEdgeUpdateDefinition,The length of the statement  "                    unstructuredProperties != null && unstructuredProperties.Count() > 0 ? unstructuredProperties.ToDictionary(key => key.Item1' value => value.Item2) : null));" is 156.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,CreateHyperEdgeUpdateDefinition,The length of the statement  "                    structuredProperties != null && structuredProperties.Count() > 0 ? structuredProperties.ToDictionary(key => key.Item1' value => value.Item2) : null)'" is 149.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,CreateHyperEdgeUpdateDefinition,The length of the statement  "                    unstructuredProperties != null && unstructuredProperties.Count() > 0 ? unstructuredProperties.ToDictionary(key => key.Item1' value => value.Item2) : null)'" is 155.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,GenerateIncomingEdgeDefinitions,The length of the statement  "                    result.Add(new IncomingEdgeAddDefinition(aIncomingEdge.Item1' aIncomingEdge.Item2' aIncomingEdge.Item3.Select(_ => _.VertexID)));" is 129.
Long Statement,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ConvertVertexTypes,The length of the statement  "            var attributetypes = myVertexTypes.SelectMany(_ => _.GetPropertyDefinitions(true)).Distinct().ToDictionary(_ => _.ID' _ => _.BaseType);" is 135.
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,HumanSizeParser,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\HumanSizeParser.cs,ToBytes,The following statement contains a magic number: switch (unit)              {                  case "":                  case "B":                      return (long)number;                  case "KB":                  case "kB":                      return (long)(number * 1000);                  case "KiB":                      return (long)(number * 1024);                  case "MB":                      return (long)(number * 1000000);                  case "MiB":                      return (long)(number * 1048576);                  case "GB":                      return (long)(number * 1000000000);                  case "GiB":                      return (long)(number * 1073741824);                  case "TB":                      return (long)(number * 1000000000000);                  case "TiB":                      return (long)(number * 1099511627776);                  case "PB":                      return (long)(number * 1000000000000000);                  case "PiB":                      return (long)(number * 1125899906842624);                    default:                      throw new ArgumentException("Can not read value for max memory.");              }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,ReadMaxMemory,The following statement contains a magic number: switch (unit)             {                 case "":                 case "B":                     return (long)number;                 case "KB":                 case "kB":                     return (long)(number * 1000);                 case "KiB":                     return (long)(number * 1024);                 case "MB":                     return (long)(number * 1000000);                 case "MiB":                     return (long)(number * 1048576);                 case "GB":                     return (long)(number * 1000000000);                 case "GiB":                     return (long)(number * 1073741824);                 case "TB":                     return (long)(number * 1000000000000);                 case "TiB":                     return (long)(number * 1099511627776);                 case "PB":                     return (long)(number * 1000000000000000);                 case "PiB":                     return (long)(number * 1125899906842624);                  default:                     throw new ArgumentException("Can not read value for max memory.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,Initialize,The following statement contains a magic number: if (myMaxMemoryConsumption < 251658240)                 throw new ArgumentOutOfRangeException("myMaxMemoryConsumption"' "At least 240 MB (251658240) are needed.");
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,Initialize,The following statement contains a magic number: if (myMaxOpenFiles < 3)                 throw new ArgumentOutOfRangeException("myMaxOpenFiles"' "At least 3 open files are needed.");
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,IncomingEdgeSorter,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\IncomingEdgeSorter.cs,Initialize,The following statement contains a magic number: int chunkLength = (int)Math.Min(                 (long)(2147480000 / IncomingEdge.Size)'                     //about 2GB (max data size in .NET) divided by the size of edges                 MaxMemoryConsumption / (IncomingEdge.Size * (chunkCount)));
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteBulkInsert,The following statement contains a magic number: try             {                 //move to the first Element                 readerBulkInsert.MoveToContent();                  //should be a BulkInsert element                 if (!CheckIsBulkInsertElement(readerBulkInsert))                     //TODO: log something;                     return;                  //now we are on the first node of bulk insert or at the end                 try                 {                     while (!_closed && readerBulkInsert.Read())                     {                         if (CheckIsElement(readerBulkInsert))                         {                             var nextReader = readerBulkInsert.ReadSubtree();                              switch (readerBulkInsert.Name)                             {                                 case ImportTag:                                     if (phase > 1)                                         //TODO: log                                         ;                                      if (phase == 0)                                         GetVertexTypes();                                      phase = 1;                                     ExecuteImport(nextReader);                                     _logger.Log(Level.INFO' "Finished one Import tag.");                                     break;                                 case PrePhaseTag:                                     if (phase > 0)                                         //TODO: log                                          ;                                      phase = 0;                                     ExecuteTypesPhase(nextReader);                                     break;                                 case PostPhaseTag:                                     if (phase == 1)                                         InsertIncomingEdges();                                     phase = 2;                                     //TODO: implement post phase                                     break;                                 default:                                     //TODO: log something                                     break;                             }                         }                      }                     if (phase == 1)                         InsertIncomingEdges();                 }                 finally                 {                     if (!_closed)                         readerBulkInsert.Close();                 }              }             finally             {                _logger.Log(Level.FINE' "ExecuteBulkInsert finished.");             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,InsertIncomingEdges,The following statement contains a magic number: while (hasNext)             {                 toAdd.Add(incomingEdges.Current);                  while (hasNext)                 {                     hasNext = incomingEdges.MoveNext();                     if (hasNext &&                         incomingEdges.Current.TargetVertexTypeID == toAdd[0].TargetVertexTypeID &&                         incomingEdges.Current.TargetVertexID == toAdd[0].TargetVertexID)                     {                         toAdd.Add(incomingEdges.Current);                     }                     else                     {                         break;                     }                 }                 try                 {                     _resultingFS.UpdateVertex(_security' _transaction' toAdd[0].TargetVertexID' toAdd[0].TargetVertexTypeID' ConvertIncomingEdgesToUpdateDefinition(toAdd)' false);                 }                 catch (Exception ex)                 { #if DEBUG                     for (var current = ex; current != null; current = current.InnerException)                     {                         _logger.Log(Level.SEVERE' "An exception was thrown:{0}\n{1}"' current.GetType().FullName' current.StackTrace.ToString());                     } #else                     _logger.Log(Level.SEVERE' "An exception was thrown:\n{0}"' ex); #endif                  }                 toAdd.Clear();                 count++;                  if (count > 0 && count % 500 == 0)                 {                     _logger.Log(Level.INFO' "Edges added: {0}"' count);                 }             }
Magic Number,sones.Plugins.SonesGQL.XMLBulkImport,XMLBulkImportPlugin,C:\repos\sones_sones\Plugins\GraphQL\SonesGQL\GraphDBImport\Implementations\XMLBulkImport\XMLBulkImportPlugin.cs,ExecuteImport,The following statement contains a magic number: try             {                 myImportReader.MoveToContent();                  if (!CheckIsImportElement(myImportReader))                 {                     _logger.Log(Level.WARNING' "ExecuteImport expects 'Import' element' but was {0}."' myImportReader.LocalName);                     return;                 }                  while (!_closed && myImportReader.Read())                 {                     if (CheckIsElement(myImportReader))                     {                         var nextReader = myImportReader.ReadSubtree();                          if (_offset.HasValue && _offset.Value > 0)                         {                             _logger.Log(Level.FINE' "Skipped one statement of import because offset is not reached.");                              _offset = _offset.Value - 1;                             nextReader.Close();                         }                         else                         {                             switch (myImportReader.LocalName)                             {                                 case InsertTag:                                     ExecuteInsert(nextReader);                                     _currentImport++;                                     break; /*                                case "Gql":                                     ExecuteGql(nextReader);                                     _currentImport++;                                     break; */                                 default:                                     _logger.Log(Level.WARNING' "Unknown xml tag {0}'"' myImportReader.LocalName);                                     break;                             }                         }                         if (_currentImport > 0 && _currentImport % 500 == 0 )                         {                              _logger.Log(Level.INFO' "Imports executed: {0}"' _currentImport);                                                                                      if (_resultingFS.IsPersistent)                             {                                 var free = _resultingFS.GetNumberOfFreeBytes();                                 _logger.Log(Level.INFO' "Number of free bytes: {0}"' free);                                  if (free < 1073741824L && free > 0) //1GB                                 {                                     _logger.Log(Level.WARNING' String.Format("Finished import because file system has less than 1 GB free ({0}B)."' free));                                     _closed = true;                                     return;                                 }                                 if (File.Exists("semaphore"))                                 {                                     _logger.Log(Level.WARNING' "Finished import because semphore file was found.");                                     _closed = true;                                     return;                                 }                             }                          }                         if (_limit.HasValue && _currentImport >= _limit.Value)                         {                             _logger.Log(Level.FINE' "Finished import because limit was exceeded.");                             _closed = true;                             return;                         }                     }                 }             }             finally             {                 if (!_closed)                     myImportReader.Close();                 _logger.Log(Level.FINE' "ExecuteImport finished.");             }
