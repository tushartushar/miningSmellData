Implementation smell,Namespace,Class,File,Method,Description
Long Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateVertexView,The method has 163 lines of code.
Complex Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateVertexView,Cyclomatic complexity of the method is 20
Complex Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateQueryResult,Cyclomatic complexity of the method is 15
Complex Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,TypeMapper,Cyclomatic complexity of the method is 14
Complex Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseProperties,Cyclomatic complexity of the method is 14
Complex Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseEdge,Cyclomatic complexity of the method is 8
Complex Method,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseVertex,Cyclomatic complexity of the method is 11
Long Statement,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateOutputResult,The length of the statement  "            result.Query = new Query() { Duration = myQueryResult.Duration' ResultType = Enum.GetName(typeof(ResultType)' myQueryResult.TypeOfResult)' Language = myQueryResult.NameOfQuerylanguage' Value = myQueryResult.Query' VerticesCount = myQueryResult.Vertices.LongCount()' Error = myQueryResult.Error == null ? null : HandleQueryExceptions(myQueryResult) }; " is 350.
Long Statement,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateVertexView,The length of the statement  "                        List<Tuple<SchemaToClassesGenerator.VertexView' IEnumerable<Tuple<String' Object>>>> innerVertices = new List<Tuple<SchemaToClassesGenerator.VertexView' IEnumerable<Tuple<String' Object>>>>(); " is 192.
Long Statement,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateVertexView,The length of the statement  "                            innerVertices.Add(new Tuple<SchemaToClassesGenerator.VertexView' IEnumerable<Tuple<String' Object>>>(GenerateVertexView(SingleEdges.GetTargetVertex())' SingleEdges.GetAllProperties())); " is 185.
Long Statement,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateQueryResult,The length of the statement  "            xmlDocument.Schemas.Add(XmlSchema.Read(typeof(XML_IO).Assembly.GetManifestResourceStream("sones.Plugins.GraphDS.IOInterface.XML_IO.QueryResultSchema.xsd")' evHandler));                       " is 168.
Long Statement,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateQueryResult,The length of the statement  "                    throw new XmlVersionException(String.Format("The xml version is not compatible with the version {0}."' IOInterfaceCompatibility.MaxVersion.ToString())); " is 152.
Long Statement,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateQueryResult,The length of the statement  "            return new QueryResult(query' language' duration' ResultType.Successful' vertices' error != String.Empty ? new QueryException(error) : null); " is 141.
Magic Number,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseBinaryVertex,The following statement contains a magic number: switch (binProp.Name)                      {                          case "ID":                              name = binProp.InnerText;                              break;                            case "Content":                              contentStream = new MemoryStream();                              string str = binProp.InnerText;                                //convert string (hex) to MemoryStream                               for (int i = 0; i < str.Length; i += 2)                              {                                  string sub = str.Substring(i' 2);                                  byte b = byte.Parse(sub' System.Globalization.NumberStyles.HexNumber);                                  contentStream.WriteByte(b);                              }                              contentStream.Position = 0;                              break;                        }
Magic Number,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseBinaryVertex,The following statement contains a magic number: switch (binProp.Name)                      {                          case "ID":                              name = binProp.InnerText;                              break;                            case "Content":                              contentStream = new MemoryStream();                              string str = binProp.InnerText;                                //convert string (hex) to MemoryStream                               for (int i = 0; i < str.Length; i += 2)                              {                                  string sub = str.Substring(i' 2);                                  byte b = byte.Parse(sub' System.Globalization.NumberStyles.HexNumber);                                  contentStream.WriteByte(b);                              }                              contentStream.Position = 0;                              break;                        }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,GenerateQueryResult,The following switch statement is missing a default case: switch(nextNode.Attributes[i].Name)                      {                          case "Value":                              query = nextNode.Attributes[i].Value;                              break;                          case "Language":                              language = nextNode.Attributes[i].Value;                              break;                          case "Duration":                              duration = System.Convert.ToUInt64(nextNode.Attributes[i].Value);                              break;                          case "VerticesCount":                              nrOfVertices = System.Convert.ToInt64(nextNode.Attributes[i].Value);                              break;                          case "Error":                              error = nextNode.Attributes[i].Value;                              break;                          case "ResultType":                              ResultType resType = ResultType.Failed;                                if (Enum.TryParse(nextNode.Attributes[i].Value' true' out resType))                              {                                  result = resType;                              }                              break;                        }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseProperties,The following switch statement is missing a default case: switch (property.Name)                      {                          case "ID":                              key = property.InnerText;                              break;                            case "Type":                                if (property.InnerText.Contains(typeof(ListCollectionWrapper).Name))                              {                                  type = property.InnerText.Split('('' ')').ElementAt(1);                                  isCollectionList = true;                              }                              else if(property.InnerText.Contains(typeof(SetCollectionWrapper).Name))                              {                                  type = property.InnerText.Split('('' ')').ElementAt(1);                                  isCollectionSet = true;                              }                              else                              {                                  type = property.InnerText;                              }                                                            break;                            case "Value":                                if (isCollectionList)                              {                                  Regex regExp = new Regex(@"(?<=\[)(.*?)(?=\])");                                    var matches = regExp.Matches(property.InnerText);                                                                  value = new ListCollectionWrapper();                                    foreach (var item in matches)                                  {                                                                          ((ListCollectionWrapper)value).Add((IComparable)TypeMapper(type' item.ToString()));                                  }                                    isCollectionList = false;                              }                              else if(isCollectionSet)                              {                                  Regex regExp = new Regex(@"\[(/?[^\]]+)\]");                                    var matches = regExp.Matches(property.InnerText);                                  value = new SetCollectionWrapper();                                    foreach (var item in matches)                                  {                                      ((SetCollectionWrapper)value).Add((IComparable)TypeMapper(type' item.ToString()));                                  }                                                                    isCollectionSet = false;                              }                              else                              {                                  value = TypeMapper(type' property.InnerText);                              }                              break;                      }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseBinaryVertex,The following switch statement is missing a default case: switch (binProp.Name)                      {                          case "ID":                              name = binProp.InnerText;                              break;                            case "Content":                              contentStream = new MemoryStream();                              string str = binProp.InnerText;                                //convert string (hex) to MemoryStream                               for (int i = 0; i < str.Length; i += 2)                              {                                  string sub = str.Substring(i' 2);                                  byte b = byte.Parse(sub' System.Globalization.NumberStyles.HexNumber);                                  contentStream.WriteByte(b);                              }                              contentStream.Position = 0;                              break;                        }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseSingleEdge,The following switch statement is missing a default case: switch (edgeItems.Name)                      {                           case "Properties":                              var prop = edgeItems.FirstChild;                                while (prop != null)                              {                                  var edgeProp = ParseProperties(prop);                                  edgeProperties.Add(edgeProp.Item1' edgeProp.Item2);                                  prop = prop.NextSibling;                              }                                break;                                                        case "TargetVertex":                              target = ParseVertex(edgeItems);                              break;                      }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseEdgeProperties,The following switch statement is missing a default case: switch (myEdgeProp.Name)                      {                          case "Property":                              var props = ParseProperties(myEdgeProp);                              myEdgeProperties.Add(props.Item1' props.Item2);                              break;                                              }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseEdge,The following switch statement is missing a default case: switch (edge.Name)                          {                               case "Name" :                                  name = edge.InnerText;                                  break;                                                            case "Properties":                                  ParseEdgeProperties(edge.FirstChild' ref edgeProps);                                  break;                                case "SingleEdge" :                                  singleEdges.Add(ParseSingleEdge(edge));                                  break;                                case "TargetVertex":                                  targetVertex = ParseVertex(edge);                                  break;                          }
Missing Default,sones.Plugins.GraphDS.IO.XML_IO,XML_IO,D:\research\architectureSmells\repos1\sones_sones\Plugins\GraphDS\IO\Implementations\XML_IO\XML_IO.cs,ParseVertex,The following switch statement is missing a default case: switch (items.Name)                          {                              case "Properties":                                                                    var propItems = items.FirstChild;                                    while (propItems != null)                                  {                                      var prop = ParseProperties(propItems);                                      propList.Add(prop.Item1' prop.Item2);                                      propItems = propItems.NextSibling;                                  }                                                                    break;                                case "BinaryProperties":                                    var binPropItems = items.FirstChild;                                    while (binPropItems != null)                                  {                                      var binProp = ParseBinaryVertex(binPropItems);                                      binaryProperties.Add(binProp.Item1' binProp.Item2);                                        foreach (var item in binaryProperties)                                      {                                          if (propList.ContainsKey(item.Key))                                          {                                              propList[item.Key] = item.Value;                                          }                                          else                                          {                                              propList.Add(item.Key' item.Value);                                          }                                      }                                                                                                                binPropItems = binPropItems.NextSibling;                                  }                                    break;                                case "Edges" :                                    var edgeItem = items.FirstChild;                                                                    while (edgeItem != null)                                  {                                      var edge = ParseEdge(edgeItem);                                                                            edges.Add(edge.Item1' edge.Item2);                                      edgeItem = edgeItem.NextSibling;                                  }                                  break;                          }
