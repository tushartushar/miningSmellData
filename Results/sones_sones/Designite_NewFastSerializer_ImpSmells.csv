Implementation smell,Namespace,Class,File,Method,Description
Long Method,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,processObject,The method has 223 lines of code.
Long Method,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteObject,The method has 420 lines of code.
Long Method,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,writeTypedArray,The method has 140 lines of code.
Complex Method,sones.Library.Serializer,FastReflectionSerializer<T>,C:\repos\sones_sones\Library\External\NewFastSerializer\FastReflectionSerializer.cs,DeSerialize,Cyclomatic complexity of the method is 8
Complex Method,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,Cyclomatic complexity of the method is 8
Complex Method,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,Cyclomatic complexity of the method is 15
Complex Method,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,encodeTimeSpan,Cyclomatic complexity of the method is 9
Long Statement,sones.Library.Serializer,FastReflectionSerializer<T>,C:\repos\sones_sones\Library\External\NewFastSerializer\FastReflectionSerializer.cs,DeSerialize,The length of the statement  "                throw new FastReflectionSerializerExceptions_DeSerializeHashNotValid("This seems not to be the right object or object version' cannot deserialize!"); " is 149.
Long Statement,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,processObject,The length of the statement  "                if (underlyingType == typeof(int) || underlyingType == typeof(uint) || underlyingType == typeof(long) || underlyingType == typeof(ulong)) " is 137.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The length of the statement  "                    for (; i < lastIndex && (values2[i + 1] == null ? values1[i + 1] == null : values2[i + 1].Equals(values1[i + 1])); i++) duplicates++; " is 133.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The length of the statement  "            checkOptimizable(value.Data < OptimizationFailure32BitValue && value.Data >= 0' "BitVector32 value is not optimizable"); " is 120.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The length of the statement  "            checkOptimizable((value.Ticks % TimeSpan.TicksPerMillisecond) == 0' "Cannot optimize a DateTime with sub-millisecond accuracy"); " is 128.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The length of the statement  "                checkOptimizable((value.Ticks % TimeSpan.TicksPerMillisecond) == 0' "Cannot optimize a DateTime with sub-millisecond accuracy"); " is 128.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The length of the statement  "            checkOptimizable((value.Ticks % TimeSpan.TicksPerMillisecond) == 0' "Cannot optimize a TimeSpan with sub-millisecond accuracy"); " is 128.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The length of the statement  "            WriteOptimized(value.AssemblyQualifiedName.IndexOf("' mscorlib'") == -1 ? value.AssemblyQualifiedName : value.FullName); " is 120.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,writeTypedArray,The length of the statement  "                writeTypeCode(elementType == typeof(object) ? SerializedType.EmptyObjectArrayType : SerializedType.EmptyTypedArrayType); " is 120.
Long Statement,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,isTypeRecreatable,The length of the statement  "                return typeof(IOwnedDataSerializableAndRecreatable).IsAssignableFrom(type) && type.GetConstructor(Type.EmptyTypes) != null; " is 123.
Complex Conditional,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,processObject,The conditional expression  "underlyingType == typeof(int) || underlyingType == typeof(uint) || underlyingType == typeof(long) || underlyingType == typeof(ulong)"  is complex.
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDateTime,The following statement contains a magic number: BitVector32 dateMask = new BitVector32(base.ReadByte() | (base.ReadByte() << 8) | (base.ReadByte() << 16));
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDateTime,The following statement contains a magic number: BitVector32 dateMask = new BitVector32(base.ReadByte() | (base.ReadByte() << 8) | (base.ReadByte() << 16));
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadGuid,The following statement contains a magic number: return new Guid(ReadBytes(16));
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedBitArray,The following statement contains a magic number: if (length == 0)                  return FullyOptimizableTypedArray;              else              {                  BitArray result = new BitArray(base.ReadBytes((length + 7) / 8));                  result.Length = length;                  return result;              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedBitArray,The following statement contains a magic number: if (length == 0)                  return FullyOptimizableTypedArray;              else              {                  BitArray result = new BitArray(base.ReadBytes((length + 7) / 8));                  result.Length = length;                  return result;              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 4) == 0) if ((flags & 32) != 0) lo = ReadOptimizedInt32(); else lo = base.ReadInt32();
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 4) == 0) if ((flags & 32) != 0) lo = ReadOptimizedInt32(); else lo = base.ReadInt32();
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 8) == 0) if ((flags & 64) != 0) mid = ReadOptimizedInt32(); else mid = base.ReadInt32();
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 8) == 0) if ((flags & 64) != 0) mid = ReadOptimizedInt32(); else mid = base.ReadInt32();
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 16) == 0) if ((flags & 128) != 0) hi = ReadOptimizedInt32(); else hi = base.ReadInt32();
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedDecimal,The following statement contains a magic number: if ((flags & 16) == 0) if ((flags & 128) != 0) hi = ReadOptimizedInt32(); else hi = base.ReadInt32();
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedInt32,The following statement contains a magic number: while (true)              {                  byte nextByte = base.ReadByte();                  result |= ((int)nextByte & 0x7f) << bitShift;                  bitShift += 7;                  if ((nextByte & 0x80) == 0) return result;              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedUInt64,The following statement contains a magic number: while (true)              {                  byte nextByte = base.ReadByte();                  result |= ((ulong)nextByte & 0x7f) << bitShift;                  bitShift += 7;                  if ((nextByte & 0x80) == 0) return result;              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedInt64,The following statement contains a magic number: while (true)              {                  byte nextByte = base.ReadByte();                  result |= ((long)nextByte & 0x7f) << bitShift;                  bitShift += 7;                  if ((nextByte & 0x80) == 0) return result;              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,ReadOptimizedUInt32,The following statement contains a magic number: while (true)              {                  byte nextByte = base.ReadByte();                  result |= ((uint)nextByte & 0x7f) << bitShift;                  bitShift += 7;                  if ((nextByte & 0x80) == 0) return result;              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,decodeTimeSpan,The following statement contains a magic number: BitVector32 packedData = new BitVector32(initialByte | (base.ReadByte() << 8));
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,decodeTimeSpan,The following statement contains a magic number: if (hasMilliseconds)                  packedData = new BitVector32(packedData.Data | (base.ReadByte() << 16) | (base.ReadByte() << 24));              else if (hasSeconds && hasTime)              {                  packedData = new BitVector32(packedData.Data | (base.ReadByte() << 16));              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,decodeTimeSpan,The following statement contains a magic number: if (hasMilliseconds)                  packedData = new BitVector32(packedData.Data | (base.ReadByte() << 16) | (base.ReadByte() << 24));              else if (hasSeconds && hasTime)              {                  packedData = new BitVector32(packedData.Data | (base.ReadByte() << 16));              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,decodeTimeSpan,The following statement contains a magic number: if (hasMilliseconds)                  packedData = new BitVector32(packedData.Data | (base.ReadByte() << 16) | (base.ReadByte() << 24));              else if (hasSeconds && hasTime)              {                  packedData = new BitVector32(packedData.Data | (base.ReadByte() << 16));              }
Magic Number,sones.Library.NewFastSerializer,SerializationReader,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationReader.cs,readTokenizedString,The following statement contains a magic number: return stringTokenList[(ReadOptimizedInt32() << 7) + bucket];
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if (value.Length > 0)              {                  byte[] data = new byte[(value.Length + 7) / 8];                  value.CopyTo(data' 0);                  base.Write(data' 0' data.Length);              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if (value.Length > 0)              {                  byte[] data = new byte[(value.Length + 7) / 8];                  value.CopyTo(data' 0);                  base.Write(data' 0' data.Length);              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: byte scale = (byte)(data[3] >> 16);
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: byte scale = (byte)(data[3] >> 16);
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if ((data[3] & -2147483648) != 0) flags |= 0x01;
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if ((data[3] & -2147483648) != 0) flags |= 0x01;
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if (data[2] == 0)                  flags |= 0x10;              else if (data[2] <= HighestOptimizable32BitValue && data[2] >= 0)              {                  flags |= 0x80;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if (data[2] == 0)                  flags |= 0x10;              else if (data[2] <= HighestOptimizable32BitValue && data[2] >= 0)              {                  flags |= 0x80;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if (data[2] == 0)                  flags |= 0x10;              else if (data[2] <= HighestOptimizable32BitValue && data[2] >= 0)              {                  flags |= 0x80;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if ((flags & 0x10) == 0) if ((flags & 0x80) != 0) write7bitEncodedSigned32BitValue(data[2]); else Write(data[2]);
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: if ((flags & 0x10) == 0) if ((flags & 0x80) != 0) write7bitEncodedSigned32BitValue(data[2]); else Write(data[2]);
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: Write((byte)(dateMaskData >> 8));
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,WriteOptimized,The following statement contains a magic number: Write((byte)(dateMaskData >> 16));
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,encodeTimeSpan,The following statement contains a magic number: if (milliseconds != 0)              {                  packedData[HasMillisecondsSection] = 1;                  packedData[MillisecondsSection] = milliseconds;                  optionalBytes = 2;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,encodeTimeSpan,The following statement contains a magic number: Write((byte)(data >> 8));
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,encodeTimeSpan,The following statement contains a magic number: if (optionalBytes > 0) Write((byte)(data >> 16));
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,encodeTimeSpan,The following statement contains a magic number: if (optionalBytes > 1) Write((byte)(data >> 24));
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,write7bitEncodedSigned32BitValue,The following statement contains a magic number: while (unsignedValue >= 0x80)              {                  Write((byte)(unsignedValue | 0x80));                  unsignedValue >>= 7;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,write7bitEncodedSigned64BitValue,The following statement contains a magic number: while (unsignedValue >= 0x80)              {                  Write((byte)(unsignedValue | 0x80));                  unsignedValue >>= 7;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,write7bitEncodedUnsigned32BitValue,The following statement contains a magic number: while (value >= 0x80)              {                  Write((byte)(value | 0x80));                  value >>= 7;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,write7bitEncodedUnsigned64BitValue,The following statement contains a magic number: while (value >= 0x80)              {                  Write((byte)(value | 0x80));                  value >>= 7;              }
Magic Number,sones.Library.NewFastSerializer,SerializationWriter,C:\repos\sones_sones\Library\External\NewFastSerializer\SerializationWriter.cs,DumpTypeUsage,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {  #if DEBUG                  if (typeUsage[i] != 0) sb.AppendFormat("{0' 8:n0}: {1}\r\n"' typeUsage[i]' (SerializedType)i);  #endif              }
