Implementation smell,Namespace,Class,File,Method,Description
Long Statement,sones.Plugins.GraphDS.DrainPipeLog,DrainPipeLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\DrainPipeLog.cs,Query,The length of the statement  "            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter Formatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter(); " is 144.
Magic Number,sones.Plugins.GraphDS.DrainPipeLog.Storage,AppendLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\AppendLog\AppendLog.cs,ReadOnDiscAdress,The following statement contains a magic number: lock (DatabaseIndexFile)              {                  // check if this is even possible...                  if (DatabaseIndexFile.Length <= NumberOfAdress * 33)                      return null;                    // seek to the multiple of NumberOfAdress                  DatabaseIndexFile.Seek(NumberOfAdress * 33' SeekOrigin.Begin);                    byte[] _SerializedData;                  OnDiscAdress _deserializedAdress;                    try                  {                      _SerializedData = new byte[33];                      // todo: maybe a read cache might be great' to read more bytes sequential                      DatabaseIndexFile.Read(_SerializedData' 0' 33);                        _deserializedAdress = new OnDiscAdress();                      _reader.Data = _SerializedData;                      _deserializedAdress.Deserialize(ref _reader);                        return _deserializedAdress;                  }                  catch (Exception)                  {                      return null;                  }              }
Magic Number,sones.Plugins.GraphDS.DrainPipeLog.Storage,AppendLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\AppendLog\AppendLog.cs,ReadOnDiscAdress,The following statement contains a magic number: lock (DatabaseIndexFile)              {                  // check if this is even possible...                  if (DatabaseIndexFile.Length <= NumberOfAdress * 33)                      return null;                    // seek to the multiple of NumberOfAdress                  DatabaseIndexFile.Seek(NumberOfAdress * 33' SeekOrigin.Begin);                    byte[] _SerializedData;                  OnDiscAdress _deserializedAdress;                    try                  {                      _SerializedData = new byte[33];                      // todo: maybe a read cache might be great' to read more bytes sequential                      DatabaseIndexFile.Read(_SerializedData' 0' 33);                        _deserializedAdress = new OnDiscAdress();                      _reader.Data = _SerializedData;                      _deserializedAdress.Deserialize(ref _reader);                        return _deserializedAdress;                  }                  catch (Exception)                  {                      return null;                  }              }
Magic Number,sones.Plugins.GraphDS.DrainPipeLog.Storage,AppendLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\AppendLog\AppendLog.cs,ReadOnDiscAdress,The following statement contains a magic number: lock (DatabaseIndexFile)              {                  // check if this is even possible...                  if (DatabaseIndexFile.Length <= NumberOfAdress * 33)                      return null;                    // seek to the multiple of NumberOfAdress                  DatabaseIndexFile.Seek(NumberOfAdress * 33' SeekOrigin.Begin);                    byte[] _SerializedData;                  OnDiscAdress _deserializedAdress;                    try                  {                      _SerializedData = new byte[33];                      // todo: maybe a read cache might be great' to read more bytes sequential                      DatabaseIndexFile.Read(_SerializedData' 0' 33);                        _deserializedAdress = new OnDiscAdress();                      _reader.Data = _SerializedData;                      _deserializedAdress.Deserialize(ref _reader);                        return _deserializedAdress;                  }                  catch (Exception)                  {                      return null;                  }              }
Magic Number,sones.Plugins.GraphDS.DrainPipeLog.Storage,AppendLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\AppendLog\AppendLog.cs,ReadOnDiscAdress,The following statement contains a magic number: lock (DatabaseIndexFile)              {                  // check if this is even possible...                  if (DatabaseIndexFile.Length <= NumberOfAdress * 33)                      return null;                    // seek to the multiple of NumberOfAdress                  DatabaseIndexFile.Seek(NumberOfAdress * 33' SeekOrigin.Begin);                    byte[] _SerializedData;                  OnDiscAdress _deserializedAdress;                    try                  {                      _SerializedData = new byte[33];                      // todo: maybe a read cache might be great' to read more bytes sequential                      DatabaseIndexFile.Read(_SerializedData' 0' 33);                        _deserializedAdress = new OnDiscAdress();                      _reader.Data = _SerializedData;                      _deserializedAdress.Deserialize(ref _reader);                        return _deserializedAdress;                  }                  catch (Exception)                  {                      return null;                  }              }
Magic Number,sones.Plugins.GraphDS.DrainPipeLog.Storage,OnDiscAdress,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\AppendLog\OnDiscAdress.cs,SerializeAligned,The following statement contains a magic number: byte[] Output = new byte[33];
Magic Number,sones.Plugins.GraphDS.DrainPipeLog,DrainPipeLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\DrainPipeLog.cs,DrainPipeLog,The following statement contains a magic number: if (myParameters.ContainsKey("MaximumAsyncBufferSize"))              {                  MaximumAsyncBufferSize = (Int32)myParameters["MaximumAsyncBufferSize"];              }              else              {                  MaximumAsyncBufferSize = 1024 * 1024 * 10;              }
Magic Number,sones.Plugins.GraphDS.DrainPipeLog,DrainPipeLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\DrainPipeLog.cs,DrainPipeLog,The following statement contains a magic number: if (myParameters.ContainsKey("MaximumAsyncBufferSize"))              {                  MaximumAsyncBufferSize = (Int32)myParameters["MaximumAsyncBufferSize"];              }              else              {                  MaximumAsyncBufferSize = 1024 * 1024 * 10;              }
Magic Number,sones.Plugins.GraphDS.DrainPipeLog,DrainPipeLog,C:\repos\sones_sones\Plugins\GraphDS\DrainPipeLog\Implementations\AppendLog\DrainPipeLog.cs,DrainPipeLog,The following statement contains a magic number: if (myParameters.ContainsKey("MaximumAsyncBufferSize"))              {                  MaximumAsyncBufferSize = (Int32)myParameters["MaximumAsyncBufferSize"];              }              else              {                  MaximumAsyncBufferSize = 1024 * 1024 * 10;              }
