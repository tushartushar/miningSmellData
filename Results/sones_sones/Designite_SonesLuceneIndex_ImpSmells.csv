Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,sones.Plugins.Index.LuceneIdx,LuceneEntry,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\LuceneEntry.cs,LuceneEntry,The method has 6 parameters. Parameters: myIndexId' myVertexId' myText' myPropertyId' myScore' myDocNum
Long Parameter List,sones.Plugins.Index.LuceneIdx,LuceneReturnEnumerator,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\LuceneReturn.cs,LuceneReturnEnumerator,The method has 5 parameters. Parameters: myDocuments' myIndexSearcher' myHighlighter' myAnalyzer' myQuery
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,Keys,The length of the statement  "            var result = _LuceneIndex.GetEntriesInnerByField(_MaxResultsFirst' "*:*"' myPropertyID.ToString()' LuceneIndex.Fields.PROPERTY_ID); " is 131.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,Keys,The length of the statement  "                result = _LuceneIndex.GetEntriesInnerByField(result.TotalHits' "*:*"' myPropertyID.ToString()' LuceneIndex.Fields.PROPERTY_ID); " is 127.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,TryGetValues,The length of the statement  "                results = _LuceneIndex.GetEntriesInnerByField(_MaxResultsFirst' key.Key as String' key.PropertyID.ToString()' LuceneIndex.Fields.PROPERTY_ID); " is 142.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,TryGetValues,The length of the statement  "                    results = _LuceneIndex.GetEntriesInnerByField(results.TotalHits' key.Key as String' key.PropertyID.ToString()' LuceneIndex.Fields.PROPERTY_ID); " is 143.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,TryGetValuesPartial,The length of the statement  "                results = _LuceneIndex.GetEntriesInnerByField(_MaxResultsFirst' key.Key as String' key.PropertyID.ToString()' LuceneIndex.Fields.PROPERTY_ID); " is 142.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,TryGetValuesPartial,The length of the statement  "                    results = _LuceneIndex.GetEntriesInnerByField(_MaxResultsFirst' key.Key as String' key.PropertyID.ToString()' LuceneIndex.Fields.PROPERTY_ID); " is 142.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,TryGetValuesPartial,The length of the statement  "                results_compound.AddRange(results.Where((e) => e.PropertyId != null).Select((e) => new Tuple<long' IComparable' long>((long)e.PropertyId' e.Text' e.VertexId))); " is 160.
Long Statement,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,TryGetValuesPartial,The length of the statement  "                myVertexIDs = new CloseableEnumerable<long>(grouped.Select<IGrouping<long' Tuple<long' IComparable' long>>' long>((g) => g.Key)' results.Close); " is 144.
Missing Default,sones.Plugins.Index.LuceneIdx,SonesLuceneIndex,C:\repos\sones_sones\Plugins\Index\Implementations\SonesLuceneIndex\SonesLuceneIndex.cs,AddEntry,The following switch statement is missing a default case: switch (myIndexAddStrategy)              {                  case IndexAddStrategy.MERGE:                      {                          foreach (var item in myValues)                          {                              _LuceneIndex.AddEntry(new LuceneEntry(IndexId' System.Convert.ToInt64(item)' key' myPropertyID));                          }                            break;                      }                  case IndexAddStrategy.REPLACE:                      {                          string luceneQuery = key;                            if (string.IsNullOrWhiteSpace(luceneQuery))                          {                              luceneQuery = "*:*";                          }                            var result = _LuceneIndex.GetEntries(_MaxResultsFirst' luceneQuery);                          if (result.TotalHits > _MaxResultsFirst)                          {                              result.Close();                              result = _LuceneIndex.GetEntries(result.TotalHits' luceneQuery);                          }                            var entries = result.Where(entry => entry.Text == key).ToList();                          foreach (var entry in entries)                          {                              _LuceneIndex.DeleteEntry(entry);                          }                          result.Close();                            foreach (var value in myValues)                          {                              _LuceneIndex.AddEntry(new LuceneEntry(IndexId' System.Convert.ToInt64(value)' key' myPropertyID));                          }                            break;                      }                  case IndexAddStrategy.UNIQUE:                      {                          bool hasKey = false;                            if (string.IsNullOrWhiteSpace(myKey.ToString()))                              hasKey = _LuceneIndex.GetKeys(entry => entry.IndexId == this.IndexId).Any(k => k == key);                          else                              hasKey = _LuceneIndex.HasEntry(key' entry => entry.IndexId == this.IndexId);                            if (hasKey)                          {                              throw new IndexKeyExistsException(String.Format("Index key {0} already exist."' key));                          }                          else                          {                              foreach (var value in myValues)                              {                                  _LuceneIndex.AddEntry(new LuceneEntry(IndexId' System.Convert.ToInt64(value)' key' myPropertyID));                              }                          }                            break;                      }              }
