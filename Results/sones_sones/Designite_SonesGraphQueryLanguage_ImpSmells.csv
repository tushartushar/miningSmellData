Implementation smell,Namespace,Class,File,Method,Description
Long Method,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The method has 972 lines of code.
Long Method,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The method has 120 lines of code.
Long Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The method has 184 lines of code.
Long Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The method has 259 lines of code.
Long Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExamineDBO_Aggregates,The method has 111 lines of code.
Long Method,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The method has 105 lines of code.
Long Method,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeRemoveList,The method has 133 lines of code.
Long Method,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,The method has 164 lines of code.
Long Method,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeRemoveList,The method has 100 lines of code.
Long Method,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The method has 113 lines of code.
Long Method,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessStructuredProperty,The method has 171 lines of code.
Long Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The method has 107 lines of code.
Long Method,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The method has 124 lines of code.
Long Method,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,TypeOperation,The method has 139 lines of code.
Long Method,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The method has 117 lines of code.
Long Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The method has 184 lines of code.
Long Method,sones.GraphQL.Structure.Nodes.Expressions,TupleNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\TupleNode.cs,Init,The method has 109 lines of code.
Long Method,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,The method has 123 lines of code.
Long Method,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The method has 244 lines of code.
Complex Method,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,ExportGraphDDL,Cyclomatic complexity of the method is 13
Complex Method,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDL_VertexType,Cyclomatic complexity of the method is 13
Complex Method,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDMLforDefinedProperties,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDMLforVertexOutgoingHyperEdges,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL,SonesQueryLanguage,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\SonesQueryLanguage.cs,SetExtendableMember,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,Cyclomatic complexity of the method is 15
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,IsInterestingWhereForReference,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,Cyclomatic complexity of the method is 24
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ValidateGroupingAndAggregate,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExamineVertex,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetTypeIndependendResult,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,Cyclomatic complexity of the method is 29
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAttributeValueAndResolve,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddAttributesByDBO,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExamineDBO_Aggregates,Cyclomatic complexity of the method is 13
Complex Method,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,ProcessAlterCommand,Cyclomatic complexity of the method is 15
Complex Method,sones.GraphQL.StatementNodes.DDL,CreateIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateIndexNode.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,GenerateAVertexTypePredefinition,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,Cyclomatic complexity of the method is 16
Complex Method,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeRemoveList,Cyclomatic complexity of the method is 16
Complex Method,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,Cyclomatic complexity of the method is 18
Complex Method,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeRemoveList,Cyclomatic complexity of the method is 16
Complex Method,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateSetRef,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,Cyclomatic complexity of the method is 18
Complex Method,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessStructuredProperty,Cyclomatic complexity of the method is 26
Complex Method,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.GQL.Structure.Helper.Definition,SetRefDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\SetRefDefinition.cs,IsValidBinaryExpressionNode,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,Select,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,SelectVertexIDs,Cyclomatic complexity of the method is 12
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,Cyclomatic complexity of the method is 12
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveNodeReferncesFromGraph,Cyclomatic complexity of the method is 15
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,UpdateLowerLevels,Cyclomatic complexity of the method is 13
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IsValidLevelKeyNeighbourship,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,GenerateLevel,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,AddLevelKey,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,Cyclomatic complexity of the method is 15
Complex Method,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,TypeOperation,Cyclomatic complexity of the method is 12
Complex Method,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,Cyclomatic complexity of the method is 12
Complex Method,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,Cyclomatic complexity of the method is 14
Complex Method,sones.GraphQL.Structure.Nodes.DDL,IndexOptOnCreateTypeMemberNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\IndexOptOnCreateTypeMemberNode.cs,Init,Cyclomatic complexity of the method is 10
Complex Method,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,Cyclomatic complexity of the method is 18
Complex Method,sones.GraphQL.Structure.Nodes.DML,AttributeAssignNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttributeAssignNode.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.Structure.Nodes.DML,SelectionListElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectionListElementNode.cs,Init,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,AExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\AExpressionDefinition.cs,GetOperatorBySymbol,Cyclomatic complexity of the method is 11
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,Cyclomatic complexity of the method is 32
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,AssignCorrectTuple,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,SubstituteAttributeNames,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Calculon,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,EvaluateHaving,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ConvertToAttributeType,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL.Structure.Nodes.Expressions,FuncCallNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\FuncCallNode.cs,GenerateData,Cyclomatic complexity of the method is 9
Complex Method,sones.GraphQL.Structure.Nodes.Expressions,TupleNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\TupleNode.cs,Init,Cyclomatic complexity of the method is 21
Complex Method,sones.GraphQL.Structure.Nodes.Misc,VertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\VertexTypeNode.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,Cyclomatic complexity of the method is 27
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectionElement,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectionElement.cs,SelectionElement,The method has 5 parameters. Parameters: myAlias' myEdgeList' myIsGroupedOrAggregated' myRelatedIDChainDefinition' myElement
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectionElementAggregate,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectionElement.cs,SelectionElementAggregate,The method has 6 parameters. Parameters: myBaseAggregate' myAlias' myEdgeList' myLevelKey' myRelatedIDChainDefinition' myAggregateDefinition
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateVertices,The method has 9 parameters. Parameters: mySecurityToken' myTransactionToken' myTypeList' mySelectResultManager' myWhereExpressionDefinition' myResolutionDepth' myOrderByDefinition' myLimit' myOffset
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateVerticesForType,The method has 9 parameters. Parameters: mySecurityToken' myTransactionToken' myTypeReference' mySelectResultManager' myWhereExpressionDefinition' myResolutionDepth' myOrderByDefinition' myLimit' myOffset
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The method has 5 parameters. Parameters: myAlias' myReference' myIDChainDefinition' myIsGroupedOrAggregated' mySelectValueAssignment
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddAggregateElementToSelection,The method has 5 parameters. Parameters: mySecurityToken' myTransactionToken' myAlias' myReference' mySelectionPartAggregate
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,Examine,The method has 7 parameters. Parameters: myResolutionDepth' myReference' myReferencedDBType' myUsingGraph' myVertices' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExamineVertex,The method has 7 parameters. Parameters: myResolutionDepth' myReference' myRelatedVertexType' myLevelKey' myUsingGraph' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The method has 8 parameters. Parameters: mySecurityToken' myTransactionToken' myDBObject' myDBType' myDepth' myLevelKey' myReference' myUsingGraph
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAttributeValueAndResolve,The method has 11 parameters. Parameters: mySecurityToken' myTransactionToken' myType' mySelectionelement' myDBObject' myDepth' myLevelKey' reference' myUsingGraph' attributeValue' myUndefAttrName
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExecuteFunction,The method has 10 parameters. Parameters: mySelectionElementFunction' myDBObject' myCallingObject' myDepth' myReference' myReferencedDBType' myLevelKey' myUsingGraph' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddAttributesByDBO,The method has 11 parameters. Parameters: mySecurityToken' myTransactionToken' myAttributes' myType' myDBObject' myDepth' myEdgeList' myReference' myUsingGraph' mySelType' myTypeID
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ResolveIncomingEdgeValue,The method has 9 parameters. Parameters: attrDefinition' myIncomingVertices' myDepth' myEdgeList' mySourceDBObject' reference' myUsingGraph' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetVertices,The method has 8 parameters. Parameters: mySecurityToken' myTransactionToken' myTypeOfAttribute' myObjectUUIDs' myDepth' myLevelKey' myReference' myUsingGraph
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ResolveAttributeValue,The method has 9 parameters. Parameters: attrDefinition' myEdge' myDepth' myEdgeList' mySourceDBObject' reference' myUsingGraph' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GenerateSingleEdgeViews,The method has 9 parameters. Parameters: mySecurityToken' myTransactionToken' mySingleEdges' myVertexType' myDepth' myEdgeList' reference' myUsingGraph' myInnerEdgeType
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GenerateASingleEdgeView,The method has 9 parameters. Parameters: mySecurityToken' myTransactionToken' aSingleEdge' myVertexType' myDepth' myEdgeList' reference' myUsingGraph' myInnerEdgeType
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ResolveAttributeValue,The method has 9 parameters. Parameters: attrDefinition' attributeValue' myDepth' myEdgeList' mySourceDBObject' reference' myUsingGraph' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,LoadAndResolveVertex,The method has 8 parameters. Parameters: mySecurityToken' myTransactionToken' myObjectUUID' myTypeOfAttribute' myDepth' myLevelKey' myReference' myUsingGraph
Long Parameter List,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExamineDBO_Aggregates,The method has 7 parameters. Parameters: myTransactionToken' mySecurityToken' myDBOs' myAggregates' mySelections' myUsingGraph' myDepth
Long Parameter List,sones.GraphQL.StatementNodes,AStatement,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\AStatement.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,AlterEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterEdgeTypeNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,CreateEdgeTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateEdgeTypesNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,DropEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropEdgeTypeNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,DropIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropIndexNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,DropVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropVertexTypeNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,CreateIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateIndexNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,ProcessUpdate,The method has 5 parameters. Parameters: myVertexIDs' myGraphDB' myPluginManager' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,ProcessUpdate,The method has 5 parameters. Parameters: myVertexIDs' myGraphDB' myPluginManager' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,DescribeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DescribeNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,RebuildIndicesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\RebuildIndicesNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,DumpNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DumpNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,TruncateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\TruncateNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessBinaryExpression,The method has 6 parameters. Parameters: binExpression' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' vertexType
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessListOfUpdates,The method has 6 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessUpdate,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' aUpdate' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeRemoveList,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' attributeRemoveList' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' attributeAssignOrUpdateList' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessBinaryExpression,The method has 6 parameters. Parameters: binExpression' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' vertexType
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessListOfUpdates,The method has 6 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessUpdate,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' aUpdate' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeRemoveList,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' attributeRemoveList' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateSetRef,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' attributeAssignOrUpdateSetRef' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The method has 7 parameters. Parameters: vertexType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' attributeAssignOrUpdateList' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessAAttributeDefinition,The method has 7 parameters. Parameters: myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' vertexType' aAttributeDefinition' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessStructuredProperty,The method has 7 parameters. Parameters: myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' vertexType' aAttributeDefinition' result
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessBinaryExpression,The method has 6 parameters. Parameters: binExpression' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' vertexType
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,ProcessUpdate,The method has 5 parameters. Parameters: myVertexIDs' myGraphDB' myPluginManager' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,ProcessDelete,The method has 5 parameters. Parameters: toBeDeletedVertexID' myGraphDB' myPluginManager' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,ProcessDelete,The method has 5 parameters. Parameters: toBeDeletedVertexID' myGraphDB' myPluginManager' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.Settings,SettingNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Settings\SettingNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,Execute,The method has 6 parameters. Parameters: myGraphDB' myGraphQL' myPluginManager' myQuery' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.Definition,GraphDBTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\GraphDBTypeDefinition.cs,GraphDBTypeDefinition,The method has 7 parameters. Parameters: myName' myParentType' myIsAbstract' myAttributes' myBackwardEdgeNodes' myIndices' myComment
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.Definition,IndexDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IndexDefinition.cs,IndexDefinition,The method has 5 parameters. Parameters: myIndexName' myEdition' myIndexType' myIndexAttributeDefinitions' myOptions
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,AExpressionGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\AExpressionGraph.cs,AddNodesWithComplexRelation,The method has 5 parameters. Parameters: leftVertex' leftLevelKey' rightVertex' rightLevelKey' backwardResolution
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,AExpressionGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\AExpressionGraph.cs,GetBackwardEdgeKey,The method has 5 parameters. Parameters: myPath' desiredBELevel' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The method has 5 parameters. Parameters: leftDBObject' leftLevelKey' rightDBObject' rightLevelKey' backwardResolutiondepth
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The method has 5 parameters. Parameters: aDBObject' myLevelKey' currentBackwardResolution' source' backwardResolutiondepth
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,FillGraph,The method has 6 parameters. Parameters: aDBObject' myPath' currentBackwardResolution' source' tempEdgeKey' validUUIDs
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeRecursiveBackward,The method has 6 parameters. Parameters: myNewVertex' mySourceUUID' mySourceLevelKey' myNewNodeLevelKey' lowerLevelKeys' myGraph
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionLevel,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionLevel.cs,AddNodeAndBackwardEdge,The method has 6 parameters. Parameters: myPath' aVertex' backwardDirection' backwardDestination' EdgeWeight' NodeWeight
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionLevel,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionLevel.cs,AddForwardEdgeToNode,The method has 5 parameters. Parameters: levelKey' myVertexInformation' forwardDirection' destination' edgeWeight
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,IExpressionGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\IExpressionGraph.cs,AddNodesWithComplexRelation,The method has 5 parameters. Parameters: firstVertex' firstLevelKey' secondVertex' secondLevelKey' backwardResolution
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,IExpressionLevel,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\IExpressionLevel.cs,AddForwardEdgeToNode,The method has 5 parameters. Parameters: levelKey' myVertexInformation' forwardEdgeDirection' destination' NodeWeight
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,IExpressionLevel,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\IExpressionLevel.cs,AddNodeAndBackwardEdge,The method has 6 parameters. Parameters: myPath' myDBObject' myBackwardDirection' myBackwardDestination' myEdgeWeight' myNodeWeight
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The method has 8 parameters. Parameters: myComplexValue' mySimpleValue' typeOfBinExpr' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' aggregateAllowed
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,TypeOperation,The method has 12 parameters. Parameters: myLeftValueObject' myRightValueObject' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' typeOfBinExpr' resultGr' mytypesOfOpertators' myOperator' myExpressionIndex' aggregateAllowed
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,MatchData,The method has 8 parameters. Parameters: data' resultGraph' myGraphDB' mySecurityToken' myTransactionToken' myTypeOfOperator' myOperator' myExpressionIndex
Long Parameter List,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,CleanLowerLevel,The method has 5 parameters. Parameters: myLevelKey' myGraph' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The method has 5 parameters. Parameters: myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' types
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,TryGetBinexpression,The method has 6 parameters. Parameters: expression' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' types
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,AssignCorrectTuple,The method has 6 parameters. Parameters: myPluginManager' myTupleDefinition' myOperator' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Calculon,The method has 6 parameters. Parameters: myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' resultGraph' aggregateAllowed
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,SelectDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\SelectDefinition.cs,SelectDefinition,The method has 9 parameters. Parameters: myTypeList' mySelectedElements' myWhereExpressionDefinition' myGroupByIDs' myHaving' myLimit' myOffset' myOrderByDefinition' myResolutionDepth
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ConvertToAttributeType,The method has 5 parameters. Parameters: myPluginManager' typeAttribute' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,IsValidTupleNode,The method has 6 parameters. Parameters: tupleElementList' myGraphType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,The method has 6 parameters. Parameters: myType' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpression,The method has 6 parameters. Parameters: aUniqueExpr' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpressionInternal,The method has 6 parameters. Parameters: aUniqueExpr' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,The method has 7 parameters. Parameters: myTypeOfDBObject' myDBObject' myReference' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The method has 6 parameters. Parameters: myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' allowUndefinedAttributes' validationTypes
Long Parameter List,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The method has 6 parameters. Parameters: myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' myListOfReferences' allowUndefinedAttributes
Long Identifier,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateAddToListAttrUpdateOperatorNode,The length of the parameter addToListAttrUpdateOperatorNode is 31.
Long Identifier,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateRemoveFromListAttrUpdateAddToRemoveFromNode,The length of the parameter removeFromListAttrUpdateAddToRemoveFromNode is 43.
Long Identifier,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateRemoveFromListAttrUpdateAddToOperatorNode,The length of the parameter removeFromListAttrUpdateAddToOperatorNode is 41.
Long Identifier,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateRemoveFromListAttrUpdateScope,The length of the parameter removeFromListAttrUpdateScopeNode is 33.
Long Identifier,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDLOfMandatoryAttributes,The length of the parameter myMandatoryAttributeDefinitions is 31.
Long Identifier,sones.GraphQL,SonesGQLConstants,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\SonesGQLConstants.cs,,The length of the parameter EdgeInformationDelimiterSymbol is 30.
Long Identifier,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,,The length of the parameter _SelectionElementsTypeIndependend is 33.
Long Identifier,sones.GraphQL.GQL.Structure.Nodes.Expressions,AggregateDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\AggregateDefinition.cs,AggregateDefinition,The length of the parameter myChainPartAggregateDefinition is 30.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateATypeNode,The length of the statement  "            if (aATypeNode.ReferenceAndType.Reference != null && !(context.Values[SonesGQLConstants.GraphListOfReferences] as List<TypeReferenceDefinition>).Contains(aATypeNode.ReferenceAndType)) " is 183.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateATypeNode,The length of the statement  "                (context.Values[SonesGQLConstants.GraphListOfReferences] as List<TypeReferenceDefinition>).Add(aATypeNode.ReferenceAndType); " is 124.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,ExportGraphDDL,The length of the statement  "            //z.B. Create vertex type User Attributes (Int64 Age' String Name' Set<User> Friends' User Father' LIST<String> Hobbies' Set<User(Weighted)> weightedUser) " is 154.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDL_VertexType,The length of the statement  "                        stringBuilder.Append(String.Concat(CreateGraphDDLOfOutgoingEdges(myVertexType.GetOutgoingEdgeDefinitions(false)' myVertexType))); " is 129.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDMLforVertexOutgoingSingleEdges,The length of the statement  "                stringBuilder.Append(String.Concat(def.Name' " = "' S_REFUUID.ToUpperString()' TERMINAL_LT' _vertexTypes[edge.Item2.GetTargetVertex().VertexTypeID]' TERMINAL_GT' S_BRACKET_LEFT)); " is 179.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDMLforVertexOutgoingSingleEdges,The length of the statement  "                    stringBuilder.Append(CreateGraphDMLforVertexDefinedProperties(edge.Item2.GetAllProperties()' myOutgoingEdgeDefinitions)); " is 121.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDMLforVertexDefinedProperties,The length of the statement  "                        stringBuilder.Append(String.Concat(S_BRACKET_LEFT' typeAttribute.Name' " = "' CreateGraphDMLforSingleAttribute(attribute.Item2)' S_BRACKET_RIGHT)); " is 147.
Long Statement,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,GetAllVertices,The length of the statement  "            return _iGraphDB.GetVertices<IEnumerable<IVertex>>(mySecurityToken' myTransactionToken' request' (stats' vertices) => vertices); " is 128.
Long Statement,sones.GraphQL.GQL.Manager.Select,GroupingKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\GroupingKey.cs,CompareTo,The length of the statement  "            // it could happen' that not all grouped aatributes are existing in all DBOs' so use the group by from the select to check " is 122.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectionElement,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectionElement.cs,IsReferenceToSkip,The length of the statement  "                    if (RelatedIDChainDefinition.Edges.Count > myEdgeList.Edges.Count) // if the IDNode is only one level above we can't skip this selection elemen because it is the last one: U.Friends  " is 181.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectionElement,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectionElement.cs,IsReferenceToSkip,The length of the statement  "                    else if (RelatedIDChainDefinition.Edges.Count == myEdgeList.Edges.Count && RelatedIDChainDefinition.IsUndefinedAttribute) " is 121.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectionElementFunction,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectionElement.cs,Equals,The length of the statement  "                && Selection == otherSelElF.Selection && IsGroupedOrAggregated == otherSelElF.IsGroupedOrAggregated && LevelKey == otherSelElF.LevelKey " is 135.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectionElementFunction,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectionElement.cs,GetHashCode,The length of the statement  "            return Alias.GetHashCode() ^ EdgeList.GetHashCode() ^ Element.GetHashCode() ^ Selection.GetHashCode() ^ IsGroupedOrAggregated.GetHashCode() ^ LevelKey.GetHashCode() ^ Function.FuncName.GetHashCode(); " is 199.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,ExecuteSelect,The length of the statement  "            Dictionary<String' IVertexType> typeList = ResolveTypes(selectDefinition.TypeList' mySecurityToken' myTransactionToken); " is 120.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,ExecuteSelect,The length of the statement  "                exprGraph = GetExpressionGraphFromWhere(selectDefinition.WhereExpressionDefinition' mySecurityToken' myTransactionToken); " is 121.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,ExecuteSelect,The length of the statement  "            List<IEnumerable<IVertexView>> _ListOfVertices1 = CreateVertices(mySecurityToken' myTransactionToken' typeList' selectResultManager' selectDefinition.WhereExpressionDefinition' selectDefinition.ResolutionDepth' selectDefinition.OrderByDefinition' selectDefinition.Limit' selectDefinition.Offset); " is 296.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,ExecuteSelect,The length of the statement  "            return QueryResult.Success(myQuery' SonesGQLConstants.GQL' AggregateListOfVertices(_ListOfVertices1)' Convert.ToUInt64(sw.Elapsed.TotalMilliseconds)); " is 150.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The length of the statement  "                        //if (theType != null && theType.GetAncestorVertexTypesAndSelf().Select(x => x.ID).Contains(idChainSelection.LastAttribute.RelatedType.ID)) " is 139.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The length of the statement  "                        //    reference = theType.GetAncestorVertexTypesAndSelf().Where(x => x.ID == idChainSelection.LastAttribute.RelatedType.ID).First().Name; " is 137.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The length of the statement  "                    aggregateSelection.ChainPartAggregateDefinition.Validate(_pluginManager' _graphdb' mySecurityToken' myTransactionToken); " is 120.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The length of the statement  "                    var selPartAggr = new SelectionElementAggregate(aggregateSelection.ChainPartAggregateDefinition.Aggregate' selection.Item2' " is 123.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The length of the statement  "                        new EdgeList(aggregateSelection.ChainPartAggregateDefinition.Parameter.Edges)' new LevelKey(aggregateSelection.ChainPartAggregateDefinition.Parameter.Edges' _graphdb' mySecurityToken' myTransactionToken)' " is 204.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateResultManager,The length of the statement  "                    _SelectResultManager.AddAggregateElementToSelection(mySecurityToken' myTransactionToken' selection.Item2' aggregateSelection.ChainPartAggregateDefinition.Parameter.Reference.Item1' selPartAggr); " is 194.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,GetExpressionGraphFromWhere,The length of the statement  "            var calculonResult = myWhereExpressionDefinition.Calculon(_pluginManager' _graphdb' mySecurityToken' myTransactionToken' new CommonUsageGraph(_graphdb' mySecurityToken' myTransactionToken)' false); " is 197.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateVerticesForType,The length of the statement  "            #region Check' whether the type was affected by the where expressions. This will use either the Graph or the GUID index of the type " is 131.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateVerticesForType,The length of the statement  "            Boolean isInterestingWhere = (myWhereExpressionDefinition != null && IsInterestingWhereForReference(myTypeReference.Key' myWhereExpressionDefinition)); " is 151.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,CreateVerticesForType,The length of the statement  "            var result = mySelectResultManager.Examine(myResolutionDepth' myTypeReference.Key' myTypeReference.Value' isInterestingWhere' ref _Vertices' mySecurityToken' myTransactionToken); " is 178.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,IsInterestingWhereForReference,The length of the statement  "            else if (myWhereExpressionDefinition.Left is AOperationDefinition || myWhereExpressionDefinition.Left is AggregateDefinition) " is 125.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,IsInterestingWhereForReference,The length of the statement  "            else if (myWhereExpressionDefinition.Right is AOperationDefinition || myWhereExpressionDefinition.Right is AggregateDefinition) " is 127.
Long Statement,sones.GraphQL.GQL.Manager.Select,Vertices_OrderByComparer,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectManager.cs,Compare,The length of the statement  "                        retVal = (myVertex1.GetProperty<IComparable>(attrDef.AsOrderByString)).CompareTo(myVertex2.GetProperty<IComparable>(attrDef.AsOrderByString)); " is 142.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                        if (String.IsNullOrEmpty(selElem.Alias) || (nodeEdgeKey.Next != null && !(nodeEdgeKey.Next is ChainPartFuncDefinition))) " is 120.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                    /// Duplicate AttributeSelection is: "U.Name' U.Name" or "U.Name.TOUPPER()' U.Name" but not "U.Friends.TOP(1).Name' U.Friends.TOP(1).Age" " is 137.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                        var funcElem = new SelectionElementFunction(lastElem' (nodeEdgeKey as ChainPartFuncDefinition)' (nodeEdgeKey as ChainPartFuncDefinition).Parameters); " is 149.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                            //lastElem = new SelectionElementFunction(lastElem' (nodeEdgeKey as ChainPartFuncDefinition)' (nodeEdgeKey as ChainPartFuncDefinition).Parameters); " is 147.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                            if (!_Selections[myReference][preLevel].Contains(funcElem)) // In case this Element with func is already in the selection list do nothing. " is 138.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                //    if (!lastElem.Element.GetADBBaseObjectType(_DBContext.DBTypeManager).IsValidValue((mySelectValueAssignment.TermDefinition as ValueDefinition).Value.Value)) " is 161.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                //        return new Exceptional(new Error_SelectValueAssignmentDataTypeDoesNotMatch(lastElem.Element.GetADBBaseObjectType(_DBContext.DBTypeManager).ObjectName' (mySelectValueAssignment.TermDefinition as ValueDefinition).Value.ObjectName)); " is 240.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The length of the statement  "                //    var typedValue = new ValueDefinition(lastElem.Element.GetADBBaseObjectType(_DBContext.DBTypeManager).Clone((mySelectValueAssignment.TermDefinition as ValueDefinition).Value.Value)); " is 187.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddGroupElementToSelection,The length of the statement  "                            _Groupings[myReference].Add(new SelectionElement(myReference' new EdgeList(myIDChainDefinition.Edges)' false' myIDChainDefinition' myIDChainDefinition.LastAttribute)); " is 167.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ValidateGroupingAndAggregate,The length of the statement  "                        if (!_Groupings[myReference].Any(ge => ge.RelatedIDChainDefinition.ContentString == selection.RelatedIDChainDefinition.ContentString)) " is 134.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ValidateGroupingAndAggregate,The length of the statement  "                        throw new AggregateDoesNotMatchGroupLevelException(_Aggregates[myReference].Where(a => a.Key.Level != selectionEdge.Key.Level).First().Value.First().Alias); " is 156.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,Examine,The length of the statement  "            if ((!_Selections.ContainsKey(myReference) || !_Selections[myReference].ContainsKey(new EdgeList(myReferencedDBType.ID))) && _Aggregates.IsNullOrEmpty()) " is 153.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,Examine,The length of the statement  "            myVertices = ExamineVertex(myResolutionDepth' myReference' myReferencedDBType' levelKey' myUsingGraph' mySecurityToken' myTransactionToken); " is 140.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,IsNewSelectionElement,The length of the statement  "                // same depth or Undefined and one lower depth Friends.Undefined is Depth 1 and Friends.Age is Depth 2 but at the same selection level " is 134.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,IsNewSelectionElement,The length of the statement  "                //      (selElem.RelatedIDChainDefinition.IsUndefinedAttribute && item.RelatedIDChainDefinition.Depth == selElem.RelatedIDChainDefinition.Depth + 1)) " is 149.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetTypeIndependendResult,The length of the statement  "                        funcResult = func.Function.Function.ExecFunc(null' CallingObject' null' _graphdb' mySecurityToken' myTransactionToken' parameter.ToArray()); " is 140.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                        //System.Diagnostics.Debug.Assert(false' "The attribute '" + alias + "' is selected twice in that level - this shouldnt!"); " is 123.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            selectionElementFunction.SelectValueAssignment.ValueAssignmentType == SelectValueAssignment.ValueAssignmentTypes.Always) " is 120.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            //EdgeKey key = (selectionElementFunction.Element is ASpecialTypeAttribute) ? new EdgeKey(myDBType.UUID' selectionElementFunction.Element.UUID) : new EdgeKey(selectionElementFunction.Element); " is 192.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            //we have to check if the levelKey contains an edge of the VertexType which is equal to the related type of the selection element " is 129.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            //in this case we have to check if there is a parent type of the reference type which is equal to the related type of the selection element " is 139.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                                if (myDBType.GetAncestorVertexTypesAndSelf().Select(x => x.ID).Contains(selectionElementFunction.Element.RelatedType.ID)) " is 121.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                                    var typeID = myDBType.GetAncestorVertexTypesAndSelf().Select(x => x.ID).Where(x => x == selectionElementFunction.Element.RelatedType.ID).First(); " is 145.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            myUsingGraph = _ExpressionGraph.IsGraphRelevant(new LevelKey((levelKey + key).Edges' _graphdb' mySecurityToken' myTransactionToken)' myDBObject); " is 145.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                                    if (myDBObject.HasIncomingVertices(incomingEdgeDefinition.RelatedEdgeDefinition.RelatedType.ID' incomingEdgeDefinition.RelatedEdgeDefinition.ID)) " is 145.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            //if (Depth > myLevelKey.Level || getAttributeSelections(myReference' myLevelKey + new EdgeKey(attr.RelatedType.ID' attr.ID)).IsNotNullOrEmpty()) " is 145.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                            if (Depth > levelKey.Level || getAttributeSelections(myReference' levelKey + new EdgeKey(attr.RelatedType.ID' attr.ID)).IsNotNullOrEmpty()) " is 139.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAllSelectedAttributesFromVertex,The length of the statement  "                        if (GetAttributeValueAndResolve(mySecurityToken' myTransactionToken' myDBType' attrSel' myDBObject' Depth' myLevelKey' myReference' myUsingGraph' out attrValue)) " is 161.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetCallingObject,The length of the statement  "                    if (myDBObject.HasIncomingVertices(incomingEdgeAttribue.RelatedEdgeDefinition.RelatedType.ID' incomingEdgeAttribue.RelatedEdgeDefinition.ID)) " is 141.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetCallingObject,The length of the statement  "                        return myDBObject.GetIncomingVertices(incomingEdgeAttribue.RelatedEdgeDefinition.RelatedType.ID' incomingEdgeAttribue.RelatedEdgeDefinition.ID); " is 144.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetCallingObject,The length of the statement  "                    return myDBObject.HasOutgoingEdge(iAttributeDefinition.ID) ? myDBObject.GetOutgoingEdge(iAttributeDefinition.ID) : null; " is 120.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetNotResolvedReferenceEdgeAttributeValue,The length of the statement  "                    return new SingleEdgeView(null' new VertexView(new Dictionary<String' object> { { "VertexTypeID"' aVertex.VertexTypeID }' { "VertexID"' aVertex.VertexID } }' null)); " is 165.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAttributeValueAndResolve,The length of the statement  "                    if (myDBObject.HasIncomingVertices(incomingEdgeAttribute.RelatedEdgeDefinition.RelatedType.ID' incomingEdgeAttribute.RelatedEdgeDefinition.ID)) " is 143.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetAttributeValueAndResolve,The length of the statement  "                        var dbos = myDBObject.GetIncomingVertices(incomingEdgeAttribute.RelatedEdgeDefinition.RelatedType.ID' incomingEdgeAttribute.RelatedEdgeDefinition.ID); " is 150.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExecuteFunction,The length of the statement  "            var parameters = func.Execute(myReferencedDBType' myDBObject' myReference' _pluginManager' _graphdb' mySecurityToken' myTransactionToken); " is 138.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExecuteFunction,The length of the statement  "            var result = func.Function.ExecFunc(mySelectionElementFunction.Element' myCallingObject' myDBObject' _graphdb' mySecurityToken' myTransactionToken' parameters.ToArray()); " is 170.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ExecuteFunction,The length of the statement  "                return ExecuteFunction(mySelectionElementFunction.FollowingFunction' myDBObject' result.Value' myDepth' myReference' myReferencedDBType' myLevelKey' myUsingGraph' mySecurityToken' myTransactionToken); " is 200.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ResolveIncomingEdgeValue,The length of the statement  "            // at some deeper level we could get into graph independend results. From this time' we can use the GUID index rather than asking the graph all the time " is 152.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,ResolveIncomingEdgeValue,The length of the statement  "                myUsingGraph = _ExpressionGraph.IsGraphRelevant(new LevelKey(myEdgeList.Edges' _graphdb' mySecurityToken' myTransactionToken)' mySourceDBObject); " is 145.
Long Statement,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,GetDepth,The length of the statement  "            /// This results of all selected attributes and their LevelKey. If U.Friends.Friends.Name is selected' than the MinDepth is 3 " is 125.
Long Statement,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,CreateOutput,The length of the statement  "            return QueryResult.Success(_query' SonesGQLConstants.GQL' CreateVertexViews(myALteredVertexType)' Convert.ToUInt64(myStats.ExecutionTime.Milliseconds)); " is 152.
Long Statement,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,GenerateUnknownAttribute,The length of the statement  "            UnknownAttributePredefinition result = new UnknownAttributePredefinition(myAttributeDefinition.AttributeName' myAttributeDefinition.AttributeType.Name); " is 152.
Long Statement,sones.GraphQL.StatementNodes.DDL,DropIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropIndexNode.cs,Execute,The length of the statement  "                var stat = myGraphDB.DropIndex(mySecurityToken' myTransactionToken' new RequestDropIndex(_TypeName' _IndexName' _IndexEdition)' (stats) => stats); " is 146.
Long Statement,sones.GraphQL.StatementNodes.DDL,CreateIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateIndexNode.cs,Execute,The length of the statement  "            return myGraphDB.CreateIndex<IQueryResult>(mySecurityToken' myTransactionToken' new RequestCreateIndex(indexDef)' GenerateResult); " is 130.
Long Statement,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,Init,The length of the statement  "                _TypeDefinitions.Add(new GraphDBTypeDefinition(aTempNode.TypeName' aTempNode.Extends' isAbstract' aTempNode.Attributes' aTempNode.BackwardEdges' aTempNode.Indices' aTempNode.Comment)); " is 184.
Long Statement,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,Init,The length of the statement  "                            _TypeDefinitions.Add(new GraphDBTypeDefinition(aTempNode.TypeName' aTempNode.Extends' aTempNode.IsAbstract' aTempNode.Attributes' aTempNode.BackwardEdges' aTempNode.Indices' aTempNode.Comment)); " is 194.
Long Statement,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,Init,The length of the statement  "                    _TypeDefinitions.Add(new GraphDBTypeDefinition(aTempNode.TypeName' aTempNode.Extends' false' aTempNode.Attributes' aTempNode.BackwardEdges' aTempNode.Indices' aTempNode.Comment)); " is 179.
Long Statement,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,CreateQueryResult,The length of the statement  "            return QueryResult.Success(_query' SonesGQLConstants.GQL' CreateVertexViews(myCreatedVertexTypes)' Convert.ToUInt64(myStats.ExecutionTime.Milliseconds)); " is 153.
Long Statement,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,GenerateUnknownAttribute,The length of the statement  "            UnknownAttributePredefinition result = new UnknownAttributePredefinition(aAttribute.Key.AttributeName' aAttribute.Value); " is 121.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The length of the statement  "                var attrName = typeNode + SonesGQLConstants.EdgeTraversalDelimiterSymbol + ((IDChainDefinition)((BinaryExpressionDefinition)item.Value).Left).ContentString; " is 156.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The length of the statement  "                var leftNode = new IDChainDefinition(attrName' new List<TypeReferenceDefinition>() { new TypeReferenceDefinition(typeNode' typeNode) }); " is 136.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The length of the statement  "                leftNode.AddPart(new ChainPartTypeOrAttributeDefinition(((IDChainDefinition)((BinaryExpressionDefinition)item.Value).Left).ContentString)); " is 139.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The length of the statement  "                var binExpression = new BinaryExpressionDefinition(((BinaryExpressionDefinition)item.Value).OperatorSymbol' leftNode' rightNode); " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The length of the statement  "            _Sources.Add(new AttributeRemoveList(_EdgeAttr.IDChainDefinition' _EdgeAttr.IDChainDefinition.ContentString' tupleDefSourceType)); " is 130.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Execute,The length of the statement  "            var expressionGraph = _Condition.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)' false); " is 184.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Execute,The length of the statement  "            var myToBeUpdatedVertices = expressionGraph.Select(new LevelKey(vertexTypeSource.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true).ToList(); " is 155.
Long Statement,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,GenerateResult,The length of the statement  "            return QueryResult.Success(_query' SonesGQLConstants.GQL' new List<IVertexView>()' Convert.ToUInt64(myElapsedTotalMilliseconds)); " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The length of the statement  "                var attrName = typeNode + SonesGQLConstants.EdgeTraversalDelimiterSymbol + ((IDChainDefinition)((BinaryExpressionDefinition)item.Value).Left).ContentString; " is 156.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The length of the statement  "                var leftNode = new IDChainDefinition(attrName' new List<TypeReferenceDefinition>() { new TypeReferenceDefinition(typeNode' typeNode) }); " is 136.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The length of the statement  "                leftNode.AddPart(new ChainPartTypeOrAttributeDefinition(((IDChainDefinition)((BinaryExpressionDefinition)item.Value).Left).ContentString)); " is 139.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The length of the statement  "                var binExpression = new BinaryExpressionDefinition(((BinaryExpressionDefinition)item.Value).OperatorSymbol' leftNode' rightNode); " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The length of the statement  "            _Targets.Add(new AttributeAssignOrUpdateList(new CollectionDefinition(CollectionType.Set' tupleDefTargetType)' _EdgeAttr.IDChainDefinition' false)); " is 148.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Execute,The length of the statement  "            var expressionGraph = _Condition.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)' false); " is 184.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Execute,The length of the statement  "            var myToBeUpdatedVertices = expressionGraph.Select(new LevelKey(vertexType.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true).ToList(); " is 149.
Long Statement,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,GenerateResult,The length of the statement  "            return QueryResult.Success(_query' SonesGQLConstants.GQL' new List<IVertexView>()' Convert.ToUInt64(myElapsedTotalMilliseconds)); " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Execute,The length of the statement  "                    return QueryResult.Failure(myQuery' SonesGQLConstants.GQL' new UnknownException(ex)' result' (ulong)sw.ElapsedMilliseconds); " is 124.
Long Statement,sones.GraphQL.StatementNodes.DML,RebuildIndicesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\RebuildIndicesNode.cs,Init,The length of the statement  "                parseNode.ChildNodes[2].ChildNodes[0].ChildNodes.ForEach(item => _Types.Add(((ATypeNode)item.AstNode).ReferenceAndType.TypeName)); " is 130.
Long Statement,sones.GraphQL.StatementNodes.DML,RebuildIndicesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\RebuildIndicesNode.cs,Execute,The length of the statement  "                return myGraphDB.RebuildIndices<IQueryResult>(mySecurityToken' myTransactionToken' request' _=> GenerateOutput(myQuery' _)); " is 124.
Long Statement,sones.GraphQL.StatementNodes.DML,DumpNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DumpNode.cs,Execute,The length of the statement  "                return QueryResult.Failure(myQuery' SonesGQLConstants.GQL' new InvalidDumpFormatException(_DumpFormat.ToString()' string.Empty)); " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Execute,The length of the statement  "            //TODO: do sth that is better than that: ew RequestDelete(new RequestGetVertices(_typeName' toBeDeletedVertices.Select(_ => _.VertexID))). " is 138.
Long Statement,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Execute,The length of the statement  "                new RequestDelete(new RequestGetVertices(_typeName' toBeDeletedVertices.Select(_ => _.VertexID))).AddAttributes(_toBeDeletedAttributes)' " is 136.
Long Statement,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,CreateQueryResult,The length of the statement  "                view.Add(new VertexView(new Dictionary<String' Object> { { "deleted vertices"' new ListCollectionWrapper(myDeletedVertices) } }' null)); " is 136.
Long Statement,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,CreateQueryResult,The length of the statement  "                view.Add(new VertexView(new Dictionary<String' Object> { { "deleted attributes"' new ListCollectionWrapper(myDeletedAttributes) } }' null)); " is 140.
Long Statement,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,CreateQueryResult,The length of the statement  "            return QueryResult.Success(_query' SonesGQLConstants.GQL' view' Convert.ToUInt64(myStats.ExecutionTime.TotalMilliseconds)); " is 123.
Long Statement,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The length of the statement  "                        //SelectedElements.Add(new IDChainDefinition(new ChainPartTypeOrAttributeDefinition(reference.TypeName)' aColumnItemNode.SelType' typeName)' null); " is 147.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeRemoveList,The length of the statement  "                                throw new ReferenceAssignmentExpectedException(String.Format("It is not possible to create a single edge pointing to {0} vertices"' vertexIDs.Count));" is 150.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                    if (((TupleDefinition)attributeAssignOrUpdateList.CollectionDefinition.TupleDefinition).All(_ => _.Value is ValueDefinition))" is 125.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                        IAttributeDefinition attribute = vertexType.GetAttributeDefinition(attributeAssignOrUpdateList.AttributeIDChain.ContentString);" is 127.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                    EdgePredefinition anotheredgeDefinition = new EdgePredefinition(attributeAssignOrUpdateList.AttributeIDChain.ContentString);" is 124.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                    foreach (var aTupleElement in ((VertexTypeVertexIDCollectionNode)attributeAssignOrUpdateList.CollectionDefinition.TupleDefinition).Elements)" is 140.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Execute,The length of the statement  "            return myGraphDB.Update(mySecurityToken' myTransactionToken' GenerateUpdateRequest(myGraphDB' myPluginManager' mySecurityToken' myTransactionToken)' GenerateOutput); " is 165.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessBinaryExpression,The length of the statement  "            var expressionGraph = binExpression.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)' false); " is 187.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeRemoveList,The length of the statement  "                        myRequestedType = ((IPropertyDefinition)vertexType.GetAttributeDefinition(attributeRemoveList.AttributeIDChain.ContentString)).BaseType; " is 136.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeRemoveList,The length of the statement  "                                throw new InvalidVertexAttributeException(String.Format("The vertex type {0} has no attribute named {1}."' vertexType.Name' attributeRemoveList.AttributeName)); " is 160.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeRemoveList,The length of the statement  "                                throw new ReferenceAssignmentExpectedException(String.Format("It is not possible to create a single edge pointing to {0} vertices"' vertexIDs.Count)); " is 150.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateSetRef,The length of the statement  "                    throw new InvalidVertexAttributeException(String.Format("The vertex type {0} has no attribute named {1}."' vertexType.Name' attributeAssignOrUpdateSetRef.AttributeIDChain.ContentString)); " is 187.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateSetRef,The length of the statement  "                IAttributeDefinition attribute = vertexType.GetAttributeDefinition(attributeAssignOrUpdateSetRef.AttributeIDChain.ContentString); " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateSetRef,The length of the statement  "                            throw new ReferenceAssignmentExpectedException(String.Format("It is not possible to create a single edge pointing to {0} vertices"' vertexIDs.Count)); " is 150.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                    if (((TupleDefinition)attributeAssignOrUpdateList.CollectionDefinition.TupleDefinition).All(_ => _.Value is ValueDefinition)) " is 125.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                            myRequestedType = ((IPropertyDefinition)vertexType.GetAttributeDefinition(attributeAssignOrUpdateList.AttributeIDChain.ContentString)).BaseType; " is 144.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                            throw new InvalidVertexAttributeException(String.Format("The vertex type {0} has no attribute named {1}."' vertexType.Name' attributeAssignOrUpdateList.AttributeIDChain.ContentString)); " is 185.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                        IAttributeDefinition attribute =  vertexType.GetAttributeDefinition(attributeAssignOrUpdateList.AttributeIDChain.ContentString); " is 128.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                        myRequestedType = ((IPropertyDefinition)vertexType.GetAttributeDefinition(attributeAssignOrUpdateList.AttributeIDChain.ContentString)).BaseType; " is 144.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                    EdgePredefinition anotheredgeDefinition = new EdgePredefinition(attributeAssignOrUpdateList.AttributeIDChain.ContentString); " is 124.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateList,The length of the statement  "                    foreach (var aTupleElement in ((VertexTypeVertexIDCollectionNode)attributeAssignOrUpdateList.CollectionDefinition.TupleDefinition).Elements) " is 140.
Long Statement,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,ProcessAttributeAssignOrUpdateValue,The length of the statement  "            result.UpdateUnknownProperty(attributeAssignOrUpdateValue.AttributeIDChain.ContentString ' attributeAssignOrUpdateValue.Value); " is 127.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessStructuredProperty,The length of the statement  "                    IAttributeDefinition attribute = vertexType.GetAttributeDefinition(aAttributeDefinition.AttributeIDChain.ContentString); " is 120.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,ProcessStructuredProperty,The length of the statement  "                                throw new ReferenceAssignmentExpectedException(String.Format("It is not possible to create a single edge pointing to {0} vertices"'  " is 131.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The length of the statement  "                    _AttributeAssignList = new List<AAttributeAssignOrUpdate>((parseNode.ChildNodes[3].AstNode as AttributeUpdateOrAssignListNode).ListOfUpdate.Select(e => e as AAttributeAssignOrUpdate)); " is 184.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The length of the statement  "                if (parseNode.ChildNodes[4] != null && ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition != null) " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Execute,The length of the statement  "                var expressionGraph = _WhereExpression.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)' false); " is 190.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Execute,The length of the statement  "                myToBeUpdatedVertices = expressionGraph.Select(new LevelKey(vertexType.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true).ToList(); " is 145.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The length of the statement  "                if (parseNode.ChildNodes[4] != null && ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition != null) " is 129.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Execute,The length of the statement  "                var expressionGraph = _whereExpression.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)' false); " is 190.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Execute,The length of the statement  "                myToBeUpdatedVertices = expressionGraph.Select(new LevelKey(vertexType.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true).ToList(); " is 145.
Long Statement,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,ProcessDelete,The length of the statement  "                                         new RequestDelete(new RequestGetVertices(toBeDeletedVertexID.VertexTypeID' new List<long> { toBeDeletedVertexID.VertexID }))' " is 125.
Long Statement,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Execute,The length of the statement  "            var expressionGraph = _whereExpression.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)' false); " is 190.
Long Statement,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Execute,The length of the statement  "            var myToBeUpdatedVertices = expressionGraph.Select(new LevelKey(vertexType.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true).ToList(); " is 149.
Long Statement,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Execute,The length of the statement  "                    throw new ReplaceException("There are no vertices that match the where expression' so it's not possible to execute a Replace statement. Try using InsertOrUpdate."); " is 164.
Long Statement,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,ProcessDelete,The length of the statement  "                new RequestDelete(new RequestGetVertices(toBeDeletedVertexID.VertexTypeID' new List<long> { toBeDeletedVertexID.VertexID }))' " is 125.
Long Statement,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,Execute,The length of the statement  "            return QueryResult.Success(myQuery' SonesGQLConstants.GQL' new List<IVertexView> { view }' Convert.ToUInt64(sw.ElapsedMilliseconds)); " is 133.
Long Statement,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The length of the statement  "                if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes != null && parseNode.ChildNodes[myCurrentChildNode].ChildNodes.Count != 0) " is 130.
Long Statement,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The length of the statement  "                                if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation)) " is 130.
Long Statement,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The length of the statement  "                                    throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' ""); " is 130.
Long Statement,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The length of the statement  "                                //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true); " is 146.
Long Statement,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The length of the statement  "                                TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null); " is 139.
Long Statement,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,Execute,The length of the statement  "            return QueryResult.Success(myQuery' SonesGQLConstants.GQL' new List<IVertexView> { new VertexView(_ReturnValues' null) }' Convert.ToUInt64(sw.ElapsedMilliseconds)); " is 164.
Long Statement,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,GetAttributes,The length of the statement  "                if (myNode.ChildNodes[myCurrentChildNode].ChildNodes != null && myNode.ChildNodes[myCurrentChildNode].ChildNodes.Count != 0) " is 124.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeIndexDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeIndexDefinition.cs,GetResult,The length of the statement  "                indices = myGraphDB.DescribeIndices<IEnumerable<IIndexDefinition>>(mySecurityToken' myTransactionToken' request' (stats' definitions) => definitions);                 " is 150.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeIndexDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeIndexDefinition.cs,GetResult,The length of the statement  "                indices = myGraphDB.DescribeIndex<IEnumerable<IIndexDefinition>>(mySecurityToken' myTransactionToken' request' (stats' definitions) => definitions); " is 148.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeTypeDefinition.cs,GetResult,The length of the statement  "                var type = myGraphDB.GetVertexType<IVertexType>(mySecurityToken' myTransactionToken' request' (stats' vertexType) => vertexType); " is 129.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeTypeDefinition.cs,GenerateOutput,The length of the statement  "                edges.Add("Properties"' new HyperEdgeView(null' GeneratePropertiesOutput(myType' myType.GetPropertyDefinitions(true)' myDepth))); " is 129.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeTypeDefinition.cs,GenerateOutput,The length of the statement  "                edges.Add("Incomingedges"' new HyperEdgeView(null' GenerateEdgesOutput(myType' myType.GetIncomingEdgeDefinitions(true)))); " is 122.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeTypeDefinition.cs,GenerateOutput,The length of the statement  "                edges.Add("UniqueAttributes"' new HyperEdgeView(null' GenerateUniquePropertiesOutput(myType' myType.GetUniqueDefinitions(true)))); " is 130.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeTypeDefinition.cs,GenerateEdgesOutput,The length of the statement  "                    Attributes.Add("RelatedEdgeSourceVertexType"' (edge as IIncomingEdgeDefinition).RelatedEdgeDefinition.SourceVertexType.Name); " is 125.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Definition,DescribeTypeDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\DescribeTypeDefinition.cs,GenerateEdgesOutput,The length of the statement  "                    Attributes.Add("RelatedEdgeTargetVertexType"' (edge as IIncomingEdgeDefinition).RelatedEdgeDefinition.TargetVertexType.Name); " is 125.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,AExpressionGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\AExpressionGraph.cs,GetBackwardEdgeKey,The length of the statement  "                return new EdgeKey(incomingEdgeDefinition.RelatedEdgeDefinition.SourceVertexType.ID' incomingEdgeDefinition.RelatedEdgeDefinition.ID); " is 134.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IsGraphRelevant,The length of the statement  "                    return this._Levels[myLevelKey.Level].ExpressionLevels[myLevelKey].Nodes.ContainsKey(GenerateVertexInfoFromLevelKeyAndVertexID(mySourceDBObject.VertexTypeID' mySourceDBObject.VertexID)); " is 186.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IsGraphRelevant,The length of the statement  "                        VertexInformation mySourceDBObjectNode = GenerateVertexInfoFromLevelKeyAndVertexID(mySourceDBObject.VertexTypeID' mySourceDBObject.VertexID); " is 141.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IsGraphRelevant,The length of the statement  "                            return this._Levels[myLevelKey.Level].ExpressionLevels[myLevelKey].Nodes.Where(item => item.Value.BackwardEdges[predecessorLevelKey.LastEdge].Contains(interestingEdge)).Count() > 0; " is 181.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IsGraphRelevant,The length of the statement  "                            if (this._Levels[predecessorLevelKey.Level].ExpressionLevels[predecessorLevelKey].Nodes[mySourceDBObjectNode].ForwardEdges.ContainsKey(myLevelKey.LastEdge)) " is 156.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IsGraphRelevant,The length of the statement  "                                if (this._Levels[predecessorLevelKey.Level].ExpressionLevels[predecessorLevelKey].Nodes[mySourceDBObjectNode].ForwardEdges[myLevelKey.LastEdge].Count > 0) " is 154.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,Select,The length of the statement  "                            foreach (var aNode in this._Levels[myLevelKey.Level].ExpressionLevels[myLevelKey].Nodes.Where(item => item.Value.BackwardEdges[predecessorLevelKey.LastEdge].Where(aBackWardEdge => aBackWardEdge.Destination == sourceNode).Count() > 0)) " is 234.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,SelectVertexIDs,The length of the statement  "                            foreach (var aNode in this._Levels[myLevelKey.Level].ExpressionLevels[myLevelKey].Nodes.Where(item => item.Value.BackwardEdges[predecessorLevelKey.LastEdge].Where(aBackWardEdge => aBackWardEdge.Destination == node).Count() > 0)) " is 228.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,SelectVertexIDs,The length of the statement  "                            VertexInformation source = GenerateVertexInfoFromLevelKeyAndVertexID(mySourceDBObject.VertexTypeID' mySourceDBObject.VertexID); " is 127.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,SelectVertexIDs,The length of the statement  "                            if (this._Levels[predecessorLevelKey.Level].ExpressionLevels[predecessorLevelKey].Nodes[source].ForwardEdges.ContainsKey(myLevelKey.LastEdge)) " is 142.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,SelectVertexIDs,The length of the statement  "                                foreach (var aUUID in this._Levels[predecessorLevelKey.Level].ExpressionLevels[predecessorLevelKey].Nodes[source].ForwardEdges[myLevelKey.LastEdge].Select(item => item.Destination)) " is 181.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                if ((AddNodeIfValid(leftDBObject' leftLevelKey' 0' GenerateVertexInfoFromLevelKeyAndVertexID(leftDBObject.VertexTypeID' leftDBObject.VertexID)' backwardResolutiondepth)) &&  " is 172.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                    (AddNodeIfValid(rightDBObject' rightLevelKey' 0' GenerateVertexInfoFromLevelKeyAndVertexID(rightDBObject.VertexTypeID' rightDBObject.VertexID)' backwardResolutiondepth))) " is 170.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                    //took the vertextype id of the levelkey' because it is possible that the vertextypeid of the vertex is something inheritated " is 125.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                    VertexInformation leftNode = GenerateVertexInfoFromLevelKeyAndVertexID(leftDBObject.VertexTypeID' leftDBObject.VertexID); " is 121.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                    VertexInformation rightNode = GenerateVertexInfoFromLevelKeyAndVertexID(rightDBObject.VertexTypeID' rightDBObject.VertexID); " is 124.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                    _Levels[leftLevelKey.Level].ExpressionLevels[leftLevelKey].Nodes[leftNode].AddComplexConnection(rightLevelKey' rightNode); " is 122.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                    _Levels[rightLevelKey.Level].ExpressionLevels[rightLevelKey].Nodes[rightNode].AddComplexConnection(leftLevelKey' leftNode); " is 123.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                        _Levels[leftLevelKey.Level].RemoveNode(leftLevelKey' GenerateVertexInfoFromLevelKeyAndVertexID(leftDBObject.VertexTypeID' leftDBObject.VertexID)); " is 146.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodesWithComplexRelation,The length of the statement  "                        _Levels[rightLevelKey.Level].RemoveNode(rightLevelKey' GenerateVertexInfoFromLevelKeyAndVertexID(rightDBObject.VertexTypeID' rightDBObject.VertexID)); " is 150.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNode,The length of the statement  "				// TODO: This method expects myIVertex to be not NULL' hence an ArgumentNullException should be thrown and the callers of this method " is 133.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNode,The length of the statement  "			AddNodeIfValid(myIVertex' myLevelKey' 0' GenerateVertexInfoFromLevelKeyAndVertexID(myIVertex.VertexTypeID' myIVertex.VertexID)' backwardResolution); " is 148.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IntersectWith,The length of the statement  "            if ((this.Levels.Count == 1) && (anotherGraph.Levels.Count == 1) && (this.Levels.ContainsKey(0)) && (anotherGraph.Levels.ContainsKey(0)) && (this.Levels[0].ExpressionLevels.Count == 1) && (anotherGraph.Levels[0].ExpressionLevels.Count == 1) && (this.Levels[0].ExpressionLevels.First().Key == anotherGraph.Levels[0].ExpressionLevels.First().Key)) " is 345.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                        //GetUUIDsForAttribute(aDBObject' incomingEdgeAttribute.RelatedEdgeDefinition' tempTypeAttribute.BackwardEdgeDefinition.GetTypeAndAttributeInformation(_DBContext.DBTypeManager).Item2' _DBContext.DBTypeManager.GetTypeByUUID(aDBObject.TypeUUID)); " is 244.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                    var tempEdgeKey = GetBackwardEdgeKey(myLevelKey' desiredBackwardEdgeLevel' _iGraphDB' _securityToken' _transactionToken); " is 121.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                        if (AddNodeIfValid(aReferenceUUID' myLevelKey' currentBackwardResolution + 1' GenerateVertexInfoFromLevelKeyAndVertexID(aDBObject.VertexTypeID' aDBObject.VertexID)' backwardResolutiondepth)) " is 190.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                            FillGraph(aDBObject' myLevelKey' currentBackwardResolution' source' myLevelKey.Edges[desiredBackwardEdgeLevel]' validUUIDs); " is 124.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                    LevelKey newLevelKey = new LevelKey(myLevelKey.Edges.First().VertexTypeID' _iGraphDB' _securityToken' _transactionToken); " is 121.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                        Levels[0].AddForwardEdgeToNode(newLevelKey' node' new EdgeKey(myLevelKey.Edges[0].VertexTypeID' myLevelKey.Edges[0].AttributeID)' source' null); " is 144.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                        //we are in the lowest level and are the first time in this method... so there's no need for adding forward-edges to nodes " is 122.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeIfValid,The length of the statement  "                        Levels[0].AddNode(newLevelKey' new ExpressionNode(aDBObject' null' GenerateVertexInfoFromLevelKeyAndVertexID(aDBObject.VertexTypeID' aDBObject.VertexID))); " is 155.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,FillGraph,The length of the statement  "                    _Levels[desiredLevel].AddForwardEdgeToNode(desiredLevelKey' node' new EdgeKey(myPath.Edges[desiredLevel].VertexTypeID' myPath.Edges[desiredLevel].AttributeID)' source' null); " is 174.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,MergeNodeIntoGraph,The length of the statement  "            //took the vertextype id of the levelkey' because it is possible that the vertextypeid of the vertex is something inheritated " is 125.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,MergeNodeIntoGraph,The length of the statement  "                    if ((aNode.BackwardEdges.Count != 0) || (destinationGraph.Levels[levelKey.Level].ExpressionLevels[levelKey].Nodes[node].BackwardEdges.Count != 0)) " is 146.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CleanGraphUp,The length of the statement  "            foreach (var aLevel in toBeCleanedGraph.Levels.Where(item => item.Key > lowerBound && item.Key <= upperBound).OrderBy(item => item.Key)) " is 136.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CleanGraphDown,The length of the statement  "            foreach (var aLevel in toBeCleanedGraph.Levels.Where(item => item.Key >= 0 && item.Key <= toBeCleanedLevel).OrderBy(item => item.Key)) " is 134.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CleanLevel,The length of the statement  "                if (referenceGraph.Levels.ContainsKey(aLevel.Key) && referenceGraph.Levels[aLevel.Key].ExpressionLevels.ContainsKey(aLevelKeyPayload.Key)) " is 138.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveNodeReferncesFromGraph,The length of the statement  "                        RemoveNodeReferncesFromGraph(expressionLevelEntry.Nodes[aReference]' aComplexConnection.Key' myGraph' integratedByAnOtherGraph); " is 128.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveNodeReferncesFromGraph,The length of the statement  "                                    if (myGraph.Levels[backwardLevelKey.Level].ExpressionLevels[backwardLevelKey].Nodes.ContainsKey(aBackwardEdge.Destination)) " is 123.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveNodeReferncesFromGraph,The length of the statement  "                                if (myGraph.Levels[backwardLevelKey.Level].ExpressionLevels[backwardLevelKey].Nodes.ContainsKey(aBackwardEdge.Destination)) " is 123.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveNodeReferncesFromGraph,The length of the statement  "                                    myGraph.Levels[backwardLevelKey.Level].ExpressionLevels[backwardLevelKey].Nodes[aBackwardEdge.Destination].RemoveForwardEdge(mylevelKey.LastEdge' myExpressionNode.VertexInformation); " is 182.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveReferenceFromUpperLevel,The length of the statement  "                            if (myGraph.Levels[forwardLevelKey.Level].ExpressionLevels[forwardLevelKey].Nodes.ContainsKey(aForwardEdge.Destination)) " is 120.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveReferenceFromUpperLevel,The length of the statement  "                                myGraph.Levels[forwardLevelKey.Level].ExpressionLevels[forwardLevelKey].Nodes[aForwardEdge.Destination].RemoveBackwardEdge(mylevelKey.LastEdge' myExpressionNode.VertexInformation); " is 180.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveReferenceFromUpperLevel,The length of the statement  "                                if (!(myGraph.Levels[forwardLevelKey.Level].ExpressionLevels[forwardLevelKey].Nodes[aForwardEdge.Destination].BackwardEdges " is 123.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,RemoveReferenceFromUpperLevel,The length of the statement  "                                    RemoveReferenceFromUpperLevel(myGraph.Levels[forwardLevelKey.Level].ExpressionLevels[forwardLevelKey].Nodes[aForwardEdge.Destination]' forwardLevelKey' myGraph); " is 161.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,DownFillStructureOfGraph,The length of the statement  "                                DownFillStructureOfGraph(anotherGraph' nextLowerLevelKey.GetPredecessorLevel(_iGraphDB' _securityToken' _transactionToken)); " is 124.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,UpdateLowerLevels,The length of the statement  "                                    referencedUUIDs = aVertex.GetIncomingVertices(myCurrentBackwardEdgekey.VertexTypeID' myCurrentBackwardEdgekey.AttributeID); " is 123.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,UpdateLowerLevels,The length of the statement  "                            var lowerLevelKeys = ExtractLowerLevelKeys(GetPreviousLevel(aLowerLevelKey.Level' myGraph.Levels)' aLowerLevelKey' myGraph); " is 124.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,UpdateLowerLevels,The length of the statement  "                                AddNodeRecursiveBackward(aVertex' myNode.VertexInformation' myCurrentLevelKey' aLowerLevelKey' lowerLevelKeys' myGraph); " is 120.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,UpdateLowerLevels,The length of the statement  "                                myNode.AddBackwardEdge(edgeKeyForBackwardEdge' GenerateVertexInfoFromLevelKeyAndVertexID(aVertex.VertexTypeID' aVertex.VertexID)' null); " is 136.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeRecursiveBackward,The length of the statement  "                //took the vertextype id of the levelkey' because it is possible that the vertextypeid of the vertex is something inheritated " is 125.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeRecursiveBackward,The length of the statement  "                    myGraph.Levels[myNewNodeLevelKey.Level].ExpressionLevels[myNewNodeLevelKey].Nodes.Add(node' new ExpressionNode(myNewVertex' null' node)); " is 137.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeRecursiveBackward,The length of the statement  "                myGraph.Levels[myNewNodeLevelKey.Level].AddForwardEdgeToNode(myNewNodeLevelKey' node' mySourceLevelKey.LastEdge' mySourceUUID' null); " is 133.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,AddNodeRecursiveBackward,The length of the statement  "                    UpdateLowerLevels(myGraph.Levels[myNewNodeLevelKey.Level].ExpressionLevels[myNewNodeLevelKey].Nodes[node]' myNewNodeLevelKey' lowerLevelKeys' myGraph); " is 151.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                var nextHigherLevelKey = (from aLowerExpressionLevel in nextHigherLevelKeys where IsValidLevelKeyNeighbourship(aLowerExpressionLevel' endLevelKey) select aLowerExpressionLevel).FirstOrDefault(); " is 194.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                                if (currentDBObject.HasIncomingVertices(incomingAttribute.RelatedEdgeDefinition.SourceVertexType.ID' incomingAttribute.RelatedEdgeDefinition.ID)) " is 145.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                                    foreach (var aIncomingVertex in currentDBObject.GetIncomingVertices(incomingAttribute.RelatedEdgeDefinition.SourceVertexType.ID' incomingAttribute.RelatedEdgeDefinition.ID)) " is 173.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                                        aGraph.Levels[nextHigherLevelKey.Level].AddNodeAndBackwardEdge(nextHigherLevelKey' aIncomingVertex' startLevelKey.LastEdge' aNode.Key' null' null); " is 147.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                                        aNode.Value.AddForwardEdge(myCurrentForwardEdgekey' GenerateVertexInfoFromLevelKeyAndVertexID(aIncomingVertex.VertexTypeID' aIncomingVertex.VertexID)' null); " is 157.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                                        aGraph.Levels[nextHigherLevelKey.Level].AddNodeAndBackwardEdge(nextHigherLevelKey' aOutgoingVertex' startLevelKey.LastEdge' aNode.Key' null' null); " is 147.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,ExtendGraphUp,The length of the statement  "                                        aNode.Value.AddForwardEdge(myCurrentForwardEdgekey' GenerateVertexInfoFromLevelKeyAndVertexID(aOutgoingVertex.VertexTypeID' aOutgoingVertex.VertexID)' null); " is 157.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,GenerateLevel,The length of the statement  "                        throw new ExpressionGraphInternalException("Its currently not implemented to select a LevelKey from a ExpressionGraph that is surrounded by lower and upper LevelKeys."); " is 169.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,GetLowerLevelKeys,The length of the statement  "                foreach (var aLevel in aGraph.Levels.Where(aaLevel => aaLevel.Key < myLevelKey.Level).OrderByDescending(item => item.Key)) " is 122.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionLevel,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionLevel.cs,AddNodeAndBackwardEdge,The length of the statement  "                    HashSet<IExpressionEdge> backwardEdges = new HashSet<IExpressionEdge>() { new ExpressionEdge(backwardDestination' EdgeWeight' backwardDirection) }; " is 147.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionNode.cs,AddForwardEdges,The length of the statement  "                    _ForwardEdges[forwardDestination].UnionWith(validUUIDs.Select(item => (IExpressionEdge)(new ExpressionEdge(item.Key' item.Value' forwardDestination)))); " is 152.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionNode.cs,AddForwardEdges,The length of the statement  "                    _ForwardEdges.Add(forwardDestination' new HashSet<IExpressionEdge>(validUUIDs.Select(item => (IExpressionEdge)(new ExpressionEdge(item.Key' item.Value' forwardDestination))))); " is 176.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionNode.cs,AddBackwardEdges,The length of the statement  "                    _BackwardEdges[backwardDestination].UnionWith(validUUIDs.Select(item => (IExpressionEdge)(new ExpressionEdge(item.Key' item.Value' backwardDestination)))); " is 155.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionNode.cs,AddBackwardEdges,The length of the statement  "                    _BackwardEdges.Add(backwardDestination' new HashSet<IExpressionEdge>(validUUIDs.Select(item => (IExpressionEdge)(new ExpressionEdge(item.Key' item.Value' backwardDestination))))); " is 179.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,ExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\ExpressionNode.cs,AddForwardEdge,The length of the statement  "                    _ForwardEdges.Add(ForwardEdge' new HashSet<IExpressionEdge>() { new ExpressionEdge(destination' weight' ForwardEdge) }); " is 120.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,AddLevelKey,The length of the statement  "                if (this.Edges[0].VertexTypeID != myLevelKey2.Edges[0].VertexTypeID) // if the types are different then something is really wrong " is 129.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,AddLevelKey,The length of the statement  "                if (this.Edges[0].VertexTypeID != myLevelKey2.Edges[0].VertexTypeID) // if the types are different then something is really wrong " is 129.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,AddLevelKey,The length of the statement  "                if (this.Edges[0].VertexTypeID != myLevelKey2.Edges[0].VertexTypeID) // if the types are different then something is really wrong " is 129.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,RemoveLevelKey,The length of the statement  "                throw new ArgumentException("level of left (" + this.Level + ") operand is lower than right (" + myOtherLevelKey.Level + ") operand:"' "myOtherLevelKey"); " is 154.
Long Statement,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,GetPredecessorLevel,The length of the statement  "                    return new LevelKey(new List<EdgeKey>() { new EdgeKey(Edges[0].VertexTypeID) }' myGraphDB' mySecurityToken' myTransactionToken); " is 128.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The length of the statement  "                        //simpleValue = new AtomValue(fcn.Function.TypeOfResult' ((FuncParameter)pResult.Value).Value); //the new simple value extraced from the function " is 145.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The length of the statement  "                            simpleValue = GetCorrectValueDefinition(complexIDNode.LastAttribute' complexIDNode.LastType' ((ValueDefinition)mySimpleValue)); " is 127.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The length of the statement  "                            throw new DataTypeDoesNotMatchException(((IPropertyDefinition)complexIDNode.LastAttribute).BaseType.Name' ((ValueDefinition)mySimpleValue).Value.GetType().Name); " is 161.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The length of the statement  "                            ((TupleDefinition)mySimpleValue).ConvertToAttributeType(myPluginManager' complexIDNode.LastAttribute' myGraphDB' mySecurityToken' myTransactionToken); " is 150.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The length of the statement  "                    complexIDNode = (((AggregateDefinition)myComplexValue).ChainPartAggregateDefinition.Parameters[0] as IDChainDefinition); " is 120.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,ExtractData,The length of the statement  "                    throw new AggregateNotAllowedException(((AggregateDefinition)myComplexValue).ChainPartAggregateDefinition.Aggregate.PluginShortName); " is 133.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,GenerateLiteral,The length of the statement  "                return new SingleLiteralExpression( ((ValueDefinition)aExpressionDefinition).Value.ConvertToIComparable(myTypeOfLiteral)); " is 122.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,CleanLowerLevel,The length of the statement  "                            //took the vertextype id of the levelkey' because it is possible that the vertextypeid of the vertex is something inheritated " is 125.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,CreateLevelKey,The length of the statement  "                return new LevelKey(new List<EdgeKey>() { new EdgeKey(myIDChainDefinition.Edges[0].VertexTypeID) }' myGraphDB' mySecurityToken' myTransactionToken); " is 148.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,CreateLevelKey,The length of the statement  "                        return new LevelKey(new List<EdgeKey>() { new EdgeKey(myIDChainDefinition.Edges[0].VertexTypeID) }' myGraphDB' mySecurityToken' myTransactionToken); " is 148.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,CreateLevelKey,The length of the statement  "                        return new LevelKey(myIDChainDefinition.Edges.Take(myIDChainDefinition.Level - 1)' myGraphDB' mySecurityToken' myTransactionToken); " is 131.
Long Statement,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,CreateLevelKey,The length of the statement  "                    return new LevelKey(myIDChainDefinition.Edges.Take(myIDChainDefinition.Level)' myGraphDB' mySecurityToken' myTransactionToken); " is 127.
Long Statement,sones.GraphQL.Structure.Nodes.DDL,EdgeTypeParamNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\EdgeTypeParamNode.cs,Init,The length of the statement  "                ///Das sollte hier jetzt viel einfacher sein' weil die definition einer edge maximal so aussehen kann User(Weighted) oder Set<User (Weighted)> " is 142.
Long Statement,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The length of the statement  "                        if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower()) " is 129.
Long Statement,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The length of the statement  "                        if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper()) " is 132.
Long Statement,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The length of the statement  "                                AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString }; " is 163.
Long Statement,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The length of the statement  "                                AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString }; " is 160.
Long Statement,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The length of the statement  "                        parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition)); " is 151.
Long Statement,sones.GraphQL.Structure.Nodes.DML,AttributeAssignNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttributeAssignNode.cs,Init,The length of the statement  "                AttributeValue = new AttributeAssignOrUpdateExpression(_AttributeIDNode' (_Node.AstNode as BinaryExpressionNode).BinaryExpressionDefinition); " is 141.
Long Statement,sones.GraphQL.Structure.Nodes.DML,AttributeAssignNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttributeAssignNode.cs,Init,The length of the statement  "                        AttributeValue = new AttributeAssignOrUpdateExpression(_AttributeIDNode' tempTupleNode.TupleDefinition.First().Value as BinaryExpressionDefinition); " is 148.
Long Statement,sones.GraphQL.Structure.Nodes.DML,AttributeAssignNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttributeAssignNode.cs,Init,The length of the statement  "                    throw new InvalidTupleException("It is not possible to have more than one binary expression in one tuple. Please check brackets."); " is 131.
Long Statement,sones.GraphQL.Structure.Nodes.DML,AttributeAssignNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttributeAssignNode.cs,Init,The length of the statement  "                AttributeValue = new AttributeAssignOrUpdateList((_Node.AstNode as CollectionOfDBObjectsNode).CollectionDefinition' _AttributeIDNode' true); " is 140.
Long Statement,sones.GraphQL.Structure.Nodes.DML,CollectionOfDBObjectsNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\CollectionOfDBObjectsNode.cs,Init,The length of the statement  "                CollectionDefinition = new CollectionDefinition(collectionType' ((TupleNode)parseNode.ChildNodes[1].AstNode).TupleDefinition); " is 126.
Long Statement,sones.GraphQL.Structure.Nodes.DML,CollectionOfDBObjectsNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\CollectionOfDBObjectsNode.cs,Init,The length of the statement  "                CollectionDefinition = new CollectionDefinition(collectionType' (VertexTypeVertexIDCollectionNode)parseNode.ChildNodes[1].AstNode); " is 131.
Long Statement,sones.GraphQL.Structure.Nodes.DML,AddToListAttributeUpdateAddToNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AddToListAttrUpdateAddToNode.cs,DirectInit,The length of the statement  "            AttributeUpdateList = new AttributeAssignOrUpdateList(_elementsToBeAdded.CollectionDefinition' ((IDNode)parseNode.ChildNodes[2].AstNode).IDChainDefinition' false); " is 163.
Long Statement,sones.GraphQL.Structure.Nodes.DML,AddToListAttrUpdateOperatorNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AddToListAttrUpdateOperatorNode.cs,DirectInit,The length of the statement  "            AttributeUpdateList = new AttributeAssignOrUpdateList(((CollectionOfDBObjectsNode)parseNode.ChildNodes[2].AstNode).CollectionDefinition' ((IDNode)parseNode.ChildNodes[0].AstNode).IDChainDefinition' false); " is 205.
Long Statement,sones.GraphQL.Structure.Nodes.DML,EdgeAttributeUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\EdgeAttributeUpdateNode.cs,Init,The length of the statement  "                AttributeValue = new AttributeAssignOrUpdateList((_Node.AstNode as CollectionOfEdgesNode).CollectionDefinition' _AttributeIDNode' true); " is 136.
Long Statement,sones.GraphQL.Structure.Nodes.DML,VertexTypeVertexElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\VertexTypeVertexElementNode.cs,Init,The length of the statement  "                VertexIDs.Add(new Tuple<Int64' Dictionary<String' object>>(Convert.ToInt64(((ValueDefinition)aTupleElement.Value).Value)' aTupleElement.Parameters)); " is 149.
Long Statement,sones.GraphQL.Structure.Nodes.DML,VerbosityNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\VerbosityNode.cs,Init,The length of the statement  "            if (HasChildNodes(parseNode) && Enum.TryParse<VerbosityTypes>(parseNode.ChildNodes[1].Token.Text' true' out verbosityType)) " is 123.
Long Statement,sones.GraphQL.Structure.Nodes.DML,DescribeIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\DescribeIndexNode.cs,Init,The length of the statement  "            String indexName = parseNode.ChildNodes[2].ChildNodes.Count > 0 ? parseNode.ChildNodes[2].ChildNodes[0].Token.ValueString : String.Empty; " is 137.
Long Statement,sones.GraphQL.Structure.Nodes.DML,PartialSelectStmtNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\PartialSelectStmtNode.cs,Init,The length of the statement  "            SelectDefinition = new SelectDefinition(aSelectNode.TypeList' aSelectNode.SelectedElements' aSelectNode.WhereExpressionDefinition' " is 130.
Long Statement,sones.GraphQL.Structure.Nodes.DML,PartialSelectStmtNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\PartialSelectStmtNode.cs,Init,The length of the statement  "                aSelectNode.GroupByIDs' aSelectNode.Having' aSelectNode.Limit' aSelectNode.Offset' aSelectNode.OrderByDefinition' aSelectNode.ResolutionDepth); " is 143.
Long Statement,sones.GraphQL.Structure.Nodes.DML,SelectValueAssignmentNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectValueAssignmentNode.cs,Init,The length of the statement  "                ValueAssignment = new SelectValueAssignment(SelectValueAssignment.ValueAssignmentTypes.Always' new ValueDefinition(parseNode.ChildNodes[1].Token.Value)); " is 153.
Long Statement,sones.GraphQL.Structure.Nodes.DML,SelectValueAssignmentNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectValueAssignmentNode.cs,Init,The length of the statement  "                ValueAssignment = new SelectValueAssignment(SelectValueAssignment.ValueAssignmentTypes.IfNotExists' new ValueDefinition(parseNode.ChildNodes[1].Token.Value)); " is 158.
Long Statement,sones.GraphQL.Structure.Nodes.DML,SelectionListElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectionListElementNode.cs,Init,The length of the statement  "                    if ((parseNode.ChildNodes[0].ChildNodes != null && parseNode.ChildNodes[0].ChildNodes.Count > 0) && parseNode.ChildNodes[0].ChildNodes[0].AstNode != null) " is 154.
Long Statement,sones.GraphQL.Structure.Nodes.DML,SelectionListElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectionListElementNode.cs,Init,The length of the statement  "                            throw new ArgumentException("This is not a valid IDNode: " + (parseNode.ChildNodes[0].ChildNodes.Aggregate(""' (result' elem) => { result += elem.Token.Text + "."; return result; }))); " is 184.
Long Statement,sones.GraphQL.Structure.Nodes.DML,SelectionListElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectionListElementNode.cs,Init,The length of the statement  "                        AliasId = parseNode.ChildNodes[1].ChildNodes[1].Token.ValueString; //(parseNode.ChildNodes.Last().AstNode as AliasNode).AliasId; " is 128.
Long Statement,sones.GraphQL.Structure.Nodes.DML,SelectionListElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\SelectionListElementNode.cs,Init,The length of the statement  "                        AliasId = parseNode.ChildNodes[1].ChildNodes[1].Token.ValueString;//(parseNode.ChildNodes.Last().AstNode as AliasNode).AliasId; " is 127.
Long Statement,sones.GraphQL.Structure.Nodes.DML,OrderByNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\OrderByNode.cs,Init,The length of the statement  "                if (parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3]) && parseNode.ChildNodes[3].ChildNodes[0].Term.Name.ToUpper() == "DESC") " is 149.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                    _Left = TryGetBinexpression((_Left as TupleDefinition).First().Value' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' types); " is 142.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                    _Left = AssignCorrectTuple(myPluginManager' (_Left as TupleDefinition)' Operator' myGraphDB' mySecurityToken' myTransactionToken); " is 130.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                _Left = (_Left as UnaryExpressionDefinition).GetBinaryExpression(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 130.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                _Right = (_Right as UnaryExpressionDefinition).GetBinaryExpression(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 132.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                    _Right = TryGetBinexpression((_Right as TupleDefinition).First().Value' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' types); " is 144.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                    _Right = AssignCorrectTuple(myPluginManager' (_Right as TupleDefinition)' Operator' myGraphDB' mySecurityToken' myTransactionToken); " is 132.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The length of the statement  "                    //ResultValue = Operator.SimpleOperation(((AOperationDefinition)_Left)' ((AOperationDefinition)_Right)' TypeOfBinaryExpression); " is 128.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,IsEncapsulatedBinaryExpression,The length of the statement  "                if ((myTupleDefinition.First().Value is BinaryExpressionDefinition) || (myTupleDefinition.First().Value is UnaryExpressionDefinition)) " is 134.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,TryGetBinexpression,The length of the statement  "                (expression as BinaryExpressionDefinition).Validate(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' types); " is 124.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,TryGetBinexpression,The length of the statement  "                    var binExpr = (expression as UnaryExpressionDefinition).GetBinaryExpression(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 141.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,TryGetBinexpression,The length of the statement  "                        return TryGetBinexpression(((TupleDefinition)expression).First().Value' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 137.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,AssignCorrectTuple,The length of the statement  "            var validTuple = ABinaryOperator.GetValidTupleReloaded(myTupleDefinition' myGraphDB' mySecurityToken' myTransactionToken); " is 122.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,AssignCorrectTuple,The length of the statement  "                        var qresult = selectManager.ExecuteSelect(mySecurityToken' myTransactionToken' (tupleVal.Value as SelectDefinition)' String.Empty); " is 131.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,AssignCorrectTuple,The length of the statement  "                        IAttributeDefinition curAttr = ((tupleVal.Value as SelectDefinition).SelectedElements.First().Item1 as IDChainDefinition).LastAttribute; " is 136.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ConvertToAttributeType,The length of the statement  "                    IQueryResult qresult = selectManager.ExecuteSelect(mySecurityToken' myTransactionToken' selectDefinition' String.Empty); " is 120.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ConvertToAttributeType,The length of the statement  "                    IAttributeDefinition curAttr = ((tupleElement as SelectDefinition).SelectedElements.First().Item1 as IDChainDefinition).LastAttribute; " is 134.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,IsValidTupleNode,The length of the statement  "                    ((BinaryExpressionDefinition)aTupleElement.Value).Validate(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' myGraphType); " is 137.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,The length of the statement  "                    var _graphResult = aUniqueExpr.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)); " is 175.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,The length of the statement  "                    foreach (var aDBO in _graphResult.Select(new LevelKey(validationType.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true)) " is 134.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,The length of the statement  "                        if (IsValidTupleNode(aTupleNode.TupleElements' myType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken)) " is 120.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,The length of the statement  "                                var tempGraphResult = tempNode.Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)); " is 175.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,GetCorrespondigDBObjectUUIDAsList,The length of the statement  "                                foreach (var aDBO in tempGraphResult.Select(new LevelKey(validationType.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true)) " is 137.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpression,The length of the statement  "                    ValidateBinaryExpressionInternal(aUniqueExpr.Left' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 132.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpression,The length of the statement  "                    ValidateBinaryExpressionInternal(aUniqueExpr.Right' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 133.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpression,The length of the statement  "                    ValidateBinaryExpressionInternal(aUniqueExpr.Left' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 132.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpression,The length of the statement  "                    ValidateBinaryExpressionInternal(aUniqueExpr.Right' validationType' myPluginManager' myGraphDB' mySecurityToken' myTransactionToken); " is 133.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TupleDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TupleDefinition.cs,ValidateBinaryExpressionInternal,The length of the statement  "                (aUniqueExpr as BinaryExpressionDefinition).Validate(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' validationType); " is 134.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Expressions,TypeReferenceDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\TypeReferenceDefinition.cs,Equals,The length of the statement  "            return TypeName.Equals((obj as TypeReferenceDefinition).TypeName) && Reference.Equals((obj as TypeReferenceDefinition).Reference); " is 130.
Long Statement,sones.GraphQL.Structure.Nodes.Expressions,FuncCallNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\FuncCallNode.cs,Init,The length of the statement  "            _SourceParsedString = context.CurrentParseTree.SourceText.Substring(parseNode.Span.Location.Position' parseNode.Span.Length); " is 125.
Long Statement,sones.GraphQL.Structure.Nodes.Expressions,FuncCallNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\FuncCallNode.cs,Init,The length of the statement  "                            throw new FunctionParameterInvalidReferenceException("It is not allowed to execute a function with an asterisk as parameter and more than one type."); " is 150.
Long Statement,sones.GraphQL.Structure.Nodes.Expressions,WhereExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\WhereExpressionNode.cs,Init,The length of the statement  "                if (parseNode.ChildNodes[1].AstNode is TupleNode && (parseNode.ChildNodes[1].AstNode as TupleNode).TupleDefinition.TupleElements.Count == 1) " is 140.
Long Statement,sones.GraphQL.Structure.Nodes.Expressions,TupleNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\TupleNode.cs,Init,The length of the statement  "            if (parseNode.ChildNodes[0].AstNode == null && parseNode.ChildNodes[0].ChildNodes.Count > 0) // this is a not resolved node and has childNodes " is 142.
Long Statement,sones.GraphQL.Structure.Nodes.Expressions,TupleNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\TupleNode.cs,Init,The length of the statement  "                    if ((aExpressionNode.Term.Name == SonesGQLConstants.BracketLeft) || (aExpressionNode.Term.Name == SonesGQLConstants.BracketRight)) " is 130.
Long Statement,sones.GraphQL.Structure.Nodes.Misc,ATypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\ATypeNode.cs,Equals,The length of the statement  "            return (this.ReferenceAndType.Reference == p.ReferenceAndType.Reference) && (this.ReferenceAndType.TypeName == p.ReferenceAndType.TypeName); " is 140.
Long Statement,sones.GraphQL.Structure.Nodes.Misc,KeyValuePairNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\KeyValuePairNode.cs,Init,The length of the statement  "            KeyValue = new KeyValuePair<string' string>(parseNode.ChildNodes[0].Token.ValueString' parseNode.ChildNodes[2].Token.ValueString); " is 130.
Long Statement,sones.GraphQL.Structure.Nodes.Misc,IDNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\IDNode.cs,Init,The length of the statement  "                        IDChainDefinition.AddPart(edgeTraversal.FuncCall.FuncDefinition' new IDChainDelemiter(edgeTraversal.Delimiter.GetKindOfDelimiter())); " is 133.
Long Statement,sones.GraphQL.Structure.Nodes.Misc,IDNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\IDNode.cs,Init,The length of the statement  "                        IDChainDefinition.AddPart(new ChainPartTypeOrAttributeDefinition(edgeTraversal.AttributeName)' new IDChainDelemiter(edgeTraversal.Delimiter.GetKindOfDelimiter())); " is 163.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                throw new FunctionParameterCountMismatchException(this.Function.PluginShortName' this.Function.GetParameters().Count' Parameters.Count); " is 136.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,The length of the statement  "                    var calculatedGraphResult = ((BinaryExpressionDefinition)Parameters[i]).Calculon(myPluginManager' myGraphDB' mySecurityToken' myTransactionToken' new CommonUsageGraph(myGraphDB' mySecurityToken' myTransactionToken)); " is 216.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,The length of the statement  "                    var extractedDBOs = calculatedGraphResult.Select(new LevelKey(myTypeOfDBObject.ID' myGraphDB' mySecurityToken' myTransactionToken)' null' true); " is 144.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,The length of the statement  "                                        if (myDBObject.HasIncomingVertices(incomingEdgeAttribute.RelatedEdgeDefinition.SourceVertexType.ID' incomingEdgeAttribute.RelatedEdgeDefinition.ID)) " is 148.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,ChainPartFuncDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Execute,The length of the statement  "                                            dbos = myDBObject.GetIncomingVertices(incomingEdgeAttribute.RelatedEdgeDefinition.SourceVertexType.ID' incomingEdgeAttribute.RelatedEdgeDefinition.ID); " is 151.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Create,The length of the statement  "            var chain = new IDChainDefinition(myType + "." + myAttribute' new List<TypeReferenceDefinition>() { new TypeReferenceDefinition(myType' myType) }); " is 147.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                            throw new InvalidFunctionReturnTypeException(funcPart.FuncName' returnType.GetType()' typeof(IAttributeDefinition)' typeof(IVertexType)' typeof(Object)); " is 153.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                                                     where (aContextType.Key != typeOrAttr.TypeOrAttributeName) && aContextType.Value.GetAttributeDefinition(typeOrAttr.TypeOrAttributeName) != null " is 143.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                            //  (3.2)In this case it can be an undefined attribute or if it was used like an edge it is treated like does not exist (U.NotExists.Name) " is 138.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                                //tempTypeAttribute = (from aAttribute in tempType.AttributeLookupTable where aAttribute.Value.Name == tempTypeOrAttributeName select aAttribute.Value).FirstOrDefault(); " is 169.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                                        throw new AmbiguousVertexAttributeException("The attribute or type \"" + typeOrAttr.TypeOrAttributeName + "\" has been used ambigous."); " is 136.
Long Statement,sones.GraphQL.GQL.Structure.Nodes.Misc,IDChainDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\IDChainDefinition.cs,Validate,The length of the statement  "                                        throw new AmbiguousVertexAttributeException("The attribute or type \"" + typeOrAttr.TypeOrAttributeName + "\" has been used ambigous."); " is 136.
Complex Conditional,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The conditional expression  "myReference != null && _Selections.ContainsKey(myReference) &&                    _Selections[myReference].Any(kv => kv.Value.Any(se => se.RelatedIDChainDefinition == myIDChainDefinition &&                   se.Alias == myAlias))"  is complex.
Complex Conditional,sones.GraphQL.GQL.Manager.Select,SelectResultManager,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\SelectResultManager.cs,AddElementToSelection,The conditional expression  "(nodeEdgeKey.Next == null || (nodeEdgeKey.Next is ChainPartFuncDefinition && nodeEdgeKey.Next.Next == null))                          //                                                        U.Name' U.Name                  U.Name.TOUPPER' U.Name                          && _Selections[myReference][preLevel].Exists(item => item.Alias == selElem.Alias &&                                                                      selElem.EdgeList.Level == item.EdgeList.Level &&                                                                      item.RelatedIDChainDefinition.Depth == selElem.RelatedIDChainDefinition.Depth &&                                                                      item.Element != null) && !myIsGroupedOrAggregated"  is complex.
Complex Conditional,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,IntersectWith,The conditional expression  "(this.Levels.Count == 1) && (anotherGraph.Levels.Count == 1) && (this.Levels.ContainsKey(0)) && (anotherGraph.Levels.ContainsKey(0)) && (this.Levels[0].ExpressionLevels.Count == 1) && (anotherGraph.Levels[0].ExpressionLevels.Count == 1) && (this.Levels[0].ExpressionLevels.First().Key == anotherGraph.Levels[0].ExpressionLevels.First().Key)"  is complex.
Complex Conditional,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,AddLevelKey,The conditional expression  "(this.Edges == null || this.Edges.Count == 0) && (myLevelKey2.Edges == null || myLevelKey2.Edges.Count == 0)"  is complex.
Complex Conditional,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The conditional expression  "(Operator == BinaryOperator.AND && ExpressionIndex != null)                   || (Operator == BinaryOperator.OR && ExpressionIndex != null)"  is complex.
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(10' "*"' "/"' "%");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(9' "+"' "-");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(8' "="' ">"' "<"' ">="' "<="' "<>"' "!="' "INRANGE"' "LIKE");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(7' "^"' "&"' "|");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(6' "NOT");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(5' "AND"' "OR");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,SonesGQLGrammar,The following statement contains a magic number: RegisterOperators(5' Associativity.Right' "**");
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDLOfIndices,The following statement contains a magic number: _StringBuilder.Remove(_StringBuilder.Length - _Delimiter.Length' 2);
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,GetIndexedPropertyNames,The following statement contains a magic number: stringBuilder.Remove(stringBuilder.Length - delimiter.Length' 2);
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDLOfMandatoryAttributes,The following statement contains a magic number: stringBuilder.Remove(stringBuilder.Length - delimiter.Length' 2);
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDLOfUniqueAttributes,The following statement contains a magic number: stringBuilder.Remove(stringBuilder.Length - delimiter.Length' 2);
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDDLOfIncomingEdges,The following statement contains a magic number: stringBuilder.Remove(stringBuilder.Length - delimiter.Length' 2);
Magic Number,sones.GraphQL,SonesGQLGrammar,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Grammar\SonesGQLGrammar.cs,CreateGraphDMLforVertexOutgoingHyperEdges,The following statement contains a magic number: stringBuilder.RemoveEnding(2);
Magic Number,sones.GraphQL.GQL.Manager.Select,EdgeList,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Manager\Select\EdgeList.cs,CalcHashCode,The following statement contains a magic number: myHashCode += (int)(aEdge.GetHashCode() >> 32);
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterEdgeTypeNode.cs,Init,The following statement contains a magic number: _TypeName = myParseTreeNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterEdgeTypeNode.cs,Init,The following statement contains a magic number: myParseTreeNode.ChildNodes[4].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Init,The following statement contains a magic number: _TypeName = myParseTreeNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Init,The following statement contains a magic number: myParseTreeNode.ChildNodes[4].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Init,The following statement contains a magic number: _AlterTypeCommand.Add(new AlterType_SetUnique()                                            {                                                UniqueAttributes =                                                    ((UniqueAttributesOptNode) myParseTreeNode.ChildNodes[5].AstNode).                                                    UniqueAttributes                                            });
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(myParseTreeNode.ChildNodes[5])
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Init,The following statement contains a magic number: _AlterTypeCommand.Add(new AlterType_SetMandatory()                                            {                                                MandatoryAttributes =                                                    ((MandatoryOptNode) myParseTreeNode.ChildNodes[6].AstNode).                                                    MandatoryAttribs                                            });
Magic Number,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(myParseTreeNode.ChildNodes[6])
Magic Number,sones.GraphQL.StatementNodes.DDL,CreateEdgeTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateEdgeTypesNode.cs,Init,The following statement contains a magic number: myParseTreeNode.ChildNodes[3].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DDL,CreateEdgeTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateEdgeTypesNode.cs,Init,The following statement contains a magic number: myParseTreeNode.ChildNodes[2].Token.KeyTerm ==                     ((SonesGQLGrammar)context.Language.Grammar).S_TYPES
Magic Number,sones.GraphQL.StatementNodes.DDL,DropEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropEdgeTypeNode.cs,Init,The following statement contains a magic number: _TypeName = parseNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DDL,DropIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropIndexNode.cs,Init,The following statement contains a magic number: _IndexName = parseNode.ChildNodes[4].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DDL,DropIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropIndexNode.cs,Init,The following statement contains a magic number: _IndexEdition = parseNode.ChildNodes[5].ChildNodes[1].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DDL,DropIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropIndexNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[5])
Magic Number,sones.GraphQL.StatementNodes.DDL,DropVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\DropVertexTypeNode.cs,Init,The following statement contains a magic number: _TypeName = parseNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,Init,The following statement contains a magic number: BulkVertexTypeNode aTempNode = (BulkVertexTypeNode)myParseTreeNode.ChildNodes[4].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The following statement contains a magic number: _EdgeAttr = (parseNode.ChildNodes[4].AstNode as IDNode);
Magic Number,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].AstNode is IDNode
Magic Number,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The following statement contains a magic number: var tupleDef = (parseNode.ChildNodes[2].AstNode as TupleNode).TupleDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The following statement contains a magic number: typeNode = ((ATypeNode)parseNode.ChildNodes[6].ChildNodes[0].AstNode).ReferenceAndType.TypeName;
Magic Number,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The following statement contains a magic number: _Targets = (parseNode.ChildNodes[6].ChildNodes[1].AstNode as TupleNode).TupleDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,UnlinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UnlinkNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[6].ChildNodes[0].AstNode is ATypeNode
Magic Number,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The following statement contains a magic number: _Sources = (myParseTreeNode.ChildNodes[2].AstNode as TupleNode).TupleDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The following statement contains a magic number: _EdgeAttr = (myParseTreeNode.ChildNodes[4].AstNode as IDNode);
Magic Number,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The following statement contains a magic number: myParseTreeNode.ChildNodes[3].Token.KeyTerm == _GraphQLGrammar.S_VIA
Magic Number,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The following statement contains a magic number: typeNode = ((ATypeNode)myParseTreeNode.ChildNodes[6].ChildNodes[0].AstNode).ReferenceAndType.TypeName;
Magic Number,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The following statement contains a magic number: tupleDef = (myParseTreeNode.ChildNodes[6].ChildNodes[1].AstNode as TupleNode).TupleDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,LinkNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\LinkNode.cs,Init,The following statement contains a magic number: myParseTreeNode.ChildNodes[5].Token.KeyTerm == _GraphQLGrammar.S_TO
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: SourceLocation = parseNode.ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: ImportFormat = parseNode.ChildNodes[4].Token.Text;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: ParallelTasks = (parseNode.ChildNodes[5].AstNode as ParallelTasksNode).ParallelTasks;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: Comments = (parseNode.ChildNodes[6].AstNode as CommentsNode).Comments;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: Offset = (parseNode.ChildNodes[7].AstNode as OffsetNode).Count;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: Limit = (parseNode.ChildNodes[8].AstNode as LimitNode).Count;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: VerbosityType = (parseNode.ChildNodes[9].AstNode as VerbosityNode).VerbosityType;
Magic Number,sones.GraphQL.StatementNodes.DML,ImportNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ImportNode.cs,Init,The following statement contains a magic number: Options = (parseNode.ChildNodes[10].AstNode as OptionsNode).Options;
Magic Number,sones.GraphQL.StatementNodes.DML,RebuildIndicesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\RebuildIndicesNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[2].ChildNodes[0].ChildNodes.ForEach(item => _Types.Add(((ATypeNode)item.AstNode).ReferenceAndType.TypeName));
Magic Number,sones.GraphQL.StatementNodes.DML,RebuildIndicesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\RebuildIndicesNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[2])
Magic Number,sones.GraphQL.StatementNodes.DML,DumpNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DumpNode.cs,Init,The following statement contains a magic number: _DumpType = (parseNode.ChildNodes[2].AstNode as DumpTypeNode).DumpType;
Magic Number,sones.GraphQL.StatementNodes.DML,DumpNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DumpNode.cs,Init,The following statement contains a magic number: _DumpFormat = (parseNode.ChildNodes[3].AstNode as DumpFormatNode).DumpFormat;
Magic Number,sones.GraphQL.StatementNodes.DML,DumpNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DumpNode.cs,Init,The following statement contains a magic number: _DumpDestination = parseNode.ChildNodes[4].ChildNodes[1].Token.ValueString;
Magic Number,sones.GraphQL.StatementNodes.DML,DumpNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DumpNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[4])
Magic Number,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3].ChildNodes[0].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Init,The following statement contains a magic number: WhereExpressionNode tempWhereNode = (WhereExpressionNode)parseNode.ChildNodes[4].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[4].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.DML,DeleteNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\DeleteNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[4].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: WhereExpressionNode tempWhereNode = (WhereExpressionNode)parseNode.ChildNodes[4].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[4].ChildNodes.Count > 0
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[4].ChildNodes.Count > 0
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[5].ChildNodes[2].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[5].ChildNodes[2].ChildNodes
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[5]) && HasChildNodes(parseNode.ChildNodes[5].ChildNodes[2])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[5]) && HasChildNodes(parseNode.ChildNodes[5].ChildNodes[2])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[5]) && HasChildNodes(parseNode.ChildNodes[5].ChildNodes[2])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: Having = ((BinaryExpressionNode)parseNode.ChildNodes[6].ChildNodes[1].AstNode).BinaryExpressionDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[6])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: OrderByDefinition = ((OrderByNode)parseNode.ChildNodes[7].AstNode).OrderByDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[7])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: Offset = ((OffsetNode)parseNode.ChildNodes[8].AstNode).Count;
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[8])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: Limit = ((LimitNode)parseNode.ChildNodes[9].AstNode).Count;
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[9])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: ResolutionDepth = Convert.ToUInt16(parseNode.ChildNodes[10].ChildNodes[1].Token.Value);
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[10])
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: _SelectOutputType = (parseNode.ChildNodes[11].AstNode as SelectOutputOptNode).SelectOutputType;
Magic Number,sones.GraphQL.StatementNodes.DML,SelectNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\SelectNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[11])
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Init,The following statement contains a magic number: _TypeName = ((AstNode)parseNode.ChildNodes[3].AstNode).AsString;
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Init,The following statement contains a magic number: var AttrUpdateOrAssign = (EdgeAttributeUpdateListNode)parseNode.ChildNodes[4].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[4])
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Init,The following statement contains a magic number: var tempWhereNode = (WhereExpressionNode)parseNode.ChildNodes[5].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[5].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateEdgesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateEdgesNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[5].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Init,The following statement contains a magic number: var AttrUpdateOrAssign = (AttributeUpdateOrAssignListNode)parseNode.ChildNodes[3].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Init,The following statement contains a magic number: var tempWhereNode = (WhereExpressionNode)parseNode.ChildNodes[4].AstNode;
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[4].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.DML,UpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\UpdateNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4].ChildNodes != null && parseNode.ChildNodes[4].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,Init,The following statement contains a magic number: _TypeName = ((AstNode)parseNode.ChildNodes[2].AstNode).AsString;
Magic Number,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,Init,The following statement contains a magic number: _AttributeAssignList = ((parseNode                                              .ChildNodes[3]                                              .ChildNodes[1]                                              .AstNode as AttributeAssignListNode).AttributeAssigns);
Magic Number,sones.GraphQL.StatementNodes.DML,InsertNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The following statement contains a magic number: _AttributeAssignList = new List<AAttributeAssignOrUpdate>((parseNode.ChildNodes[3].AstNode as AttributeUpdateOrAssignListNode).ListOfUpdate.Select(e => e as AAttributeAssignOrUpdate));
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The following statement contains a magic number: _WhereExpression = ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4] != null && ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition != null
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrUpdateNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4] != null && ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition != null
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The following statement contains a magic number: _attributeAssignList = (parseNode.ChildNodes[3].AstNode as AttributeAssignListNode).AttributeAssigns;
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The following statement contains a magic number: _whereExpression = ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition;
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4] != null && ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition != null
Magic Number,sones.GraphQL.StatementNodes.DML,InsertOrReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\InsertOrReplaceNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[4] != null && ((WhereExpressionNode)parseNode.ChildNodes[4].AstNode).BinaryExpressionDefinition != null
Magic Number,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Init,The following statement contains a magic number: _AttributeAssignList = (parseNode.ChildNodes[3].AstNode as AttributeAssignListNode).AttributeAssigns;
Magic Number,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.StatementNodes.DML,ReplaceNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DML\ReplaceNode.cs,Init,The following statement contains a magic number: _whereExpression = ((BinaryExpressionNode)parseNode.ChildNodes[5].AstNode).BinaryExpressionDefinition;
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,Init,The following statement contains a magic number: GetTransactAttributes(parseNode.ChildNodes[3]' 0);
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes.Count > 3
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following statement contains a magic number: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Magic Number,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,Init,The following statement contains a magic number: GetAttributes(parseNode.ChildNodes[2]' 0);
Magic Number,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[2].ChildNodes != null && parseNode.ChildNodes[2].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[2].ChildNodes != null && parseNode.ChildNodes[2].ChildNodes.Count != 0
Magic Number,sones.GraphQL.StatementNodes.Transactions,CommitRollbackTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\CommitRollbackTransactionNode.cs,GetAttributes,The following statement contains a magic number: Name = myNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CommonUsageGraph,The following statement contains a magic number: _performanceStatement.Add(GraphPerformanceCriteria.Multithreading' 2);
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CommonUsageGraph,The following statement contains a magic number: _performanceStatement.Add(GraphPerformanceCriteria.Space' 5);
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CommonUsageGraph,The following statement contains a magic number: _performanceStatement.Add(GraphPerformanceCriteria.Time' 5);
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CommonUsageGraph,The following statement contains a magic number: _performanceStatement.Add(GraphPerformanceCriteria.LevelResolution' 10);
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CommonUsageGraph,The following statement contains a magic number: _performanceStatement.Add(GraphPerformanceCriteria.FastInsertion' 10);
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,CommonUsageGraph,The following statement contains a magic number: _performanceStatement.Add(GraphPerformanceCriteria.FastDataExtraction' 10);
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,CommonUsageGraph,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\CommonUsageGraph.cs,GetCorrectBackwardEdge,The following statement contains a magic number: switch (myPath.Level)              {                  case 1:                        return new EdgeKey(myPath.Edges[0].VertexTypeID);                    case 0:                        throw new ExpressionGraphInternalException("It is not possible to get a BackwardEdge from a level 0 LevelKey");                    default:                        return myPath.Edges[myPath.Level - 2];              }
Magic Number,sones.GraphQL.GQL.Structure.Helper.ExpressionGraph,LevelKey,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\ExpressionGraph\Helper\LevelKey.cs,AddHashCodeFromSingleEdge,The following statement contains a magic number: myHashCode += (int)(aEdge.GetHashCode() >> 32);
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: _Attributes = GetAttributeList(parseNode.ChildNodes[2].ChildNodes[1]);
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[2])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: _BackwardEdgeInformation = (((IncomingEdgesNode)parseNode.ChildNodes[3].AstNode).BackwardEdgeInformation);
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: ((UniqueAttributesOptNode)parseNode.ChildNodes[4].AstNode).UniqueAttributes
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: ((UniqueAttributesOptNode)parseNode.ChildNodes[4].AstNode).UniqueAttributes != null
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: ((MandatoryOptNode)parseNode.ChildNodes[5].AstNode).MandatoryAttribs
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: ((MandatoryOptNode)parseNode.ChildNodes[5].AstNode).MandatoryAttribs != null
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: var idxCreateNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[6].ChildNodes[0].AstNode;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[6].ChildNodes[0])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[6])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: _Comment = parseNode.ChildNodes[7].ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: _Comment = parseNode.ChildNodes[7].ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkVertexTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[7])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,EdgeTypeAttributeDefinitionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\EdgeTypeAttributeDefinitionNode.cs,Init,The following statement contains a magic number: AttributeDefinition = new AttributeDefinition(((EdgeTypeNode)parseNode.ChildNodes[0].AstNode).DBTypeDefinition'                                                              parseNode.ChildNodes[1].Token.ValueString'                                                              ((AttrDefaultValueNode)(parseNode.ChildNodes[2].AstNode)).Value);
Magic Number,sones.GraphQL.Structure.Nodes.DDL,VertexTypeAttributeDefinitionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\VertexTypeAttributeDefinitionNode.cs,Init,The following statement contains a magic number: AttributeDefinition = new AttributeDefinition(((VertexTypeNode)parseNode.ChildNodes[0].AstNode).DBTypeDefinition'                                                               parseNode.ChildNodes[1].Token.ValueString'                                                               ((AttrDefaultValueNode)(parseNode.ChildNodes[2].AstNode)).Value);
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkEdgeTypeNode.cs,Init,The following statement contains a magic number: _Attributes = GetAttributeList(parseNode.ChildNodes[2].ChildNodes[1]);
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkEdgeTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[2])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkEdgeTypeNode.cs,Init,The following statement contains a magic number: _Comment = parseNode.ChildNodes[3].ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkEdgeTypeNode.cs,Init,The following statement contains a magic number: _Comment = parseNode.ChildNodes[3].ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,BulkEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\BulkEdgeTypeNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[3])
Magic Number,sones.GraphQL.Structure.Nodes.DDL,IncomingEdgeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\IncomingEdgeNode.cs,Init,The following statement contains a magic number: _TypeAttributeName = parseNode.ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,IncomingEdgeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\IncomingEdgeNode.cs,Init,The following statement contains a magic number: _AttributeName = parseNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,SingleEdgeTypeDefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\SingleEdgeTypeDefNode.cs,Init,The following statement contains a magic number: _Name = parseNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,EdgeTypeDefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\EdgeTypeDefNode.cs,Init,The following statement contains a magic number: EdgeType = parseNode.ChildNodes[3].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,EdgeType_SortedNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\EdgeType_SortedNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes.Count == 3 && parseNode.ChildNodes[2].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_DESC
Magic Number,sones.GraphQL.Structure.Nodes.DDL,EdgeType_SortedNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\EdgeType_SortedNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes.Count == 3 && parseNode.ChildNodes[2].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_DESC
Magic Number,sones.GraphQL.Structure.Nodes.DDL,DefaultValueDefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\DefaultValueDefNode.cs,Init,The following statement contains a magic number: Value = parseNode.ChildNodes[2].Token.Value;
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following statement contains a magic number: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Magic Number,sones.GraphQL.Structure.Nodes.DDL,IndexAttributeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\IndexAttributeNode.cs,Init,The following statement contains a magic number: _IndexAttribute.Count() > 2
Magic Number,sones.GraphQL.Structure.Nodes.DML,AttributeAssignNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttributeAssignNode.cs,Init,The following statement contains a magic number: var _Node = parseNode.ChildNodes[2];
Magic Number,sones.GraphQL.Structure.Nodes.DML,AttributeRemoveNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AttrRemoveNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[2].ChildNodes
Magic Number,sones.GraphQL.Structure.Nodes.DML,AddToListAttributeUpdateAddToNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AddToListAttrUpdateAddToNode.cs,DirectInit,The following statement contains a magic number: var _elementsToBeAdded = (CollectionOfDBObjectsNode)parseNode.ChildNodes[3].AstNode;
Magic Number,sones.GraphQL.Structure.Nodes.DML,AddToListAttributeUpdateAddToNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AddToListAttrUpdateAddToNode.cs,DirectInit,The following statement contains a magic number: var _AttrName = parseNode.ChildNodes[2].FirstChild.FirstChild.Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DML,AddToListAttributeUpdateAddToNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AddToListAttrUpdateAddToNode.cs,DirectInit,The following statement contains a magic number: AttributeUpdateList = new AttributeAssignOrUpdateList(_elementsToBeAdded.CollectionDefinition' ((IDNode)parseNode.ChildNodes[2].AstNode).IDChainDefinition' false);
Magic Number,sones.GraphQL.Structure.Nodes.DML,AddToListAttrUpdateOperatorNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\AddToListAttrUpdateOperatorNode.cs,DirectInit,The following statement contains a magic number: AttributeUpdateList = new AttributeAssignOrUpdateList(((CollectionOfDBObjectsNode)parseNode.ChildNodes[2].AstNode).CollectionDefinition' ((IDNode)parseNode.ChildNodes[0].AstNode).IDChainDefinition' false);
Magic Number,sones.GraphQL.Structure.Nodes.DML,EdgeAttributeUpdateNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\EdgeAttributeUpdateNode.cs,Init,The following statement contains a magic number: var _Node = parseNode.ChildNodes[2];
Magic Number,sones.GraphQL.Structure.Nodes.DML,EdgeTypeEdgeElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\EdgeTypeEdgeElementNode.cs,Init,The following statement contains a magic number: var tupleNode = parseNode.ChildNodes[3].AstNode as TupleNode;
Magic Number,sones.GraphQL.Structure.Nodes.DML,VertexTypeVertexElementNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\VertexTypeVertexElementNode.cs,Init,The following statement contains a magic number: var tupleNode = parseNode.ChildNodes[3].AstNode as TupleNode;
Magic Number,sones.GraphQL.Structure.Nodes.DML,DescribeIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\DescribeIndexNode.cs,Init,The following statement contains a magic number: String indexName = parseNode.ChildNodes[2].ChildNodes.Count > 0 ? parseNode.ChildNodes[2].ChildNodes[0].Token.ValueString : String.Empty;
Magic Number,sones.GraphQL.Structure.Nodes.DML,DescribeIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\DescribeIndexNode.cs,Init,The following statement contains a magic number: String indexName = parseNode.ChildNodes[2].ChildNodes.Count > 0 ? parseNode.ChildNodes[2].ChildNodes[0].Token.ValueString : String.Empty;
Magic Number,sones.GraphQL.Structure.Nodes.DML,DescribeIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\DescribeIndexNode.cs,Init,The following statement contains a magic number: edition = parseNode.ChildNodes[3].ChildNodes[1].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DML,DescribeIndexNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\DescribeIndexNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3].ChildNodes.Count > 0
Magic Number,sones.GraphQL.Structure.Nodes.DML,DescribeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\DescribeTypeNode.cs,Init,The following statement contains a magic number: _DescribeTypeDefinition = new DescribeTypeDefinition(parseNode.ChildNodes[2].Token.ValueString);
Magic Number,sones.GraphQL.Structure.Nodes.DML,RemoveFromListAttrUpdateAddToRemoveFromNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\RemoveFromListAttrUpdateAddToRemoveFromNode.cs,DirectInit,The following statement contains a magic number: var idChain = ((IDNode)parseNode.ChildNodes[2].AstNode).IDChainDefinition;
Magic Number,sones.GraphQL.Structure.Nodes.DML,RemoveFromListAttrUpdateAddToRemoveFromNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\RemoveFromListAttrUpdateAddToRemoveFromNode.cs,DirectInit,The following statement contains a magic number: var tupleDefinition = ((TupleNode)parseNode.ChildNodes[3].AstNode).TupleDefinition;
Magic Number,sones.GraphQL.Structure.Nodes.DML,RemoveFromListAttrUpdateAddToRemoveFromNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\RemoveFromListAttrUpdateAddToRemoveFromNode.cs,DirectInit,The following statement contains a magic number: var AttrName = parseNode.ChildNodes[2].FirstChild.FirstChild.Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.DML,OrderByNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\OrderByNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3]) && parseNode.ChildNodes[3].ChildNodes[0].Term.Name.ToUpper() == "DESC"
Magic Number,sones.GraphQL.Structure.Nodes.DML,OrderByNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\OrderByNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3]) && parseNode.ChildNodes[3].ChildNodes[0].Term.Name.ToUpper() == "DESC"
Magic Number,sones.GraphQL.Structure.Nodes.DML,OrderByNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\OrderByNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[3] != null && HasChildNodes(parseNode.ChildNodes[3]) && parseNode.ChildNodes[3].ChildNodes[0].Term.Name.ToUpper() == "DESC"
Magic Number,sones.GraphQL.Structure.Nodes.DML,OrderByNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DML\OrderByNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[2].ChildNodes
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,BinaryExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\BinaryExpressionNode.cs,Init,The following statement contains a magic number: _right = GetExpressionDefinition(parseNode.ChildNodes[2]);
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,BinaryExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\BinaryExpressionNode.cs,Init,The following statement contains a magic number: _expressionIndex = ((AstNode)parseNode.ChildNodes[4].AstNode).AsString;
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,BinaryExpressionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\BinaryExpressionNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes.Count > 3
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,SetRefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\SetRefNode.cs,Init,The following statement contains a magic number: var tupleNode = parseNode.ChildNodes[4].AstNode as TupleNode;
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,SetRefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\SetRefNode.cs,Init,The following statement contains a magic number: parameters = (parseNode.ChildNodes[5].AstNode as ParametersNode).ParameterValues;
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,SetRefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\SetRefNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes[5].AstNode is ParametersNode
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,SetRefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\SetRefNode.cs,Init,The following statement contains a magic number: String referencedVertexType = parseNode.ChildNodes[2].Token.ValueString;
Magic Number,sones.GraphQL.Structure.Nodes.Expressions,SetRefNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Expressions\SetRefNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes.Count >3
Magic Number,sones.GraphQL.Structure.Nodes.Misc,ATypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\ATypeNode.cs,Init,The following statement contains a magic number: parseNode.ChildNodes.Count == 2
Magic Number,sones.GraphQL.Structure.Nodes.Misc,ExtKeyValuePairNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\ExtKeyValuePairNode.cs,Init,The following statement contains a magic number: KeyValue =                      new KeyValuePair<string' IEnumerable<object>>(                              parseNode.ChildNodes[0].Token.ValueString'                              ((parseNode                                  .ChildNodes[2]                                  .AstNode as CollectionOfBasicDBObjectsNode)                                      .CollectionDefinition.TupleDefinition as TupleDefinition)                                          .TupleElements.Select(_ => (_.Value as ValueDefinition).Value));
Magic Number,sones.GraphQL.Structure.Nodes.Misc,ExtKeyValuePairNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\ExtKeyValuePairNode.cs,Init,The following statement contains a magic number: HasChildNodes(parseNode.ChildNodes[2])
Magic Number,sones.GraphQL.Structure.Nodes.Misc,KeyValuePairNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\Misc\KeyValuePairNode.cs,Init,The following statement contains a magic number: KeyValue = new KeyValuePair<string' string>(parseNode.ChildNodes[0].Token.ValueString' parseNode.ChildNodes[2].Token.ValueString);
Missing Default,sones.GraphQL.StatementNodes.DDL,AlterEdgeTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterEdgeTypeNode.cs,GenerateUnknownAttribute,The following switch statement is missing a default case: switch (myAttributeDefinition.AttributeType.Type)             {                 case SonesGQLGrammar.TERMINAL_SET:                     result.SetMultiplicityAsSet();                     break;                  case SonesGQLGrammar.TERMINAL_LIST:                     result.SetMultiplicityAsList();                     break;             }
Missing Default,sones.GraphQL.StatementNodes.DDL,AlterVertexTypeNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\AlterVertexTypeNode.cs,GenerateUnknownAttribute,The following switch statement is missing a default case: switch (myAttributeDefinition.AttributeType.Type)              {                  case SonesGQLGrammar.TERMINAL_SET:                        result.SetMultiplicityAsSet();                        break;                    case SonesGQLGrammar.TERMINAL_LIST:                        result.SetMultiplicityAsList();                        break;              }
Missing Default,sones.GraphQL.StatementNodes.DDL,CreateEdgeTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateEdgeTypesNode.cs,GenerateProperty,The following switch statement is missing a default case: switch (aAttribute.Key.AttributeType.Type)             {                 case SonesGQLGrammar.TERMINAL_SET:                     result.SetMultiplicityToSet();                     break;                  case SonesGQLGrammar.TERMINAL_LIST:                     result.SetMultiplicityToList();                     break;             }
Missing Default,sones.GraphQL.StatementNodes.DDL,CreateVertexTypesNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\DDL\CreateVertexTypesNode.cs,GenerateUnknownAttribute,The following switch statement is missing a default case: switch (aAttribute.Key.AttributeType.Type)              {                  case SonesGQLGrammar.TERMINAL_SET:                        result.SetMultiplicityAsSet();                        break;                    case SonesGQLGrammar.TERMINAL_LIST:                        result.SetMultiplicityAsList();                        break;              }
Missing Default,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactOptions,The following switch statement is missing a default case: switch (parseNode.ChildNodes[1].ChildNodes[0].Token.Text.ToUpper())                          {                              case SonesGQLConstants.TRANSACTION_DISTRIBUTED:                                  IsDistributed = true;                                  break;                                case SonesGQLConstants.TRANSACTION_LONGRUNNING:                                  IsLongRunning = true;                                  break;                          }
Missing Default,sones.GraphQL.StatementNodes.Transactions,BeginTransactionNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\StatementNodes\Transactions\BeginTransactionNode.cs,GetTransactAttributes,The following switch statement is missing a default case: switch (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[0].Token.Text.ToUpper())                      {                          case SonesGQLConstants.TRANSACTION_ISOLATION:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  IsolationLevel isolation;                                  if (!Enum.TryParse<IsolationLevel>(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true' out isolation))                                  {                                      throw new InvalidTransactionIsolationLevelException(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "");                                  }                                  Isolation = isolation;                                  //_Isolation = (IsolationLevel)Enum.Parse(typeof(IsolationLevel)' parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' true);                              }                              break;                            case SonesGQLConstants.TRANSACTION_NAME:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  Name = parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString;                              }                              break;                            case SonesGQLConstants.TRANSACTION_TIMESTAMP:                              if (parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2] != null)                              {                                  TimeStamp = DateTime.ParseExact(parseNode.ChildNodes[myCurrentChildNode].ChildNodes[2].Token.ValueString' "yyyyddMM.HHmmss.fffffff"' null);                              }                              break;                      }
Missing Default,sones.GraphQL.GQL.Structure.Helper.Operator,ABinaryCompareOperator,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Operator\ABinaryCompareOperator.cs,TypeOperation,The following switch statement is missing a default case: switch (typeOfBinExpr)              {                  case TypesOfBinaryExpression.Atom:                        #region Atom                        //do nothing 3 = 3 (or 2 != 3) doesnt bother U                        #endregion                        break;                    case TypesOfBinaryExpression.LeftComplex:                        #region LeftComplex                        MatchData(data'                                   resultGr'                                   myGraphDB'                                   mySecurityToken'                                   myTransactionToken'                                   mytypesOfOpertators'                                   myOperator'                                  myExpressionIndex);                        #endregion                        break;                    case TypesOfBinaryExpression.RightComplex:                        #region RightComplex                        MatchData(data'                                   resultGr'                                   myGraphDB'                                   mySecurityToken'                                   myTransactionToken'                                   mytypesOfOpertators'                                   myOperator'                                  myExpressionIndex);                        #endregion                        break;                    case TypesOfBinaryExpression.Complex:                        #region Complex                        throw new NotImplementedQLException("");                        #endregion              }
Missing Default,sones.GraphQL.Structure.Nodes.DDL,AlterEdgeTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterEdgeTypeCommandNode.cs,Init,The following switch statement is missing a default case: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "add":                            #region add                            #region data                            var listOfToBeAddedAttributes = new List<AttributeDefinition>();                            #endregion                            #region add attributes                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              if (aNode.AstNode is EdgeTypeAttributeDefinitionNode)                                  listOfToBeAddedAttributes.Add(((EdgeTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                              else                                  throw new NotImplementedException(aNode.AstNode.GetType().ToString());                          }                            AlterTypeCommand = new AlterEdgeType_AddAttributes(listOfToBeAddedAttributes);                            #endregion                            #endregion                            break;                        case "drop":                            #region drop                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                              AlterTypeCommand = new AlterType_RenameAttribute()                                                       { OldName = parseNode.ChildNodes[2].Token.ValueString'                                                         NewName = parseNode.ChildNodes[4].Token.ValueString };                          else if (parseNode.ChildNodes.Count <= 3)                              AlterTypeCommand = new AlterType_RenameType()                                                       { NewName = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment()                                                   { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region undefine                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                            #endregion                            break;                        case "define":                            #region define                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode                              .ChildNodes[2]                              .ChildNodes                              .ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                                                    #endregion                            break;                  }
Missing Default,sones.GraphQL.Structure.Nodes.DDL,AlterVertexTypeCommandNode,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Nodes\DDL\AlterVertexTypeCommandNode.cs,Init,The following switch statement is missing a default case: switch (parseNode.ChildNodes[0].Token.Text.ToLower())                  {                      case "drop":                            #region drop                            if (parseNode.ChildNodes[1].AstNode is IndexDropOnAlterType)                          {                              var dropNodeExcept = (IndexDropOnAlterType)parseNode.ChildNodes[1].AstNode;                                AlterTypeCommand = new AlterType_DropIndices(dropNodeExcept.DropIndexList);                                break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToLower() == SonesGQLGrammar.TERMINAL_UNIQUE.ToLower())                          {                              AlterTypeCommand = new AlterType_DropUnique(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            if (parseNode.ChildNodes.Count == 4 && parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLGrammar.TERMINAL_MANDATORY.ToUpper())                          {                              AlterTypeCommand = new AlterType_DropMandatory(parseNode.ChildNodes[3].Token.ValueString);                              break;                          }                            #region data                            List<String> listOfToBeDroppedAttributes = new List<string>();                            #endregion                            foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                          {                              listOfToBeDroppedAttributes.Add(aNode.Token.ValueString);                          }                            AlterTypeCommand = new AlterType_DropAttributes(listOfToBeDroppedAttributes);                            #endregion                            break;                        case "add":                            #region add                            if (parseNode.ChildNodes[1].AstNode is IndexOnCreateTypeNode)                          {                              #region data                                var _IndexInformation = new List<IndexDefinition>();                                #endregion                                #region add indices                                var indexOnCreateTypeNode = (IndexOnCreateTypeNode)parseNode.ChildNodes[1].AstNode;                                _IndexInformation.AddRange(indexOnCreateTypeNode.ListOfIndexDefinitions);                                AlterTypeCommand = new AlterType_AddIndices(_IndexInformation);                                #endregion                          }                          else                          {                              #region data                                var listOfToBeAddedAttributes = new List<AttributeDefinition>();                              var _BackwardEdgeInformation = new List<IncomingEdgeDefinition>();                                #endregion                                #region add attributes                                foreach (ParseTreeNode aNode in parseNode.ChildNodes[2].ChildNodes)                              {                                  if (aNode.AstNode is VertexTypeAttributeDefinitionNode)                                  {                                      listOfToBeAddedAttributes.Add(((VertexTypeAttributeDefinitionNode)aNode.AstNode).AttributeDefinition);                                  }                                  else if (aNode.AstNode is IncomingEdgeNode)                                  {                                      _BackwardEdgeInformation.Add((aNode.AstNode as IncomingEdgeNode).BackwardEdgeDefinition);                                  }                                  else                                  {                                      throw new NotImplementedException(aNode.AstNode.GetType().ToString());                                  }                              }                                AlterTypeCommand = new AlterVertexType_AddAttributes(listOfToBeAddedAttributes' _BackwardEdgeInformation);                                #endregion                          }                            #endregion                            break;                        case "rename":                            #region rename                            if (parseNode.ChildNodes.Count > 3)                          {                              if (parseNode.ChildNodes[1].Token.Text.ToUpper() == SonesGQLConstants.INCOMINGEDGE)                              {                                  AlterTypeCommand = new AlterType_RenameIncomingEdge() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                              else                              {                                  AlterTypeCommand = new AlterType_RenameAttribute() { OldName = parseNode.ChildNodes[2].Token.ValueString' NewName = parseNode.ChildNodes[4].Token.ValueString };                              }                          }                          else if (parseNode.ChildNodes.Count <= 3)                          {                              AlterTypeCommand = new AlterType_RenameType() { NewName = parseNode.ChildNodes[2].Token.ValueString };                          }                            #endregion                            break;                        case "comment":                            #region comment                            AlterTypeCommand = new AlterType_ChangeComment() { NewComment = parseNode.ChildNodes[2].Token.ValueString };                            #endregion                            break;                        case "undefine":                            #region data                            var listOfUndefAttributes = new List<String>();                            #endregion                            #region undefine attributes                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfUndefAttributes.Add(node.Token.ValueString));                            AlterTypeCommand = new AlterType_UndefineAttributes(listOfUndefAttributes);                            #endregion                              break;                        case "define":                            #region data                            var listOfDefinedAttributes = new List<AttributeDefinition>();                            #endregion                            parseNode.ChildNodes[2].ChildNodes.ForEach(node => listOfDefinedAttributes.Add(((VertexTypeAttributeDefinitionNode)node.AstNode).AttributeDefinition));                            AlterTypeCommand = new AlterType_DefineAttributes(listOfDefinedAttributes);                            break;                  }
Missing Default,sones.GraphQL.GQL.Structure.Nodes.Expressions,BinaryExpressionDefinition,D:\research\architectureSmells\repos1\sones_sones\GraphQL\Implementations\SonesGraphQueryLanguage\Structure\Helper\Definition\BinaryExpressionDefinition.cs,Validate,The following switch statement is missing a default case: switch (TypeOfBinaryExpression)              {                  case TypesOfBinaryExpression.Atom:                        break;                    case TypesOfBinaryExpression.LeftComplex:                        #region leftComplex                        leftTemp = TryGetOperationValue(_Left);                        if (leftTemp != null)                      {                          TypeOfBinaryExpression = TypesOfBinaryExpression.Atom;                          _Left = leftTemp;                      }                        #endregion                        break;                    case TypesOfBinaryExpression.RightComplex:                        #region rightComplex                        rightTemp = TryGetOperationValue(_Right);                        if (rightTemp != null)                      {                          TypeOfBinaryExpression = TypesOfBinaryExpression.Atom;                          _Right = rightTemp;                      }                        #endregion                        break;                    case TypesOfBinaryExpression.Complex:                        #region complex                        leftTemp = TryGetOperationValue(_Left);                      rightTemp = TryGetOperationValue(_Right);                        if ((leftTemp != null) && (rightTemp != null))                      {                          TypeOfBinaryExpression = TypesOfBinaryExpression.Atom;                          _Left = leftTemp;                          _Right = rightTemp;                      }                      else                      {                          if (leftTemp != null)                          {                              TypeOfBinaryExpression = TypesOfBinaryExpression.RightComplex;                              _Left = leftTemp;                          }                          else if (rightTemp != null)                          {                              TypeOfBinaryExpression = TypesOfBinaryExpression.LeftComplex;                              _Right = rightTemp;                          }                      }                        #endregion                        break;              }
