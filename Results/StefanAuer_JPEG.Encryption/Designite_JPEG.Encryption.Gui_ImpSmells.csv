Implementation smell,Namespace,Class,File,Method,Description
Long Method,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The method has 103 lines of code.
Complex Method,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,buttonEncrypt_Click,Cyclomatic complexity of the method is 23
Complex Method,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DetectFacesOnPreview,Cyclomatic complexity of the method is 8
Complex Method,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,Cyclomatic complexity of the method is 16
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,treeViewImages_AfterSelect,The length of the parameter selectedTreeNodeEncryptedImage is 30.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,textBoxPassword_TextChanged,The length of the parameter selectedTreeNodeEncryptedImage is 30.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The length of the parameter correctedPictureBoxPreviewWidth is 31.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The length of the parameter correctedPictureBoxPreviewHeight is 32.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The length of the parameter imageHeightToPictureBoxHeightRatio is 34.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The length of the parameter imageWidthToPictureBoxWidthRatio is 32.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The length of the parameter correctedPictureBoxPreviewWidth is 31.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The length of the parameter correctedPictureBoxPreviewHeight is 32.
Long Identifier,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The length of the parameter imageHeightToScreenHeightRatio is 30.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,buttonEncrypt_Click,The length of the statement  "				Image encryptedImage = Bridge.EncryptJPG (treeNodeImage.Image' treeNodeImage.RoIs' treeNodeImage.Password' new CryptoFlags ()' out errorCode); " is 142.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,buttonEncrypt_Click,The length of the statement  "					MessageBox.Show ("An internal error occurred while encoding!\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 130.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,buttonEncrypt_Click,The length of the statement  "					MessageBox.Show ("This JPEG format is not supported\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 121.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The length of the statement  "			Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode); " is 125.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The length of the statement  "					EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text); " is 129.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The length of the statement  "						Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode); " is 120.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The length of the statement  "						Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode); " is 126.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,ShowAdvancedSettingsOnline,The length of the statement  "	if (this.formFaceDetectionSettingsOnline.ShowAsDialog (this.faceDetectionSettings) == System.Windows.Forms.DialogResult.OK) " is 123.
Long Statement,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,ShowAdvancedSettingsOffline,The length of the statement  "	if (this.formFaceDetectionSettingsOffline.ShowAsDialog (this.faceDetectionSettings) == System.Windows.Forms.DialogResult.OK) " is 124.
Complex Conditional,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,buttonLoadJpg_Click,The conditional expression  "fileName != "" && // file name is not empty   File.Exists (fileName) && // file exists  (Path.GetExtension (fileName).ToLower () == ".jpg" || // .jpg  Path.GetExtension (fileName).ToLower () == ".jpeg")"  is complex.
Complex Conditional,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseDown,The conditional expression  "e.Button == MouseButtons.Left && // left mouse button  pictureBoxPreview.Image != null && // image in picture box is not null  treeViewImages.SelectedNode is TreeNodeImage && // drawing is only allowed on an unencrypted/decrypted image  radioButtonGetRoIFromMouse.Checked == true"  is complex.
Complex Conditional,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseMove,The conditional expression  "e.Button == MouseButtons.Left && // left mouse button  pictureBoxPreview.Image != null && // image in picture box is not null  treeViewImages.SelectedNode is TreeNodeImage && // drawing is only allowed on an unencrypted/decrypted image  radioButtonGetRoIFromMouse.Checked == true"  is complex.
Complex Conditional,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The conditional expression  "e.Button == MouseButtons.Left && // left mouse button  pictureBoxPreview.Image != null && // image in picture box is not null  treeViewImages.SelectedNode is TreeNodeImage && // drawing is only allowed on an unencrypted/decrypted image  radioButtonGetRoIFromMouse.Checked == true"  is complex.
Magic Number,JPEG.Encryption.Gui,FormFaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormFaceDetectionSettings.cs,buttonSettingsOK_Click,The following statement contains a magic number: if (this.faceDetectionSettings.ImageScale <= 1)  	this.faceDetectionSettings.ImageScale = 1.1;  
Magic Number,JPEG.Encryption.Gui,FormFaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormFaceDetectionSettings.cs,buttonSettingsOK_Click,The following statement contains a magic number: this.faceDetectionSettings.ImageScale = 1.1;  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,FormMain,The following statement contains a magic number: if (IP != "" && IP.Split ('.').Count () == 4) {  	string[] splitArray = IP.Split ('.');  	maskedTextBoxIP1.Text = splitArray [0];  	maskedTextBoxIP2.Text = splitArray [1];  	maskedTextBoxIP3.Text = splitArray [2];  	maskedTextBoxIP4.Text = splitArray [3];  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,FormMain,The following statement contains a magic number: if (IP != "" && IP.Split ('.').Count () == 4) {  	string[] splitArray = IP.Split ('.');  	maskedTextBoxIP1.Text = splitArray [0];  	maskedTextBoxIP2.Text = splitArray [1];  	maskedTextBoxIP3.Text = splitArray [2];  	maskedTextBoxIP4.Text = splitArray [3];  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,FormMain,The following statement contains a magic number: if (IP != "" && IP.Split ('.').Count () == 4) {  	string[] splitArray = IP.Split ('.');  	maskedTextBoxIP1.Text = splitArray [0];  	maskedTextBoxIP2.Text = splitArray [1];  	maskedTextBoxIP3.Text = splitArray [2];  	maskedTextBoxIP4.Text = splitArray [3];  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,FormMain,The following statement contains a magic number: maskedTextBoxIP3.Text = splitArray [2];  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,FormMain,The following statement contains a magic number: maskedTextBoxIP4.Text = splitArray [3];  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The following statement contains a magic number: if (e.Button == MouseButtons.Left && // left mouse button  pictureBoxPreview.Image != null && // image in picture box is not null  treeViewImages.SelectedNode is TreeNodeImage && // drawing is only allowed on an unencrypted/decrypted image  radioButtonGetRoIFromMouse.Checked == true)// checkbox indicates user wants to draw a RoI   {  	// the image in the picture box has not the originial size  	// so we have to calculate the correct values  	int imageScreenHeight = 0;  	int imageScreenWidth = 0;  	double widthCorrection = 0;  	double heightCorrection = 0;  	int correctedPictureBoxPreviewWidth = pictureBoxPreview.Width - 4;  	// -4 because the picture is a litte bit smaller than the picturebox   	int correctedPictureBoxPreviewHeight = pictureBoxPreview.Height - 4;  	// -4 because the picture is a litte bit smaller than the picturebox   	double imageHeightToPictureBoxHeightRatio = (double)pictureBoxPreview.Image.Height / correctedPictureBoxPreviewHeight;  	double imageWidthToPictureBoxWidthRatio = (double)pictureBoxPreview.Image.Width / correctedPictureBoxPreviewWidth;  	double pictureRatio = ((double)pictureBoxPreview.Image.Width) / (pictureBoxPreview.Image.Height);  	// portrait image  	if (pictureBoxPreview.Image.Height > pictureBoxPreview.Image.Width) {  		// calculate the size of the image on the screen  		imageScreenHeight = correctedPictureBoxPreviewHeight;  		//imageScreenWidth = (int)((double)pictureBoxPreview.Width * pictureRatio);  		imageScreenWidth = (int)(imageScreenHeight * pictureRatio);  		// because the image is centered in the pictureBox  		widthCorrection = (correctedPictureBoxPreviewWidth - imageScreenWidth) / 2f;  	}  	// landscape image  	else {  		// calculate the size of the image on the screen  		imageScreenWidth = correctedPictureBoxPreviewWidth;  		imageScreenHeight = (int)(imageScreenWidth / pictureRatio);  		// because the image is centered in the pictureBox  		heightCorrection = (correctedPictureBoxPreviewHeight - imageScreenHeight) / 2f;  	}  	// get mouse values   	int mouseX = Math.Min (e.X' mouseDownPoint.X);  	int mouseY = Math.Min (e.Y' mouseDownPoint.Y);  	int mouseWidth = Math.Abs (e.X - mouseDownPoint.X);  	int mouseHeight = Math.Abs (e.Y - mouseDownPoint.Y);  	// calculate RoI values (for the original image!)  	int x = (int)(((double)(mouseX - widthCorrection) / imageScreenWidth) * pictureBoxPreview.Image.Width);  	int y = (int)(((double)(mouseY - heightCorrection) / imageScreenHeight) * pictureBoxPreview.Image.Height);  	int width = (int)(((double)mouseWidth / imageScreenWidth) * pictureBoxPreview.Image.Width);  	int height = (int)(((double)mouseHeight / imageScreenHeight) * pictureBoxPreview.Image.Height);  	roi.X = x;  	roi.Y = y;  	roi.Width = width;  	roi.Height = height;  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,pictureBoxPreview_MouseUp,The following statement contains a magic number: if (e.Button == MouseButtons.Left && // left mouse button  pictureBoxPreview.Image != null && // image in picture box is not null  treeViewImages.SelectedNode is TreeNodeImage && // drawing is only allowed on an unencrypted/decrypted image  radioButtonGetRoIFromMouse.Checked == true)// checkbox indicates user wants to draw a RoI   {  	// the image in the picture box has not the originial size  	// so we have to calculate the correct values  	int imageScreenHeight = 0;  	int imageScreenWidth = 0;  	double widthCorrection = 0;  	double heightCorrection = 0;  	int correctedPictureBoxPreviewWidth = pictureBoxPreview.Width - 4;  	// -4 because the picture is a litte bit smaller than the picturebox   	int correctedPictureBoxPreviewHeight = pictureBoxPreview.Height - 4;  	// -4 because the picture is a litte bit smaller than the picturebox   	double imageHeightToPictureBoxHeightRatio = (double)pictureBoxPreview.Image.Height / correctedPictureBoxPreviewHeight;  	double imageWidthToPictureBoxWidthRatio = (double)pictureBoxPreview.Image.Width / correctedPictureBoxPreviewWidth;  	double pictureRatio = ((double)pictureBoxPreview.Image.Width) / (pictureBoxPreview.Image.Height);  	// portrait image  	if (pictureBoxPreview.Image.Height > pictureBoxPreview.Image.Width) {  		// calculate the size of the image on the screen  		imageScreenHeight = correctedPictureBoxPreviewHeight;  		//imageScreenWidth = (int)((double)pictureBoxPreview.Width * pictureRatio);  		imageScreenWidth = (int)(imageScreenHeight * pictureRatio);  		// because the image is centered in the pictureBox  		widthCorrection = (correctedPictureBoxPreviewWidth - imageScreenWidth) / 2f;  	}  	// landscape image  	else {  		// calculate the size of the image on the screen  		imageScreenWidth = correctedPictureBoxPreviewWidth;  		imageScreenHeight = (int)(imageScreenWidth / pictureRatio);  		// because the image is centered in the pictureBox  		heightCorrection = (correctedPictureBoxPreviewHeight - imageScreenHeight) / 2f;  	}  	// get mouse values   	int mouseX = Math.Min (e.X' mouseDownPoint.X);  	int mouseY = Math.Min (e.Y' mouseDownPoint.Y);  	int mouseWidth = Math.Abs (e.X - mouseDownPoint.X);  	int mouseHeight = Math.Abs (e.Y - mouseDownPoint.Y);  	// calculate RoI values (for the original image!)  	int x = (int)(((double)(mouseX - widthCorrection) / imageScreenWidth) * pictureBoxPreview.Image.Width);  	int y = (int)(((double)(mouseY - heightCorrection) / imageScreenHeight) * pictureBoxPreview.Image.Height);  	int width = (int)(((double)mouseWidth / imageScreenWidth) * pictureBoxPreview.Image.Width);  	int height = (int)(((double)mouseHeight / imageScreenHeight) * pictureBoxPreview.Image.Height);  	roi.X = x;  	roi.Y = y;  	roi.Width = width;  	roi.Height = height;  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The following statement contains a magic number: if (InvokeRequired)  	this.Invoke (new Action (DrawRoIs));  else {  	// refresh image (without RoIs)  	if (treeViewImages.SelectedNode is TreeNodeImage)  		pictureBoxPreview.Image = ((TreeNodeImage)treeViewImages.SelectedNode).Image;  	else if (treeViewImages.SelectedNode is TreeNodeEncryptedImage)  		pictureBoxPreview.Image = ((TreeNodeEncryptedImage)treeViewImages.SelectedNode).Image;  	pictureBoxPreview.Refresh ();  	// get graphics  	Graphics graphics = pictureBoxPreview.CreateGraphics ();  	IList<RoI> roiList = new List<RoI> ();  	// get currently selected treeNode  	TreeNode treeNode = treeViewImages.SelectedNode;  	TreeNodeImage treeNodeImage = treeNode as TreeNodeImage;  	TreeNodeEncryptedImage treeNodeEncryptedImage = treeNode as TreeNodeEncryptedImage;  	if (treeNodeImage != null || treeNodeEncryptedImage != null) {  		roiList = treeNodeImage != null ? treeNodeImage.RoIs : treeNodeEncryptedImage.RoIs;  	}  	foreach (var singleRoI in roiList) {  		int imageScreenHeight = 0;  		int imageScreenWidth = 0;  		int correctedPictureBoxPreviewWidth = pictureBoxPreview.Width - 2;  		// -4 because the picture is a litte bit smaller than the picturebox   		int correctedPictureBoxPreviewHeight = pictureBoxPreview.Height - 2;  		// -4 because the picture is a litte bit smaller than the picturebox   		double widthCorrection = 0;  		double heightCorrection = 0;  		double imageHeightToScreenHeightRatio = (double)pictureBoxPreview.Image.Height / correctedPictureBoxPreviewHeight;  		double imageWidthToScreenWidthRatio = (double)pictureBoxPreview.Image.Width / correctedPictureBoxPreviewWidth;  		double screenRatio = 0;  		double pictureRatio = (double)pictureBoxPreview.Image.Width / pictureBoxPreview.Image.Height;  		if (pictureBoxPreview.Image.Height > pictureBoxPreview.Image.Width) {  			// set screen ratio  			screenRatio = imageHeightToScreenHeightRatio;  			// calculate the size of the image on the screen  			imageScreenHeight = correctedPictureBoxPreviewHeight;  			//imageScreenWidth = (int)((double)pictureBoxPreview.Width * pictureRatio);  			imageScreenWidth = (int)(imageScreenHeight * pictureRatio);  			// because the image is centered in the pictureBox  			widthCorrection = (correctedPictureBoxPreviewWidth - imageScreenWidth) / 2f;  		}  		else {  			// set screen ratio  			screenRatio = imageWidthToScreenWidthRatio;  			// calculate the size of the image on the screen  			imageScreenWidth = correctedPictureBoxPreviewWidth;  			imageScreenHeight = (int)(imageScreenWidth / pictureRatio);  			// because the image is centered in the pictureBox  			heightCorrection = (correctedPictureBoxPreviewHeight - imageScreenHeight) / 2f;  		}  		int x = (int)(((singleRoI.X) / screenRatio) + (widthCorrection));  		int y = (int)(((singleRoI.Y) / screenRatio) + (heightCorrection));  		int width = (int)(singleRoI.Width / screenRatio);  		int height = (int)(singleRoI.Height / screenRatio);  		graphics.DrawRectangle (Pens.Yellow' x' y' width' height);  	}  	graphics.Dispose ();  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The following statement contains a magic number: if (InvokeRequired)  	this.Invoke (new Action (DrawRoIs));  else {  	// refresh image (without RoIs)  	if (treeViewImages.SelectedNode is TreeNodeImage)  		pictureBoxPreview.Image = ((TreeNodeImage)treeViewImages.SelectedNode).Image;  	else if (treeViewImages.SelectedNode is TreeNodeEncryptedImage)  		pictureBoxPreview.Image = ((TreeNodeEncryptedImage)treeViewImages.SelectedNode).Image;  	pictureBoxPreview.Refresh ();  	// get graphics  	Graphics graphics = pictureBoxPreview.CreateGraphics ();  	IList<RoI> roiList = new List<RoI> ();  	// get currently selected treeNode  	TreeNode treeNode = treeViewImages.SelectedNode;  	TreeNodeImage treeNodeImage = treeNode as TreeNodeImage;  	TreeNodeEncryptedImage treeNodeEncryptedImage = treeNode as TreeNodeEncryptedImage;  	if (treeNodeImage != null || treeNodeEncryptedImage != null) {  		roiList = treeNodeImage != null ? treeNodeImage.RoIs : treeNodeEncryptedImage.RoIs;  	}  	foreach (var singleRoI in roiList) {  		int imageScreenHeight = 0;  		int imageScreenWidth = 0;  		int correctedPictureBoxPreviewWidth = pictureBoxPreview.Width - 2;  		// -4 because the picture is a litte bit smaller than the picturebox   		int correctedPictureBoxPreviewHeight = pictureBoxPreview.Height - 2;  		// -4 because the picture is a litte bit smaller than the picturebox   		double widthCorrection = 0;  		double heightCorrection = 0;  		double imageHeightToScreenHeightRatio = (double)pictureBoxPreview.Image.Height / correctedPictureBoxPreviewHeight;  		double imageWidthToScreenWidthRatio = (double)pictureBoxPreview.Image.Width / correctedPictureBoxPreviewWidth;  		double screenRatio = 0;  		double pictureRatio = (double)pictureBoxPreview.Image.Width / pictureBoxPreview.Image.Height;  		if (pictureBoxPreview.Image.Height > pictureBoxPreview.Image.Width) {  			// set screen ratio  			screenRatio = imageHeightToScreenHeightRatio;  			// calculate the size of the image on the screen  			imageScreenHeight = correctedPictureBoxPreviewHeight;  			//imageScreenWidth = (int)((double)pictureBoxPreview.Width * pictureRatio);  			imageScreenWidth = (int)(imageScreenHeight * pictureRatio);  			// because the image is centered in the pictureBox  			widthCorrection = (correctedPictureBoxPreviewWidth - imageScreenWidth) / 2f;  		}  		else {  			// set screen ratio  			screenRatio = imageWidthToScreenWidthRatio;  			// calculate the size of the image on the screen  			imageScreenWidth = correctedPictureBoxPreviewWidth;  			imageScreenHeight = (int)(imageScreenWidth / pictureRatio);  			// because the image is centered in the pictureBox  			heightCorrection = (correctedPictureBoxPreviewHeight - imageScreenHeight) / 2f;  		}  		int x = (int)(((singleRoI.X) / screenRatio) + (widthCorrection));  		int y = (int)(((singleRoI.Y) / screenRatio) + (heightCorrection));  		int width = (int)(singleRoI.Width / screenRatio);  		int height = (int)(singleRoI.Height / screenRatio);  		graphics.DrawRectangle (Pens.Yellow' x' y' width' height);  	}  	graphics.Dispose ();  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The following statement contains a magic number: foreach (var singleRoI in roiList) {  	int imageScreenHeight = 0;  	int imageScreenWidth = 0;  	int correctedPictureBoxPreviewWidth = pictureBoxPreview.Width - 2;  	// -4 because the picture is a litte bit smaller than the picturebox   	int correctedPictureBoxPreviewHeight = pictureBoxPreview.Height - 2;  	// -4 because the picture is a litte bit smaller than the picturebox   	double widthCorrection = 0;  	double heightCorrection = 0;  	double imageHeightToScreenHeightRatio = (double)pictureBoxPreview.Image.Height / correctedPictureBoxPreviewHeight;  	double imageWidthToScreenWidthRatio = (double)pictureBoxPreview.Image.Width / correctedPictureBoxPreviewWidth;  	double screenRatio = 0;  	double pictureRatio = (double)pictureBoxPreview.Image.Width / pictureBoxPreview.Image.Height;  	if (pictureBoxPreview.Image.Height > pictureBoxPreview.Image.Width) {  		// set screen ratio  		screenRatio = imageHeightToScreenHeightRatio;  		// calculate the size of the image on the screen  		imageScreenHeight = correctedPictureBoxPreviewHeight;  		//imageScreenWidth = (int)((double)pictureBoxPreview.Width * pictureRatio);  		imageScreenWidth = (int)(imageScreenHeight * pictureRatio);  		// because the image is centered in the pictureBox  		widthCorrection = (correctedPictureBoxPreviewWidth - imageScreenWidth) / 2f;  	}  	else {  		// set screen ratio  		screenRatio = imageWidthToScreenWidthRatio;  		// calculate the size of the image on the screen  		imageScreenWidth = correctedPictureBoxPreviewWidth;  		imageScreenHeight = (int)(imageScreenWidth / pictureRatio);  		// because the image is centered in the pictureBox  		heightCorrection = (correctedPictureBoxPreviewHeight - imageScreenHeight) / 2f;  	}  	int x = (int)(((singleRoI.X) / screenRatio) + (widthCorrection));  	int y = (int)(((singleRoI.Y) / screenRatio) + (heightCorrection));  	int width = (int)(singleRoI.Width / screenRatio);  	int height = (int)(singleRoI.Height / screenRatio);  	graphics.DrawRectangle (Pens.Yellow' x' y' width' height);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoIs,The following statement contains a magic number: foreach (var singleRoI in roiList) {  	int imageScreenHeight = 0;  	int imageScreenWidth = 0;  	int correctedPictureBoxPreviewWidth = pictureBoxPreview.Width - 2;  	// -4 because the picture is a litte bit smaller than the picturebox   	int correctedPictureBoxPreviewHeight = pictureBoxPreview.Height - 2;  	// -4 because the picture is a litte bit smaller than the picturebox   	double widthCorrection = 0;  	double heightCorrection = 0;  	double imageHeightToScreenHeightRatio = (double)pictureBoxPreview.Image.Height / correctedPictureBoxPreviewHeight;  	double imageWidthToScreenWidthRatio = (double)pictureBoxPreview.Image.Width / correctedPictureBoxPreviewWidth;  	double screenRatio = 0;  	double pictureRatio = (double)pictureBoxPreview.Image.Width / pictureBoxPreview.Image.Height;  	if (pictureBoxPreview.Image.Height > pictureBoxPreview.Image.Width) {  		// set screen ratio  		screenRatio = imageHeightToScreenHeightRatio;  		// calculate the size of the image on the screen  		imageScreenHeight = correctedPictureBoxPreviewHeight;  		//imageScreenWidth = (int)((double)pictureBoxPreview.Width * pictureRatio);  		imageScreenWidth = (int)(imageScreenHeight * pictureRatio);  		// because the image is centered in the pictureBox  		widthCorrection = (correctedPictureBoxPreviewWidth - imageScreenWidth) / 2f;  	}  	else {  		// set screen ratio  		screenRatio = imageWidthToScreenWidthRatio;  		// calculate the size of the image on the screen  		imageScreenWidth = correctedPictureBoxPreviewWidth;  		imageScreenHeight = (int)(imageScreenWidth / pictureRatio);  		// because the image is centered in the pictureBox  		heightCorrection = (correctedPictureBoxPreviewHeight - imageScreenHeight) / 2f;  	}  	int x = (int)(((singleRoI.X) / screenRatio) + (widthCorrection));  	int y = (int)(((singleRoI.Y) / screenRatio) + (heightCorrection));  	int width = (int)(singleRoI.Width / screenRatio);  	int height = (int)(singleRoI.Height / screenRatio);  	graphics.DrawRectangle (Pens.Yellow' x' y' width' height);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoiOnImage,The following statement contains a magic number: foreach (RoI roi in rois) {  	//draw a rectangle around the detected face  	Graphics graphics = Graphics.FromImage (image);  	graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,DrawRoiOnImage,The following statement contains a magic number: graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (curFrame != null) {  	Image curFrameClone = (Image)curFrame.Clone ();  	// the image where the rectangles will be drawn   	var width = cameraBL.FrameWidth;  	// frame width  	var height = cameraBL.FrameHeight;  	// frame height  	EnumErrorCode errorCode;  	// error code if something goes wrong  	CryptoFlags cryptoFlags = GetCryptoFlags ();  	// the different levels of encryption put into an object  	IList<RoI> rois = new List<RoI> ();  	// list of "Region of Interests"  	// get current frame rate  	int currentFrameRate = GetCurrentFrameRate ();  	labelCameraFrameRate.Text = "Current frame rate: " + currentFrameRate + "fps";  	// get camera resolution  	labelCameraResolution.Text = "Camera resolution: " + (int)width + "x" + (int)height;  	labelScreenResution.Text = "Screen resolution: " + pictureBoxVideo.Width + "x" + pictureBoxVideo.Height;  	// [none] selected  	if (comboBoxFaceDetectionAlgorithm.SelectedIndex == 0 && radioButtonShowEncryptedFrame.Checked == true) {  		Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  		pictureBoxVideo.Image = encryptedImage;  	}  	// the face detection DLL must only be used once at the same time.   	// Maybe there is currently a face detection running at the "JPEG Browser"  	else if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  		// check if a camera is available  		if (cameraBL.IsCameraAvailable == true) {  			try {  				// determine detection type  				EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  				// a detection algorithm was selected  				if (detectionType != EnumDetectionType.NONE) {  					// get settings according user requirements  					double scale = this.faceDetectionSettings.ImageScale;  					int minNeighbors = this.faceDetectionSettings.MinNeighbors;  					Size minSize = this.faceDetectionSettings.MinSize;  					// get region of interests  					rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  					// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  					if (rois.Count == 0)  						rois = new List<RoI> () {  							new RoI () {  								X = 1000'  								Y = 1000'  								Height = 0'  								Width = 0  							}  						};  				}  				// user wants to encrypt the image  				if (radioButtonShowEncryptedFrame.Checked == true) {  					// encrpyt  					Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  					//Action for each element detected  					if (checkBoxShowRoI.Checked == true) {  						foreach (RoI roi in rois) {  							//draw a rectangle around the detected face  							Graphics graphics = Graphics.FromImage (encryptedImage);  							graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  						}  					}  					pictureBoxVideo.Image = encryptedImage;  				}  				// user wants to see the decrypted image  				else if (radioButtonShowDecryptedFrame.Checked == true) {  					// encrypt and decrypt an image  					Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  					Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  					// draw RoIs on image  					if (checkBoxShowRoI.Checked == true)  						DrawRoiOnImage (rois' decryptedImage);  					// assign image to picture box  					pictureBoxVideo.Image = decryptedImage;  				}  				// user wants to see the original frame  				else if (radioButtonShowOriginalFrame.Checked == true) {  					// draw RoIs on image  					if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  						DrawRoiOnImage (rois' curFrameClone);  					// assign image to picture box  					pictureBoxVideo.Image = curFrameClone;  				}  				pictureBoxVideo.Invalidate ();  			}  			catch (FaceDetectionException faceDetectionException) {  				Console.WriteLine (faceDetectionException.Text);  			}  			catch (CameraException cameraCaptureException) {  				Console.WriteLine (cameraCaptureException.Text);  			}  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (curFrame != null) {  	Image curFrameClone = (Image)curFrame.Clone ();  	// the image where the rectangles will be drawn   	var width = cameraBL.FrameWidth;  	// frame width  	var height = cameraBL.FrameHeight;  	// frame height  	EnumErrorCode errorCode;  	// error code if something goes wrong  	CryptoFlags cryptoFlags = GetCryptoFlags ();  	// the different levels of encryption put into an object  	IList<RoI> rois = new List<RoI> ();  	// list of "Region of Interests"  	// get current frame rate  	int currentFrameRate = GetCurrentFrameRate ();  	labelCameraFrameRate.Text = "Current frame rate: " + currentFrameRate + "fps";  	// get camera resolution  	labelCameraResolution.Text = "Camera resolution: " + (int)width + "x" + (int)height;  	labelScreenResution.Text = "Screen resolution: " + pictureBoxVideo.Width + "x" + pictureBoxVideo.Height;  	// [none] selected  	if (comboBoxFaceDetectionAlgorithm.SelectedIndex == 0 && radioButtonShowEncryptedFrame.Checked == true) {  		Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  		pictureBoxVideo.Image = encryptedImage;  	}  	// the face detection DLL must only be used once at the same time.   	// Maybe there is currently a face detection running at the "JPEG Browser"  	else if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  		// check if a camera is available  		if (cameraBL.IsCameraAvailable == true) {  			try {  				// determine detection type  				EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  				// a detection algorithm was selected  				if (detectionType != EnumDetectionType.NONE) {  					// get settings according user requirements  					double scale = this.faceDetectionSettings.ImageScale;  					int minNeighbors = this.faceDetectionSettings.MinNeighbors;  					Size minSize = this.faceDetectionSettings.MinSize;  					// get region of interests  					rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  					// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  					if (rois.Count == 0)  						rois = new List<RoI> () {  							new RoI () {  								X = 1000'  								Y = 1000'  								Height = 0'  								Width = 0  							}  						};  				}  				// user wants to encrypt the image  				if (radioButtonShowEncryptedFrame.Checked == true) {  					// encrpyt  					Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  					//Action for each element detected  					if (checkBoxShowRoI.Checked == true) {  						foreach (RoI roi in rois) {  							//draw a rectangle around the detected face  							Graphics graphics = Graphics.FromImage (encryptedImage);  							graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  						}  					}  					pictureBoxVideo.Image = encryptedImage;  				}  				// user wants to see the decrypted image  				else if (radioButtonShowDecryptedFrame.Checked == true) {  					// encrypt and decrypt an image  					Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  					Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  					// draw RoIs on image  					if (checkBoxShowRoI.Checked == true)  						DrawRoiOnImage (rois' decryptedImage);  					// assign image to picture box  					pictureBoxVideo.Image = decryptedImage;  				}  				// user wants to see the original frame  				else if (radioButtonShowOriginalFrame.Checked == true) {  					// draw RoIs on image  					if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  						DrawRoiOnImage (rois' curFrameClone);  					// assign image to picture box  					pictureBoxVideo.Image = curFrameClone;  				}  				pictureBoxVideo.Invalidate ();  			}  			catch (FaceDetectionException faceDetectionException) {  				Console.WriteLine (faceDetectionException.Text);  			}  			catch (CameraException cameraCaptureException) {  				Console.WriteLine (cameraCaptureException.Text);  			}  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (curFrame != null) {  	Image curFrameClone = (Image)curFrame.Clone ();  	// the image where the rectangles will be drawn   	var width = cameraBL.FrameWidth;  	// frame width  	var height = cameraBL.FrameHeight;  	// frame height  	EnumErrorCode errorCode;  	// error code if something goes wrong  	CryptoFlags cryptoFlags = GetCryptoFlags ();  	// the different levels of encryption put into an object  	IList<RoI> rois = new List<RoI> ();  	// list of "Region of Interests"  	// get current frame rate  	int currentFrameRate = GetCurrentFrameRate ();  	labelCameraFrameRate.Text = "Current frame rate: " + currentFrameRate + "fps";  	// get camera resolution  	labelCameraResolution.Text = "Camera resolution: " + (int)width + "x" + (int)height;  	labelScreenResution.Text = "Screen resolution: " + pictureBoxVideo.Width + "x" + pictureBoxVideo.Height;  	// [none] selected  	if (comboBoxFaceDetectionAlgorithm.SelectedIndex == 0 && radioButtonShowEncryptedFrame.Checked == true) {  		Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  		pictureBoxVideo.Image = encryptedImage;  	}  	// the face detection DLL must only be used once at the same time.   	// Maybe there is currently a face detection running at the "JPEG Browser"  	else if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  		// check if a camera is available  		if (cameraBL.IsCameraAvailable == true) {  			try {  				// determine detection type  				EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  				// a detection algorithm was selected  				if (detectionType != EnumDetectionType.NONE) {  					// get settings according user requirements  					double scale = this.faceDetectionSettings.ImageScale;  					int minNeighbors = this.faceDetectionSettings.MinNeighbors;  					Size minSize = this.faceDetectionSettings.MinSize;  					// get region of interests  					rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  					// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  					if (rois.Count == 0)  						rois = new List<RoI> () {  							new RoI () {  								X = 1000'  								Y = 1000'  								Height = 0'  								Width = 0  							}  						};  				}  				// user wants to encrypt the image  				if (radioButtonShowEncryptedFrame.Checked == true) {  					// encrpyt  					Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  					//Action for each element detected  					if (checkBoxShowRoI.Checked == true) {  						foreach (RoI roi in rois) {  							//draw a rectangle around the detected face  							Graphics graphics = Graphics.FromImage (encryptedImage);  							graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  						}  					}  					pictureBoxVideo.Image = encryptedImage;  				}  				// user wants to see the decrypted image  				else if (radioButtonShowDecryptedFrame.Checked == true) {  					// encrypt and decrypt an image  					Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  					Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  					// draw RoIs on image  					if (checkBoxShowRoI.Checked == true)  						DrawRoiOnImage (rois' decryptedImage);  					// assign image to picture box  					pictureBoxVideo.Image = decryptedImage;  				}  				// user wants to see the original frame  				else if (radioButtonShowOriginalFrame.Checked == true) {  					// draw RoIs on image  					if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  						DrawRoiOnImage (rois' curFrameClone);  					// assign image to picture box  					pictureBoxVideo.Image = curFrameClone;  				}  				pictureBoxVideo.Invalidate ();  			}  			catch (FaceDetectionException faceDetectionException) {  				Console.WriteLine (faceDetectionException.Text);  			}  			catch (CameraException cameraCaptureException) {  				Console.WriteLine (cameraCaptureException.Text);  			}  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (comboBoxFaceDetectionAlgorithm.SelectedIndex == 0 && radioButtonShowEncryptedFrame.Checked == true) {  	Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  	pictureBoxVideo.Image = encryptedImage;  }  // the face detection DLL must only be used once at the same time.   // Maybe there is currently a face detection running at the "JPEG Browser"  else if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  	// check if a camera is available  	if (cameraBL.IsCameraAvailable == true) {  		try {  			// determine detection type  			EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  			// a detection algorithm was selected  			if (detectionType != EnumDetectionType.NONE) {  				// get settings according user requirements  				double scale = this.faceDetectionSettings.ImageScale;  				int minNeighbors = this.faceDetectionSettings.MinNeighbors;  				Size minSize = this.faceDetectionSettings.MinSize;  				// get region of interests  				rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  				// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  				if (rois.Count == 0)  					rois = new List<RoI> () {  						new RoI () {  							X = 1000'  							Y = 1000'  							Height = 0'  							Width = 0  						}  					};  			}  			// user wants to encrypt the image  			if (radioButtonShowEncryptedFrame.Checked == true) {  				// encrpyt  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  				//Action for each element detected  				if (checkBoxShowRoI.Checked == true) {  					foreach (RoI roi in rois) {  						//draw a rectangle around the detected face  						Graphics graphics = Graphics.FromImage (encryptedImage);  						graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  					}  				}  				pictureBoxVideo.Image = encryptedImage;  			}  			// user wants to see the decrypted image  			else if (radioButtonShowDecryptedFrame.Checked == true) {  				// encrypt and decrypt an image  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true)  					DrawRoiOnImage (rois' decryptedImage);  				// assign image to picture box  				pictureBoxVideo.Image = decryptedImage;  			}  			// user wants to see the original frame  			else if (radioButtonShowOriginalFrame.Checked == true) {  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  					DrawRoiOnImage (rois' curFrameClone);  				// assign image to picture box  				pictureBoxVideo.Image = curFrameClone;  			}  			pictureBoxVideo.Invalidate ();  		}  		catch (FaceDetectionException faceDetectionException) {  			Console.WriteLine (faceDetectionException.Text);  		}  		catch (CameraException cameraCaptureException) {  			Console.WriteLine (cameraCaptureException.Text);  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (comboBoxFaceDetectionAlgorithm.SelectedIndex == 0 && radioButtonShowEncryptedFrame.Checked == true) {  	Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  	pictureBoxVideo.Image = encryptedImage;  }  // the face detection DLL must only be used once at the same time.   // Maybe there is currently a face detection running at the "JPEG Browser"  else if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  	// check if a camera is available  	if (cameraBL.IsCameraAvailable == true) {  		try {  			// determine detection type  			EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  			// a detection algorithm was selected  			if (detectionType != EnumDetectionType.NONE) {  				// get settings according user requirements  				double scale = this.faceDetectionSettings.ImageScale;  				int minNeighbors = this.faceDetectionSettings.MinNeighbors;  				Size minSize = this.faceDetectionSettings.MinSize;  				// get region of interests  				rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  				// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  				if (rois.Count == 0)  					rois = new List<RoI> () {  						new RoI () {  							X = 1000'  							Y = 1000'  							Height = 0'  							Width = 0  						}  					};  			}  			// user wants to encrypt the image  			if (radioButtonShowEncryptedFrame.Checked == true) {  				// encrpyt  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  				//Action for each element detected  				if (checkBoxShowRoI.Checked == true) {  					foreach (RoI roi in rois) {  						//draw a rectangle around the detected face  						Graphics graphics = Graphics.FromImage (encryptedImage);  						graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  					}  				}  				pictureBoxVideo.Image = encryptedImage;  			}  			// user wants to see the decrypted image  			else if (radioButtonShowDecryptedFrame.Checked == true) {  				// encrypt and decrypt an image  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true)  					DrawRoiOnImage (rois' decryptedImage);  				// assign image to picture box  				pictureBoxVideo.Image = decryptedImage;  			}  			// user wants to see the original frame  			else if (radioButtonShowOriginalFrame.Checked == true) {  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  					DrawRoiOnImage (rois' curFrameClone);  				// assign image to picture box  				pictureBoxVideo.Image = curFrameClone;  			}  			pictureBoxVideo.Invalidate ();  		}  		catch (FaceDetectionException faceDetectionException) {  			Console.WriteLine (faceDetectionException.Text);  		}  		catch (CameraException cameraCaptureException) {  			Console.WriteLine (cameraCaptureException.Text);  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (comboBoxFaceDetectionAlgorithm.SelectedIndex == 0 && radioButtonShowEncryptedFrame.Checked == true) {  	Image encryptedImage = Bridge.EncryptJPG (curFrame' new List<RoI> ()' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  	pictureBoxVideo.Image = encryptedImage;  }  // the face detection DLL must only be used once at the same time.   // Maybe there is currently a face detection running at the "JPEG Browser"  else if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  	// check if a camera is available  	if (cameraBL.IsCameraAvailable == true) {  		try {  			// determine detection type  			EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  			// a detection algorithm was selected  			if (detectionType != EnumDetectionType.NONE) {  				// get settings according user requirements  				double scale = this.faceDetectionSettings.ImageScale;  				int minNeighbors = this.faceDetectionSettings.MinNeighbors;  				Size minSize = this.faceDetectionSettings.MinSize;  				// get region of interests  				rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  				// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  				if (rois.Count == 0)  					rois = new List<RoI> () {  						new RoI () {  							X = 1000'  							Y = 1000'  							Height = 0'  							Width = 0  						}  					};  			}  			// user wants to encrypt the image  			if (radioButtonShowEncryptedFrame.Checked == true) {  				// encrpyt  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  				//Action for each element detected  				if (checkBoxShowRoI.Checked == true) {  					foreach (RoI roi in rois) {  						//draw a rectangle around the detected face  						Graphics graphics = Graphics.FromImage (encryptedImage);  						graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  					}  				}  				pictureBoxVideo.Image = encryptedImage;  			}  			// user wants to see the decrypted image  			else if (radioButtonShowDecryptedFrame.Checked == true) {  				// encrypt and decrypt an image  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true)  					DrawRoiOnImage (rois' decryptedImage);  				// assign image to picture box  				pictureBoxVideo.Image = decryptedImage;  			}  			// user wants to see the original frame  			else if (radioButtonShowOriginalFrame.Checked == true) {  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  					DrawRoiOnImage (rois' curFrameClone);  				// assign image to picture box  				pictureBoxVideo.Image = curFrameClone;  			}  			pictureBoxVideo.Invalidate ();  		}  		catch (FaceDetectionException faceDetectionException) {  			Console.WriteLine (faceDetectionException.Text);  		}  		catch (CameraException cameraCaptureException) {  			Console.WriteLine (cameraCaptureException.Text);  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  	// check if a camera is available  	if (cameraBL.IsCameraAvailable == true) {  		try {  			// determine detection type  			EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  			// a detection algorithm was selected  			if (detectionType != EnumDetectionType.NONE) {  				// get settings according user requirements  				double scale = this.faceDetectionSettings.ImageScale;  				int minNeighbors = this.faceDetectionSettings.MinNeighbors;  				Size minSize = this.faceDetectionSettings.MinSize;  				// get region of interests  				rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  				// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  				if (rois.Count == 0)  					rois = new List<RoI> () {  						new RoI () {  							X = 1000'  							Y = 1000'  							Height = 0'  							Width = 0  						}  					};  			}  			// user wants to encrypt the image  			if (radioButtonShowEncryptedFrame.Checked == true) {  				// encrpyt  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  				//Action for each element detected  				if (checkBoxShowRoI.Checked == true) {  					foreach (RoI roi in rois) {  						//draw a rectangle around the detected face  						Graphics graphics = Graphics.FromImage (encryptedImage);  						graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  					}  				}  				pictureBoxVideo.Image = encryptedImage;  			}  			// user wants to see the decrypted image  			else if (radioButtonShowDecryptedFrame.Checked == true) {  				// encrypt and decrypt an image  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true)  					DrawRoiOnImage (rois' decryptedImage);  				// assign image to picture box  				pictureBoxVideo.Image = decryptedImage;  			}  			// user wants to see the original frame  			else if (radioButtonShowOriginalFrame.Checked == true) {  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  					DrawRoiOnImage (rois' curFrameClone);  				// assign image to picture box  				pictureBoxVideo.Image = curFrameClone;  			}  			pictureBoxVideo.Invalidate ();  		}  		catch (FaceDetectionException faceDetectionException) {  			Console.WriteLine (faceDetectionException.Text);  		}  		catch (CameraException cameraCaptureException) {  			Console.WriteLine (cameraCaptureException.Text);  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  	// check if a camera is available  	if (cameraBL.IsCameraAvailable == true) {  		try {  			// determine detection type  			EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  			// a detection algorithm was selected  			if (detectionType != EnumDetectionType.NONE) {  				// get settings according user requirements  				double scale = this.faceDetectionSettings.ImageScale;  				int minNeighbors = this.faceDetectionSettings.MinNeighbors;  				Size minSize = this.faceDetectionSettings.MinSize;  				// get region of interests  				rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  				// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  				if (rois.Count == 0)  					rois = new List<RoI> () {  						new RoI () {  							X = 1000'  							Y = 1000'  							Height = 0'  							Width = 0  						}  					};  			}  			// user wants to encrypt the image  			if (radioButtonShowEncryptedFrame.Checked == true) {  				// encrpyt  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  				//Action for each element detected  				if (checkBoxShowRoI.Checked == true) {  					foreach (RoI roi in rois) {  						//draw a rectangle around the detected face  						Graphics graphics = Graphics.FromImage (encryptedImage);  						graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  					}  				}  				pictureBoxVideo.Image = encryptedImage;  			}  			// user wants to see the decrypted image  			else if (radioButtonShowDecryptedFrame.Checked == true) {  				// encrypt and decrypt an image  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true)  					DrawRoiOnImage (rois' decryptedImage);  				// assign image to picture box  				pictureBoxVideo.Image = decryptedImage;  			}  			// user wants to see the original frame  			else if (radioButtonShowOriginalFrame.Checked == true) {  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  					DrawRoiOnImage (rois' curFrameClone);  				// assign image to picture box  				pictureBoxVideo.Image = curFrameClone;  			}  			pictureBoxVideo.Invalidate ();  		}  		catch (FaceDetectionException faceDetectionException) {  			Console.WriteLine (faceDetectionException.Text);  		}  		catch (CameraException cameraCaptureException) {  			Console.WriteLine (cameraCaptureException.Text);  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (faceDetectionThread == null || faceDetectionThread.IsAlive == false) {  	// check if a camera is available  	if (cameraBL.IsCameraAvailable == true) {  		try {  			// determine detection type  			EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  			// a detection algorithm was selected  			if (detectionType != EnumDetectionType.NONE) {  				// get settings according user requirements  				double scale = this.faceDetectionSettings.ImageScale;  				int minNeighbors = this.faceDetectionSettings.MinNeighbors;  				Size minSize = this.faceDetectionSettings.MinSize;  				// get region of interests  				rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  				// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  				if (rois.Count == 0)  					rois = new List<RoI> () {  						new RoI () {  							X = 1000'  							Y = 1000'  							Height = 0'  							Width = 0  						}  					};  			}  			// user wants to encrypt the image  			if (radioButtonShowEncryptedFrame.Checked == true) {  				// encrpyt  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  				//Action for each element detected  				if (checkBoxShowRoI.Checked == true) {  					foreach (RoI roi in rois) {  						//draw a rectangle around the detected face  						Graphics graphics = Graphics.FromImage (encryptedImage);  						graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  					}  				}  				pictureBoxVideo.Image = encryptedImage;  			}  			// user wants to see the decrypted image  			else if (radioButtonShowDecryptedFrame.Checked == true) {  				// encrypt and decrypt an image  				Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true)  					DrawRoiOnImage (rois' decryptedImage);  				// assign image to picture box  				pictureBoxVideo.Image = decryptedImage;  			}  			// user wants to see the original frame  			else if (radioButtonShowOriginalFrame.Checked == true) {  				// draw RoIs on image  				if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  					DrawRoiOnImage (rois' curFrameClone);  				// assign image to picture box  				pictureBoxVideo.Image = curFrameClone;  			}  			pictureBoxVideo.Invalidate ();  		}  		catch (FaceDetectionException faceDetectionException) {  			Console.WriteLine (faceDetectionException.Text);  		}  		catch (CameraException cameraCaptureException) {  			Console.WriteLine (cameraCaptureException.Text);  		}  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (cameraBL.IsCameraAvailable == true) {  	try {  		// determine detection type  		EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  		// a detection algorithm was selected  		if (detectionType != EnumDetectionType.NONE) {  			// get settings according user requirements  			double scale = this.faceDetectionSettings.ImageScale;  			int minNeighbors = this.faceDetectionSettings.MinNeighbors;  			Size minSize = this.faceDetectionSettings.MinSize;  			// get region of interests  			rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  			// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  			if (rois.Count == 0)  				rois = new List<RoI> () {  					new RoI () {  						X = 1000'  						Y = 1000'  						Height = 0'  						Width = 0  					}  				};  		}  		// user wants to encrypt the image  		if (radioButtonShowEncryptedFrame.Checked == true) {  			// encrpyt  			Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  			//Action for each element detected  			if (checkBoxShowRoI.Checked == true) {  				foreach (RoI roi in rois) {  					//draw a rectangle around the detected face  					Graphics graphics = Graphics.FromImage (encryptedImage);  					graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  				}  			}  			pictureBoxVideo.Image = encryptedImage;  		}  		// user wants to see the decrypted image  		else if (radioButtonShowDecryptedFrame.Checked == true) {  			// encrypt and decrypt an image  			Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  			Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  			// draw RoIs on image  			if (checkBoxShowRoI.Checked == true)  				DrawRoiOnImage (rois' decryptedImage);  			// assign image to picture box  			pictureBoxVideo.Image = decryptedImage;  		}  		// user wants to see the original frame  		else if (radioButtonShowOriginalFrame.Checked == true) {  			// draw RoIs on image  			if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  				DrawRoiOnImage (rois' curFrameClone);  			// assign image to picture box  			pictureBoxVideo.Image = curFrameClone;  		}  		pictureBoxVideo.Invalidate ();  	}  	catch (FaceDetectionException faceDetectionException) {  		Console.WriteLine (faceDetectionException.Text);  	}  	catch (CameraException cameraCaptureException) {  		Console.WriteLine (cameraCaptureException.Text);  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (cameraBL.IsCameraAvailable == true) {  	try {  		// determine detection type  		EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  		// a detection algorithm was selected  		if (detectionType != EnumDetectionType.NONE) {  			// get settings according user requirements  			double scale = this.faceDetectionSettings.ImageScale;  			int minNeighbors = this.faceDetectionSettings.MinNeighbors;  			Size minSize = this.faceDetectionSettings.MinSize;  			// get region of interests  			rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  			// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  			if (rois.Count == 0)  				rois = new List<RoI> () {  					new RoI () {  						X = 1000'  						Y = 1000'  						Height = 0'  						Width = 0  					}  				};  		}  		// user wants to encrypt the image  		if (radioButtonShowEncryptedFrame.Checked == true) {  			// encrpyt  			Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  			//Action for each element detected  			if (checkBoxShowRoI.Checked == true) {  				foreach (RoI roi in rois) {  					//draw a rectangle around the detected face  					Graphics graphics = Graphics.FromImage (encryptedImage);  					graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  				}  			}  			pictureBoxVideo.Image = encryptedImage;  		}  		// user wants to see the decrypted image  		else if (radioButtonShowDecryptedFrame.Checked == true) {  			// encrypt and decrypt an image  			Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  			Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  			// draw RoIs on image  			if (checkBoxShowRoI.Checked == true)  				DrawRoiOnImage (rois' decryptedImage);  			// assign image to picture box  			pictureBoxVideo.Image = decryptedImage;  		}  		// user wants to see the original frame  		else if (radioButtonShowOriginalFrame.Checked == true) {  			// draw RoIs on image  			if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  				DrawRoiOnImage (rois' curFrameClone);  			// assign image to picture box  			pictureBoxVideo.Image = curFrameClone;  		}  		pictureBoxVideo.Invalidate ();  	}  	catch (FaceDetectionException faceDetectionException) {  		Console.WriteLine (faceDetectionException.Text);  	}  	catch (CameraException cameraCaptureException) {  		Console.WriteLine (cameraCaptureException.Text);  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (cameraBL.IsCameraAvailable == true) {  	try {  		// determine detection type  		EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  		// a detection algorithm was selected  		if (detectionType != EnumDetectionType.NONE) {  			// get settings according user requirements  			double scale = this.faceDetectionSettings.ImageScale;  			int minNeighbors = this.faceDetectionSettings.MinNeighbors;  			Size minSize = this.faceDetectionSettings.MinSize;  			// get region of interests  			rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  			// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  			if (rois.Count == 0)  				rois = new List<RoI> () {  					new RoI () {  						X = 1000'  						Y = 1000'  						Height = 0'  						Width = 0  					}  				};  		}  		// user wants to encrypt the image  		if (radioButtonShowEncryptedFrame.Checked == true) {  			// encrpyt  			Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  			//Action for each element detected  			if (checkBoxShowRoI.Checked == true) {  				foreach (RoI roi in rois) {  					//draw a rectangle around the detected face  					Graphics graphics = Graphics.FromImage (encryptedImage);  					graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  				}  			}  			pictureBoxVideo.Image = encryptedImage;  		}  		// user wants to see the decrypted image  		else if (radioButtonShowDecryptedFrame.Checked == true) {  			// encrypt and decrypt an image  			Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  			Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  			// draw RoIs on image  			if (checkBoxShowRoI.Checked == true)  				DrawRoiOnImage (rois' decryptedImage);  			// assign image to picture box  			pictureBoxVideo.Image = decryptedImage;  		}  		// user wants to see the original frame  		else if (radioButtonShowOriginalFrame.Checked == true) {  			// draw RoIs on image  			if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  				DrawRoiOnImage (rois' curFrameClone);  			// assign image to picture box  			pictureBoxVideo.Image = curFrameClone;  		}  		pictureBoxVideo.Invalidate ();  	}  	catch (FaceDetectionException faceDetectionException) {  		Console.WriteLine (faceDetectionException.Text);  	}  	catch (CameraException cameraCaptureException) {  		Console.WriteLine (cameraCaptureException.Text);  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: try {  	// determine detection type  	EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  	// a detection algorithm was selected  	if (detectionType != EnumDetectionType.NONE) {  		// get settings according user requirements  		double scale = this.faceDetectionSettings.ImageScale;  		int minNeighbors = this.faceDetectionSettings.MinNeighbors;  		Size minSize = this.faceDetectionSettings.MinSize;  		// get region of interests  		rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  		// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  		if (rois.Count == 0)  			rois = new List<RoI> () {  				new RoI () {  					X = 1000'  					Y = 1000'  					Height = 0'  					Width = 0  				}  			};  	}  	// user wants to encrypt the image  	if (radioButtonShowEncryptedFrame.Checked == true) {  		// encrpyt  		Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  		//Action for each element detected  		if (checkBoxShowRoI.Checked == true) {  			foreach (RoI roi in rois) {  				//draw a rectangle around the detected face  				Graphics graphics = Graphics.FromImage (encryptedImage);  				graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  			}  		}  		pictureBoxVideo.Image = encryptedImage;  	}  	// user wants to see the decrypted image  	else if (radioButtonShowDecryptedFrame.Checked == true) {  		// encrypt and decrypt an image  		Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  		Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  		// draw RoIs on image  		if (checkBoxShowRoI.Checked == true)  			DrawRoiOnImage (rois' decryptedImage);  		// assign image to picture box  		pictureBoxVideo.Image = decryptedImage;  	}  	// user wants to see the original frame  	else if (radioButtonShowOriginalFrame.Checked == true) {  		// draw RoIs on image  		if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  			DrawRoiOnImage (rois' curFrameClone);  		// assign image to picture box  		pictureBoxVideo.Image = curFrameClone;  	}  	pictureBoxVideo.Invalidate ();  }  catch (FaceDetectionException faceDetectionException) {  	Console.WriteLine (faceDetectionException.Text);  }  catch (CameraException cameraCaptureException) {  	Console.WriteLine (cameraCaptureException.Text);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: try {  	// determine detection type  	EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  	// a detection algorithm was selected  	if (detectionType != EnumDetectionType.NONE) {  		// get settings according user requirements  		double scale = this.faceDetectionSettings.ImageScale;  		int minNeighbors = this.faceDetectionSettings.MinNeighbors;  		Size minSize = this.faceDetectionSettings.MinSize;  		// get region of interests  		rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  		// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  		if (rois.Count == 0)  			rois = new List<RoI> () {  				new RoI () {  					X = 1000'  					Y = 1000'  					Height = 0'  					Width = 0  				}  			};  	}  	// user wants to encrypt the image  	if (radioButtonShowEncryptedFrame.Checked == true) {  		// encrpyt  		Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  		//Action for each element detected  		if (checkBoxShowRoI.Checked == true) {  			foreach (RoI roi in rois) {  				//draw a rectangle around the detected face  				Graphics graphics = Graphics.FromImage (encryptedImage);  				graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  			}  		}  		pictureBoxVideo.Image = encryptedImage;  	}  	// user wants to see the decrypted image  	else if (radioButtonShowDecryptedFrame.Checked == true) {  		// encrypt and decrypt an image  		Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  		Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  		// draw RoIs on image  		if (checkBoxShowRoI.Checked == true)  			DrawRoiOnImage (rois' decryptedImage);  		// assign image to picture box  		pictureBoxVideo.Image = decryptedImage;  	}  	// user wants to see the original frame  	else if (radioButtonShowOriginalFrame.Checked == true) {  		// draw RoIs on image  		if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  			DrawRoiOnImage (rois' curFrameClone);  		// assign image to picture box  		pictureBoxVideo.Image = curFrameClone;  	}  	pictureBoxVideo.Invalidate ();  }  catch (FaceDetectionException faceDetectionException) {  	Console.WriteLine (faceDetectionException.Text);  }  catch (CameraException cameraCaptureException) {  	Console.WriteLine (cameraCaptureException.Text);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: try {  	// determine detection type  	EnumDetectionType detectionType = (EnumDetectionType)Enum.Parse (typeof(EnumDetectionType)' comboBoxFaceDetectionAlgorithm.Text);  	// a detection algorithm was selected  	if (detectionType != EnumDetectionType.NONE) {  		// get settings according user requirements  		double scale = this.faceDetectionSettings.ImageScale;  		int minNeighbors = this.faceDetectionSettings.MinNeighbors;  		Size minSize = this.faceDetectionSettings.MinSize;  		// get region of interests  		rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  		// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  		if (rois.Count == 0)  			rois = new List<RoI> () {  				new RoI () {  					X = 1000'  					Y = 1000'  					Height = 0'  					Width = 0  				}  			};  	}  	// user wants to encrypt the image  	if (radioButtonShowEncryptedFrame.Checked == true) {  		// encrpyt  		Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  		//Action for each element detected  		if (checkBoxShowRoI.Checked == true) {  			foreach (RoI roi in rois) {  				//draw a rectangle around the detected face  				Graphics graphics = Graphics.FromImage (encryptedImage);  				graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  			}  		}  		pictureBoxVideo.Image = encryptedImage;  	}  	// user wants to see the decrypted image  	else if (radioButtonShowDecryptedFrame.Checked == true) {  		// encrypt and decrypt an image  		Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  		Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  		// draw RoIs on image  		if (checkBoxShowRoI.Checked == true)  			DrawRoiOnImage (rois' decryptedImage);  		// assign image to picture box  		pictureBoxVideo.Image = decryptedImage;  	}  	// user wants to see the original frame  	else if (radioButtonShowOriginalFrame.Checked == true) {  		// draw RoIs on image  		if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  			DrawRoiOnImage (rois' curFrameClone);  		// assign image to picture box  		pictureBoxVideo.Image = curFrameClone;  	}  	pictureBoxVideo.Invalidate ();  }  catch (FaceDetectionException faceDetectionException) {  	Console.WriteLine (faceDetectionException.Text);  }  catch (CameraException cameraCaptureException) {  	Console.WriteLine (cameraCaptureException.Text);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (detectionType != EnumDetectionType.NONE) {  	// get settings according user requirements  	double scale = this.faceDetectionSettings.ImageScale;  	int minNeighbors = this.faceDetectionSettings.MinNeighbors;  	Size minSize = this.faceDetectionSettings.MinSize;  	// get region of interests  	rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  	// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  	if (rois.Count == 0)  		rois = new List<RoI> () {  			new RoI () {  				X = 1000'  				Y = 1000'  				Height = 0'  				Width = 0  			}  		};  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (detectionType != EnumDetectionType.NONE) {  	// get settings according user requirements  	double scale = this.faceDetectionSettings.ImageScale;  	int minNeighbors = this.faceDetectionSettings.MinNeighbors;  	Size minSize = this.faceDetectionSettings.MinSize;  	// get region of interests  	rois = faceDetectBL.DetectFaces (curFrame' detectionType' scale' minNeighbors' minSize);  	// if no RoI was found: add a fake RoI to force no encryption on an "empty" image  	if (rois.Count == 0)  		rois = new List<RoI> () {  			new RoI () {  				X = 1000'  				Y = 1000'  				Height = 0'  				Width = 0  			}  		};  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (rois.Count == 0)  	rois = new List<RoI> () {  		new RoI () {  			X = 1000'  			Y = 1000'  			Height = 0'  			Width = 0  		}  	};  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (rois.Count == 0)  	rois = new List<RoI> () {  		new RoI () {  			X = 1000'  			Y = 1000'  			Height = 0'  			Width = 0  		}  	};  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: rois = new List<RoI> () {  	new RoI () {  		X = 1000'  		Y = 1000'  		Height = 0'  		Width = 0  	}  };  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: rois = new List<RoI> () {  	new RoI () {  		X = 1000'  		Y = 1000'  		Height = 0'  		Width = 0  	}  };  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (radioButtonShowEncryptedFrame.Checked == true) {  	// encrpyt  	Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' cryptoFlags' out errorCode);  	//Action for each element detected  	if (checkBoxShowRoI.Checked == true) {  		foreach (RoI roi in rois) {  			//draw a rectangle around the detected face  			Graphics graphics = Graphics.FromImage (encryptedImage);  			graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  		}  	}  	pictureBoxVideo.Image = encryptedImage;  }  // user wants to see the decrypted image  else if (radioButtonShowDecryptedFrame.Checked == true) {  	// encrypt and decrypt an image  	Image encryptedImage = Bridge.EncryptJPG (curFrame' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  	Image decryptedImage = Bridge.DecryptJPG (encryptedImage' rois' textBoxPasswordVideo.Text' new CryptoFlags ()' out errorCode);  	// draw RoIs on image  	if (checkBoxShowRoI.Checked == true)  		DrawRoiOnImage (rois' decryptedImage);  	// assign image to picture box  	pictureBoxVideo.Image = decryptedImage;  }  // user wants to see the original frame  else if (radioButtonShowOriginalFrame.Checked == true) {  	// draw RoIs on image  	if (checkBoxShowRoI.Checked == true && detectionType != EnumDetectionType.NONE)  		DrawRoiOnImage (rois' curFrameClone);  	// assign image to picture box  	pictureBoxVideo.Image = curFrameClone;  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: if (checkBoxShowRoI.Checked == true) {  	foreach (RoI roi in rois) {  		//draw a rectangle around the detected face  		Graphics graphics = Graphics.FromImage (encryptedImage);  		graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  	}  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: foreach (RoI roi in rois) {  	//draw a rectangle around the detected face  	Graphics graphics = Graphics.FromImage (encryptedImage);  	graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  }  
Magic Number,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,TestFrameWork,The following statement contains a magic number: graphics.DrawRectangle (new Pen (Color.Red' 2)' roi.X' roi.Y' roi.Width' roi.Height);  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: if (mode == EnumMode.Online) {  	this.scale = 1.3;  	this.minNeighbors = 5;  	this.minSize = new Size (10' 10);  }  else {  	this.scale = 1.1;  	this.minNeighbors = 5;  	this.minSize = new Size (5' 5);  }  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.scale = 1.3;  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.minNeighbors = 5;  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.minSize = new Size (10' 10);  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.minSize = new Size (10' 10);  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.scale = 1.1;  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.minNeighbors = 5;  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.minSize = new Size (5' 5);  
Magic Number,JPEG.Encryption.Gui,FaceDetectionSettings,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FaceDetectionSettings.cs,FaceDetectionSettings,The following statement contains a magic number: this.minSize = new Size (5' 5);  
Missing Default,JPEG.Encryption.Gui,FormMain,C:\repos\StefanAuer_JPEG.Encryption\JPEG.Encryption.C#\JPEG.Encryption.Gui\FormMain.cs,buttonEncrypt_Click,The following switch statement is missing a default case: switch (errorCode) {  case EnumErrorCode.NO_JPEG:  	MessageBox.Show ("This file is not a JPEG file:\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	;  	break;  case EnumErrorCode.INTERNAL_ERR:  	MessageBox.Show ("An internal error occurred while encoding!\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	;  	break;  case EnumErrorCode.OUT_OF_MEM:  	MessageBox.Show ("Running out of memory!\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	;  	break;  case EnumErrorCode.SYNTAX_ERROR:  	MessageBox.Show ("Syntax error occurred\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	;  	break;  case EnumErrorCode.UNKNOWN_ERROR:  	MessageBox.Show ("Unknown error occurred!\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	;  	break;  case EnumErrorCode.UNSUPPORTED:  	MessageBox.Show ("This JPEG format is not supported\n" + node.Text' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	;  	break;  }  
