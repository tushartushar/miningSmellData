Implementation smell,Namespace,Class,File,Method,Description
Long Statement,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,CallAsync_CallingMethodWithByRefParams_ThrowsNotSupportedException,The length of the statement  "            Assert.That(() => proxy.CallAsync(m => m.SingleOutParam(out resultingOutParam))' Throws.TypeOf<NotSupportedException>()); " is 121.
Long Statement,WcfClientProxyGenerator.Tests,ChannelFactoryProviderTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ChannelFactoryProviderTests.cs,ServiceInterface_WithMultipleClientEndpoints_ThrowsInvalidOperationException_WhenUsingDefaultCtor,The length of the statement  "            Assert.That(() => ChannelFactoryProvider.GetChannelFactory<ITestService>()' Throws.TypeOf<InvalidOperationException>()); " is 120.
Long Statement,WcfClientProxyGenerator.Tests,ChannelFactoryProviderTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ChannelFactoryProviderTests.cs,NoConfigurationForServiceType_ThrowsInvalidOperationException,The length of the statement  "            Assert.That(() => ChannelFactoryProvider.GetChannelFactory<IAsyncTestInterface>()' Throws.TypeOf<InvalidOperationException>()); " is 127.
Long Statement,WcfClientProxyGenerator.Tests,DynamicProxyTypeGeneratorTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DynamicProxyTypeGeneratorTests.cs,AsyncInterface_Default_ActionAndReplyAction_AttributeValuesAreGenerated,The length of the statement  "            Assert.That(attr.ReplyAction' Is.EqualTo("http://tempuri.org/IOperationContractInterface/DefaultActionAndReplyActionResponse")); " is 128.
Long Statement,WcfClientProxyGenerator.Tests,FastActivatorTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\FastActivatorTests.cs,Benchmark,The length of the statement  "            var activatorDuration = Benchmark("Activator"' () => (TestClass) Activator.CreateInstance(typeof(TestClass)' "test"' true' DateTime.Now)); " is 138.
Long Statement,WcfClientProxyGenerator.Tests,FastActivatorTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\FastActivatorTests.cs,Benchmark,The length of the statement  "            var fastActivatorDuration = Benchmark("FastActivator"' () => FastActivator.CreateInstance<TestClass>(new object[] { "test"' true' DateTime.Now })); " is 147.
Long Statement,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,CreatingProxy_WithServiceEndpoint_CreatesProxy,The length of the statement  "                WcfClientProxy.Create<ITestService>(c => c.SetEndpoint(new ServiceEndpoint(contractDescription' serviceHost.Binding' serviceHost.EndpointAddress))) " is 147.
Long Statement,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_ReturnValue_Throws,The length of the statement  "                    Assert.Throws<InvalidOperationException>(delegate { var x = args.InvokeInfo.ReturnValue; }' "InvokeInfo.ReturnValue did not throw!"); " is 133.
Long Statement,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_ReturnValue_ThrowsForVoidMethods,The length of the statement  "                    Assert.Throws<InvalidOperationException>(delegate { var x = args.InvokeInfo.ReturnValue; }' "InvokeInfo.ReturnValue did not throw!"); " is 133.
Empty Catch Block,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_IfException_IsNotFired,The method has an empty catch block.
Empty Catch Block,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_IfExceptionAndIfRetryCountUsedUp_IsNotFired,The method has an empty catch block.
Magic Number,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,ServiceContractDefinedAsyncMethod_WithReturnValue,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(2))
Magic Number,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,ServiceContractDefinedAsyncMethod_WithNoReturnValue,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(2))
Magic Number,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,CallAsync_VoidMethod,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(2))
Magic Number,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,CallAsync_OneWayOperation,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,CallAsync_MultipleConcurrentCalls,The following statement contains a magic number: int iterations = 20;
Magic Number,WcfClientProxyGenerator.Tests,AsyncTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\AsyncTests.cs,CallAsync_CallingMethodWithByRefParams_ThrowsNotSupportedException,The following statement contains a magic number: service                  .SingleOutParam(out expectedOutParam)                  .Returns(100);
Magic Number,WcfClientProxyGenerator.Tests,BenchmarkTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\BenchmarkTests.cs,Benchmark_RetryingWcfActionInvoker_Invoke,The following statement contains a magic number: actionInvoker.AddResponseToRetryOn<IResponseStatus>(r => r.StatusCode == 100);
Magic Number,WcfClientProxyGenerator.Tests,BenchmarkTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\BenchmarkTests.cs,Benchmark_RetryingWcfActionInvoker_Invoke,The following statement contains a magic number: Enumerable.Range(0' 300000)
Magic Number,WcfClientProxyGenerator.Tests,ChannelFactoryProviderTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ChannelFactoryProviderTests.cs,ChannelFactory_ClientEndpoint_WithCustomBindingConfiguration,The following statement contains a magic number: Assert.That(binding.MaxReceivedMessageSize' Is.EqualTo(12345));
Magic Number,WcfClientProxyGenerator.Tests,DictionaryExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DictionaryExtensionsTests.cs,Unsafe_ConcurrentDictionary_GetOrAdd_CallsValueFactoryMultipleTimes,The following statement contains a magic number: var thread1 = new Thread(() =>                   dictionary.GetOrAdd("key"' _ =>                  {                      Thread.SpinWait(10000);                      thread1Message = "thread 1";                      return thread1Message;                  }));
Magic Number,WcfClientProxyGenerator.Tests,DictionaryExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DictionaryExtensionsTests.cs,Unsafe_ConcurrentDictionary_GetOrAdd_CallsValueFactoryMultipleTimes,The following statement contains a magic number: var thread2 = new Thread(() =>                   dictionary.GetOrAdd("key"' _ =>                  {                      Thread.SpinWait(10000);                      thread2Message = "thread 2";                      return thread2Message;                  }));
Magic Number,WcfClientProxyGenerator.Tests,DictionaryExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DictionaryExtensionsTests.cs,Safe_ConcurrentDictionary_GetOrAdd_CallsValueFactoryOnlyOnce,The following statement contains a magic number: var thread1 = new Thread(() =>                   dictionary.GetOrAddSafe("key"' _ =>                  {                      Thread.SpinWait(10000);                      thread1Message = "thread 1";                      return thread1Message;                  }));
Magic Number,WcfClientProxyGenerator.Tests,DictionaryExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DictionaryExtensionsTests.cs,Safe_ConcurrentDictionary_GetOrAdd_CallsValueFactoryOnlyOnce,The following statement contains a magic number: var thread2 = new Thread(() =>                   dictionary.GetOrAddSafe("key"' _ =>                  {                      Thread.SpinWait(10000);                      thread2Message = "thread 2";                      return thread2Message;                  }));
Magic Number,WcfClientProxyGenerator.Tests,DuplexProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DuplexProxyTests.cs,DuplexService_TriggersCallback,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,DuplexProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DuplexProxyTests.cs,DuplexService_OneWayOperation_TriggersCallback,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,DuplexProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DuplexProxyTests.cs,DuplexService_WithInstanceContext_TriggersCallback,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,FastActivatorTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\FastActivatorTests.cs,Benchmark,The following statement contains a magic number: const int iterations = 1000000;
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ConstantDelayPolicy_ReturnsSameDelay_ForRangeOfInput,The following statement contains a magic number: TimeSpan expectedDelay = TimeSpan.FromMilliseconds(100);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ConstantDelayPolicy_ReturnsSameDelay_ForRangeOfInput,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ConstantDelayPolicy_ReturnsSameDelay_ForRandomInput,The following statement contains a magic number: TimeSpan expectedDelay = TimeSpan.FromSeconds(10);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ConstantDelayPolicy_ReturnsSameDelay_ForRandomInput,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: TimeSpan minimumDelay = TimeSpan.FromSeconds(2);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' policy.GetDelay(0));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(4)' policy.GetDelay(1));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(6)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(6)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(8)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(8)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(10)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(10)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(12)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(12)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: TimeSpan minimumDelay = TimeSpan.FromSeconds(2);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: TimeSpan maximumDelay = TimeSpan.FromSeconds(7);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' policy.GetDelay(0));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(4)' policy.GetDelay(1));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(6)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(6)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(7)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(7)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(7)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(7)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(7)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,LinearBackoffDelayPolicy_BacksOffLinearly_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(7)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: TimeSpan minimumDelay = TimeSpan.FromSeconds(2);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' policy.GetDelay(0));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(4)' policy.GetDelay(1));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(8)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(8)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(16)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(16)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(32)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(32)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(64)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(64)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(128)' policy.GetDelay(6));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(128)' policy.GetDelay(6));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: TimeSpan minimumDelay = TimeSpan.FromSeconds(2);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: TimeSpan maximumDelay = TimeSpan.FromSeconds(20);
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(2)' policy.GetDelay(0));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(4)' policy.GetDelay(1));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(8)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(8)' policy.GetDelay(2));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(16)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(16)' policy.GetDelay(3));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' policy.GetDelay(4));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' policy.GetDelay(5));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' policy.GetDelay(6));
Magic Number,WcfClientProxyGenerator.Tests,DelayPolicyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\DelayPolicyTests.cs,ExponentialBackoffDelayPolicy_BacksOffExponentially_UntilReachingMaximumDelay,The following statement contains a magic number: Assert.AreEqual(TimeSpan.FromSeconds(20)' policy.GetDelay(6));
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_CanCallVoidMethod,The following statement contains a magic number: !resetEvent.WaitOne(300)
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_ConfiguredWithAtLeastOnRetry_CallsServiceMultipleTimes_AndThrowsWcfRetryFailedException,The following statement contains a magic number: service                  .Received(2)                  .VoidMethod("test");
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_ConfiguredWithAtLeastOnRetry_CallsServiceMultipleTimes_AndThrowsCustomRetryFailureException,The following statement contains a magic number: service                  .Received(2)                  .VoidMethod("test");
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_CanBeGeneratedForOperationWithMixedInputAndOutputParams,The following statement contains a magic number: const int expectedOut1Value = 25;
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_CanBeUsedWithOneWayOperations,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_ArgumentsSetCorrectly,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: serviceSub                  .When(m => m.Method(Arg.Any<string>()))                  .Do(_ =>                  {                      mockFireCount++;                      if (mockFireCount < 3)                          throw new Exception();                  });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: var proxy = service.StartHostAndProxy<IExceptionDetailService>(c =>              {                  c.MaximumRetries(10);                  c.RetryOnException<FaultException<ExceptionDetail>>();                    OnInvokeHandler handler = (sender' args) =>                  {                      fireCount++;                      Assert.AreEqual(fireCount > 1' args.IsRetry' "IsRetry is not set correctly");                      Assert.AreEqual(fireCount - 1' args.RetryCounter' "RetryCounter is not set correctly");                      Assert.AreEqual(typeof(IExceptionDetailService)' args.ServiceType' "ServiceType is not set correctly");                                            if (fireCount >= 2)                          resetEvent.Set();                  };                    c.OnBeforeInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: var proxy = service.StartHostAndProxy<IExceptionDetailService>(c =>              {                  c.MaximumRetries(10);                  c.RetryOnException<FaultException<ExceptionDetail>>();                    OnInvokeHandler handler = (sender' args) =>                  {                      fireCount++;                      Assert.AreEqual(fireCount > 1' args.IsRetry' "IsRetry is not set correctly");                      Assert.AreEqual(fireCount - 1' args.RetryCounter' "RetryCounter is not set correctly");                      Assert.AreEqual(typeof(IExceptionDetailService)' args.ServiceType' "ServiceType is not set correctly");                                            if (fireCount >= 2)                          resetEvent.Set();                  };                    c.OnBeforeInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: !resetEvent.WaitOne(TimeSpan.FromSeconds(10))
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: Assert.AreEqual(3' fireCount' "Not called three times!");
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_InvokeInfo_SetCorrectly,The following statement contains a magic number: var proxy = service.StartHostAndProxy(c =>              {                  OnInvokeHandler handler = (sender' args) =>                  {                      Assert.AreEqual("TestMethodComplexMulti"' args.InvokeInfo.MethodName' "InvokeInfo.MethodName is not set correctly");                      // parameters                      Assert.AreEqual(2' args.InvokeInfo.Parameters.Length' "InvokeInfo.Parameters length is incorrect");                      Assert.AreEqual("test"' args.InvokeInfo.Parameters[0]' "InvokeInfo.Parameters[0] is not set correctly");                      Assert.AreEqual(request' args.InvokeInfo.Parameters[1]' "InvokeInfo.Parameters[1] is not set correctly");                        resetEvent.Set();                  };                    c.OnBeforeInvoke += handler;                });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_InvokeInfo_SetCorrectly_IntParameter,The following statement contains a magic number: var proxy = service.StartHostAndProxy(c =>              {                  OnInvokeHandler handler = (sender' args) =>                  {                      Assert.AreEqual("VoidMethodIntParameter"' args.InvokeInfo.MethodName' "InvokeInfo.MethodName is not set correctly");                      Assert.AreEqual(1' args.InvokeInfo.Parameters.Length' "InvokeInfo.Parameters length is incorrect");                      Assert.AreEqual(1337' args.InvokeInfo.Parameters[0]' "InvokeInfo.Parameters[0] is not set correctly");                        resetEvent.Set();                  };                    c.OnBeforeInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnBeforeInvoke_InvokeInfo_SetCorrectly_IntParameter,The following statement contains a magic number: proxy.VoidMethodIntParameter(1337);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_IfExceptionAndIfRetryCountUsedUp_IsNotFired,The following statement contains a magic number: var proxy = service.StartHostAndProxy<IExceptionDetailService>(c =>              {                  c.MaximumRetries(5);                  c.RetryOnException<FaultException<ExceptionDetail>>();                  c.SetDelayPolicy(() => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(10)));                  c.OnBeforeInvoke += (sender' args) => attempts++;                  c.OnAfterInvoke += (sender' args) => fired = true;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_IfExceptionAndIfRetryCountUsedUp_IsNotFired,The following statement contains a magic number: var proxy = service.StartHostAndProxy<IExceptionDetailService>(c =>              {                  c.MaximumRetries(5);                  c.RetryOnException<FaultException<ExceptionDetail>>();                  c.SetDelayPolicy(() => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(10)));                  c.OnBeforeInvoke += (sender' args) => attempts++;                  c.OnAfterInvoke += (sender' args) => fired = true;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_IfExceptionAndIfRetryCountUsedUp_IsNotFired,The following statement contains a magic number: Assert.AreEqual(6' attempts' "Assumption failed: Should attempt to call service method 6 times");
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_InvokeInfo_SetCorrectly,The following statement contains a magic number: var proxy = service.StartHostAndProxy(c =>              {                  OnInvokeHandler handler = (sender' args) =>                  {                      Assert.AreEqual("TestMethodComplexMulti"' args.InvokeInfo.MethodName' "InvokeInfo.MethodName is not set correctly");                      // parameters                      Assert.AreEqual(2' args.InvokeInfo.Parameters.Length' "InvokeInfo.Parameters length is incorrect");                      Assert.AreEqual("test"' args.InvokeInfo.Parameters[0]' "InvokeInfo.Parameters[0] is not set correctly");                      Assert.AreEqual(request' args.InvokeInfo.Parameters[1]' "InvokeInfo.Parameters[1] is not set correctly");                        resetEvent.Set();                  };                    c.OnAfterInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_ReturnValue_ForValueTypeMethods_IsSetCorrectly,The following statement contains a magic number: service                  .IntMethod()                  .Returns(1337);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnAfterInvoke_ReturnValue_ForValueTypeMethods_IsSetCorrectly,The following statement contains a magic number: var proxy = service.StartHostAndProxy(c =>              {                  OnInvokeHandler handler = (sender' args) =>                  {                      Assert.IsTrue(args.InvokeInfo.MethodHasReturnValue' "InvokeInfo.MethodHasReturnValue is not set correctly");                      Assert.AreEqual(1337' args.InvokeInfo.ReturnValue' "InvokeInfo.ReturnValue is not set correctly");                        resetEvent.Set();                  };                    c.OnAfterInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,AsyncProxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: service                  .When(m => m.VoidMethod(Arg.Any<string>()))                  .Do(_ =>                  {                      // fail on first two calls' return on subsequent calls                      mockFireCount++;                      if (mockFireCount < 3)                          throw new Exception();                  });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,AsyncProxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: var proxy = service.StartHostAndAsyncProxy(c =>              {                  c.MaximumRetries(10);                  c.RetryOnException<FaultException>();                  c.RetryOnException<FaultException<ExceptionDetail>>();                    OnInvokeHandler handler = (sender' args) =>                  {                      fireCount++;                      Assert.AreEqual(fireCount > 1' args.IsRetry' "IsRetry is not set correctly");                      Assert.AreEqual(fireCount - 1' args.RetryCounter' "RetryCounter is not set correctly");                      Assert.AreEqual(typeof(ITestService)' args.ServiceType' "ServiceType is not set correctly");                        if (fireCount >= 2)                          resetEvent.Set();                  };                    c.OnBeforeInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,AsyncProxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: var proxy = service.StartHostAndAsyncProxy(c =>              {                  c.MaximumRetries(10);                  c.RetryOnException<FaultException>();                  c.RetryOnException<FaultException<ExceptionDetail>>();                    OnInvokeHandler handler = (sender' args) =>                  {                      fireCount++;                      Assert.AreEqual(fireCount > 1' args.IsRetry' "IsRetry is not set correctly");                      Assert.AreEqual(fireCount - 1' args.RetryCounter' "RetryCounter is not set correctly");                      Assert.AreEqual(typeof(ITestService)' args.ServiceType' "ServiceType is not set correctly");                        if (fireCount >= 2)                          resetEvent.Set();                  };                    c.OnBeforeInvoke += handler;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,AsyncProxy_OnBeforeInvoke_IfRetry_FiredManyTimes,The following statement contains a magic number: Assert.AreEqual(3' fireCount' "Not called three times!");
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnCallSuccess_IsFired,The following statement contains a magic number: service                  .TestMethod("test")                  .Returns("OK")                  .AndDoes(_ => Thread.Sleep(500));
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,AsyncProxy_OnCallSuccess_IsFired,The following statement contains a magic number: service                  .TestMethod("test")                  .Returns("OK")                  .AndDoes(_ => Thread.Sleep(500));
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnException_FiresOnEveryRetry,The following statement contains a magic number: var proxy = service.StartHostAndProxy(c =>              {                  c.MaximumRetries(5);                  c.RetryOnException<FaultException>();                  c.SetDelayPolicy(() => { return new ConstantDelayPolicy(TimeSpan.FromSeconds(0)); });                  c.OnException += (sender' args) => fireCount++;              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Proxy_OnException_FiresOnEveryRetry,The following statement contains a magic number: Assert.AreEqual(6' fireCount);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleRequestArgument_MatchesArgumentsByBaseTypes,The following statement contains a magic number: service                  .TestMethodMixed(Arg.Any<string>()' Arg.Any<int>())                  .Returns(10);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleRequestArgument_MatchesArgumentsByBaseTypes,The following statement contains a magic number: proxy.TestMethodMixed("first argument"' 100);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleRequestArgument_MatchesArgumentsByBaseTypes,The following statement contains a magic number: service                  .Received(1)                  .TestMethodMixed("first argument"' 100);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleRequestArgument_MatchesArgumentsByBaseTypes,The following statement contains a magic number: Assert.That(handleRequestArgumentCounter' Is.EqualTo(2));
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_CanChangeResponse_ForComplexResponse_InterfaceType,The following statement contains a magic number: service                  .TestMethodComplex(Arg.Any<Request>())                  .Returns(m => new Response                  {                      ResponseMessage = m.Arg<Request>().RequestMessage'                      StatusCode = 100                  });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_CanChangeResponse_ForComplexResponse_InterfaceType,The following statement contains a magic number: var proxy = service.StartHostAndProxy(c =>              {                                 // Rewrite responses with status code of 100                  c.HandleResponse<IResponseStatus>(r =>                  {                      if (r.StatusCode == 100)                      {                          return new Response                          {                              ResponseMessage = "error"'                              StatusCode = 1                          };                      }                                            return r;                  });              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_MultipleHandlersCanBeRunOnResponse,The following statement contains a magic number: var countdownEvent = new CountdownEvent(2);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_MultipleHandlersCanBeRunOnResponse,The following statement contains a magic number: var serviceResponse = new Response()              {                  ResponseMessage = "message"'                  StatusCode = 100              };
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_MultipleHandlersCanBeRunOnResponse,The following statement contains a magic number: !countdownEvent.Wait(250)
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_MultipleHandlersCanBeRunOnResponse_WhereHandlersAreInheritingTypes,The following statement contains a magic number: var countdownEvent = new CountdownEvent(3);
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_MultipleHandlersCanBeRunOnResponse_WhereHandlersAreInheritingTypes,The following statement contains a magic number: var serviceResponse = new Response()              {                  ResponseMessage = "message"'                  StatusCode = 100              };
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,HandleResponse_MultipleHandlersCanBeRunOnResponse_WhereHandlersAreInheritingTypes,The following statement contains a magic number: !countdownEvent.Wait(250)
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Async_HandleResponse_CanChangeResponse_ForComplexResponse_InterfaceType,The following statement contains a magic number: service                  .TestMethodComplex(Arg.Any<Request>())                  .Returns(m => new Response                  {                      ResponseMessage = m.Arg<Request>().RequestMessage'                      StatusCode = 100                  });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Async_HandleResponse_CanChangeResponse_ForComplexResponse_InterfaceType,The following statement contains a magic number: var proxy = service.StartHostAndAsyncProxy(c =>              {                                 // Rewrite responses with status code of 100                  c.HandleResponse<IResponseStatus>(r =>                  {                      if (r.StatusCode == 100)                      {                          return new Response                          {                              ResponseMessage = "error"'                              StatusCode = 1                          };                      }                                            return r;                  });              });
Magic Number,WcfClientProxyGenerator.Tests,ProxyTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\ProxyTests.cs,Async_DynamicConversion_Proxy_CanCallGeneratedAsyncVoidMethod,The following statement contains a magic number: !resetEvent.WaitOne(300)
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnConfiguredResponse_ForResponseType,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50))'                  retryCount: 2);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnConfiguredResponse_ForResponseType,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50))'                  retryCount: 2);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnConfiguredResponse_ForResponseBaseType,The following statement contains a magic number: var failResponse = new Response { StatusCode = 100 };
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnConfiguredResponse_ForResponseBaseType,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50))'                  retryCount: 2);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnConfiguredResponse_ForResponseBaseType,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50))'                  retryCount: 2);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnMatchedPredicate_WhenMultiplePredicatesAreRegistered,The following statement contains a magic number: var firstFailResponse = new Response { StatusCode = 100 };
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnMatchedPredicate_WhenMultiplePredicatesAreRegistered,The following statement contains a magic number: var secondFailResponse = new Response { StatusCode = 101 };
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnMatchedPredicate_WhenMultiplePredicatesAreRegistered,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50))'                  retryCount: 2);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddResponseToRetryOn_RetriesOnMatchedPredicate_WhenMultiplePredicatesAreRegistered,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50))'                  retryCount: 2);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AddExceptionToRetryOn_PassesThroughException_OnConfiguredException_WhenPredicateDoesNotMatch,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => new ConstantDelayPolicy(TimeSpan.FromMilliseconds(50)));
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AssertThatCallRetriesOnException,The following statement contains a magic number: var actionInvoker = new RetryingWcfActionInvoker<ITestService>(                  () => service'                  () => delayPolicy'                  retryCount: 5);
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AssertThatCallRetriesOnException,The following statement contains a magic number: delayPolicy                  .Received(5)                  .GetDelay(Arg.Is<int>(i => i >= 0 && i <= 4));
Magic Number,WcfClientProxyGenerator.Tests,RetryingWcfActionInvokerTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\RetryingWcfActionInvokerTests.cs,AssertThatCallRetriesOnException,The following statement contains a magic number: delayPolicy                  .Received(5)                  .GetDelay(Arg.Is<int>(i => i >= 0 && i <= 4));
Magic Number,WcfClientProxyGenerator.Tests,TypeExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\TypeExtensionsTests.cs,GetAllInheritedTypes_ForCustomType_ReturnsExpectedTypes,The following statement contains a magic number: Assert.That(types.Count()' Is.EqualTo(4));
Magic Number,WcfClientProxyGenerator.Tests,TypeExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\TypeExtensionsTests.cs,GetAllInheritedTypes_ForCustomType_WithoutInterfaces_ReturnsExpectedTypes,The following statement contains a magic number: Assert.That(types.Count()' Is.EqualTo(2));
Magic Number,WcfClientProxyGenerator.Tests,TypeExtensionsTests,D:\research\architectureSmells\repos\jweber_WcfClientProxyGenerator\source\WcfClientProxyGenerator.Tests\TypeExtensionsTests.cs,GetAllInheritedTypes_ForChildCustomType_ReturnsExpectedTypes,The following statement contains a magic number: Assert.That(types.Count()' Is.EqualTo(5));
