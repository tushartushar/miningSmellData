Implementation smell,Namespace,Class,File,Method,Description
Long Method,iTextSharp.tool.xml.css.apply,DivCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\DivCssApplier.cs,Apply,The method has 162 lines of code.
Long Method,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The method has 120 lines of code.
Long Method,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The method has 120 lines of code.
Long Method,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The method has 121 lines of code.
Long Method,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The method has 375 lines of code.
Complex Method,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,Cyclomatic complexity of the method is 23
Complex Method,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,ApplyFontStyles,Cyclomatic complexity of the method is 21
Complex Method,iTextSharp.tool.xml.css.apply,DivCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\DivCssApplier.cs,Apply,Cyclomatic complexity of the method is 66
Complex Method,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,Cyclomatic complexity of the method is 39
Complex Method,iTextSharp.tool.xml.css.apply,ImageCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ImageCssApplier.cs,Apply,Cyclomatic complexity of the method is 17
Complex Method,iTextSharp.tool.xml.css.apply,LineSeparatorCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\LineSeparatorCssApplier.cs,Apply,Cyclomatic complexity of the method is 12
Complex Method,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,Cyclomatic complexity of the method is 25
Complex Method,iTextSharp.tool.xml.css.apply,NoNewLineParagraphCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\NoNewLineParagraphCssApplier.cs,Apply,Cyclomatic complexity of the method is 17
Complex Method,iTextSharp.tool.xml.css.apply,ParagraphCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ParagraphCssApplier.cs,Apply,Cyclomatic complexity of the method is 20
Complex Method,iTextSharp.tool.xml.css,CssFilesImpl,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssFilesImpl.cs,PopulateOneCss,Cyclomatic complexity of the method is 21
Complex Method,iTextSharp.tool.xml.css,CssSelector,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssSelector.cs,Matches,Cyclomatic complexity of the method is 15
Complex Method,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessBackground,Cyclomatic complexity of the method is 10
Complex Method,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessFont,Cyclomatic complexity of the method is 8
Complex Method,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,DeterminePositionBetweenValueAndUnit,Cyclomatic complexity of the method is 19
Complex Method,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,Cyclomatic complexity of the method is 34
Complex Method,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,Cyclomatic complexity of the method is 41
Complex Method,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,MergeTextDecorationRules,Cyclomatic complexity of the method is 10
Complex Method,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,SplitRules,Cyclomatic complexity of the method is 16
Complex Method,iTextSharp.tool.xml.css,WidthCalculator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\WidthCalculator.cs,GetWidth,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.tool.xml.css.parser,CssSelectorParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\parser\CssSelectorParser.cs,CreateCssSelector,Cyclomatic complexity of the method is 29
Complex Method,iTextSharp.tool.xml,Tag,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\Tag.cs,CompareTag,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,GetRunDirection,Cyclomatic complexity of the method is 8
Complex Method,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,EndElement,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,CurrentContentToParagraph,Cyclomatic complexity of the method is 12
Complex Method,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,InvertTextAlignForParagraph,Cyclomatic complexity of the method is 12
Complex Method,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,InvertTextAlignForParagraph,Cyclomatic complexity of the method is 12
Complex Method,iTextSharp.tool.xml.html,Anchor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Anchor.cs,End,Cyclomatic complexity of the method is 15
Complex Method,iTextSharp.tool.xml.html,Div,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Div.cs,End,Cyclomatic complexity of the method is 11
Complex Method,iTextSharp.tool.xml.html,Div,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Div.cs,invertTextAlignForDiv,Cyclomatic complexity of the method is 12
Complex Method,iTextSharp.tool.xml.html,Image,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Image.cs,End,Cyclomatic complexity of the method is 8
Complex Method,iTextSharp.tool.xml.html,OrderedUnorderedList,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedList.cs,End,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.tool.xml.html,OrderedUnorderedList,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedList.cs,CalculateTopOrBottomSpacing,Cyclomatic complexity of the method is 13
Complex Method,iTextSharp.tool.xml.html,ParaGraph,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ParaGraph.cs,End,Cyclomatic complexity of the method is 8
Complex Method,iTextSharp.tool.xml.html.head,Meta,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Meta.cs,Start,Cyclomatic complexity of the method is 11
Complex Method,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,Cyclomatic complexity of the method is 80
Complex Method,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,SetStyleValues,Cyclomatic complexity of the method is 16
Complex Method,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,SetCellWidthAndWidestWord,Cyclomatic complexity of the method is 22
Complex Method,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,CalculateDivWidestElementWidth,Cyclomatic complexity of the method is 11
Complex Method,iTextSharp.tool.xml.html.table,TableBorderEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\TableBorderEvent.cs,TableLayout,Cyclomatic complexity of the method is 10
Complex Method,iTextSharp.tool.xml.html.table,TableData,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\TableData.cs,End,Cyclomatic complexity of the method is 19
Complex Method,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,Cyclomatic complexity of the method is 11
Complex Method,iTextSharp.tool.xml.parser.state,InsideTagHTMLState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\InsideTagHTMLState.cs,Process,Cyclomatic complexity of the method is 11
Complex Method,iTextSharp.tool.xml.parser.state,TagEncounteredState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\TagEncounteredState.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,iTextSharp.tool.xml.pipeline.html,AutoDocPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\html\AutoDocPipeline.cs,Open,Cyclomatic complexity of the method is 11
Complex Method,iTextSharp.tool.xml.pipeline.html,HtmlPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\html\HtmlPipeline.cs,Open,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.tool.xml.pipeline.html,HtmlPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\html\HtmlPipeline.cs,Close,Cyclomatic complexity of the method is 8
Complex Method,iTextSharp.tool.xml.util,SortUtil,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\util\SortUtil.cs,Merge,Cyclomatic complexity of the method is 8
Long Parameter List,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,DivCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\DivCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,ImageCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ImageCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,LineSeparatorCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\LineSeparatorCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,NoNewLineParagraphCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\NoNewLineParagraphCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.css.apply,ParagraphCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ParagraphCssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml,XMLWorkerFontProvider,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerFontProvider.cs,GetFont,The method has 6 parameters.
Long Parameter List,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The method has 6 parameters.
Long Parameter List,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The method has 7 parameters.
Long Parameter List,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,CurrentContentToParagraph,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,CssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\CssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,CssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\CssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,ICssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ICssApplier.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,CssAppliers,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\CssAppliers.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,CssAppliersImpl,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\CssAppliersImpl.cs,Apply,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,OrderedUnorderedList,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedList.cs,CalculateTopOrBottomSpacing,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html,ParaGraph,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ParaGraph.cs,AddTabIntervalContent,The method has 5 parameters.
Long Parameter List,iTextSharp.tool.xml.html.table,TableBorderEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\TableBorderEvent.cs,TableLayout,The method has 6 parameters.
Long Parameter List,iTextSharp.tool.xml.util,SortUtil,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\util\SortUtil.cs,Merge,The method has 5 parameters.
Long Statement,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The length of the statement  "		if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) { " is 154.
Long Statement,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The length of the statement  "		} else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) { " is 165.
Long Statement,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,IsBoldValue,The length of the statement  "	return CSS.Value.BOLD.Contains (value) || (value.Length == 3 && value.EndsWith ("00") && value [0] >= '6' && value [0] <= '9'); " is 127.
Long Statement,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The length of the statement  "	if (css.ContainsKey (CSS.Property.LIST_STYLE_IMAGE) && !Util.EqualsIgnoreCase (css [CSS.Property.LIST_STYLE_IMAGE]' CSS.Value.NONE)) { " is 134.
Long Statement,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The length of the statement  "	if (css.ContainsKey (CSS.Property.LIST_STYLE_POSITION) && Util.EqualsIgnoreCase (css [CSS.Property.LIST_STYLE_POSITION]' CSS.Value.INSIDE)) { " is 141.
Long Statement,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The length of the statement  "	leftIndent += css.ContainsKey (CSS.Property.MARGIN_LEFT) ? utils.ParseValueToPt (css [CSS.Property.MARGIN_LEFT]' fontSize) : 0; " is 127.
Long Statement,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The length of the statement  "	leftIndent += css.ContainsKey (CSS.Property.PADDING_LEFT) ? utils.ParseValueToPt (css [CSS.Property.PADDING_LEFT]' fontSize) : 0; " is 129.
Long Statement,iTextSharp.tool.xml.css.apply,NoNewLineParagraphCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\NoNewLineParagraphCssApplier.cs,Apply,The length of the statement  "			p.SpacingBefore = p.SpacingBefore + utils.CalculateMarginTop (fontSize.ToString (CultureInfo.InvariantCulture) + "pt"' 0' configuration); " is 137.
Long Statement,iTextSharp.tool.xml.css,CssRule,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssRule.cs,ToString,The length of the statement  "	return String.Format ("{0} {{ count: {1} }} #spec:{2}"' selector.ToString ()' normalDeclarations.Count + importantDeclarations.Count' selector.CalculateSpecifity ()); " is 166.
Long Statement,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBorder,The length of the statement  "			} else if (value.Contains ("rgb(") || value.Contains ("#") || WebColors.NAMES.ContainsKey (value.ToLowerInvariant ())) { " is 120.
Long Statement,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessBackground,The length of the statement  "		} else if (Util.EqualsIgnoreCase (style' CSS.Value.REPEAT) || Util.EqualsIgnoreCase (style' CSS.Value.NO_REPEAT) || Util.EqualsIgnoreCase (style' CSS.Value.REPEAT_X) || Util.EqualsIgnoreCase (style' CSS.Value.REPEAT_Y)) { " is 221.
Long Statement,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessBackground,The length of the statement  "		} else if (style.Contains ("rgb(") || style.Contains ("rgba(") || style.Contains ("#") || WebColors.NAMES.ContainsKey (style.ToLowerInvariant ())) { " is 148.
Long Statement,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessListStyle,The length of the statement  "		if (Util.EqualsIgnoreCase (style' CSS.Value.DISC) || Util.EqualsIgnoreCase (style' CSS.Value.SQUARE) || Util.EqualsIgnoreCase (style' CSS.Value.CIRCLE) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_ROMAN) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_ROMAN) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_GREEK) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_GREEK) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_ALPHA) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_ALPHA) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_LATIN) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_LATIN)) { " is 602.
Long Statement,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,IsMetricValue,The length of the statement  "	return value.Contains (CSS.Value.PX) || value.Contains (CSS.Value.IN) || value.Contains (CSS.Value.CM) || value.Contains (CSS.Value.MM) || value.Contains (CSS.Value.PC) || value.Contains (CSS.Value.PT); " is 202.
Long Statement,iTextSharp.tool.xml.css,HeightCalculator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\HeightCalculator.cs,GetHeight,The length of the statement  "	if (tag.CSS.TryGetValue (HTML.Attribute.HEIGHT' out heightValue) || tag.Attributes.TryGetValue (HTML.Attribute.HEIGHT' out heightValue)) { " is 138.
Long Statement,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The length of the statement  "		if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.I) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.CITE) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.EM) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.VAR) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.DFN) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.ADDRESS)) { " is 293.
Long Statement,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The length of the statement  "		} else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.S) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.STRIKE) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.DEL)) { " is 155.
Long Statement,iTextSharp.tool.xml,TagUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\TagUtils.cs,GetSibling,The length of the statement  "		throw new NoSiblingException (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.NO_SIBLING)' t.Name' i)' e); " is 130.
Long Statement,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,EndElement,The length of the statement  "		throw new RuntimeWorkerException (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.INVALID_NESTED_TAG)' thetag' ctx.GetCurrentTag ().Name)); " is 163.
Long Statement,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,GetDefaultCSS,The length of the statement  "		defaultCssFile = GetCSS (Assembly.GetExecutingAssembly ().GetManifestResourceStream ("iTextSharp.tool.xml.css.default.css")); " is 125.
Long Statement,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The length of the statement  "	IPipeline pipeline = new CssResolverPipeline (cssResolver' new HtmlPipeline (hpc' new ElementHandlerPipeline (d' null))); " is 121.
Long Statement,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The length of the statement  "	IPipeline pipeline = new CssResolverPipeline (cssResolver' new HtmlPipeline (hpc' new PdfWriterPipeline (doc' writer))); " is 120.
Long Statement,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The length of the statement  "	hpc.SetAcceptUnknown (true).AutoBookmark (true).SetTagFactory (GetDefaultTagProcessorFactory ()).ResourcePath = resourcesRootPath; " is 130.
Long Statement,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The length of the statement  "	ParseXHtml (writer' doc' inp' Assembly.GetExecutingAssembly ().GetManifestResourceStream ("iTextSharp.tool.xml.css.default.css")' charset); " is 139.
Long Statement,iTextSharp.tool.xml,XMLWorkerHelper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorkerHelper.cs,ParseXHtml,The length of the statement  "	IPipeline pipeline = new CssResolverPipeline (cssResolver' new HtmlPipeline (hpc' new ElementHandlerPipeline (d' null))); " is 121.
Long Statement,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,EndElement,The length of the statement  "	if (tag.CSS.TryGetValue (CSS.Property.PAGE_BREAK_AFTER' out pagebreak) && Util.EqualsIgnoreCase (CSS.Value.ALWAYS' pagebreak)) { " is 128.
Long Statement,iTextSharp.tool.xml.html,Body,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Body.cs,Start,The length of the statement  "					Rectangle rectangle = new Rectangle (document.Left' document.Bottom' document.Right' document.Top' document.PageSize.Rotation); " is 127.
Long Statement,iTextSharp.tool.xml.html,CssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\CssApplier.cs,Apply,The length of the statement  "		throw new ArgumentException (string.Format ("Expected element of type {0}' but was {1}"' typeof(T).Name' e.GetType ().Name)); " is 125.
Long Statement,iTextSharp.tool.xml.html,DefaultTagProcessorFactory,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\DefaultTagProcessorFactory.cs,Load,The length of the statement  "		throw new NoTagProcessorException (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.NO_TAGPROCESSOR)' className)' e); " is 140.
Long Statement,iTextSharp.tool.xml.html,HTMLUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\HTMLUtils.cs,Sanitize,The length of the statement  "		chunkList.Add (new Chunk (replaceNonBreakableSpaces ? builder.ToString ().Replace (Char.ConvertFromUtf32 (0x00a0)' " ") : builder.ToString ())); " is 144.
Long Statement,iTextSharp.tool.xml.html,Image,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Image.cs,End,The length of the statement  "				logger.Error (string.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.HTML_IMG_RETRIEVE_FAIL)' src)' e); " is 120.
Long Statement,iTextSharp.tool.xml.html,Image,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Image.cs,End,The length of the statement  "				l.Add (GetCssAppliers ().Apply (new Chunk ((iTextSharp.text.Image)GetCssAppliers ().Apply (img' tag' htmlPipelineContext)' 0' 0' true)' tag' htmlPipelineContext)); " is 163.
Long Statement,iTextSharp.tool.xml.html,OrderedUnorderedList,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedList.cs,End,The length of the statement  "					child.CSS [CSS.Property.MARGIN_TOP] = CalculateTopOrBottomSpacing (true' false' tag' child' ctx).ToString (CultureInfo.InvariantCulture) + "pt"; " is 144.
Long Statement,iTextSharp.tool.xml.html,OrderedUnorderedList,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedList.cs,End,The length of the statement  "						child.CSS [CSS.Property.MARGIN_TOP] = CalculateTopOrBottomSpacing (true' false' tag' child' ctx).ToString (CultureInfo.InvariantCulture) + "pt"; " is 144.
Long Statement,iTextSharp.tool.xml.html.head,Link,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Link.cs,Start,The length of the statement  "	if (tag.Attributes.ContainsKey (HTML.Attribute.TYPE) && Util.EqualsIgnoreCase (tag.Attributes [HTML.Attribute.TYPE]' HTML.Attribute.Value.TEXTCSS)) { " is 149.
Long Statement,iTextSharp.tool.xml.html.head,Link,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Link.cs,Start,The length of the statement  "				LOG.Warn (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.CUSTOMCONTEXT_404_CONTINUE)' typeof(CssResolverPipeline).FullName)); " is 150.
Long Statement,iTextSharp.tool.xml.html.head,Meta,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Meta.cs,Start,The length of the statement  "	if (tag.Attributes.ContainsKey ("http-equiv") && Util.EqualsIgnoreCase ("Content-Type"' tag.Attributes ["http-equiv"])) { " is 121.
Long Statement,iTextSharp.tool.xml.html.head,Meta,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Meta.cs,Start,The length of the statement  "									LOGGER.Debug (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.META_404)' GetHtmlPipelineContext (ctx).CharSet () == null ? "" : GetHtmlPipelineContext (ctx).CharSet ().WebName)); " is 202.
Long Statement,iTextSharp.tool.xml.html.head,Style,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Style.cs,Content,The length of the statement  "		LOG.Warn (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.CUSTOMCONTEXT_404_CONTINUE)' typeof(CssResolverPipeline).FullName)); " is 150.
Long Statement,iTextSharp.tool.xml.html.head,XML,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\XML.cs,Start,The length of the statement  "					LOGGER.Debug (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.META_404)' GetHtmlPipelineContext (ctx).CharSet () == null ? "" : GetHtmlPipelineContext (ctx).CharSet ().WebName)); " is 202.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The length of the statement  "				if (repeatHeader != null && Util.EqualsIgnoreCase (repeatHeader' "yes") && tableRowElement.RowPlace.Equals (TableRowElement.Place.HEADER)) { " is 140.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The length of the statement  "				if (repeatFooter != null && Util.EqualsIgnoreCase (repeatFooter' "yes") && tableRowElement.RowPlace.Equals (TableRowElement.Place.FOOTER)) { " is 140.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The length of the statement  "			targetWidth = new WidthCalculator ().GetWidth (tag' htmlPipelineContext.GetRootTags ()' htmlPipelineContext.PageSize.Width' initialTotalWidth); " is 143.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The length of the statement  "		} else if (null == tag.Parent || (null != tag.Parent && htmlPipelineContext.GetRootTags ().Contains (tag.Parent.Name))) { " is 121.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The length of the statement  "							for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) { " is 125.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,CalculateTargetWidth,The length of the statement  "		targetWidth = new WidthCalculator ().GetWidth (tag' htmlPipelineContext.GetRootTags ()' htmlPipelineContext.PageSize.Width); " is 124.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,CalculateTargetWidth,The length of the statement  "	} else if (null == tag.Parent || (null != tag.Parent && htmlPipelineContext.GetRootTags ().Contains (tag.Parent.Name))) { " is 121.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,SetStyleValues,The length of the statement  "			} else if (Util.EqualsIgnoreCase (key' CSS.Property.BORDER_RIGHT_STYLE) && Util.EqualsIgnoreCase (CSS.Value.SOLID' value)) { " is 124.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,SetStyleValues,The length of the statement  "			} else if (Util.EqualsIgnoreCase (key' CSS.Property.BORDER_TOP_STYLE) && Util.EqualsIgnoreCase (CSS.Value.SOLID' value)) { " is 122.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,SetStyleValues,The length of the statement  "			} else if (Util.EqualsIgnoreCase (key' CSS.Property.BORDER_BOTTOM_STYLE) && Util.EqualsIgnoreCase (CSS.Value.SOLID' value)) { " is 125.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,SetBorderAttributeForCell,The length of the statement  "	if (attributes.TryGetValue (CSS.Property.BORDER' out border) && ("".Equals (border) || utils.ParsePxInCmMmPcToPt (border) > 0)) { " is 129.
Long Statement,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,GetTableOuterWidth,The length of the statement  "	float total = utils.GetLeftAndRightMargin (tag' GetHtmlPipelineContext (ctx).PageSize.Width) + utils.CheckMetricStyle (tag' CSS.Property.BORDER_LEFT_WIDTH) + utils.CheckMetricStyle (tag' CSS.Property.BORDER_RIGHT_WIDTH) + horBorderSpacing; " is 239.
Long Statement,iTextSharp.tool.xml.parser.state,SpecialCharState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\SpecialCharState.cs,Process,The length of the statement  "	} else if (character != '#' && (character < '0' || character > '9') && (character < 'a' || character > 'z') && (character < 'A' || character > 'Z') || entity.Length >= 7) { " is 172.
Long Statement,iTextSharp.tool.xml.parser.state,TagEncounteredState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\TagEncounteredState.cs,Process,The length of the statement  "	if (HTMLUtils.IsWhiteSpace (character) || character == '>' || character == '/' || character == ':' || tag.Equals ("!--") || tag.Equals ("![CDATA") && character == '[' || character == '?') { " is 189.
Long Statement,iTextSharp.tool.xml.pipeline,AbstractPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\AbstractPipeline.cs,GetLocalContext,The length of the statement  "		throw new PipelineException (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.OWN_CONTEXT_404)' this.GetType ().FullName)); " is 146.
Long Statement,iTextSharp.tool.xml.pipeline,AbstractPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\AbstractPipeline.cs,GetLocalContext,The length of the statement  "		throw new PipelineException (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.OWN_CONTEXT_404)' this.GetType ().FullName)' e); " is 149.
Long Statement,iTextSharp.tool.xml.pipeline.html,HtmlPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\html\HtmlPipeline.cs,Close,The length of the statement  "				throw new PipelineException (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.STACK_404)' t.ToString ())' e); " is 132.
Long Statement,iTextSharp.tool.xml.pipeline.html,HtmlPipelineContext,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\html\HtmlPipelineContext.cs,Clone,The length of the statement  "	newCtx.SetPageSize (new Rectangle (this.pageSize)).SetLinkProvider (this.linkprovider).SetRootTags (new List<String> (this.roottags)).AutoBookmark (this.autoBookmark).SetTagFactory (this.tagFactory).SetAcceptUnknown (this.acceptUnknown); " is 237.
Complex Conditional,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,ApplyFontStyles,The conditional expression  "f != null && (style == Font.NORMAL || style == Font.UNDEFINED || (f.Style & style) == 0)"  is complex.
Complex Conditional,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessBackground,The conditional expression  "Util.EqualsIgnoreCase (style' CSS.Value.REPEAT) || Util.EqualsIgnoreCase (style' CSS.Value.NO_REPEAT) || Util.EqualsIgnoreCase (style' CSS.Value.REPEAT_X) || Util.EqualsIgnoreCase (style' CSS.Value.REPEAT_Y)"  is complex.
Complex Conditional,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessBackground,The conditional expression  "style.Contains ("rgb(") || style.Contains ("rgba(") || style.Contains ("#") || WebColors.NAMES.ContainsKey (style.ToLowerInvariant ())"  is complex.
Complex Conditional,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ProcessListStyle,The conditional expression  "Util.EqualsIgnoreCase (style' CSS.Value.DISC) || Util.EqualsIgnoreCase (style' CSS.Value.SQUARE) || Util.EqualsIgnoreCase (style' CSS.Value.CIRCLE) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_ROMAN) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_ROMAN) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_GREEK) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_GREEK) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_ALPHA) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_ALPHA) || Util.EqualsIgnoreCase (style' CSS.Value.LOWER_LATIN) || Util.EqualsIgnoreCase (style' CSS.Value.UPPER_LATIN)"  is complex.
Complex Conditional,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,TrimAndRemoveQuoutes,The conditional expression  "(s.StartsWith ("\"") || s.StartsWith ("'")) && s.EndsWith ("\"") || s.EndsWith ("'")"  is complex.
Complex Conditional,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The conditional expression  "Util.EqualsIgnoreCase (t.Name' HTML.Tag.I) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.CITE) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.EM) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.VAR) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.DFN) || Util.EqualsIgnoreCase (t.Name' HTML.Tag.ADDRESS)"  is complex.
Complex Conditional,iTextSharp.tool.xml.parser.io,EncodingUtil,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\io\EncodingUtil.cs,GetDeclaredEncoding,The conditional expression  "idx1 < 0 && idx2 > 0 || idx2 > 0 && idx2 < idx1"  is complex.
Complex Conditional,iTextSharp.tool.xml.parser.io,EncodingUtil,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\io\EncodingUtil.cs,GetDeclaredEncoding,The conditional expression  "idx2 < 0 && idx1 > 0 || idx1 > 0 && idx1 < idx2"  is complex.
Complex Conditional,iTextSharp.tool.xml.parser.state,SpecialCharState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\SpecialCharState.cs,Process,The conditional expression  "character != '#' && (character < '0' || character > '9') && (character < 'a' || character > 'z') && (character < 'A' || character > 'Z') || entity.Length >= 7"  is complex.
Complex Conditional,iTextSharp.tool.xml.parser.state,TagEncounteredState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\TagEncounteredState.cs,Process,The conditional expression  "HTMLUtils.IsWhiteSpace (character) || character == '>' || character == '/' || character == ':' || tag.Equals ("!--") || tag.Equals ("![CDATA") && character == '[' || character == '?'"  is complex.
Virtual Method Call from Constructor,iTextSharp.tool.xml.css,CssFilesImpl,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssFilesImpl.cs,CssFilesImpl,The constructor "CssFilesImpl" calls a virtual method "Add".
Virtual Method Call from Constructor,iTextSharp.tool.xml.net.exc,NoImageException,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\net\exc\NoImageException.cs,NoImageException,The constructor "NoImageException" calls a virtual method "GetMessage".
Virtual Method Call from Constructor,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,XMLParser,The constructor "XMLParser" calls a virtual method "Unknown".
Virtual Method Call from Constructor,iTextSharp.tool.xml.pipeline,AbstractPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\AbstractPipeline.cs,AbstractPipeline,The constructor "AbstractPipeline" calls a virtual method "SetNext".
Empty Catch Block,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The method has an empty catch block.
Empty Catch Block,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,CalculateMarginTop,The method has an empty catch block.
Empty Catch Block,iTextSharp.tool.xml.html,Body,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Body.cs,Start,The method has an empty catch block.
Empty Catch Block,iTextSharp.tool.xml.html.head,Meta,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\Meta.cs,Start,The method has an empty catch block.
Empty Catch Block,iTextSharp.tool.xml.html.head,XML,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\head\XML.cs,Start,The method has an empty catch block.
Empty Catch Block,iTextSharp.tool.xml.net,FileRetrieveImpl,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\net\FileRetrieveImpl.cs,DetectWithRootUrls,The method has an empty catch block.
Empty Catch Block,iTextSharp.tool.xml.pipeline.html,AutoDocPipeline,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\pipeline\html\AutoDocPipeline.cs,Close,The method has an empty catch block.
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: foreach (KeyValuePair<String' String> entry in rules) {  	String key = entry.Key;  	value = entry.Value;  	if (Util.EqualsIgnoreCase (CSS.Property.FONT_STYLE' key)) {  		if (Util.EqualsIgnoreCase (CSS.Value.OBLIQUE' value)) {  			c.SetSkew (0' 12);  		}  	} else if (Util.EqualsIgnoreCase (CSS.Property.LETTER_SPACING' key)) {  		String letterSpacing = entry.Value;  		float letterSpacingValue = 0f;  		if (utils.IsRelativeValue (value)) {  			letterSpacingValue = utils.ParseRelativeValue (letterSpacing' f.Size);  		} else if (utils.IsMetricValue (value)) {  			letterSpacingValue = utils.ParsePxInCmMmPcToPt (letterSpacing);  		}  		c.SetCharacterSpacing (letterSpacingValue);  	} else if (Util.EqualsIgnoreCase (CSS.Property.XFA_FONT_HORIZONTAL_SCALE' key)) {  		// only % allowed; need a catch block NumberFormatExc?  		c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: foreach (KeyValuePair<String' String> entry in rules) {  	String key = entry.Key;  	value = entry.Value;  	if (Util.EqualsIgnoreCase (CSS.Property.FONT_STYLE' key)) {  		if (Util.EqualsIgnoreCase (CSS.Value.OBLIQUE' value)) {  			c.SetSkew (0' 12);  		}  	} else if (Util.EqualsIgnoreCase (CSS.Property.LETTER_SPACING' key)) {  		String letterSpacing = entry.Value;  		float letterSpacingValue = 0f;  		if (utils.IsRelativeValue (value)) {  			letterSpacingValue = utils.ParseRelativeValue (letterSpacing' f.Size);  		} else if (utils.IsMetricValue (value)) {  			letterSpacingValue = utils.ParsePxInCmMmPcToPt (letterSpacing);  		}  		c.SetCharacterSpacing (letterSpacingValue);  	} else if (Util.EqualsIgnoreCase (CSS.Property.XFA_FONT_HORIZONTAL_SCALE' key)) {  		// only % allowed; need a catch block NumberFormatExc?  		c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Property.FONT_STYLE' key)) {  	if (Util.EqualsIgnoreCase (CSS.Value.OBLIQUE' value)) {  		c.SetSkew (0' 12);  	}  } else if (Util.EqualsIgnoreCase (CSS.Property.LETTER_SPACING' key)) {  	String letterSpacing = entry.Value;  	float letterSpacingValue = 0f;  	if (utils.IsRelativeValue (value)) {  		letterSpacingValue = utils.ParseRelativeValue (letterSpacing' f.Size);  	} else if (utils.IsMetricValue (value)) {  		letterSpacingValue = utils.ParsePxInCmMmPcToPt (letterSpacing);  	}  	c.SetCharacterSpacing (letterSpacingValue);  } else if (Util.EqualsIgnoreCase (CSS.Property.XFA_FONT_HORIZONTAL_SCALE' key)) {  	// only % allowed; need a catch block NumberFormatExc?  	c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Property.FONT_STYLE' key)) {  	if (Util.EqualsIgnoreCase (CSS.Value.OBLIQUE' value)) {  		c.SetSkew (0' 12);  	}  } else if (Util.EqualsIgnoreCase (CSS.Property.LETTER_SPACING' key)) {  	String letterSpacing = entry.Value;  	float letterSpacingValue = 0f;  	if (utils.IsRelativeValue (value)) {  		letterSpacingValue = utils.ParseRelativeValue (letterSpacing' f.Size);  	} else if (utils.IsMetricValue (value)) {  		letterSpacingValue = utils.ParsePxInCmMmPcToPt (letterSpacing);  	}  	c.SetCharacterSpacing (letterSpacingValue);  } else if (Util.EqualsIgnoreCase (CSS.Property.XFA_FONT_HORIZONTAL_SCALE' key)) {  	// only % allowed; need a catch block NumberFormatExc?  	c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.OBLIQUE' value)) {  	c.SetSkew (0' 12);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: c.SetSkew (0' 12);  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Property.LETTER_SPACING' key)) {  	String letterSpacing = entry.Value;  	float letterSpacingValue = 0f;  	if (utils.IsRelativeValue (value)) {  		letterSpacingValue = utils.ParseRelativeValue (letterSpacing' f.Size);  	} else if (utils.IsMetricValue (value)) {  		letterSpacingValue = utils.ParsePxInCmMmPcToPt (letterSpacing);  	}  	c.SetCharacterSpacing (letterSpacingValue);  } else if (Util.EqualsIgnoreCase (CSS.Property.XFA_FONT_HORIZONTAL_SCALE' key)) {  	// only % allowed; need a catch block NumberFormatExc?  	c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Property.XFA_FONT_HORIZONTAL_SCALE' key)) {  	// only % allowed; need a catch block NumberFormatExc?  	c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: c.SetHorizontalScaling (float.Parse (value.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100);  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (rules.TryGetValue (CSS.Property.VERTICAL_ALIGN' out value)) {  	if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) {  		c.SetTextRise ((float)(size / 2 + 0.5));  	} else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  		c.SetTextRise (-size / 2);  	} else {  		c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (rules.TryGetValue (CSS.Property.VERTICAL_ALIGN' out value)) {  	if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) {  		c.SetTextRise ((float)(size / 2 + 0.5));  	} else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  		c.SetTextRise (-size / 2);  	} else {  		c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (rules.TryGetValue (CSS.Property.VERTICAL_ALIGN' out value)) {  	if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) {  		c.SetTextRise ((float)(size / 2 + 0.5));  	} else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  		c.SetTextRise (-size / 2);  	} else {  		c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) {  	c.SetTextRise ((float)(size / 2 + 0.5));  } else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  	c.SetTextRise (-size / 2);  } else {  	c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) {  	c.SetTextRise ((float)(size / 2 + 0.5));  } else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  	c.SetTextRise (-size / 2);  } else {  	c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.SUPER' value) || Util.EqualsIgnoreCase (CSS.Value.TOP' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_TOP' value)) {  	c.SetTextRise ((float)(size / 2 + 0.5));  } else if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  	c.SetTextRise (-size / 2);  } else {  	c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: c.SetTextRise ((float)(size / 2 + 0.5));  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: c.SetTextRise ((float)(size / 2 + 0.5));  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.SUB' value) || Util.EqualsIgnoreCase (CSS.Value.BOTTOM' value) || Util.EqualsIgnoreCase (CSS.Value.TEXT_BOTTOM' value)) {  	c.SetTextRise (-size / 2);  } else {  	c.SetTextRise (utils.ParsePxInCmMmPcToPt (value));  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: c.SetTextRise (-size / 2);  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (rules.TryGetValue (CSS.Property.XFA_FONT_VERTICAL_SCALE' out xfaVertScale)) {  	if (xfaVertScale.Contains ("%")) {  		size *= float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100;  		c.SetHorizontalScaling (100 / float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture));  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (rules.TryGetValue (CSS.Property.XFA_FONT_VERTICAL_SCALE' out xfaVertScale)) {  	if (xfaVertScale.Contains ("%")) {  		size *= float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100;  		c.SetHorizontalScaling (100 / float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture));  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (xfaVertScale.Contains ("%")) {  	size *= float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100;  	c.SetHorizontalScaling (100 / float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture));  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: if (xfaVertScale.Contains ("%")) {  	size *= float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100;  	c.SetHorizontalScaling (100 / float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture));  }  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: size *= float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture) / 100;  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,Apply,The following statement contains a magic number: c.SetHorizontalScaling (100 / float.Parse (xfaVertScale.Replace ("%"' "")' CultureInfo.InvariantCulture));  
Magic Number,iTextSharp.tool.xml.css.apply,ChunkCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ChunkCssApplier.cs,IsBoldValue,The following statement contains a magic number: return CSS.Value.BOLD.Contains (value) || (value.Length == 3 && value.EndsWith ("00") && value [0] >= '6' && value [0] <= '9');  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (null != emptyCells && Util.EqualsIgnoreCase (CSS.Value.HIDE' emptyCells) && cell.CompositeElements == null) {  	cell.Border = Rectangle.NO_BORDER;  } else {  	cell.VerticalAlignment = Element.ALIGN_MIDDLE;  	// Default css behavior. Implementation of "vertical-align" style further along.  	String vAlign = null;  	if (t.Attributes.ContainsKey (HTML.Attribute.VALIGN)) {  		vAlign = t.Attributes [HTML.Attribute.VALIGN];  	} else if (css.ContainsKey (HTML.Attribute.VALIGN)) {  		vAlign = css [HTML.Attribute.VALIGN];  	} else if (row != null) {  		if (row.Attributes.ContainsKey (HTML.Attribute.VALIGN)) {  			vAlign = row.Attributes [HTML.Attribute.VALIGN];  		} else if (row.CSS.ContainsKey (HTML.Attribute.VALIGN)) {  			vAlign = row.CSS [HTML.Attribute.VALIGN];  		}  	}  	if (vAlign != null) {  		if (Util.EqualsIgnoreCase (CSS.Value.TOP' vAlign)) {  			cell.VerticalAlignment = Element.ALIGN_TOP;  		} else if (Util.EqualsIgnoreCase (CSS.Value.BOTTOM' vAlign)) {  			cell.VerticalAlignment = Element.ALIGN_BOTTOM;  		}  	}  	String align = null;  	if (t.Attributes.ContainsKey (HTML.Attribute.ALIGN)) {  		align = t.Attributes [HTML.Attribute.ALIGN];  	} else if (css.ContainsKey (CSS.Property.TEXT_ALIGN)) {  		align = css [CSS.Property.TEXT_ALIGN];  	}  	if (align != null) {  		if (Util.EqualsIgnoreCase (CSS.Value.CENTER' align)) {  			cell.HorizontalAlignment = Element.ALIGN_CENTER;  		} else if (Util.EqualsIgnoreCase (CSS.Value.RIGHT' align)) {  			cell.HorizontalAlignment = Element.ALIGN_RIGHT;  		} else if (Util.EqualsIgnoreCase (CSS.Value.JUSTIFY' align)) {  			cell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;  		}  	}  	if (t.Attributes.ContainsKey (HTML.Attribute.WIDTH) || css.ContainsKey (HTML.Attribute.WIDTH)) {  		cell.FixedWidth = new WidthCalculator ().GetWidth (t' memory.GetRootTags ()' psc.PageSize.Width);  	}  	HeightCalculator heightCalc = new HeightCalculator ();  	float? height = heightCalc.GetHeight (t' psc.PageSize.Height);  	if (height == null && row != null) {  		height = heightCalc.GetHeight (row' psc.PageSize.Height);  	}  	if (height != null) {  		cell.MinimumHeight = height.Value;  	}  	String colspan;  	if (t.Attributes.TryGetValue (HTML.Attribute.COLSPAN' out colspan)) {  		cell.Colspan = int.Parse (colspan);  	}  	String rowspan;  	t.Attributes.TryGetValue (HTML.Attribute.ROWSPAN' out rowspan);  	if (null != rowspan) {  		cell.Rowspan = int.Parse (rowspan);  	}  	foreach (KeyValuePair<String' String> entry in css) {  		String key = entry.Key;  		String value = entry.Value;  		cell.UseBorderPadding = true;  		if (Util.EqualsIgnoreCase (key' CSS.Property.BACKGROUND_COLOR)) {  			values.Background = HtmlUtilities.DecodeColor (value);  		} else if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  			if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  				cell.VerticalAlignment = Element.ALIGN_TOP;  				cell.PaddingTop = cell.PaddingTop + 6;  			} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  				cell.VerticalAlignment = Element.ALIGN_BOTTOM;  				cell.PaddingBottom = cell.PaddingBottom + 6;  			}  		} else if (key.Contains (CSS.Property.BORDER)) {  			if (key.Contains (CSS.Value.TOP)) {  				SetTopOfBorder (cell' key' value' values);  			} else if (key.Contains (CSS.Value.BOTTOM)) {  				SetBottomOfBorder (cell' key' value' values);  			} else if (key.Contains (CSS.Value.LEFT)) {  				SetLeftOfBorder (cell' key' value' values);  			} else if (key.Contains (CSS.Value.RIGHT)) {  				SetRightOfBorder (cell' key' value' values);  			}  		} else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  			if (key.Contains (CSS.Value.TOP)) {  				cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  			} else if (key.Contains (CSS.Value.BOTTOM)) {  				cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  			} else if (key.Contains (CSS.Value.LEFT)) {  				cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  			} else if (key.Contains (CSS.Value.RIGHT)) {  				cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  			}  		} else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  			cell.HorizontalAlignment = CSS.GetElementAlignment (value);  		}  	}  	cell.PaddingLeft = cell.PaddingLeft + values.HorBorderSpacing + values.BorderWidthLeft;  	cell.PaddingRight = cell.PaddingRight + values.BorderWidthRight;  	cell.PaddingTop = cell.PaddingTop + values.VerBorderSpacing + values.BorderWidthTop;  	cell.PaddingBottom = cell.PaddingBottom + values.BorderWidthBottom;  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (null != emptyCells && Util.EqualsIgnoreCase (CSS.Value.HIDE' emptyCells) && cell.CompositeElements == null) {  	cell.Border = Rectangle.NO_BORDER;  } else {  	cell.VerticalAlignment = Element.ALIGN_MIDDLE;  	// Default css behavior. Implementation of "vertical-align" style further along.  	String vAlign = null;  	if (t.Attributes.ContainsKey (HTML.Attribute.VALIGN)) {  		vAlign = t.Attributes [HTML.Attribute.VALIGN];  	} else if (css.ContainsKey (HTML.Attribute.VALIGN)) {  		vAlign = css [HTML.Attribute.VALIGN];  	} else if (row != null) {  		if (row.Attributes.ContainsKey (HTML.Attribute.VALIGN)) {  			vAlign = row.Attributes [HTML.Attribute.VALIGN];  		} else if (row.CSS.ContainsKey (HTML.Attribute.VALIGN)) {  			vAlign = row.CSS [HTML.Attribute.VALIGN];  		}  	}  	if (vAlign != null) {  		if (Util.EqualsIgnoreCase (CSS.Value.TOP' vAlign)) {  			cell.VerticalAlignment = Element.ALIGN_TOP;  		} else if (Util.EqualsIgnoreCase (CSS.Value.BOTTOM' vAlign)) {  			cell.VerticalAlignment = Element.ALIGN_BOTTOM;  		}  	}  	String align = null;  	if (t.Attributes.ContainsKey (HTML.Attribute.ALIGN)) {  		align = t.Attributes [HTML.Attribute.ALIGN];  	} else if (css.ContainsKey (CSS.Property.TEXT_ALIGN)) {  		align = css [CSS.Property.TEXT_ALIGN];  	}  	if (align != null) {  		if (Util.EqualsIgnoreCase (CSS.Value.CENTER' align)) {  			cell.HorizontalAlignment = Element.ALIGN_CENTER;  		} else if (Util.EqualsIgnoreCase (CSS.Value.RIGHT' align)) {  			cell.HorizontalAlignment = Element.ALIGN_RIGHT;  		} else if (Util.EqualsIgnoreCase (CSS.Value.JUSTIFY' align)) {  			cell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;  		}  	}  	if (t.Attributes.ContainsKey (HTML.Attribute.WIDTH) || css.ContainsKey (HTML.Attribute.WIDTH)) {  		cell.FixedWidth = new WidthCalculator ().GetWidth (t' memory.GetRootTags ()' psc.PageSize.Width);  	}  	HeightCalculator heightCalc = new HeightCalculator ();  	float? height = heightCalc.GetHeight (t' psc.PageSize.Height);  	if (height == null && row != null) {  		height = heightCalc.GetHeight (row' psc.PageSize.Height);  	}  	if (height != null) {  		cell.MinimumHeight = height.Value;  	}  	String colspan;  	if (t.Attributes.TryGetValue (HTML.Attribute.COLSPAN' out colspan)) {  		cell.Colspan = int.Parse (colspan);  	}  	String rowspan;  	t.Attributes.TryGetValue (HTML.Attribute.ROWSPAN' out rowspan);  	if (null != rowspan) {  		cell.Rowspan = int.Parse (rowspan);  	}  	foreach (KeyValuePair<String' String> entry in css) {  		String key = entry.Key;  		String value = entry.Value;  		cell.UseBorderPadding = true;  		if (Util.EqualsIgnoreCase (key' CSS.Property.BACKGROUND_COLOR)) {  			values.Background = HtmlUtilities.DecodeColor (value);  		} else if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  			if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  				cell.VerticalAlignment = Element.ALIGN_TOP;  				cell.PaddingTop = cell.PaddingTop + 6;  			} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  				cell.VerticalAlignment = Element.ALIGN_BOTTOM;  				cell.PaddingBottom = cell.PaddingBottom + 6;  			}  		} else if (key.Contains (CSS.Property.BORDER)) {  			if (key.Contains (CSS.Value.TOP)) {  				SetTopOfBorder (cell' key' value' values);  			} else if (key.Contains (CSS.Value.BOTTOM)) {  				SetBottomOfBorder (cell' key' value' values);  			} else if (key.Contains (CSS.Value.LEFT)) {  				SetLeftOfBorder (cell' key' value' values);  			} else if (key.Contains (CSS.Value.RIGHT)) {  				SetRightOfBorder (cell' key' value' values);  			}  		} else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  			if (key.Contains (CSS.Value.TOP)) {  				cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  			} else if (key.Contains (CSS.Value.BOTTOM)) {  				cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  			} else if (key.Contains (CSS.Value.LEFT)) {  				cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  			} else if (key.Contains (CSS.Value.RIGHT)) {  				cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  			}  		} else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  			cell.HorizontalAlignment = CSS.GetElementAlignment (value);  		}  	}  	cell.PaddingLeft = cell.PaddingLeft + values.HorBorderSpacing + values.BorderWidthLeft;  	cell.PaddingRight = cell.PaddingRight + values.BorderWidthRight;  	cell.PaddingTop = cell.PaddingTop + values.VerBorderSpacing + values.BorderWidthTop;  	cell.PaddingBottom = cell.PaddingBottom + values.BorderWidthBottom;  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: foreach (KeyValuePair<String' String> entry in css) {  	String key = entry.Key;  	String value = entry.Value;  	cell.UseBorderPadding = true;  	if (Util.EqualsIgnoreCase (key' CSS.Property.BACKGROUND_COLOR)) {  		values.Background = HtmlUtilities.DecodeColor (value);  	} else if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  		if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  			cell.VerticalAlignment = Element.ALIGN_TOP;  			cell.PaddingTop = cell.PaddingTop + 6;  		} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  			cell.VerticalAlignment = Element.ALIGN_BOTTOM;  			cell.PaddingBottom = cell.PaddingBottom + 6;  		}  	} else if (key.Contains (CSS.Property.BORDER)) {  		if (key.Contains (CSS.Value.TOP)) {  			SetTopOfBorder (cell' key' value' values);  		} else if (key.Contains (CSS.Value.BOTTOM)) {  			SetBottomOfBorder (cell' key' value' values);  		} else if (key.Contains (CSS.Value.LEFT)) {  			SetLeftOfBorder (cell' key' value' values);  		} else if (key.Contains (CSS.Value.RIGHT)) {  			SetRightOfBorder (cell' key' value' values);  		}  	} else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  		if (key.Contains (CSS.Value.TOP)) {  			cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  		} else if (key.Contains (CSS.Value.BOTTOM)) {  			cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  		} else if (key.Contains (CSS.Value.LEFT)) {  			cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  		} else if (key.Contains (CSS.Value.RIGHT)) {  			cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  		}  	} else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  		cell.HorizontalAlignment = CSS.GetElementAlignment (value);  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: foreach (KeyValuePair<String' String> entry in css) {  	String key = entry.Key;  	String value = entry.Value;  	cell.UseBorderPadding = true;  	if (Util.EqualsIgnoreCase (key' CSS.Property.BACKGROUND_COLOR)) {  		values.Background = HtmlUtilities.DecodeColor (value);  	} else if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  		if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  			cell.VerticalAlignment = Element.ALIGN_TOP;  			cell.PaddingTop = cell.PaddingTop + 6;  		} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  			cell.VerticalAlignment = Element.ALIGN_BOTTOM;  			cell.PaddingBottom = cell.PaddingBottom + 6;  		}  	} else if (key.Contains (CSS.Property.BORDER)) {  		if (key.Contains (CSS.Value.TOP)) {  			SetTopOfBorder (cell' key' value' values);  		} else if (key.Contains (CSS.Value.BOTTOM)) {  			SetBottomOfBorder (cell' key' value' values);  		} else if (key.Contains (CSS.Value.LEFT)) {  			SetLeftOfBorder (cell' key' value' values);  		} else if (key.Contains (CSS.Value.RIGHT)) {  			SetRightOfBorder (cell' key' value' values);  		}  	} else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  		if (key.Contains (CSS.Value.TOP)) {  			cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  		} else if (key.Contains (CSS.Value.BOTTOM)) {  			cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  		} else if (key.Contains (CSS.Value.LEFT)) {  			cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  		} else if (key.Contains (CSS.Value.RIGHT)) {  			cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  		}  	} else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  		cell.HorizontalAlignment = CSS.GetElementAlignment (value);  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (key' CSS.Property.BACKGROUND_COLOR)) {  	values.Background = HtmlUtilities.DecodeColor (value);  } else if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  	if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  		cell.VerticalAlignment = Element.ALIGN_TOP;  		cell.PaddingTop = cell.PaddingTop + 6;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  		cell.VerticalAlignment = Element.ALIGN_BOTTOM;  		cell.PaddingBottom = cell.PaddingBottom + 6;  	}  } else if (key.Contains (CSS.Property.BORDER)) {  	if (key.Contains (CSS.Value.TOP)) {  		SetTopOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		SetBottomOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.LEFT)) {  		SetLeftOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		SetRightOfBorder (cell' key' value' values);  	}  } else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  	if (key.Contains (CSS.Value.TOP)) {  		cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.LEFT)) {  		cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  	}  } else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  	cell.HorizontalAlignment = CSS.GetElementAlignment (value);  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (key' CSS.Property.BACKGROUND_COLOR)) {  	values.Background = HtmlUtilities.DecodeColor (value);  } else if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  	if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  		cell.VerticalAlignment = Element.ALIGN_TOP;  		cell.PaddingTop = cell.PaddingTop + 6;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  		cell.VerticalAlignment = Element.ALIGN_BOTTOM;  		cell.PaddingBottom = cell.PaddingBottom + 6;  	}  } else if (key.Contains (CSS.Property.BORDER)) {  	if (key.Contains (CSS.Value.TOP)) {  		SetTopOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		SetBottomOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.LEFT)) {  		SetLeftOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		SetRightOfBorder (cell' key' value' values);  	}  } else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  	if (key.Contains (CSS.Value.TOP)) {  		cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.LEFT)) {  		cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  	}  } else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  	cell.HorizontalAlignment = CSS.GetElementAlignment (value);  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  	if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  		cell.VerticalAlignment = Element.ALIGN_TOP;  		cell.PaddingTop = cell.PaddingTop + 6;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  		cell.VerticalAlignment = Element.ALIGN_BOTTOM;  		cell.PaddingBottom = cell.PaddingBottom + 6;  	}  } else if (key.Contains (CSS.Property.BORDER)) {  	if (key.Contains (CSS.Value.TOP)) {  		SetTopOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		SetBottomOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.LEFT)) {  		SetLeftOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		SetRightOfBorder (cell' key' value' values);  	}  } else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  	if (key.Contains (CSS.Value.TOP)) {  		cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.LEFT)) {  		cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  	}  } else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  	cell.HorizontalAlignment = CSS.GetElementAlignment (value);  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (key' CSS.Property.VERTICAL_ALIGN)) {  	if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  		cell.VerticalAlignment = Element.ALIGN_TOP;  		cell.PaddingTop = cell.PaddingTop + 6;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  		cell.VerticalAlignment = Element.ALIGN_BOTTOM;  		cell.PaddingBottom = cell.PaddingBottom + 6;  	}  } else if (key.Contains (CSS.Property.BORDER)) {  	if (key.Contains (CSS.Value.TOP)) {  		SetTopOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		SetBottomOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.LEFT)) {  		SetLeftOfBorder (cell' key' value' values);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		SetRightOfBorder (cell' key' value' values);  	}  } else if (key.Contains (CSS.Property.CELLPADDING) || key.Contains (CSS.Property.PADDING)) {  	if (key.Contains (CSS.Value.TOP)) {  		cell.PaddingTop = cell.PaddingTop + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.BOTTOM)) {  		cell.PaddingBottom = cell.PaddingBottom + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.LEFT)) {  		cell.PaddingLeft = cell.PaddingLeft + utils.ParsePxInCmMmPcToPt (value);  	} else if (key.Contains (CSS.Value.RIGHT)) {  		cell.PaddingRight = cell.PaddingRight + utils.ParsePxInCmMmPcToPt (value);  	}  } else if (key.Contains (CSS.Property.TEXT_ALIGN)) {  	cell.HorizontalAlignment = CSS.GetElementAlignment (value);  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  	cell.VerticalAlignment = Element.ALIGN_TOP;  	cell.PaddingTop = cell.PaddingTop + 6;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  	cell.VerticalAlignment = Element.ALIGN_BOTTOM;  	cell.PaddingBottom = cell.PaddingBottom + 6;  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.TOP)) {  	cell.VerticalAlignment = Element.ALIGN_TOP;  	cell.PaddingTop = cell.PaddingTop + 6;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  	cell.VerticalAlignment = Element.ALIGN_BOTTOM;  	cell.PaddingBottom = cell.PaddingBottom + 6;  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: cell.PaddingTop = cell.PaddingTop + 6;  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.BOTTOM)) {  	cell.VerticalAlignment = Element.ALIGN_BOTTOM;  	cell.PaddingBottom = cell.PaddingBottom + 6;  }  
Magic Number,iTextSharp.tool.xml.css.apply,HtmlCellCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\HtmlCellCssApplier.cs,Apply,The following statement contains a magic number: cell.PaddingBottom = cell.PaddingBottom + 6;  
Magic Number,iTextSharp.tool.xml.css.apply,LineSeparatorCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\LineSeparatorCssApplier.cs,Apply,The following statement contains a magic number: if (widthStr != null) {  	if (widthStr.Contains ("%")) {  		percentage = float.Parse (widthStr.Replace ("%"' "")' CultureInfo.InvariantCulture);  	} else {  		percentage = (CssUtils.GetInstance ().ParsePxInCmMmPcToPt (widthStr) / psc.PageSize.Width) * 100;  	}  }  
Magic Number,iTextSharp.tool.xml.css.apply,LineSeparatorCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\LineSeparatorCssApplier.cs,Apply,The following statement contains a magic number: if (widthStr.Contains ("%")) {  	percentage = float.Parse (widthStr.Replace ("%"' "")' CultureInfo.InvariantCulture);  } else {  	percentage = (CssUtils.GetInstance ().ParsePxInCmMmPcToPt (widthStr) / psc.PageSize.Width) * 100;  }  
Magic Number,iTextSharp.tool.xml.css.apply,LineSeparatorCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\LineSeparatorCssApplier.cs,Apply,The following statement contains a magic number: percentage = (CssUtils.GetInstance ().ParsePxInCmMmPcToPt (widthStr) / psc.PageSize.Width) * 100;  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (null != styleType) {  	if (Util.EqualsIgnoreCase (styleType' CSS.Value.NONE)) {  		lst.Lettered = false;  		lst.Numbered = false;  		lst.SetListSymbol ("");  	} else if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  		lst = new List (List.ORDERED);  	} else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  		lst = new ZapfDingbatsList (108);  		lst.Autoindent = false;  		lst.SymbolIndent = 7.75f;  		Chunk symbol = lst.Symbol;  		symbol.SetTextRise (1.5f);  		Font font = symbol.Font;  		font.Size = 4.5f;  		font.Color = color;  	} else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  		lst = new ZapfDingbatsList (110);  		ShrinkSymbol (lst' fontSize' color);  	} else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  		lst = new ZapfDingbatsList (109);  		lst.Autoindent = false;  		lst.SymbolIndent = 7.75f;  		Chunk symbol = lst.Symbol;  		symbol.SetTextRise (1.5f);  		Font font = symbol.Font;  		font.Size = 4.5f;  		font.Color = color;  	} else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  		lst = new RomanList (true' 0);  		lst.Autoindent = true;  		SynchronizeSymbol (fontSize' lst' color);  	} else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  		lst = new RomanList (false' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  		lst = new GreekList (true' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  		lst = new GreekList (false' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  		lst = new List (List.ORDERED' List.ALPHABETICAL);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Lowercase = true;  		lst.Autoindent = true;  	} else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  		lst = new List (List.ORDERED' List.ALPHABETICAL);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Lowercase = false;  		lst.Autoindent = true;  	}  } else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.OL)) {  	lst = new List (List.ORDERED);  	String type = null;  	t.Attributes.TryGetValue ("type"' out type);  	if (type != null) {  		if (type.Equals ("A")) {  			lst.Lettered = true;  		} else if (type.Equals ("a")) {  			lst.Lettered = true;  			lst.Lowercase = true;  		}  	}  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.UL)) {  	lst = new List (List.UNORDERED);  	ShrinkSymbol (lst' fontSize' color);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (null != styleType) {  	if (Util.EqualsIgnoreCase (styleType' CSS.Value.NONE)) {  		lst.Lettered = false;  		lst.Numbered = false;  		lst.SetListSymbol ("");  	} else if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  		lst = new List (List.ORDERED);  	} else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  		lst = new ZapfDingbatsList (108);  		lst.Autoindent = false;  		lst.SymbolIndent = 7.75f;  		Chunk symbol = lst.Symbol;  		symbol.SetTextRise (1.5f);  		Font font = symbol.Font;  		font.Size = 4.5f;  		font.Color = color;  	} else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  		lst = new ZapfDingbatsList (110);  		ShrinkSymbol (lst' fontSize' color);  	} else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  		lst = new ZapfDingbatsList (109);  		lst.Autoindent = false;  		lst.SymbolIndent = 7.75f;  		Chunk symbol = lst.Symbol;  		symbol.SetTextRise (1.5f);  		Font font = symbol.Font;  		font.Size = 4.5f;  		font.Color = color;  	} else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  		lst = new RomanList (true' 0);  		lst.Autoindent = true;  		SynchronizeSymbol (fontSize' lst' color);  	} else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  		lst = new RomanList (false' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  		lst = new GreekList (true' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  		lst = new GreekList (false' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  		lst = new List (List.ORDERED' List.ALPHABETICAL);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Lowercase = true;  		lst.Autoindent = true;  	} else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  		lst = new List (List.ORDERED' List.ALPHABETICAL);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Lowercase = false;  		lst.Autoindent = true;  	}  } else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.OL)) {  	lst = new List (List.ORDERED);  	String type = null;  	t.Attributes.TryGetValue ("type"' out type);  	if (type != null) {  		if (type.Equals ("A")) {  			lst.Lettered = true;  		} else if (type.Equals ("a")) {  			lst.Lettered = true;  			lst.Lowercase = true;  		}  	}  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.UL)) {  	lst = new List (List.UNORDERED);  	ShrinkSymbol (lst' fontSize' color);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (null != styleType) {  	if (Util.EqualsIgnoreCase (styleType' CSS.Value.NONE)) {  		lst.Lettered = false;  		lst.Numbered = false;  		lst.SetListSymbol ("");  	} else if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  		lst = new List (List.ORDERED);  	} else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  		lst = new ZapfDingbatsList (108);  		lst.Autoindent = false;  		lst.SymbolIndent = 7.75f;  		Chunk symbol = lst.Symbol;  		symbol.SetTextRise (1.5f);  		Font font = symbol.Font;  		font.Size = 4.5f;  		font.Color = color;  	} else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  		lst = new ZapfDingbatsList (110);  		ShrinkSymbol (lst' fontSize' color);  	} else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  		lst = new ZapfDingbatsList (109);  		lst.Autoindent = false;  		lst.SymbolIndent = 7.75f;  		Chunk symbol = lst.Symbol;  		symbol.SetTextRise (1.5f);  		Font font = symbol.Font;  		font.Size = 4.5f;  		font.Color = color;  	} else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  		lst = new RomanList (true' 0);  		lst.Autoindent = true;  		SynchronizeSymbol (fontSize' lst' color);  	} else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  		lst = new RomanList (false' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  		lst = new GreekList (true' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  		lst = new GreekList (false' 0);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Autoindent = true;  	} else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  		lst = new List (List.ORDERED' List.ALPHABETICAL);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Lowercase = true;  		lst.Autoindent = true;  	} else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  		lst = new List (List.ORDERED' List.ALPHABETICAL);  		SynchronizeSymbol (fontSize' lst' color);  		lst.Lowercase = false;  		lst.Autoindent = true;  	}  } else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.OL)) {  	lst = new List (List.ORDERED);  	String type = null;  	t.Attributes.TryGetValue ("type"' out type);  	if (type != null) {  		if (type.Equals ("A")) {  			lst.Lettered = true;  		} else if (type.Equals ("a")) {  			lst.Lettered = true;  			lst.Lowercase = true;  		}  	}  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (Util.EqualsIgnoreCase (t.Name' HTML.Tag.UL)) {  	lst = new List (List.UNORDERED);  	ShrinkSymbol (lst' fontSize' color);  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (styleType' CSS.Value.NONE)) {  	lst.Lettered = false;  	lst.Numbered = false;  	lst.SetListSymbol ("");  } else if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  	lst = new List (List.ORDERED);  } else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (styleType' CSS.Value.NONE)) {  	lst.Lettered = false;  	lst.Numbered = false;  	lst.SetListSymbol ("");  } else if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  	lst = new List (List.ORDERED);  } else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (styleType' CSS.Value.NONE)) {  	lst.Lettered = false;  	lst.Numbered = false;  	lst.SetListSymbol ("");  } else if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  	lst = new List (List.ORDERED);  } else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  	lst = new List (List.ORDERED);  } else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  	lst = new List (List.ORDERED);  } else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.DECIMAL' styleType)) {  	lst = new List (List.ORDERED);  } else if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.DISC' styleType)) {  	lst = new ZapfDingbatsList (108);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: lst = new ZapfDingbatsList (108);  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.SQUARE' styleType)) {  	lst = new ZapfDingbatsList (110);  	ShrinkSymbol (lst' fontSize' color);  } else if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: lst = new ZapfDingbatsList (110);  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (Util.EqualsIgnoreCase (CSS.Value.CIRCLE' styleType)) {  	lst = new ZapfDingbatsList (109);  	lst.Autoindent = false;  	lst.SymbolIndent = 7.75f;  	Chunk symbol = lst.Symbol;  	symbol.SetTextRise (1.5f);  	Font font = symbol.Font;  	font.Size = 4.5f;  	font.Color = color;  } else if (CSS.Value.LOWER_ROMAN.Equals (styleType)) {  	lst = new RomanList (true' 0);  	lst.Autoindent = true;  	SynchronizeSymbol (fontSize' lst' color);  } else if (CSS.Value.UPPER_ROMAN.Equals (styleType)) {  	lst = new RomanList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_GREEK.Equals (styleType)) {  	lst = new GreekList (true' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_GREEK.Equals (styleType)) {  	lst = new GreekList (false' 0);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Autoindent = true;  } else if (CSS.Value.LOWER_ALPHA.Equals (styleType) || CSS.Value.LOWER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = true;  	lst.Autoindent = true;  } else if (CSS.Value.UPPER_ALPHA.Equals (styleType) || CSS.Value.UPPER_LATIN.Equals (styleType)) {  	lst = new List (List.ORDERED' List.ALPHABETICAL);  	SynchronizeSymbol (fontSize' lst' color);  	lst.Lowercase = false;  	lst.Autoindent = true;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: lst = new ZapfDingbatsList (109);  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (css.ContainsKey (CSS.Property.LIST_STYLE_POSITION) && Util.EqualsIgnoreCase (css [CSS.Property.LIST_STYLE_POSITION]' CSS.Value.INSIDE)) {  	leftIndent += 30;  } else {  	leftIndent += 15;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: if (css.ContainsKey (CSS.Property.LIST_STYLE_POSITION) && Util.EqualsIgnoreCase (css [CSS.Property.LIST_STYLE_POSITION]' CSS.Value.INSIDE)) {  	leftIndent += 30;  } else {  	leftIndent += 15;  }  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: leftIndent += 30;  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,Apply,The following statement contains a magic number: leftIndent += 15;  
Magic Number,iTextSharp.tool.xml.css.apply,ListStyleTypeCssApplier,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\apply\ListStyleTypeCssApplier.cs,ShrinkSymbol,The following statement contains a magic number: lst.SymbolIndent = 12;  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 1) {  	String value = props [0];  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = value;  		map [string.Format (_0_BOTTOM_1' pre' post)] = value;  		map [string.Format (_0_RIGHT_1' pre' post)] = value;  		map [string.Format (_0_LEFT_1' pre' post)] = value;  	} else {  		map [string.Format (preKey + "{0}"' post)] = value;  	}  } else if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 1) {  	String value = props [0];  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = value;  		map [string.Format (_0_BOTTOM_1' pre' post)] = value;  		map [string.Format (_0_RIGHT_1' pre' post)] = value;  		map [string.Format (_0_LEFT_1' pre' post)] = value;  	} else {  		map [string.Format (preKey + "{0}"' post)] = value;  	}  } else if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 1) {  	String value = props [0];  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = value;  		map [string.Format (_0_BOTTOM_1' pre' post)] = value;  		map [string.Format (_0_RIGHT_1' pre' post)] = value;  		map [string.Format (_0_LEFT_1' pre' post)] = value;  	} else {  		map [string.Format (preKey + "{0}"' post)] = value;  	}  } else if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 1) {  	String value = props [0];  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = value;  		map [string.Format (_0_BOTTOM_1' pre' post)] = value;  		map [string.Format (_0_RIGHT_1' pre' post)] = value;  		map [string.Format (_0_LEFT_1' pre' post)] = value;  	} else {  		map [string.Format (preKey + "{0}"' post)] = value;  	}  } else if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 1) {  	String value = props [0];  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = value;  		map [string.Format (_0_BOTTOM_1' pre' post)] = value;  		map [string.Format (_0_RIGHT_1' pre' post)] = value;  		map [string.Format (_0_LEFT_1' pre' post)] = value;  	} else {  		map [string.Format (preKey + "{0}"' post)] = value;  	}  } else if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 1) {  	String value = props [0];  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = value;  		map [string.Format (_0_BOTTOM_1' pre' post)] = value;  		map [string.Format (_0_RIGHT_1' pre' post)] = value;  		map [string.Format (_0_LEFT_1' pre' post)] = value;  	} else {  		map [string.Format (preKey + "{0}"' post)] = value;  	}  } else if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 2) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [0];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 3) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [1];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  } else if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (preKey == null) {  	map [string.Format (_0_TOP_1' pre' post)] = props [0];  	map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  	map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  	map [string.Format (_0_LEFT_1' pre' post)] = props [1];  } else {  	map [string.Format (preKey + "{0}"' post)] = props [0];  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (length == 4) {  	if (preKey == null) {  		map [string.Format (_0_TOP_1' pre' post)] = props [0];  		map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  		map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  		map [string.Format (_0_LEFT_1' pre' post)] = props [3];  	} else {  		map [string.Format (preKey + "{0}"' post)] = props [0];  	}  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (preKey == null) {  	map [string.Format (_0_TOP_1' pre' post)] = props [0];  	map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  	map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  	map [string.Format (_0_LEFT_1' pre' post)] = props [3];  } else {  	map [string.Format (preKey + "{0}"' post)] = props [0];  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: if (preKey == null) {  	map [string.Format (_0_TOP_1' pre' post)] = props [0];  	map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  	map [string.Format (_0_RIGHT_1' pre' post)] = props [1];  	map [string.Format (_0_LEFT_1' pre' post)] = props [3];  } else {  	map [string.Format (preKey + "{0}"' post)] = props [0];  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: map [string.Format (_0_BOTTOM_1' pre' post)] = props [2];  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseBoxValues,The following statement contains a magic number: map [string.Format (_0_LEFT_1' pre' post)] = props [3];  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseRelativeValue,The following statement contains a magic number: if (unit.StartsWith ("%")) {  	f = baseValue * f / 100;  } else if (unit.StartsWith ("em")) {  	f = baseValue * f;  } else if (unit.Contains ("ex")) {  	f = baseValue * f / 2;  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseRelativeValue,The following statement contains a magic number: if (unit.StartsWith ("%")) {  	f = baseValue * f / 100;  } else if (unit.StartsWith ("em")) {  	f = baseValue * f;  } else if (unit.Contains ("ex")) {  	f = baseValue * f / 2;  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseRelativeValue,The following statement contains a magic number: f = baseValue * f / 100;  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseRelativeValue,The following statement contains a magic number: if (unit.StartsWith ("em")) {  	f = baseValue * f;  } else if (unit.Contains ("ex")) {  	f = baseValue * f / 2;  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseRelativeValue,The following statement contains a magic number: if (unit.Contains ("ex")) {  	f = baseValue * f / 2;  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ParseRelativeValue,The following statement contains a magic number: f = baseValue * f / 2;  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,ExtractUrl,The following statement contains a magic number: if (url.StartsWith ("url")) {  	String urlString = url.Substring (3).Trim ().Replace ("("' "").Replace (")"' "").Trim ();  	if (urlString.StartsWith ("'") && urlString.EndsWith ("'")) {  		int st = urlString.IndexOf ("'") + 1;  		str = urlString.Substring (st' urlString.LastIndexOf ("'") - st);  	} else if (urlString.StartsWith ("\"") && urlString.EndsWith ("\"")) {  		int st = urlString.IndexOf ('"') + 1;  		str = urlString.Substring (st' urlString.LastIndexOf ('"') - st);  	} else {  		str = urlString;  	}  } else {  	// assume it's an url without url  	str = url;  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,TrimAndRemoveQuoutes,The following statement contains a magic number: if ((s.StartsWith ("\"") || s.StartsWith ("'")) && s.EndsWith ("\"") || s.EndsWith ("'")) {  	s = s.Substring (1' s.Length - 2);  }  
Magic Number,iTextSharp.tool.xml.css,CssUtils,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\CssUtils.cs,TrimAndRemoveQuoutes,The following statement contains a magic number: s = s.Substring (1' s.Length - 2);  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.CSS.ContainsKey (CSS.Property.FONT_SIZE)) {  	String value = tag.CSS [CSS.Property.FONT_SIZE];  	if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  		size = 6.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  		size = 7.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  		size = 9.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  		size = 12f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  		size = 13.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  		size = 18f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  		size = 24f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 9.75f;  			} else if (parentSize <= 6.75f) {  				size = parentSize - 1;  			} else if (parentSize == 7.5f) {  				size = 6.75f;  			} else if (parentSize == 9.75f) {  				size = 7.5f;  			} else if (parentSize == 12f) {  				size = 9.75f;  			} else if (parentSize == 13.5f) {  				size = 12f;  			} else if (parentSize == 18f) {  				size = 13.5f;  			} else if (parentSize == 24f) {  				size = 18f;  			} else if (parentSize < 24f) {  				size = parentSize * 0.85f;  			} else if (parentSize >= 24) {  				size = parentSize * 2 / 3;  			}  		} else {  			size = 9.75f;  		}  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 13.5f;  			} else if (parentSize == 6.75f) {  				size = 7.5f;  			} else if (parentSize == 7.5f) {  				size = 9.75f;  			} else if (parentSize == 9.75f) {  				size = 12f;  			} else if (parentSize == 12f) {  				size = 13.5f;  			} else if (parentSize == 13.5f) {  				size = 18f;  			} else if (parentSize == 18f) {  				size = 24f;  			} else {  				size = parentSize * 1.5f;  			}  		} else {  			size = 13.5f;  		}  	} else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  		size = utils.ParsePxInCmMmPcToPt (value);  	} else if (utils.IsRelativeValue (value)) {  		float baseValue = Font.UNDEFINED;  		if (tag.Parent != null) {  			baseValue = GetFontSize (tag.Parent);  		}  		if (baseValue == Font.UNDEFINED) {  			baseValue = 12;  		}  		size = utils.ParseRelativeValue (value' baseValue);  	}  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.CSS.ContainsKey (CSS.Property.FONT_SIZE)) {  	String value = tag.CSS [CSS.Property.FONT_SIZE];  	if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  		size = 6.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  		size = 7.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  		size = 9.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  		size = 12f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  		size = 13.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  		size = 18f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  		size = 24f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 9.75f;  			} else if (parentSize <= 6.75f) {  				size = parentSize - 1;  			} else if (parentSize == 7.5f) {  				size = 6.75f;  			} else if (parentSize == 9.75f) {  				size = 7.5f;  			} else if (parentSize == 12f) {  				size = 9.75f;  			} else if (parentSize == 13.5f) {  				size = 12f;  			} else if (parentSize == 18f) {  				size = 13.5f;  			} else if (parentSize == 24f) {  				size = 18f;  			} else if (parentSize < 24f) {  				size = parentSize * 0.85f;  			} else if (parentSize >= 24) {  				size = parentSize * 2 / 3;  			}  		} else {  			size = 9.75f;  		}  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 13.5f;  			} else if (parentSize == 6.75f) {  				size = 7.5f;  			} else if (parentSize == 7.5f) {  				size = 9.75f;  			} else if (parentSize == 9.75f) {  				size = 12f;  			} else if (parentSize == 12f) {  				size = 13.5f;  			} else if (parentSize == 13.5f) {  				size = 18f;  			} else if (parentSize == 18f) {  				size = 24f;  			} else {  				size = parentSize * 1.5f;  			}  		} else {  			size = 13.5f;  		}  	} else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  		size = utils.ParsePxInCmMmPcToPt (value);  	} else if (utils.IsRelativeValue (value)) {  		float baseValue = Font.UNDEFINED;  		if (tag.Parent != null) {  			baseValue = GetFontSize (tag.Parent);  		}  		if (baseValue == Font.UNDEFINED) {  			baseValue = 12;  		}  		size = utils.ParseRelativeValue (value' baseValue);  	}  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.CSS.ContainsKey (CSS.Property.FONT_SIZE)) {  	String value = tag.CSS [CSS.Property.FONT_SIZE];  	if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  		size = 6.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  		size = 7.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  		size = 9.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  		size = 12f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  		size = 13.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  		size = 18f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  		size = 24f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 9.75f;  			} else if (parentSize <= 6.75f) {  				size = parentSize - 1;  			} else if (parentSize == 7.5f) {  				size = 6.75f;  			} else if (parentSize == 9.75f) {  				size = 7.5f;  			} else if (parentSize == 12f) {  				size = 9.75f;  			} else if (parentSize == 13.5f) {  				size = 12f;  			} else if (parentSize == 18f) {  				size = 13.5f;  			} else if (parentSize == 24f) {  				size = 18f;  			} else if (parentSize < 24f) {  				size = parentSize * 0.85f;  			} else if (parentSize >= 24) {  				size = parentSize * 2 / 3;  			}  		} else {  			size = 9.75f;  		}  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 13.5f;  			} else if (parentSize == 6.75f) {  				size = 7.5f;  			} else if (parentSize == 7.5f) {  				size = 9.75f;  			} else if (parentSize == 9.75f) {  				size = 12f;  			} else if (parentSize == 12f) {  				size = 13.5f;  			} else if (parentSize == 13.5f) {  				size = 18f;  			} else if (parentSize == 18f) {  				size = 24f;  			} else {  				size = parentSize * 1.5f;  			}  		} else {  			size = 13.5f;  		}  	} else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  		size = utils.ParsePxInCmMmPcToPt (value);  	} else if (utils.IsRelativeValue (value)) {  		float baseValue = Font.UNDEFINED;  		if (tag.Parent != null) {  			baseValue = GetFontSize (tag.Parent);  		}  		if (baseValue == Font.UNDEFINED) {  			baseValue = 12;  		}  		size = utils.ParseRelativeValue (value' baseValue);  	}  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.CSS.ContainsKey (CSS.Property.FONT_SIZE)) {  	String value = tag.CSS [CSS.Property.FONT_SIZE];  	if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  		size = 6.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  		size = 7.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  		size = 9.75f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  		size = 12f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  		size = 13.5f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  		size = 18f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  		size = 24f;  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 9.75f;  			} else if (parentSize <= 6.75f) {  				size = parentSize - 1;  			} else if (parentSize == 7.5f) {  				size = 6.75f;  			} else if (parentSize == 9.75f) {  				size = 7.5f;  			} else if (parentSize == 12f) {  				size = 9.75f;  			} else if (parentSize == 13.5f) {  				size = 12f;  			} else if (parentSize == 18f) {  				size = 13.5f;  			} else if (parentSize == 24f) {  				size = 18f;  			} else if (parentSize < 24f) {  				size = parentSize * 0.85f;  			} else if (parentSize >= 24) {  				size = parentSize * 2 / 3;  			}  		} else {  			size = 9.75f;  		}  	} else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  		if (tag.Parent != null) {  			float parentSize = GetFontSize (tag.Parent);  			// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  			if (parentSize == Font.UNDEFINED) {  				size = 13.5f;  			} else if (parentSize == 6.75f) {  				size = 7.5f;  			} else if (parentSize == 7.5f) {  				size = 9.75f;  			} else if (parentSize == 9.75f) {  				size = 12f;  			} else if (parentSize == 12f) {  				size = 13.5f;  			} else if (parentSize == 13.5f) {  				size = 18f;  			} else if (parentSize == 18f) {  				size = 24f;  			} else {  				size = parentSize * 1.5f;  			}  		} else {  			size = 13.5f;  		}  	} else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  		size = utils.ParsePxInCmMmPcToPt (value);  	} else if (utils.IsRelativeValue (value)) {  		float baseValue = Font.UNDEFINED;  		if (tag.Parent != null) {  			baseValue = GetFontSize (tag.Parent);  		}  		if (baseValue == Font.UNDEFINED) {  			baseValue = 12;  		}  		size = utils.ParseRelativeValue (value' baseValue);  	}  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  	size = 6.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  	size = 6.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  	size = 6.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_SMALL)) {  	size = 6.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_SMALL)) {  	size = 7.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALL)) {  	size = 9.75f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.MEDIUM)) {  	size = 12f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.LARGE)) {  	size = 13.5f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.X_LARGE)) {  	size = 18f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.XX_LARGE)) {  	size = 24f;  } else if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.SMALLER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 9.75f;  		} else if (parentSize <= 6.75f) {  			size = parentSize - 1;  		} else if (parentSize == 7.5f) {  			size = 6.75f;  		} else if (parentSize == 9.75f) {  			size = 7.5f;  		} else if (parentSize == 12f) {  			size = 9.75f;  		} else if (parentSize == 13.5f) {  			size = 12f;  		} else if (parentSize == 18f) {  			size = 13.5f;  		} else if (parentSize == 24f) {  			size = 18f;  		} else if (parentSize < 24f) {  			size = parentSize * 0.85f;  		} else if (parentSize >= 24) {  			size = parentSize * 2 / 3;  		}  	} else {  		size = 9.75f;  	}  } else if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.Parent != null) {  	float parentSize = GetFontSize (tag.Parent);  	// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  	if (parentSize == Font.UNDEFINED) {  		size = 9.75f;  	} else if (parentSize <= 6.75f) {  		size = parentSize - 1;  	} else if (parentSize == 7.5f) {  		size = 6.75f;  	} else if (parentSize == 9.75f) {  		size = 7.5f;  	} else if (parentSize == 12f) {  		size = 9.75f;  	} else if (parentSize == 13.5f) {  		size = 12f;  	} else if (parentSize == 18f) {  		size = 13.5f;  	} else if (parentSize == 24f) {  		size = 18f;  	} else if (parentSize < 24f) {  		size = parentSize * 0.85f;  	} else if (parentSize >= 24) {  		size = parentSize * 2 / 3;  	}  } else {  	size = 9.75f;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.Parent != null) {  	float parentSize = GetFontSize (tag.Parent);  	// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  	if (parentSize == Font.UNDEFINED) {  		size = 9.75f;  	} else if (parentSize <= 6.75f) {  		size = parentSize - 1;  	} else if (parentSize == 7.5f) {  		size = 6.75f;  	} else if (parentSize == 9.75f) {  		size = 7.5f;  	} else if (parentSize == 12f) {  		size = 9.75f;  	} else if (parentSize == 13.5f) {  		size = 12f;  	} else if (parentSize == 18f) {  		size = 13.5f;  	} else if (parentSize == 24f) {  		size = 18f;  	} else if (parentSize < 24f) {  		size = parentSize * 0.85f;  	} else if (parentSize >= 24) {  		size = parentSize * 2 / 3;  	}  } else {  	size = 9.75f;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (tag.Parent != null) {  	float parentSize = GetFontSize (tag.Parent);  	// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  	if (parentSize == Font.UNDEFINED) {  		size = 9.75f;  	} else if (parentSize <= 6.75f) {  		size = parentSize - 1;  	} else if (parentSize == 7.5f) {  		size = 6.75f;  	} else if (parentSize == 9.75f) {  		size = 7.5f;  	} else if (parentSize == 12f) {  		size = 9.75f;  	} else if (parentSize == 13.5f) {  		size = 12f;  	} else if (parentSize == 18f) {  		size = 13.5f;  	} else if (parentSize == 24f) {  		size = 18f;  	} else if (parentSize < 24f) {  		size = parentSize * 0.85f;  	} else if (parentSize >= 24) {  		size = parentSize * 2 / 3;  	}  } else {  	size = 9.75f;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == Font.UNDEFINED) {  	size = 9.75f;  } else if (parentSize <= 6.75f) {  	size = parentSize - 1;  } else if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == Font.UNDEFINED) {  	size = 9.75f;  } else if (parentSize <= 6.75f) {  	size = parentSize - 1;  } else if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == Font.UNDEFINED) {  	size = 9.75f;  } else if (parentSize <= 6.75f) {  	size = parentSize - 1;  } else if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize <= 6.75f) {  	size = parentSize - 1;  } else if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize <= 6.75f) {  	size = parentSize - 1;  } else if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize <= 6.75f) {  	size = parentSize - 1;  } else if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 7.5f) {  	size = 6.75f;  } else if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 9.75f) {  	size = 7.5f;  } else if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 12f) {  	size = 9.75f;  } else if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 13.5f) {  	size = 12f;  } else if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 18f) {  	size = 13.5f;  } else if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize == 24f) {  	size = 18f;  } else if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize < 24f) {  	size = parentSize * 0.85f;  } else if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (parentSize >= 24) {  	size = parentSize * 2 / 3;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: size = parentSize * 2 / 3;  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: size = parentSize * 2 / 3;  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (Util.EqualsIgnoreCase (value' CSS.Value.LARGER)) {  	if (tag.Parent != null) {  		float parentSize = GetFontSize (tag.Parent);  		// if the font-size of the parent can be set in some memory the translation part is not needed anymore.  		if (parentSize == Font.UNDEFINED) {  			size = 13.5f;  		} else if (parentSize == 6.75f) {  			size = 7.5f;  		} else if (parentSize == 7.5f) {  			size = 9.75f;  		} else if (parentSize == 9.75f) {  			size = 12f;  		} else if (parentSize == 12f) {  			size = 13.5f;  		} else if (parentSize == 13.5f) {  			size = 18f;  		} else if (parentSize == 18f) {  			size = 24f;  		} else {  			size = parentSize * 1.5f;  		}  	} else {  		size = 13.5f;  	}  } else if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (utils.IsMetricValue (value) || utils.IsNumericValue (value)) {  	size = utils.ParsePxInCmMmPcToPt (value);  } else if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (utils.IsRelativeValue (value)) {  	float baseValue = Font.UNDEFINED;  	if (tag.Parent != null) {  		baseValue = GetFontSize (tag.Parent);  	}  	if (baseValue == Font.UNDEFINED) {  		baseValue = 12;  	}  	size = utils.ParseRelativeValue (value' baseValue);  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: if (baseValue == Font.UNDEFINED) {  	baseValue = 12;  }  
Magic Number,iTextSharp.tool.xml.css,FontSizeTranslator,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\FontSizeTranslator.cs,TranslateFontSize,The following statement contains a magic number: baseValue = 12;  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: if (null != t.Attributes && t.Attributes.Count != 0) {  	if (t.Attributes.ContainsKey (HTML.Attribute.CELLPADDING)) {  		CssUtils.MapPutAll (tagCss' utils.ParseBoxValues (t.Attributes [HTML.Attribute.CELLPADDING]' "cellpadding-"' ""));  	}  	if (t.Attributes.ContainsKey (HTML.Attribute.CELLSPACING)) {  		CssUtils.MapPutAll (tagCss' utils.ParseBoxValues (t.Attributes [HTML.Attribute.CELLSPACING]' "cellspacing-"' ""));  	}  	String styleAtt;  	t.Attributes.TryGetValue (HTML.Attribute.STYLE' out styleAtt);  	if (!string.IsNullOrEmpty (styleAtt)) {  		Dictionary<String' String> tagAttrCss = new Dictionary<string' string> ();  		String[] styles = styleAtt.Split (';');  		foreach (String s in styles) {  			String[] part = s.Split (splitColon' 2);  			if (part.Length == 2) {  				String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  				String value = utils.StripDoubleSpacesAndTrim (part [1]);  				SplitRules (tagAttrCss' key' value);  			}  		}  		foreach (KeyValuePair<String' String> e in tagAttrCss) {  			tagCss [e.Key] = e.Value;  		}  	}  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: if (null != t.Attributes && t.Attributes.Count != 0) {  	if (t.Attributes.ContainsKey (HTML.Attribute.CELLPADDING)) {  		CssUtils.MapPutAll (tagCss' utils.ParseBoxValues (t.Attributes [HTML.Attribute.CELLPADDING]' "cellpadding-"' ""));  	}  	if (t.Attributes.ContainsKey (HTML.Attribute.CELLSPACING)) {  		CssUtils.MapPutAll (tagCss' utils.ParseBoxValues (t.Attributes [HTML.Attribute.CELLSPACING]' "cellspacing-"' ""));  	}  	String styleAtt;  	t.Attributes.TryGetValue (HTML.Attribute.STYLE' out styleAtt);  	if (!string.IsNullOrEmpty (styleAtt)) {  		Dictionary<String' String> tagAttrCss = new Dictionary<string' string> ();  		String[] styles = styleAtt.Split (';');  		foreach (String s in styles) {  			String[] part = s.Split (splitColon' 2);  			if (part.Length == 2) {  				String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  				String value = utils.StripDoubleSpacesAndTrim (part [1]);  				SplitRules (tagAttrCss' key' value);  			}  		}  		foreach (KeyValuePair<String' String> e in tagAttrCss) {  			tagCss [e.Key] = e.Value;  		}  	}  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: if (!string.IsNullOrEmpty (styleAtt)) {  	Dictionary<String' String> tagAttrCss = new Dictionary<string' string> ();  	String[] styles = styleAtt.Split (';');  	foreach (String s in styles) {  		String[] part = s.Split (splitColon' 2);  		if (part.Length == 2) {  			String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  			String value = utils.StripDoubleSpacesAndTrim (part [1]);  			SplitRules (tagAttrCss' key' value);  		}  	}  	foreach (KeyValuePair<String' String> e in tagAttrCss) {  		tagCss [e.Key] = e.Value;  	}  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: if (!string.IsNullOrEmpty (styleAtt)) {  	Dictionary<String' String> tagAttrCss = new Dictionary<string' string> ();  	String[] styles = styleAtt.Split (';');  	foreach (String s in styles) {  		String[] part = s.Split (splitColon' 2);  		if (part.Length == 2) {  			String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  			String value = utils.StripDoubleSpacesAndTrim (part [1]);  			SplitRules (tagAttrCss' key' value);  		}  	}  	foreach (KeyValuePair<String' String> e in tagAttrCss) {  		tagCss [e.Key] = e.Value;  	}  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: foreach (String s in styles) {  	String[] part = s.Split (splitColon' 2);  	if (part.Length == 2) {  		String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  		String value = utils.StripDoubleSpacesAndTrim (part [1]);  		SplitRules (tagAttrCss' key' value);  	}  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: foreach (String s in styles) {  	String[] part = s.Split (splitColon' 2);  	if (part.Length == 2) {  		String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  		String value = utils.StripDoubleSpacesAndTrim (part [1]);  		SplitRules (tagAttrCss' key' value);  	}  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,ResolveStyles,The following statement contains a magic number: if (part.Length == 2) {  	String key = utils.StripDoubleSpacesTrimAndToLowerCase (part [0]);  	String value = utils.StripDoubleSpacesAndTrim (part [1]);  	SplitRules (tagAttrCss' key' value);  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,AddCss,The following statement contains a magic number: try {  	retrieve.ProcessFromStream (new MemoryStream (Encoding.GetEncoding (1252).GetBytes (content))' proc);  	ICssFile css = proc.GetCss ();  	css.IsPersistent (isPersistent);  	this.cssFiles.Add (css);  } catch (IOException e) {  	throw new CssResolverException (e);  }  
Magic Number,iTextSharp.tool.xml.css,StyleAttrCSSResolver,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\StyleAttrCSSResolver.cs,AddCss,The following statement contains a magic number: retrieve.ProcessFromStream (new MemoryStream (Encoding.GetEncoding (1252).GetBytes (content))' proc);  
Magic Number,iTextSharp.tool.xml.css.parser,CssStateController,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\parser\CssStateController.cs,ProcessProps,The following statement contains a magic number: foreach (String prop in split) {  	String[] propSplit = prop.Split (':');  	if (propSplit.Length == 2) {  		map [utils.StripDoubleSpacesTrimAndToLowerCase (propSplit [0])] = utils.StripDoubleSpacesAndTrim (propSplit [1]);  	}  }  
Magic Number,iTextSharp.tool.xml.css.parser,CssStateController,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\css\parser\CssStateController.cs,ProcessProps,The following statement contains a magic number: if (propSplit.Length == 2) {  	map [utils.StripDoubleSpacesTrimAndToLowerCase (propSplit [0])] = utils.StripDoubleSpacesAndTrim (propSplit [1]);  }  
Magic Number,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,Text,The following statement contains a magic number: if (text.StartsWith ("<![CDATA[") && text.EndsWith ("]]>")) {  	if (IgnoreCdata ())  		return;  	else  		text = text.Substring (9' text.Length - 12);  }  
Magic Number,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,Text,The following statement contains a magic number: if (text.StartsWith ("<![CDATA[") && text.EndsWith ("]]>")) {  	if (IgnoreCdata ())  		return;  	else  		text = text.Substring (9' text.Length - 12);  }  
Magic Number,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,Text,The following statement contains a magic number: if (IgnoreCdata ())  	return;  else  	text = text.Substring (9' text.Length - 12);  
Magic Number,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,Text,The following statement contains a magic number: if (IgnoreCdata ())  	return;  else  	text = text.Substring (9' text.Length - 12);  
Magic Number,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,Text,The following statement contains a magic number: text = text.Substring (9' text.Length - 12);  
Magic Number,iTextSharp.tool.xml,XMLWorker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\XMLWorker.cs,Text,The following statement contains a magic number: text = text.Substring (9' text.Length - 12);  
Magic Number,iTextSharp.tool.xml.html,AbstractTagProcessor,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\AbstractTagProcessor.cs,StartElement,The following statement contains a magic number: if (null != pagebreak && Util.EqualsIgnoreCase (CSS.Value.ALWAYS' pagebreak)) {  	List<IElement> list = new List<IElement> (2);  	list.Add (Chunk.NEXTPAGE);  	list.AddRange (Start (ctx' tag));  	return list;  }  
Magic Number,iTextSharp.tool.xml.html,Header,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Header.cs,getHeaderRole,The following statement contains a magic number: switch (level) {  case 1:  	return PdfName.H1;  case 2:  	return PdfName.H2;  case 3:  	return PdfName.H3;  case 4:  	return PdfName.H4;  case 5:  	return PdfName.H5;  case 6:  	return PdfName.H6;  }  
Magic Number,iTextSharp.tool.xml.html,Header,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Header.cs,getHeaderRole,The following statement contains a magic number: switch (level) {  case 1:  	return PdfName.H1;  case 2:  	return PdfName.H2;  case 3:  	return PdfName.H3;  case 4:  	return PdfName.H4;  case 5:  	return PdfName.H5;  case 6:  	return PdfName.H6;  }  
Magic Number,iTextSharp.tool.xml.html,Header,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Header.cs,getHeaderRole,The following statement contains a magic number: switch (level) {  case 1:  	return PdfName.H1;  case 2:  	return PdfName.H2;  case 3:  	return PdfName.H3;  case 4:  	return PdfName.H4;  case 5:  	return PdfName.H5;  case 6:  	return PdfName.H6;  }  
Magic Number,iTextSharp.tool.xml.html,Header,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Header.cs,getHeaderRole,The following statement contains a magic number: switch (level) {  case 1:  	return PdfName.H1;  case 2:  	return PdfName.H2;  case 3:  	return PdfName.H3;  case 4:  	return PdfName.H4;  case 5:  	return PdfName.H5;  case 6:  	return PdfName.H6;  }  
Magic Number,iTextSharp.tool.xml.html,Header,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Header.cs,getHeaderRole,The following statement contains a magic number: switch (level) {  case 1:  	return PdfName.H1;  case 2:  	return PdfName.H2;  case 3:  	return PdfName.H3;  case 4:  	return PdfName.H4;  case 5:  	return PdfName.H5;  case 6:  	return PdfName.H6;  }  
Magic Number,iTextSharp.tool.xml.html,HorizontalRule,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\HorizontalRule.cs,Start,The following statement contains a magic number: try {  	IList<IElement> list = new List<IElement> ();  	HtmlPipelineContext htmlPipelineContext = GetHtmlPipelineContext (ctx);  	LineSeparator lineSeparator = (LineSeparator)GetCssAppliers ().Apply (new LineSeparator ()' tag' htmlPipelineContext);  	Paragraph p = new Paragraph ();  	IDictionary<String' String> css = tag.CSS;  	float fontSize = 12;  	if (css.ContainsKey (CSS.Property.FONT_SIZE)) {  		fontSize = CssUtils.GetInstance ().ParsePxInCmMmPcToPt (css [CSS.Property.FONT_SIZE]);  	}  	String marginTop;  	css.TryGetValue (CSS.Property.MARGIN_TOP' out marginTop);  	if (marginTop == null) {  		marginTop = "0.5em";  	}  	String marginBottom;  	css.TryGetValue (CSS.Property.MARGIN_BOTTOM' out marginBottom);  	if (marginBottom == null) {  		marginBottom = "0.5em";  	}  	p.SpacingBefore = p.SpacingBefore + CssUtils.GetInstance ().ParseValueToPt (marginTop' fontSize);  	p.SpacingAfter = p.SpacingAfter + CssUtils.GetInstance ().ParseValueToPt (marginBottom' fontSize);  	p.Leading = 0;  	p.Add (lineSeparator);  	list.Add (p);  	return list;  } catch (NoCustomContextException e) {  	throw new RuntimeWorkerException (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.NO_CUSTOM_CONTEXT)' e);  }  
Magic Number,iTextSharp.tool.xml.html,OrderedUnorderedListItem,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedListItem.cs,End,The following statement contains a magic number: foreach (IElement e in currentContent) {  	li.Add (e);  	//finding max leading among list item elements  	foreach (Chunk chunk in e.Chunks) {  		// here we use 4f/3 multiplied leading value to simulate leading which is used with default font size  		float currFontSize = chunk.Font.GetCalculatedLeading (4f / 3);  		if (maxSize < currFontSize) {  			maxSize = currFontSize;  		}  	}  }  
Magic Number,iTextSharp.tool.xml.html,OrderedUnorderedListItem,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\OrderedUnorderedListItem.cs,End,The following statement contains a magic number: foreach (Chunk chunk in e.Chunks) {  	// here we use 4f/3 multiplied leading value to simulate leading which is used with default font size  	float currFontSize = chunk.Font.GetCalculatedLeading (4f / 3);  	if (maxSize < currFontSize) {  		maxSize = currFontSize;  	}  }  
Magic Number,iTextSharp.tool.xml.html,ParaGraph,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ParaGraph.cs,AddTabStopsContent,The following statement contains a magic number: for (int i = 0' j = 1; j < alignAndWidth.Length; i += 2' j += 2) {  	tabWidth += CssUtils.GetInstance ().ParsePxInCmMmPcToPt (alignAndWidth [j]);  	TabbedChunk tab = new TabbedChunk (new VerticalPositionMark ()' tabWidth' true' alignAndWidth [i]);  	tabs.Add (tab);  }  
Magic Number,iTextSharp.tool.xml.html,ParaGraph,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ParaGraph.cs,AddTabStopsContent,The following statement contains a magic number: for (int i = 0' j = 1; j < alignAndWidth.Length; i += 2' j += 2) {  	tabWidth += CssUtils.GetInstance ().ParsePxInCmMmPcToPt (alignAndWidth [j]);  	TabbedChunk tab = new TabbedChunk (new VerticalPositionMark ()' tabWidth' true' alignAndWidth [i]);  	tabs.Add (tab);  }  
Magic Number,iTextSharp.tool.xml.html,ParaGraph,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ParaGraph.cs,AddTabStopsContent,The following statement contains a magic number: i += 2
Magic Number,iTextSharp.tool.xml.html,ParaGraph,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\ParaGraph.cs,AddTabStopsContent,The following statement contains a magic number: j += 2
Magic Number,iTextSharp.tool.xml.html.table,CellSpacingEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\CellSpacingEvent.cs,CellLayout,The following statement contains a magic number: if (styleValues.IsLastInRow) {  	effectivePadding = styleValues.BorderWidthRight / 2 + styleValues.HorBorderSpacing;  } else {  	effectivePadding = styleValues.BorderWidthRight / 2;  }  
Magic Number,iTextSharp.tool.xml.html.table,CellSpacingEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\CellSpacingEvent.cs,CellLayout,The following statement contains a magic number: if (styleValues.IsLastInRow) {  	effectivePadding = styleValues.BorderWidthRight / 2 + styleValues.HorBorderSpacing;  } else {  	effectivePadding = styleValues.BorderWidthRight / 2;  }  
Magic Number,iTextSharp.tool.xml.html.table,CellSpacingEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\CellSpacingEvent.cs,CellLayout,The following statement contains a magic number: effectivePadding = styleValues.BorderWidthRight / 2 + styleValues.HorBorderSpacing;  
Magic Number,iTextSharp.tool.xml.html.table,CellSpacingEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\CellSpacingEvent.cs,CellLayout,The following statement contains a magic number: effectivePadding = styleValues.BorderWidthRight / 2;  
Magic Number,iTextSharp.tool.xml.html.table,CellSpacingEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\CellSpacingEvent.cs,CellLayout,The following statement contains a magic number: effectivePadding = styleValues.BorderWidthTop / 2 + styleValues.VerBorderSpacing;  
Magic Number,iTextSharp.tool.xml.html.table,CellSpacingEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\CellSpacingEvent.cs,CellLayout,The following statement contains a magic number: effectivePadding = styleValues.BorderWidthBottom / 2;  
Magic Number,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The following statement contains a magic number: try {  	bool percentage = false;  	String widthValue = null;  	tag.CSS.TryGetValue (HTML.Attribute.WIDTH' out widthValue);  	if (widthValue == null) {  		tag.Attributes.TryGetValue (HTML.Attribute.WIDTH' out widthValue);  	}  	if (widthValue != null && widthValue.Trim ().EndsWith ("%")) {  		percentage = true;  	}  	int numberOfColumns = 0;  	List<TableRowElement> tableRows = new List<TableRowElement> (currentContent.Count);  	IList<IElement> invalidRowElements = new List<IElement> (1);  	String repeatHeader;  	tag.CSS.TryGetValue (CSS.Property.REPEAT_HEADER' out repeatHeader);  	String repeatFooter;  	tag.CSS.TryGetValue (CSS.Property.REPEAT_FOOTER' out repeatFooter);  	int headerRows = 0;  	int footerRows = 0;  	foreach (IElement e in currentContent) {  		int localNumCols = 0;  		if (e is TableRowElement) {  			TableRowElement tableRowElement = (TableRowElement)e;  			foreach (HtmlCell cell in tableRowElement.Content) {  				localNumCols += cell.Colspan;  			}  			if (localNumCols > numberOfColumns) {  				numberOfColumns = localNumCols;  			}  			tableRows.Add (tableRowElement);  			if (repeatHeader != null && Util.EqualsIgnoreCase (repeatHeader' "yes") && tableRowElement.RowPlace.Equals (TableRowElement.Place.HEADER)) {  				headerRows++;  			}  			if (repeatFooter != null && Util.EqualsIgnoreCase (repeatFooter' "yes") && tableRowElement.RowPlace.Equals (TableRowElement.Place.FOOTER)) {  				footerRows++;  			}  		} else {  			invalidRowElements.Add (e);  		}  	}  	if (repeatFooter == null || !Util.EqualsIgnoreCase (repeatFooter' "yes")) {  		SortUtil.MergeSort<TableRowElement> (tableRows' delegate (TableRowElement o1' TableRowElement o2) {  			return o1.RowPlace.Normal.CompareTo (o2.RowPlace.Normal);  		});  	} else {  		SortUtil.MergeSort<TableRowElement> (tableRows' delegate (TableRowElement o1' TableRowElement o2) {  			return o1.RowPlace.Repeated.CompareTo (o2.RowPlace.Repeated);  		});  	}  	PdfPTable table = IntPdfPTable (numberOfColumns);  	table.HeaderRows = headerRows + footerRows;  	table.FooterRows = footerRows;  	if (tag.Attributes.ContainsKey (HTML.Attribute.ALIGN)) {  		String value = tag.Attributes [HTML.Attribute.ALIGN];  		// TODO this property is inverted when RTL. so we should counter-invert here' probably.  		table.HorizontalAlignment = CSS.GetElementAlignment (value);  	}  	int direction = GetRunDirection (tag);  	//                if (direction != PdfWriter.RUN_DIRECTION_DEFAULT) {  	table.RunDirection = direction;  	//                }  	foreach (KeyValuePair<String' String> entry in tag.CSS) {  		if (Util.EqualsIgnoreCase (entry.Key' CSS.Property.PAGE_BREAK_INSIDE)) {  			if (Util.EqualsIgnoreCase (entry.Value' CSS.Value.AVOID.ToLower ())) {  				table.KeepTogether = true;  			}  		}  	}  	TableStyleValues styleValues = SetStyleValues (tag);  	table.TableEvent = new TableBorderEvent (styleValues);  	SetVerticalMargin (table' tag' styleValues' ctx);  	WidenLastCell (tableRows' styleValues.HorBorderSpacing);  	float[] columnWidths = new float[numberOfColumns];  	float[] widestWords = new float[numberOfColumns];  	float[] fixedWidths = new float[numberOfColumns];  	float[] colspanWidestWords = new float[numberOfColumns];  	int[] rowspanValue = new int[numberOfColumns];  	float largestColumn = 0;  	float largestColspanColumn = 0;  	int indexOfLargestColumn = -1;  	int indexOfLargestColspanColumn = -1;  	// Initial fill of the widths arrays  	foreach (TableRowElement row in tableRows) {  		int column = 0;  		foreach (HtmlCell cell in row.Content) {  			// check whether the current column should be skipped due to a  			// rowspan value of higher cell in this column.  			// Contribution made by Arnost Havelka (Asseco): added while condition  			while ((column < numberOfColumns) && (rowspanValue [column] > 0)) {  				rowspanValue [column] = rowspanValue [column] - 1;  				++column;  			}  			// sets a rowspan counter for current column (counter not  			// needed for last column).  			if (cell.Rowspan > 1 && column != numberOfColumns - 1 && column < rowspanValue.Length) {  				rowspanValue [column] = cell.Rowspan - 1;  			}  			int colspan = cell.Colspan;  			if (cell.FixedWidth != 0) {  				float fixedWidth = cell.FixedWidth + GetCellStartWidth (cell);  				float colSpanWidthSum = 0;  				int nonZeroColspanCols = 0;  				// Contribution made by Arnost Havelka (Asseco) (modified)  				for (int c = column; c < column + colspan && c < numberOfColumns; c++) {  					colSpanWidthSum += fixedWidths [c];  					if (fixedWidths [c] != 0)  						nonZeroColspanCols++;  				}  				for (int c = column; c < column + colspan && c < numberOfColumns; c++) {  					if (fixedWidths [c] == 0) {  						fixedWidths [c] = (fixedWidth - colSpanWidthSum) / (colspan - nonZeroColspanCols);  						columnWidths [c] = (fixedWidth - colSpanWidthSum) / (colspan - nonZeroColspanCols);  					}  				}  			}  			if (cell.CompositeElements != null) {  				float[] widthValues = SetCellWidthAndWidestWord (cell);  				float cellWidth = widthValues [0] / colspan;  				float widestWordOfCell = widthValues [1] / colspan;  				for (int i = 0; i < colspan; i++) {  					int c = column + i;  					// Contribution made by Arnost Havelka (Asseco)  					if (c >= numberOfColumns) {  						continue;  					}  					if (fixedWidths [c] == 0 && cellWidth > columnWidths [c]) {  						columnWidths [c] = cellWidth;  						if (colspan == 1) {  							if (cellWidth > largestColumn) {  								largestColumn = cellWidth;  								indexOfLargestColumn = c;  							}  						} else {  							if (cellWidth > largestColspanColumn) {  								largestColspanColumn = cellWidth;  								indexOfLargestColspanColumn = c;  							}  						}  					}  					if (colspan == 1) {  						if (widestWordOfCell > widestWords [c]) {  							widestWords [c] = widestWordOfCell;  						}  					} else {  						if (widestWordOfCell > colspanWidestWords [c]) {  							colspanWidestWords [c] = widestWordOfCell;  						}  					}  				}  			}  			if (colspan > 1) {  				if (LOG.IsLogging (Level.TRACE)) {  					LOG.Trace (String.Format (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.COLSPAN)' colspan));  				}  				column += colspan - 1;  			}  			column++;  		}  	}  	if (indexOfLargestColumn == -1) {  		indexOfLargestColumn = indexOfLargestColspanColumn;  		if (indexOfLargestColumn == -1) {  			indexOfLargestColumn = 0;  		}  		for (int column = 0; column < numberOfColumns; column++) {  			widestWords [column] = colspanWidestWords [column];  		}  	}  	float outerWidth = GetTableOuterWidth (tag' styleValues.HorBorderSpacing' ctx);  	float initialTotalWidth = GetTableWidth (columnWidths' 0);  	//          float targetWidth = calculateTargetWidth(tag' columnWidths' outerWidth' ctx);  	float targetWidth = 0;  	HtmlPipelineContext htmlPipelineContext = GetHtmlPipelineContext (ctx);  	float max = htmlPipelineContext.PageSize.Width - outerWidth;  	bool tableWidthFixed = false;  	if (tag.Attributes.ContainsKey (CSS.Property.WIDTH) || tag.CSS.ContainsKey (CSS.Property.WIDTH)) {  		targetWidth = new WidthCalculator ().GetWidth (tag' htmlPipelineContext.GetRootTags ()' htmlPipelineContext.PageSize.Width' initialTotalWidth);  		if (targetWidth > max) {  			targetWidth = max;  		}  		tableWidthFixed = true;  	} else if (initialTotalWidth <= max) {  		targetWidth = initialTotalWidth;  	} else if (null == tag.Parent || (null != tag.Parent && htmlPipelineContext.GetRootTags ().Contains (tag.Parent.Name))) {  		targetWidth = max;  	} else/* this table is an inner table and width adjustment is done in outer table */ {  		targetWidth = GetTableWidth (columnWidths' outerWidth);  	}  	float totalFixedColumnWidth = GetTableWidth (fixedWidths' 0);  	float targetPercentage = 0;  	if (totalFixedColumnWidth == initialTotalWidth) {  		// all column widths are fixed  		targetPercentage = targetWidth / initialTotalWidth;  		if (initialTotalWidth > targetWidth) {  			for (int column = 0; column < columnWidths.Length; column++) {  				columnWidths [column] *= targetPercentage;  			}  		} else if (tableWidthFixed && targetPercentage != 1) {  			for (int column = 0; column < columnWidths.Length; column++) {  				columnWidths [column] *= targetPercentage;  			}  		}  	} else {  		targetPercentage = (targetWidth - totalFixedColumnWidth) / (initialTotalWidth - totalFixedColumnWidth);  		// Reduce width of columns if the columnWidth array + borders +  		// paddings  		// is too large for the given targetWidth.  		if (initialTotalWidth > targetWidth) {  			float leftToReduce = 0;  			for (int column = 0; column < columnWidths.Length; column++) {  				if (fixedWidths [column] == 0) {  					// Reduce width of the column to its targetWidth' if  					// widestWord of column still fits in the targetWidth of  					// the  					// column.  					if (widestWords [column] <= columnWidths [column] * targetPercentage) {  						columnWidths [column] *= targetPercentage;  						// else take the widest word and calculate space  						// left to  						// reduce.  					} else {  						columnWidths [column] = widestWords [column];  						leftToReduce += widestWords [column] - columnWidths [column] * targetPercentage;  					}  					// if widestWord of a column does not fit in the  					// fixedWidth'  					// set the column width to the widestWord.  				} else if (fixedWidths [column] < widestWords [column]) {  					columnWidths [column] = widestWords [column];  					leftToReduce += widestWords [column] - fixedWidths [column];  				}  			}  			if (leftToReduce != 0) {  				// Reduce width of the column with the most text' if its  				// widestWord still fits in the reduced column.  				if (widestWords [indexOfLargestColumn] <= columnWidths [indexOfLargestColumn] - leftToReduce) {  					columnWidths [indexOfLargestColumn] -= leftToReduce;  				} else {  					// set all columns to their minimum' with the  					// widestWord array.  					for (int column = 0; leftToReduce != 0 && column < columnWidths.Length; column++) {  						if (fixedWidths [column] == 0 && columnWidths [column] > widestWords [column]) {  							float difference = columnWidths [column] - widestWords [column];  							if (difference <= leftToReduce) {  								leftToReduce -= difference;  								columnWidths [column] = widestWords [column];  							} else {  								columnWidths [column] -= leftToReduce;  								leftToReduce = 0;  							}  						}  					}  					if (leftToReduce != 0) {  						// If the table has an insufficient fixed width  						// by  						// an  						// attribute or style' try to enlarge the table  						// to  						// its  						// minimum width (= widestWords array).  						float pageWidth = GetHtmlPipelineContext (ctx).PageSize.Width;  						if (GetTableWidth (widestWords' outerWidth) < pageWidth) {  							targetWidth = GetTableWidth (widestWords' outerWidth);  							leftToReduce = 0;  						} else {  							// If all columnWidths are set to the  							// widestWordWidths and the table is still  							// to  							// wide  							// content will fall off the edge of a page'  							// which  							// is similar to HTML.  							targetWidth = pageWidth - outerWidth;  							leftToReduce = 0;  						}  					}  				}  			}  			// Enlarge width of columns to fit the targetWidth.  		} else if (initialTotalWidth < targetWidth) {  			for (int column = 0; column < columnWidths.Length; column++) {  				if (fixedWidths [column] == 0) {  					columnWidths [column] *= targetPercentage;  				}  			}  		}  	}  	try {  		table.SetTotalWidth (columnWidths);  		table.LockedWidth = true;  		table.DefaultCell.Border = Rectangle.NO_BORDER;  	} catch (DocumentException e) {  		throw new RuntimeWorkerException (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.NO_CUSTOM_CONTEXT)' e);  	}  	float? tableHeight = new HeightCalculator ().GetHeight (tag' GetHtmlPipelineContext (ctx).PageSize.Height);  	float? tableRowHeight = null;  	if (tableHeight != null && tableHeight > 0)  		tableRowHeight = tableHeight / tableRows.Count;  	int rowNumber = 0;  	foreach (TableRowElement row in tableRows) {  		int columnNumber = -1;  		float? computedRowHeight = null;  		/*if ( tableHeight != null &&  tableRows.IndexOf(row) == tableRows.Count - 1) {                         float computedTableHeigt = table.CalculateHeights();                         computedRowHeight = tableHeight - computedTableHeigt;                     }*/IList<HtmlCell> rowContent = row.Content;  		if (rowContent.Count < 1)  			continue;  		foreach (HtmlCell cell in rowContent) {  			IList<IElement> compositeElements = cell.CompositeElements;  			if (compositeElements != null) {  				foreach (IElement baseLevel in compositeElements) {  					if (baseLevel is PdfPTable) {  						TableStyleValues cellValues = cell.CellValues;  						float totalBordersWidth = cellValues.IsLastInRow ? styleValues.HorBorderSpacing * 2 : styleValues.HorBorderSpacing;  						totalBordersWidth += cellValues.BorderWidthLeft + cellValues.BorderWidthRight;  						float columnWidth = 0;  						for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) {  							columnWidth += columnWidths [currentColumnNumber];  						}  						IPdfPTableEvent tableEvent = ((PdfPTable)baseLevel).TableEvent;  						TableStyleValues innerStyleValues = ((TableBorderEvent)tableEvent).TableStyleValues;  						totalBordersWidth += innerStyleValues.BorderWidthLeft;  						totalBordersWidth += innerStyleValues.BorderWidthRight;  						((PdfPTable)baseLevel).TotalWidth = columnWidth - totalBordersWidth;  					}  				}  			}  			columnNumber += cell.Colspan;  			table.AddCell (cell);  		}  		table.CompleteRow ();  		if ((computedRowHeight == null || computedRowHeight <= 0) && tableRowHeight != null)  			computedRowHeight = tableRowHeight;  		if (computedRowHeight != null && computedRowHeight > 0) {  			float rowHeight = table.GetRow (rowNumber).MaxHeights;  			if (rowHeight < computedRowHeight) {  				table.GetRow (rowNumber).MaxHeights = computedRowHeight.Value;  			} else if (tableRowHeight != null && tableRowHeight < rowHeight) {  				tableRowHeight = (tableHeight - rowHeight - rowNumber * tableRowHeight) / (tableRows.Count - rowNumber - 1);  			}  		}  		rowNumber++;  	}  	if (percentage) {  		table.WidthPercentage = utils.ParsePxInCmMmPcToPt (widthValue);  		table.LockedWidth = false;  	}  	List<IElement> elems = new List<IElement> ();  	if (invalidRowElements.Count > 0) {  		// all invalid row elements taken as caption  		int i = 0;  		Tag captionTag = tag.Children [i++];  		while (!Util.EqualsIgnoreCase (captionTag.Name' HTML.Tag.CAPTION) && i < tag.Children.Count) {  			captionTag = tag.Children [i];  			i++;  		}  		String captionSideValue;  		captionTag.CSS.TryGetValue (CSS.Property.CAPTION_SIDE' out captionSideValue);  		if (captionSideValue != null && Util.EqualsIgnoreCase (captionSideValue' CSS.Value.BOTTOM)) {  			elems.Add (table);  			elems.AddRange (invalidRowElements);  		} else {  			elems.AddRange (invalidRowElements);  			elems.Add (table);  		}  	} else {  		elems.Add (table);  	}  	return elems;  } catch (NoCustomContextException e) {  	throw new RuntimeWorkerException (LocaleMessages.GetInstance ().GetMessage (LocaleMessages.NO_CUSTOM_CONTEXT)' e);  }  
Magic Number,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The following statement contains a magic number: foreach (TableRowElement row in tableRows) {  	int columnNumber = -1;  	float? computedRowHeight = null;  	/*if ( tableHeight != null &&  tableRows.IndexOf(row) == tableRows.Count - 1) {                         float computedTableHeigt = table.CalculateHeights();                         computedRowHeight = tableHeight - computedTableHeigt;                     }*/IList<HtmlCell> rowContent = row.Content;  	if (rowContent.Count < 1)  		continue;  	foreach (HtmlCell cell in rowContent) {  		IList<IElement> compositeElements = cell.CompositeElements;  		if (compositeElements != null) {  			foreach (IElement baseLevel in compositeElements) {  				if (baseLevel is PdfPTable) {  					TableStyleValues cellValues = cell.CellValues;  					float totalBordersWidth = cellValues.IsLastInRow ? styleValues.HorBorderSpacing * 2 : styleValues.HorBorderSpacing;  					totalBordersWidth += cellValues.BorderWidthLeft + cellValues.BorderWidthRight;  					float columnWidth = 0;  					for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) {  						columnWidth += columnWidths [currentColumnNumber];  					}  					IPdfPTableEvent tableEvent = ((PdfPTable)baseLevel).TableEvent;  					TableStyleValues innerStyleValues = ((TableBorderEvent)tableEvent).TableStyleValues;  					totalBordersWidth += innerStyleValues.BorderWidthLeft;  					totalBordersWidth += innerStyleValues.BorderWidthRight;  					((PdfPTable)baseLevel).TotalWidth = columnWidth - totalBordersWidth;  				}  			}  		}  		columnNumber += cell.Colspan;  		table.AddCell (cell);  	}  	table.CompleteRow ();  	if ((computedRowHeight == null || computedRowHeight <= 0) && tableRowHeight != null)  		computedRowHeight = tableRowHeight;  	if (computedRowHeight != null && computedRowHeight > 0) {  		float rowHeight = table.GetRow (rowNumber).MaxHeights;  		if (rowHeight < computedRowHeight) {  			table.GetRow (rowNumber).MaxHeights = computedRowHeight.Value;  		} else if (tableRowHeight != null && tableRowHeight < rowHeight) {  			tableRowHeight = (tableHeight - rowHeight - rowNumber * tableRowHeight) / (tableRows.Count - rowNumber - 1);  		}  	}  	rowNumber++;  }  
Magic Number,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The following statement contains a magic number: foreach (HtmlCell cell in rowContent) {  	IList<IElement> compositeElements = cell.CompositeElements;  	if (compositeElements != null) {  		foreach (IElement baseLevel in compositeElements) {  			if (baseLevel is PdfPTable) {  				TableStyleValues cellValues = cell.CellValues;  				float totalBordersWidth = cellValues.IsLastInRow ? styleValues.HorBorderSpacing * 2 : styleValues.HorBorderSpacing;  				totalBordersWidth += cellValues.BorderWidthLeft + cellValues.BorderWidthRight;  				float columnWidth = 0;  				for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) {  					columnWidth += columnWidths [currentColumnNumber];  				}  				IPdfPTableEvent tableEvent = ((PdfPTable)baseLevel).TableEvent;  				TableStyleValues innerStyleValues = ((TableBorderEvent)tableEvent).TableStyleValues;  				totalBordersWidth += innerStyleValues.BorderWidthLeft;  				totalBordersWidth += innerStyleValues.BorderWidthRight;  				((PdfPTable)baseLevel).TotalWidth = columnWidth - totalBordersWidth;  			}  		}  	}  	columnNumber += cell.Colspan;  	table.AddCell (cell);  }  
Magic Number,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The following statement contains a magic number: if (compositeElements != null) {  	foreach (IElement baseLevel in compositeElements) {  		if (baseLevel is PdfPTable) {  			TableStyleValues cellValues = cell.CellValues;  			float totalBordersWidth = cellValues.IsLastInRow ? styleValues.HorBorderSpacing * 2 : styleValues.HorBorderSpacing;  			totalBordersWidth += cellValues.BorderWidthLeft + cellValues.BorderWidthRight;  			float columnWidth = 0;  			for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) {  				columnWidth += columnWidths [currentColumnNumber];  			}  			IPdfPTableEvent tableEvent = ((PdfPTable)baseLevel).TableEvent;  			TableStyleValues innerStyleValues = ((TableBorderEvent)tableEvent).TableStyleValues;  			totalBordersWidth += innerStyleValues.BorderWidthLeft;  			totalBordersWidth += innerStyleValues.BorderWidthRight;  			((PdfPTable)baseLevel).TotalWidth = columnWidth - totalBordersWidth;  		}  	}  }  
Magic Number,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The following statement contains a magic number: foreach (IElement baseLevel in compositeElements) {  	if (baseLevel is PdfPTable) {  		TableStyleValues cellValues = cell.CellValues;  		float totalBordersWidth = cellValues.IsLastInRow ? styleValues.HorBorderSpacing * 2 : styleValues.HorBorderSpacing;  		totalBordersWidth += cellValues.BorderWidthLeft + cellValues.BorderWidthRight;  		float columnWidth = 0;  		for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) {  			columnWidth += columnWidths [currentColumnNumber];  		}  		IPdfPTableEvent tableEvent = ((PdfPTable)baseLevel).TableEvent;  		TableStyleValues innerStyleValues = ((TableBorderEvent)tableEvent).TableStyleValues;  		totalBordersWidth += innerStyleValues.BorderWidthLeft;  		totalBordersWidth += innerStyleValues.BorderWidthRight;  		((PdfPTable)baseLevel).TotalWidth = columnWidth - totalBordersWidth;  	}  }  
Magic Number,iTextSharp.tool.xml.html.table,Table,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\Table.cs,End,The following statement contains a magic number: if (baseLevel is PdfPTable) {  	TableStyleValues cellValues = cell.CellValues;  	float totalBordersWidth = cellValues.IsLastInRow ? styleValues.HorBorderSpacing * 2 : styleValues.HorBorderSpacing;  	totalBordersWidth += cellValues.BorderWidthLeft + cellValues.BorderWidthRight;  	float columnWidth = 0;  	for (int currentColumnNumber = columnNumber + 1; currentColumnNumber <= columnNumber + cell.Colspan; currentColumnNumber++) {  		columnWidth += columnWidths [currentColumnNumber];  	}  	IPdfPTableEvent tableEvent = ((PdfPTable)baseLevel).TableEvent;  	TableStyleValues innerStyleValues = ((TableBorderEvent)tableEvent).TableStyleValues;  	totalBordersWidth += innerStyleValues.BorderWidthLeft;  	totalBordersWidth += innerStyleValues.BorderWidthRight;  	((PdfPTable)baseLevel).TotalWidth = columnWidth - totalBordersWidth;  }  
Magic Number,iTextSharp.tool.xml.html.table,TableBorderEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\TableBorderEvent.cs,TableLayout,The following statement contains a magic number: effectivePadding = right / 2;  
Magic Number,iTextSharp.tool.xml.html.table,TableBorderEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\TableBorderEvent.cs,TableLayout,The following statement contains a magic number: effectivePadding = top / 2;  
Magic Number,iTextSharp.tool.xml.html.table,TableBorderEvent,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\table\TableBorderEvent.cs,TableLayout,The following statement contains a magic number: effectivePadding = bottom / 2 + styleValues.VerBorderSpacing;  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: if (count != 4)  	throw new IOException ("Insufficient length");  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: if (encoding.Equals ("UTF-8")) {  	StringBuilder sb = new StringBuilder ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == '>')  			break;  		sb.Append ((char)c);  		bytesNumber++;  	}  	decl = sb.ToString ();  } else if (encoding.Equals ("CP037")) {  	MemoryStream bi = new MemoryStream ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == 0x6e)  			// that's '>' in ebcdic  			break;  		bi.WriteByte ((byte)c);  		bytesNumber++;  	}  	decl = Encoding.GetEncoding (37).GetString (bi.ToArray ());  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: if (encoding.Equals ("UTF-8")) {  	StringBuilder sb = new StringBuilder ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == '>')  			break;  		sb.Append ((char)c);  		bytesNumber++;  	}  	decl = sb.ToString ();  } else if (encoding.Equals ("CP037")) {  	MemoryStream bi = new MemoryStream ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == 0x6e)  			// that's '>' in ebcdic  			break;  		bi.WriteByte ((byte)c);  		bytesNumber++;  	}  	decl = Encoding.GetEncoding (37).GetString (bi.ToArray ());  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: if (encoding.Equals ("UTF-8")) {  	StringBuilder sb = new StringBuilder ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == '>')  			break;  		sb.Append ((char)c);  		bytesNumber++;  	}  	decl = sb.ToString ();  } else if (encoding.Equals ("CP037")) {  	MemoryStream bi = new MemoryStream ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == 0x6e)  			// that's '>' in ebcdic  			break;  		bi.WriteByte ((byte)c);  		bytesNumber++;  	}  	decl = Encoding.GetEncoding (37).GetString (bi.ToArray ());  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  	if (c == '>')  		break;  	sb.Append ((char)c);  	bytesNumber++;  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: if (encoding.Equals ("CP037")) {  	MemoryStream bi = new MemoryStream ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == 0x6e)  			// that's '>' in ebcdic  			break;  		bi.WriteByte ((byte)c);  		bytesNumber++;  	}  	decl = Encoding.GetEncoding (37).GetString (bi.ToArray ());  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: if (encoding.Equals ("CP037")) {  	MemoryStream bi = new MemoryStream ();  	int c;  	while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  		if (c == 0x6e)  			// that's '>' in ebcdic  			break;  		bi.WriteByte ((byte)c);  		bytesNumber++;  	}  	decl = Encoding.GetEncoding (37).GetString (bi.ToArray ());  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: while (bytesNumber < 1028 && ((c = inp.ReadByte ()) != -1)) {  	if (c == 0x6e)  		// that's '>' in ebcdic  		break;  	bi.WriteByte ((byte)c);  	bytesNumber++;  }  
Magic Number,iTextSharp.tool.xml.parser,XMLParser,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\XMLParser.cs,DetectEncoding,The following statement contains a magic number: decl = Encoding.GetEncoding (37).GetString (bi.ToArray ());  
Magic Number,iTextSharp.tool.xml.parser.state,CloseCommentState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\CloseCommentState.cs,Process,The following statement contains a magic number: if (character == '-') {  	this.parser.Memory ().Comment ().Append ('-');  } else if (character == '>' && this.parser.Memory ().Comment ().Length == 2) {  	this.parser.Memory ().Comment ().Length = 0;  	this.parser.Comment ();  	this.parser.Flush ();  	parser.SelectState ().InTag ();  } else {  	this.parser.Append (this.parser.Memory ().Comment ().ToString ());  	this.parser.Memory ().Comment ().Length = 0;  	parser.SelectState ().Comment ();  }  
Magic Number,iTextSharp.tool.xml.parser.state,CloseCommentState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\CloseCommentState.cs,Process,The following statement contains a magic number: if (character == '>' && this.parser.Memory ().Comment ().Length == 2) {  	this.parser.Memory ().Comment ().Length = 0;  	this.parser.Comment ();  	this.parser.Flush ();  	parser.SelectState ().InTag ();  } else {  	this.parser.Append (this.parser.Memory ().Comment ().ToString ());  	this.parser.Memory ().Comment ().Length = 0;  	parser.SelectState ().Comment ();  }  
Magic Number,iTextSharp.tool.xml.parser.state,SpecialCharState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\SpecialCharState.cs,Process,The following statement contains a magic number: if (character == ';') {  	//          if ("nbsp".Equals(entity.ToString())) {  	//              parser.Append(' '); // TODO check yes or no if it's good idea to transform &nbsp into a space ?  	//          } else {  	char decoded = parser.IsDecodeSpecialChars () ? EntitiesToUnicode.DecodeEntity (entity.ToString ()) : (char)0;  	if (decoded == '\0') {  		parser.Append ('&').Append (entity.ToString ()).Append (';');  		parser.Memory ().LastChar = ';';  	} else {  		parser.Append (decoded);  		parser.Memory ().LastChar = decoded;  	}  	//          }  	parser.SelectState ().PreviousState ();  	this.parser.Memory ().CurrentEntity ().Length = 0;  } else if (character != '#' && (character < '0' || character > '9') && (character < 'a' || character > 'z') && (character < 'A' || character > 'Z') || entity.Length >= 7) {  	parser.Append ('&').Append (entity.ToString ()).Append (character);  	parser.SelectState ().PreviousState ();  	this.parser.Memory ().CurrentEntity ().Length = 0;  } else {  	entity.Append (character);  }  
Magic Number,iTextSharp.tool.xml.parser.state,SpecialCharState,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\parser\state\SpecialCharState.cs,Process,The following statement contains a magic number: if (character != '#' && (character < '0' || character > '9') && (character < 'a' || character > 'z') && (character < 'A' || character > 'Z') || entity.Length >= 7) {  	parser.Append ('&').Append (entity.ToString ()).Append (character);  	parser.SelectState ().PreviousState ();  	this.parser.Memory ().CurrentEntity ().Length = 0;  } else {  	entity.Append (character);  }  
Magic Number,iTextSharp.tool.xml.util,SortUtil,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\util\SortUtil.cs,MergeSort,The following statement contains a magic number: if (right > left) {  	int mid = (right + left) / 2;  	MergeSort (list' left' mid' comparison);  	MergeSort (list' (mid + 1)' right' comparison);  	Merge (list' left' (mid + 1)' right' comparison);  }  
Missing Default,iTextSharp.tool.xml.html,Header,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.xmlworker\iTextSharp\tool\xml\html\Header.cs,getHeaderRole,The following switch statement is missing a default case: switch (level) {  case 1:  	return PdfName.H1;  case 2:  	return PdfName.H2;  case 3:  	return PdfName.H3;  case 4:  	return PdfName.H4;  case 5:  	return PdfName.H5;  case 6:  	return PdfName.H6;  }  
