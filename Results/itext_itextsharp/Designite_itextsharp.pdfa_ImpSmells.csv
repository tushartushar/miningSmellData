Implementation smell,Namespace,Class,File,Method,Description
Long Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The method has 151 lines of code.
Complex Method,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,Cyclomatic complexity of the method is 19
Complex Method,iTextSharp.text.pdf,PdfATtfUnicodeWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfATtfUnicodeWriter.cs,WriteFont,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,SetPdfVersion,Cyclomatic complexity of the method is 17
Complex Method,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,Cyclomatic complexity of the method is 14
Complex Method,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,Cyclomatic complexity of the method is 26
Complex Method,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckColor,Cyclomatic complexity of the method is 37
Complex Method,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,Cyclomatic complexity of the method is 18
Complex Method,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,Cyclomatic complexity of the method is 8
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,Cyclomatic complexity of the method is 15
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,Cyclomatic complexity of the method is 19
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckInlineImage,Cyclomatic complexity of the method is 9
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckLayer,Cyclomatic complexity of the method is 17
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,Cyclomatic complexity of the method is 18
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,Cyclomatic complexity of the method is 50
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckColor,Cyclomatic complexity of the method is 33
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,Cyclomatic complexity of the method is 22
Complex Method,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,Cyclomatic complexity of the method is 13
Complex Method,iTextSharp.text.pdf.intern,PdfAChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAChecker.cs,CheckPdfAConformance,Cyclomatic complexity of the method is 56
Complex Method,iTextSharp.text.pdf.intern,PdfAConformanceImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAConformanceImp.cs,SetConformanceLevel,Cyclomatic complexity of the method is 23
Complex Method,itextsharp.pdfa.iTextSharp.text.pdf.intern,ZugferdChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\ZugferdChecker.cs,Close,Cyclomatic complexity of the method is 11
Complex Method,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,Cyclomatic complexity of the method is 30
Complex Method,itextsharp.pdfa.iTextSharp.text.pdf,PdfASmartCopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfASmartCopy.cs,CopyIndirect,Cyclomatic complexity of the method is 12
Complex Method,iTextSharp.text.xml.xmp,PdfAXmpWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\xml\xmp\PdfAXmpWriter.cs,AddRdfDescription,Cyclomatic complexity of the method is 44
Long Parameter List,iTextSharp.text.pdf,PdfAStamper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamper.cs,PdfAStamper,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAStamper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamper.cs,CreateSignature,The method has 6 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAStamper,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamper.cs,CreateSignature,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,PdfAStamperImp,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,SetOutputIntents,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,CreateAnnotation,The method has 7 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,CreateAnnotation,The method has 6 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,SetOutputIntents,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,AddFileAttachment,The method has 7 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,AddFileAttachment,The method has 6 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,AddFileAttachment,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,AddPdfAttachment,The method has 5 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,CreateAnnotation,The method has 7 parameters.
Long Parameter List,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,CreateAnnotation,The method has 6 parameters.
Long Parameter List,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,SetOutputIntents,The method has 5 parameters.
Long Statement,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,SetPDFXConformance,The length of the statement  "	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("pdfx.conformance.cannot.be.set.for.PdfAStamperImp.instance")); " is 139.
Long Statement,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,The length of the statement  "		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.documents.can.be.opened.in.PdfAStamper")); " is 129.
Long Statement,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,The length of the statement  "		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.documents.can.be.opened.in.PdfAStamper")); " is 129.
Long Statement,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.1.documents.can.be.opened.in.PdfAStamper"' "1")); " is 136.
Long Statement,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.1.documents.can.be.opened.in.PdfAStamper"' "2")); " is 136.
Long Statement,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.1.documents.can.be.opened.in.PdfAStamper"' "3")); " is 136.
Long Statement,iTextSharp.text.pdf,PdfATtfUnicodeWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfATtfUnicodeWriter.cs,WriteFont,The length of the statement  "				TrueTypeFontSubSet sb = new TrueTypeFontSubSet (font.FileName' new RandomAccessFileOrArray (font.Rf)' new HashSet2<int> (longTag.Keys)' font.DirectoryOffset' false' false); " is 172.
Long Statement,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,SetOutputIntents,The length of the statement  "	SetOutputIntents (GetNameString (outa' PdfName.OUTPUTCONDITIONIDENTIFIER)' GetNameString (outa' PdfName.OUTPUTCONDITION)' GetNameString (outa' PdfName.REGISTRYNAME)' GetNameString (outa' PdfName.INFO)' destProfile); " is 215.
Long Statement,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,SetPDFXConformance,The length of the statement  "	throw new PdfXConformanceException (MessageLocalization.GetComposedMessage ("pdfx.conformance.cannot.be.set.for.PdfAWriter.instance")); " is 135.
Long Statement,iTextSharp.text.pdf,PdfAWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAWriter.cs,AddFileAttachment,The length of the statement  "	PdfFileSpecification pdfFileSpecification = PdfFileSpecification.FileEmbedded (this' file' fileDisplay' fileStore' mimeType' fileParameter' PdfStream.BEST_COMPRESSION); " is 168.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckFont,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.the.fonts.must.be.embedded.this.one.isn.t.1"' ((BaseFont)obj1).PostscriptFontName)); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckFont,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.the.fonts.must.be.embedded.this.one.isn.t.1"' ((BaseFont)obj1).PostscriptFontName)); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.smask.key.is.not.allowed.in.images")); " is 125.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.image.dictionary.shall.not.contain.alternates.key")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.image.dictionary.shall.not.contain.opi.key")); " is 132.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.value.of.interpolate.key.shall.not.be.true")); " is 133.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The length of the statement  "	if (intent != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (intent) || PdfName.ABSOLUTECOLORIMETRIC.Equals (intent) || PdfName.PERCEPTUAL.Equals (intent) || PdfName.SATURATION.Equals (intent))) { " is 196.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("1.value.of.intent.key.is.not.allowed"' intent.ToString ())); " is 143.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("blend.mode.1.not.allowed"' obj.ToString ())); " is 128.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("transparency.is.not.allowed.ca.eq.1"' v.ToString ())); " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("transparency.is.not.allowed.ca.eq.1"' v.ToString ())); " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.tr.key")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.TR2.key.with.a.value.other.than.default")); " is 172.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "		if (ri != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (ri) || PdfName.ABSOLUTECOLORIMETRIC.Equals (ri) || PdfName.PERCEPTUAL.Equals (ri) || PdfName.SATURATION.Equals (ri))) { " is 176.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("1.value.of.ri.key.is.not.allowed"' ri.ToString ())); " is 135.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.smask.key.is.not.allowed.in.extgstate")); " is 128.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckTrailer,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("keyword.encrypt.shall.not.be.used.in.the.trailer.dictionary")); " is 146.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("stream.object.dictionary.shall.not.contain.the.f.ffilter.or.fdecodeparams.keys")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("lzwdecode.filter.is.not.permitted")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("lzwdecode.filter.is.not.permitted")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.form.xobject.dictionary.shall.not.contain.opi.key")); " is 138.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.form.xobject.dictionary.shall.not.contain.ps.key")); " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.group.object.with.an.s.key.with.a.value.of.transparency.shall.not.be.included.in.a.form.xobject")); " is 184.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStream,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("postscript.xobjects.are.not.allowed")); " is 122.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ())); " is 159.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata")); " is 141.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry")); " is 148.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry")); " is 162.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "				if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) { " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true")); " is 196.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object")); " is 154.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "						throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent")); " is 134.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent")); " is 140.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckCanvas,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("graphics.state.stack.depth.is.greater.than.28")); " is 132.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckColor,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("devicergb.and.devicecmyk.colorspaces.cannot.be.used.both.in.one.file")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckColor,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("devicergb.and.devicecmyk.colorspaces.cannot.be.used.both.in.one.file")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry")); " is 167.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ())); " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.not.contain.the.ca.key.with.a.value.other.than.1")); " is 166.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key")); " is 135.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "		if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW)) { " is 210.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.and.noview.flag.bits.shall.be.set.to.0")); " is 194.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) { " is 121.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1")); " is 166.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("destoutputprofile.in.the.pdfa1.outputintent.dictionary.shall.be.rgb")); " is 154.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "		if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) { " is 127.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry")); " is 167.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ())); " is 153.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAction,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("deprecated.setstate.and.noop.actions.are.not.allowed")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAction,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("launch.sound.movie.resetform.importdata.and.javascript.actions.are.not.allowed")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAction,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("named.action.type.1.not.allowed"' n.ToString ())); " is 133.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckForm,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("needappearances.flag.of.the.interactive.form.dictionary.shall.either.not.be.present.or.shall.be.false")); " is 188.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckStructElem,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("alt.entry.should.specify.alternate.description.for.1.element"' role.ToString ())); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckOutputIntent,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.not.be.updated")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,The length of the statement  "		throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("if.device.rgb.cmyk.gray.used.in.file.that.file.shall.contain.pdfa.outputintent")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicecmyk.may.be.used.only.if.the.file.has.a.cmyk.pdfa.outputIntent")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicergb.may.be.used.only.if.the.file.has.a.rgb.pdfa.outputIntent")); " is 153.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicecmyk.may.be.used.only.if.the.file.has.a.cmyk.pdfa.outputIntent")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicergb.may.be.used.only.if.the.file.has.a.rgb.pdfa.outputIntent")); " is 153.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckFont,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("all.the.fonts.must.be.embedded.this.one.isn.t.1"' ((BaseFont)obj1).PostscriptFontName)); " is 171.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckFont,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("all.the.fonts.must.be.embedded.this.one.isn.t.1"' ((BaseFont)obj1).PostscriptFontName)); " is 171.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("blend.mode.1.not.allowed"' obj.ToString ())); " is 122.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.tr.key")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.TR2.key.with.a.value.other.than.default")); " is 172.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.htp.key")); " is 140.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("halftones.shall.not.contains.halftonename")); " is 128.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("all.halftones.shall.have.halftonetype.1.or.5")); " is 131.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "		if (ri != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (ri) || PdfName.ABSOLUTECOLORIMETRIC.Equals (ri) || PdfName.PERCEPTUAL.Equals (ri) || PdfName.SATURATION.Equals (ri))) { " is 176.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("1.value.of.ri.key.is.not.allowed"' ri.ToString ())); " is 135.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.image.dictionary.shall.not.contain.opi.key")); " is 132.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.value.of.interpolate.key.shall.not.be.true")); " is 133.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used")); " is 128.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123")); " is 144.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38")); " is 153.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth")); " is 151.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "					throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "					throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123")); " is 133.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The length of the statement  "					throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used")); " is 143.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckInlineImage,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.value.of.interpolate.key.shall.not.be.true")); " is 133.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckInlineImage,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("lzwdecode.filter.is.not.permitted")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckInlineImage,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("crypt.filter.is.not.permitted.inline.image")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckInlineImage,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("lzwdecode.filter.is.not.permitted")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckInlineImage,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("crypt.filter.is.not.permitted.inline.image")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckLayer,The length of the statement  "				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("optional.content.configuration.dictionary.shall.contain.name.entry")); " is 147.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckLayer,The length of the statement  "				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("value.of.name.entry.shall.be.unique.amongst.all.optional.content.configuration.dictionaries")); " is 172.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckLayer,The length of the statement  "				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.as.key.shall.not.appear.in.any.optional.content.configuration.dictionary")); " is 157.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckLayer,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("order.array.shall.contain.references.to.all.ocgs")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckLayer,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("order.array.shall.contain.references.to.all.ocgs")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckTrailer,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("keyword.encrypt.shall.not.be.used.in.the.trailer.dictionary")); " is 146.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("stream.object.dictionary.shall.not.contain.the.f.ffilter.or.fdecodeparams.keys")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("lzwdecode.filter.is.not.permitted")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "						throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("not.identity.crypt.filter.is.not.permitted")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("lzwdecode.filter.is.not.permitted")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "							throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("not.identity.crypt.filter.is.not.permitted")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.form.xobject.dictionary.shall.not.contain.opi.key")); " is 138.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.form.xobject.dictionary.shall.not.contain.ps.key")); " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStream,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("postscript.xobjects.are.not.allowed")); " is 122.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckFileSpec,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("file.specification.dictionary.shall.contain.f.uf.and.desc.entries")); " is 152.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckFileSpec,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("ef.key.of.file.specification.dictionary.shall.contain.dictionary.with.valid.f.key")); " is 168.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckFileSpec,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("ef.key.of.file.specification.dictionary.shall.contain.dictionary.with.valid.f.key")); " is 168.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckEmbeddedFile,The length of the statement  "		throw new PdfAConformanceException (embeddedFile' MessageLocalization.GetComposedMessage ("embedded.file.shall.contain.pdf.mime.type")); " is 136.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata")); " is 141.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry")); " is 148.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry")); " is 157.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry")); " is 158.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry")); " is 170.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "									if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) { " is 127.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "										throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue")); " is 176.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "						throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) { " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true")); " is 196.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "						throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction")); " is 146.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry")); " is 129.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry")); " is 136.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object")); " is 154.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "						throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent")); " is 134.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr")); " is 121.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent")); " is 140.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5")); " is 161.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key")); " is 149.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckCanvas,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("graphics.state.stack.depth.is.greater.than.28")); " is 132.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry")); " is 167.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' "null")); " is 124.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ())); " is 137.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key")); " is 135.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) == true || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) == true || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW) == true || CheckFlag (flags' PdfAnnotation.FLAGS_TOGGLENOVIEW) == true) { " is 297.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.noview.and.togglenoview.flag.bits.shall.be.set.to.0")); " is 207.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) { " is 121.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1")); " is 166.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "		if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) { " is 127.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry")); " is 167.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ())); " is 153.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) { " is 125.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value")); " is 196.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value")); " is 155.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue) " is 161.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "			if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect) " is 140.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary")); " is 149.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAction,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("deprecated.setstate.and.noop.actions.are.not.allowed")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAction,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("launch.sound.movie.resetform.importdata.and.javascript.actions.are.not.allowed")); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAction,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("named.action.type.1.not.allowed"' n.ToString ())); " is 133.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckForm,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("needappearances.flag.of.the.interactive.form.dictionary.shall.either.not.be.present.or.shall.be.false")); " is 188.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckStructElem,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("alt.entry.should.specify.alternate.description.for.1.element"' role.ToString ())); " is 165.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckOutputIntent,The length of the statement  "		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.not.be.updated")); " is 120.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "				throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicecmyk.shall.only.be.used.if.defaultcmyk.pdfa.or.outputintent")); " is 152.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "				throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicergb.shall.only.be.used.if.defaultrgb.pdfa.or.outputintent")); " is 150.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "				throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicergb.shall.only.be.used.if.defaultrgb.pdfa.or.outputintent")); " is 150.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "				throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicecmyk.shall.only.be.used.if.defaultcmyk.pdfa.or.outputintent")); " is 152.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("outputintent.shall.have.colourspace.gray.rgb.or.cmyk")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicergb.shall.only.be.used.if.defaultrgb.pdfa.or.outputintent")); " is 150.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicecmyk.shall.only.be.used.if.defaultcmyk.pdfa.or.outputintent")); " is 152.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("devicegray.shall.only.be.used.if.defaultgray.pdfa.or.outputintent")); " is 152.
Long Statement,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,Close,The length of the statement  "			throw new PdfAConformanceException (null' MessageLocalization.GetComposedMessage ("if.the.document.not.contain.outputintent.transparencygroup.shall.comtain.cs.key")); " is 166.
Long Statement,iTextSharp.text.pdf.intern,PdfA3Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA3Checker.cs,CheckFileSpec,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("file.specification.dictionary.shall.contain.f.uf.and.desc.entries")); " is 152.
Long Statement,iTextSharp.text.pdf.intern,PdfA3Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA3Checker.cs,CheckFileSpec,The length of the statement  "			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("file.specification.dictionary.shall.contain.correct.afrelationship.key")); " is 157.
Long Statement,iTextSharp.text.pdf.intern,PdfA3Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA3Checker.cs,CheckFileSpec,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("ef.key.of.file.specification.dictionary.shall.contain.dictionary.with.valid.f.key")); " is 168.
Long Statement,iTextSharp.text.pdf.intern,PdfA3Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA3Checker.cs,CheckFileSpec,The length of the statement  "				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("ef.key.of.file.specification.dictionary.shall.contain.dictionary.with.valid.f.key")); " is 168.
Long Statement,iTextSharp.text.pdf.intern,PdfA3Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA3Checker.cs,CheckEmbeddedFile,The length of the statement  "		throw new PdfAConformanceException (embeddedFile' MessageLocalization.GetComposedMessage ("embedded.file.shall.contain.valid.params.key")); " is 139.
Long Statement,iTextSharp.text.pdf.intern,PdfA3Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA3Checker.cs,CheckEmbeddedFile,The length of the statement  "			throw new PdfAConformanceException (embeddedFile' MessageLocalization.GetComposedMessage ("embedded.file.shall.contain.params.key.with.valid.moddate.key")); " is 156.
Long Statement,iTextSharp.text.pdf.intern,PdfAChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAChecker.cs,CheckStructure,The length of the statement  "	return conformanceLevel == PdfAConformanceLevel.PDF_A_1A || conformanceLevel == PdfAConformanceLevel.PDF_A_2A || conformanceLevel == PdfAConformanceLevel.PDF_A_3A; " is 163.
Long Statement,iTextSharp.text.pdf.intern,PdfAChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAChecker.cs,CheckOutputIntentsInStamperMode,The length of the statement  "				throw new PdfAConformanceException (outPutIntentsDic' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent")); " is 146.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf.intern,ZugferdChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\ZugferdChecker.cs,Close,The length of the statement  "			if ((attachment.GetAsString (PdfName.UF) != null && docFileName.Equals (attachment.GetAsString (PdfName.UF).ToString ())) || (attachment.GetAsString (PdfName.F) != null && docFileName.Equals (attachment.GetAsString (PdfName.F).ToString ()))) { " is 243.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf.intern,ZugferdChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\ZugferdChecker.cs,Close,The length of the statement  "					throw new PdfAConformanceException (attachment' MessageLocalization.GetComposedMessage ("afrelationship.value.shall.be.alternative")); " is 134.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf.intern,ZugferdChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\ZugferdChecker.cs,Close,The length of the statement  "		throw new PdfAConformanceException (xmpMeta' MessageLocalization.GetComposedMessage ("zugferd.xmp.schema.shall.contain.attachment.name")); " is 138.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,SetOutputIntents,The length of the statement  "	SetOutputIntents (GetNameString (outa' PdfName.OUTPUTCONDITIONIDENTIFIER)' GetNameString (outa' PdfName.OUTPUTCONDITION)' GetNameString (outa' PdfName.REGISTRYNAME)' GetNameString (outa' PdfName.INFO)' destProfile); " is 215.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,The length of the statement  "		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.documents.can.be.added.in.PdfACopy")); " is 125.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,The length of the statement  "		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.documents.can.be.added.in.PdfACopy")); " is 125.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("incompatible.pdf.a.conformance.level"' "a")); " is 122.
Long Statement,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,The length of the statement  "			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("incompatible.pdf.a.conformance.level"' "u")); " is 122.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckImage,The conditional expression  "intent != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (intent) || PdfName.ABSOLUTECOLORIMETRIC.Equals (intent) || PdfName.PERCEPTUAL.Equals (intent) || PdfName.SATURATION.Equals (intent))"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckGState,The conditional expression  "ri != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (ri) || PdfName.ABSOLUTECOLORIMETRIC.Equals (ri) || PdfName.PERCEPTUAL.Equals (ri) || PdfName.SATURATION.Equals (ri))"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The conditional expression  "CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW)"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,Close,The conditional expression  "(rgbUsed || cmykUsed || grayUsed) && pdfaOutputIntentColorSpace == null"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The conditional expression  "ri != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (ri) || PdfName.ABSOLUTECOLORIMETRIC.Equals (ri) || PdfName.PERCEPTUAL.Equals (ri) || PdfName.SATURATION.Equals (ri))"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The conditional expression  "width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The conditional expression  "CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) == true || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) == true || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW) == true || CheckFlag (flags' PdfAnnotation.FLAGS_TOGGLENOVIEW) == true"  is complex.
Complex Conditional,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The conditional expression  "index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue"  is complex.
Complex Conditional,itextsharp.pdfa.iTextSharp.text.pdf.intern,ZugferdChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\ZugferdChecker.cs,Close,The conditional expression  "(attachment.GetAsString (PdfName.UF) != null && docFileName.Equals (attachment.GetAsString (PdfName.UF).ToString ())) || (attachment.GetAsString (PdfName.F) != null && docFileName.Equals (attachment.GetAsString (PdfName.F).ToString ()))"  is complex.
Virtual Method Call from Constructor,iTextSharp.text.pdf.intern,PdfAChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAChecker.cs,PdfAChecker,The constructor "PdfAChecker" calls a virtual method "InitKeysForCheck".
Virtual Method Call from Constructor,iTextSharp.text.xml.xmp,PdfASchema,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\xml\xmp\PdfASchema.cs,PdfASchema,The constructor "PdfASchema" calls a virtual method "AddPart".
Magic Number,iTextSharp.text.pdf,PdfARadioCheckField,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfARadioCheckField.cs,GetAppearance,The following statement contains a magic number: if (borderExtra) {  	bw2 *= 2;  }  
Magic Number,iTextSharp.text.pdf,PdfARadioCheckField,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfARadioCheckField.cs,GetAppearance,The following statement contains a magic number: bw2 *= 2;  
Magic Number,iTextSharp.text.pdf,PdfATtfUnicodeWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfATtfUnicodeWriter.cs,WriteFont,The following statement contains a magic number: for (int i = 0; i < font.MaxGlyphId / 8; i++) {  	cidSetBytes [i] |= 0xff;  }  
Magic Number,iTextSharp.text.pdf,PdfATtfUnicodeWriter,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfATtfUnicodeWriter.cs,WriteFont,The following statement contains a magic number: for (int i = 0; i < font.MaxGlyphId % 8; i++) {  	cidSetBytes [cidSetBytes.Length - 1] |= rotbits [i];  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > maxRealValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfArray) {  	PdfArray array = (PdfArray)obj1;  	if (array.Size > maxArrayLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ()));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > maxRealValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfArray) {  	PdfArray array = (PdfArray)obj1;  	if (array.Size > maxArrayLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ()));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfArray) {  	PdfArray array = (PdfArray)obj1;  	if (array.Size > maxArrayLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ()));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfArray) {  	PdfArray array = (PdfArray)obj1;  	if (array.Size > maxArrayLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ()));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfArray) {  	PdfArray array = (PdfArray)obj1;  	if (array.Size > maxArrayLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ()));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfArray) {  	PdfArray array = (PdfArray)obj1;  	if (array.Size > maxArrayLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.array.exceeds.length.set.by.PDFA1.standard"' array.Length.ToString ()));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	if (dictionary.Size > maxDictionaryLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.dictionary.is.out.of.bounds"));  	}  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  				ICC_Profile icc_profile = writer.ColorProfile;  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			}  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.CATALOG.Equals (type)) {  	if (!dictionary.Contains (PdfName.METADATA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  	}  	if (dictionary.Contains (PdfName.NAMES)) {  		PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  		if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  		}  	}  	if (CheckStructure (conformanceLevel)) {  		PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  		if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  		}  		if (!dictionary.Contains (PdfName.LANG)) {  			if (LOGGER.IsLogging (Level.WARN)) {  				LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  			}  		}  	}  } else if (PdfName.PAGE.Equals (type)) {  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		}  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.CATALOG.Equals (type)) {  	if (!dictionary.Contains (PdfName.METADATA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  	}  	if (dictionary.Contains (PdfName.NAMES)) {  		PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  		if (names != null && names.Contains (PdfName.EMBEDDEDFILES)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.embeddedfiles.names.entry"));  		}  	}  	if (CheckStructure (conformanceLevel)) {  		PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  		if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  		}  		if (!dictionary.Contains (PdfName.LANG)) {  			if (LOGGER.IsLogging (Level.WARN)) {  				LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  			}  		}  	}  } else if (PdfName.PAGE.Equals (type)) {  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		}  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.PAGE.Equals (type)) {  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		}  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.PAGE.Equals (type)) {  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		}  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		}  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		}  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (pdfaDestOutputIntent != null) {  	if (PdfName.GTS_PDFA1.Equals (gts)) {  		if (pdfaOutputIntentColorSpace != null)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  		pdfaOutputIntentColorSpace = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  	}  } else {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (pdfaDestOutputIntent != null) {  	if (PdfName.GTS_PDFA1.Equals (gts)) {  		if (pdfaOutputIntentColorSpace != null)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  		pdfaOutputIntentColorSpace = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  	}  } else {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.GTS_PDFA1.Equals (gts)) {  	if (pdfaOutputIntentColorSpace != null)  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  	pdfaOutputIntentColorSpace = "";  	ICC_Profile icc_profile = writer.ColorProfile;  	pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.GTS_PDFA1.Equals (gts)) {  	if (pdfaOutputIntentColorSpace != null)  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  	pdfaOutputIntentColorSpace = "";  	ICC_Profile icc_profile = writer.ColorProfile;  	pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckPdfObject,The following statement contains a magic number: pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The following statement contains a magic number: if (obj1 is PdfAnnotation) {  	PdfAnnotation annot = (PdfAnnotation)obj1;  	PdfName subtype = annot.Get (PdfName.SUBTYPE) as PdfName;  	if (subtype != null && !allowedAnnotTypes.Contains (subtype))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ()));  	PdfNumber ca = annot.GetAsNumber (PdfName.CA);  	if (ca != null && ca.FloatValue != 1.0) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.not.contain.the.ca.key.with.a.value.other.than.1"));  	}  	PdfNumber f = annot.GetAsNumber (PdfName.F);  	if (f == null) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key"));  	}  	int flags = f.IntValue;  	if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.and.noview.flag.bits.shall.be.set.to.0"));  	}  	if (PdfName.TEXT.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  		if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1"));  		}  	}  	if (annot.Contains (PdfName.C) || annot.Contains (PdfName.IC)) {  		ICC_Profile colorProfile = ((PdfAWriter)writer).ColorProfile;  		String cs = "";  		cs = System.Text.Encoding.ASCII.GetString (colorProfile.Data' 16' 4);  		cs = cs.Trim ();  		if (!"RGB".Equals (cs.ToUpper ())) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("destoutputprofile.in.the.pdfa1.outputintent.dictionary.shall.be.rgb"));  		}  	}  	PdfDictionary ap = GetDirectDictionary (annot.Get (PdfName.AP));  	if (ap != null) {  		if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  		PdfObject n = ap.Get (PdfName.N);  		if (!(n is PdfIndirectReference)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  	}  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry"));  	}  	if (CheckStructure (conformanceLevel)) {  		if (contentAnnotations.Contains (subtype) && !annot.Contains (PdfName.CONTENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ()));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The following statement contains a magic number: if (obj1 is PdfAnnotation) {  	PdfAnnotation annot = (PdfAnnotation)obj1;  	PdfName subtype = annot.Get (PdfName.SUBTYPE) as PdfName;  	if (subtype != null && !allowedAnnotTypes.Contains (subtype))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ()));  	PdfNumber ca = annot.GetAsNumber (PdfName.CA);  	if (ca != null && ca.FloatValue != 1.0) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.not.contain.the.ca.key.with.a.value.other.than.1"));  	}  	PdfNumber f = annot.GetAsNumber (PdfName.F);  	if (f == null) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key"));  	}  	int flags = f.IntValue;  	if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.and.noview.flag.bits.shall.be.set.to.0"));  	}  	if (PdfName.TEXT.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  		if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1"));  		}  	}  	if (annot.Contains (PdfName.C) || annot.Contains (PdfName.IC)) {  		ICC_Profile colorProfile = ((PdfAWriter)writer).ColorProfile;  		String cs = "";  		cs = System.Text.Encoding.ASCII.GetString (colorProfile.Data' 16' 4);  		cs = cs.Trim ();  		if (!"RGB".Equals (cs.ToUpper ())) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("destoutputprofile.in.the.pdfa1.outputintent.dictionary.shall.be.rgb"));  		}  	}  	PdfDictionary ap = GetDirectDictionary (annot.Get (PdfName.AP));  	if (ap != null) {  		if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  		PdfObject n = ap.Get (PdfName.N);  		if (!(n is PdfIndirectReference)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  	}  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry"));  	}  	if (CheckStructure (conformanceLevel)) {  		if (contentAnnotations.Contains (subtype) && !annot.Contains (PdfName.CONTENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ()));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The following statement contains a magic number: if (annot.Contains (PdfName.C) || annot.Contains (PdfName.IC)) {  	ICC_Profile colorProfile = ((PdfAWriter)writer).ColorProfile;  	String cs = "";  	cs = System.Text.Encoding.ASCII.GetString (colorProfile.Data' 16' 4);  	cs = cs.Trim ();  	if (!"RGB".Equals (cs.ToUpper ())) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("destoutputprofile.in.the.pdfa1.outputintent.dictionary.shall.be.rgb"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The following statement contains a magic number: if (annot.Contains (PdfName.C) || annot.Contains (PdfName.IC)) {  	ICC_Profile colorProfile = ((PdfAWriter)writer).ColorProfile;  	String cs = "";  	cs = System.Text.Encoding.ASCII.GetString (colorProfile.Data' 16' 4);  	cs = cs.Trim ();  	if (!"RGB".Equals (cs.ToUpper ())) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("destoutputprofile.in.the.pdfa1.outputintent.dictionary.shall.be.rgb"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The following statement contains a magic number: cs = System.Text.Encoding.ASCII.GetString (colorProfile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckAnnotation,The following statement contains a magic number: cs = System.Text.Encoding.ASCII.GetString (colorProfile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The following statement contains a magic number: if (obj1 is PdfObject) {  	PdfDictionary gs = GetDirectDictionary ((PdfObject)obj1);  	PdfObject obj = gs.Get (PdfName.BM);  	if (obj != null) {  		if (!allowedBlendModes.Contains ((PdfName)obj))  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("blend.mode.1.not.allowed"' obj.ToString ()));  		if (!PdfGState.BM_NORMAL.Equals (obj))  			transparencyDetectedOnThePage = true;  	}  	PdfNumber ca = gs.GetAsNumber (PdfName.ca);  	if (ca != null && ca.FloatValue < 1f) {  		transparencyDetectedOnThePage = true;  	}  	ca = gs.GetAsNumber (PdfName.CA);  	if (ca != null && ca.FloatValue < 1f) {  		transparencyDetectedOnThePage = true;  	}  	PdfDictionary smask = GetDirectDictionary (gs.Get (PdfName.SMASK));  	if (smask != null) {  		transparencyDetectedOnThePage = true;  	}  	if (gs.Contains (PdfName.TR)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.tr.key"));  	}  	PdfName tr2 = gs.GetAsName (PdfName.TR2);  	if (tr2 != null && !tr2.Equals (PdfName.DEFAULT)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.TR2.key.with.a.value.other.than.default"));  	}  	if (gs.Contains (PdfName.HTP)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.htp.key"));  	}  	PdfDictionary halfTone = GetDirectDictionary (gs.Get (PdfName.HT));  	if (halfTone != null) {  		if (halfTone.Contains (PdfName.HALFTONENAME))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("halftones.shall.not.contains.halftonename"));  		PdfNumber halftoneType = halfTone.GetAsNumber (PdfName.HALFTONETYPE);  		if (halftoneType == null || (halftoneType.IntValue != 1 && halftoneType.IntValue != 5))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("all.halftones.shall.have.halftonetype.1.or.5"));  	}  	PdfName ri = gs.GetAsName (PdfName.RI);  	if (ri != null && !(PdfName.RELATIVECOLORIMETRIC.Equals (ri) || PdfName.ABSOLUTECOLORIMETRIC.Equals (ri) || PdfName.PERCEPTUAL.Equals (ri) || PdfName.SATURATION.Equals (ri))) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("1.value.of.ri.key.is.not.allowed"' ri.ToString ()));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The following statement contains a magic number: if (halfTone != null) {  	if (halfTone.Contains (PdfName.HALFTONENAME))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("halftones.shall.not.contains.halftonename"));  	PdfNumber halftoneType = halfTone.GetAsNumber (PdfName.HALFTONETYPE);  	if (halftoneType == null || (halftoneType.IntValue != 1 && halftoneType.IntValue != 5))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("all.halftones.shall.have.halftonetype.1.or.5"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckGState,The following statement contains a magic number: if (halftoneType == null || (halftoneType.IntValue != 1 && halftoneType.IntValue != 5))  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("all.halftones.shall.have.halftonetype.1.or.5"));  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (pdfImage != null && (pdfImage.Image is Jpeg2000)) {  	Jpeg2000 jpeg2000 = (Jpeg2000)pdfImage.Image;  	if (!jpeg2000.IsJp2 ()) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used"));  	}  	if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  	}  	if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  	}  	if (jpeg2000.GetBpcBoxData () != null) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth"));  	}  	List<Jpeg2000.ColorSpecBox> colorSpecBoxes = jpeg2000.GetColorSpecBoxes ();  	if (colorSpecBoxes != null) {  		if (colorSpecBoxes.Count > 1) {  			int approx0x01 = 0;  			foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  				if (colorSpecBox.GetApprox () == 1)  					approx0x01++;  			}  			if (approx0x01 != 1) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  			}  		}  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  			}  			if (colorSpecBox.GetEnumCs () == 19) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  			}  			byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  			if (colorProfileBytes != null) {  				//ICC profile verification should follow here.  			}  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (pdfImage != null && (pdfImage.Image is Jpeg2000)) {  	Jpeg2000 jpeg2000 = (Jpeg2000)pdfImage.Image;  	if (!jpeg2000.IsJp2 ()) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used"));  	}  	if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  	}  	if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  	}  	if (jpeg2000.GetBpcBoxData () != null) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth"));  	}  	List<Jpeg2000.ColorSpecBox> colorSpecBoxes = jpeg2000.GetColorSpecBoxes ();  	if (colorSpecBoxes != null) {  		if (colorSpecBoxes.Count > 1) {  			int approx0x01 = 0;  			foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  				if (colorSpecBox.GetApprox () == 1)  					approx0x01++;  			}  			if (approx0x01 != 1) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  			}  		}  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  			}  			if (colorSpecBox.GetEnumCs () == 19) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  			}  			byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  			if (colorProfileBytes != null) {  				//ICC profile verification should follow here.  			}  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (pdfImage != null && (pdfImage.Image is Jpeg2000)) {  	Jpeg2000 jpeg2000 = (Jpeg2000)pdfImage.Image;  	if (!jpeg2000.IsJp2 ()) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used"));  	}  	if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  	}  	if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  	}  	if (jpeg2000.GetBpcBoxData () != null) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth"));  	}  	List<Jpeg2000.ColorSpecBox> colorSpecBoxes = jpeg2000.GetColorSpecBoxes ();  	if (colorSpecBoxes != null) {  		if (colorSpecBoxes.Count > 1) {  			int approx0x01 = 0;  			foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  				if (colorSpecBox.GetApprox () == 1)  					approx0x01++;  			}  			if (approx0x01 != 1) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  			}  		}  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  			}  			if (colorSpecBox.GetEnumCs () == 19) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  			}  			byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  			if (colorProfileBytes != null) {  				//ICC profile verification should follow here.  			}  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (pdfImage != null && (pdfImage.Image is Jpeg2000)) {  	Jpeg2000 jpeg2000 = (Jpeg2000)pdfImage.Image;  	if (!jpeg2000.IsJp2 ()) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used"));  	}  	if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  	}  	if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  	}  	if (jpeg2000.GetBpcBoxData () != null) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth"));  	}  	List<Jpeg2000.ColorSpecBox> colorSpecBoxes = jpeg2000.GetColorSpecBoxes ();  	if (colorSpecBoxes != null) {  		if (colorSpecBoxes.Count > 1) {  			int approx0x01 = 0;  			foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  				if (colorSpecBox.GetApprox () == 1)  					approx0x01++;  			}  			if (approx0x01 != 1) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  			}  		}  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  			}  			if (colorSpecBox.GetEnumCs () == 19) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  			}  			byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  			if (colorProfileBytes != null) {  				//ICC profile verification should follow here.  			}  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (pdfImage != null && (pdfImage.Image is Jpeg2000)) {  	Jpeg2000 jpeg2000 = (Jpeg2000)pdfImage.Image;  	if (!jpeg2000.IsJp2 ()) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used"));  	}  	if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  	}  	if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  	}  	if (jpeg2000.GetBpcBoxData () != null) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth"));  	}  	List<Jpeg2000.ColorSpecBox> colorSpecBoxes = jpeg2000.GetColorSpecBoxes ();  	if (colorSpecBoxes != null) {  		if (colorSpecBoxes.Count > 1) {  			int approx0x01 = 0;  			foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  				if (colorSpecBox.GetApprox () == 1)  					approx0x01++;  			}  			if (approx0x01 != 1) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  			}  		}  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  			}  			if (colorSpecBox.GetEnumCs () == 19) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  			}  			byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  			if (colorProfileBytes != null) {  				//ICC profile verification should follow here.  			}  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (pdfImage != null && (pdfImage.Image is Jpeg2000)) {  	Jpeg2000 jpeg2000 = (Jpeg2000)pdfImage.Image;  	if (!jpeg2000.IsJp2 ()) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.jpx.baseline.set.of.features.shall.be.used"));  	}  	if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  	}  	if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  	}  	if (jpeg2000.GetBpcBoxData () != null) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("all.colour.channels.in.the.jpeg2000.data.shall.have.the.same.bit-depth"));  	}  	List<Jpeg2000.ColorSpecBox> colorSpecBoxes = jpeg2000.GetColorSpecBoxes ();  	if (colorSpecBoxes != null) {  		if (colorSpecBoxes.Count > 1) {  			int approx0x01 = 0;  			foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  				if (colorSpecBox.GetApprox () == 1)  					approx0x01++;  			}  			if (approx0x01 != 1) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  			}  		}  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  			}  			if (colorSpecBox.GetEnumCs () == 19) {  				throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  			}  			byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  			if (colorProfileBytes != null) {  				//ICC profile verification should follow here.  			}  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (jpeg2000.GetNumOfComps () != 1 && jpeg2000.GetNumOfComps () != 3 && jpeg2000.GetNumOfComps () != 4) {  	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.number.of.colour.channels.in.the.jpeg2000.data.shall.be.123"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (jpeg2000.Bpc < 1 || jpeg2000.Bpc > 38) {  	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.bit-depth.of.the.jpeg2000.data.shall.have.a.value.in.the.range.1to38"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (colorSpecBoxes != null) {  	if (colorSpecBoxes.Count > 1) {  		int approx0x01 = 0;  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetApprox () == 1)  				approx0x01++;  		}  		if (approx0x01 != 1) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  		}  	}  	foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  		if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  		}  		if (colorSpecBox.GetEnumCs () == 19) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  		}  		byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  		if (colorProfileBytes != null) {  			//ICC profile verification should follow here.  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (colorSpecBoxes != null) {  	if (colorSpecBoxes.Count > 1) {  		int approx0x01 = 0;  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetApprox () == 1)  				approx0x01++;  		}  		if (approx0x01 != 1) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  		}  	}  	foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  		if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  		}  		if (colorSpecBox.GetEnumCs () == 19) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  		}  		byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  		if (colorProfileBytes != null) {  			//ICC profile verification should follow here.  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (colorSpecBoxes != null) {  	if (colorSpecBoxes.Count > 1) {  		int approx0x01 = 0;  		foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  			if (colorSpecBox.GetApprox () == 1)  				approx0x01++;  		}  		if (approx0x01 != 1) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("exactly.one.colour.space.specification.shall.have.the.value.0x01.in.the.approx.field"));  		}  	}  	foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  		if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  		}  		if (colorSpecBox.GetEnumCs () == 19) {  			throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  		}  		byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  		if (colorProfileBytes != null) {  			//ICC profile verification should follow here.  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  	if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  	}  	if (colorSpecBox.GetEnumCs () == 19) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  	}  	byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  	if (colorProfileBytes != null) {  		//ICC profile verification should follow here.  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  	if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  	}  	if (colorSpecBox.GetEnumCs () == 19) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  	}  	byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  	if (colorProfileBytes != null) {  		//ICC profile verification should follow here.  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: foreach (Jpeg2000.ColorSpecBox colorSpecBox in colorSpecBoxes) {  	if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  	}  	if (colorSpecBox.GetEnumCs () == 19) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  	}  	byte[] colorProfileBytes = colorSpecBox.GetColorProfile ();  	if (colorProfileBytes != null) {  		//ICC profile verification should follow here.  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (colorSpecBox.GetMeth () != 1 && colorSpecBox.GetMeth () != 2 && colorSpecBox.GetMeth () != 3) {  	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("the.value.of.the.meth.entry.in.colr.box.shall.be.123"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckImage,The following statement contains a magic number: if (colorSpecBox.GetEnumCs () == 19) {  	throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("jpeg2000.enumerated.colour.space.19.(CIEJab).shall.not.be.used"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > float.MaxValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > float.MaxValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > float.MaxValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > float.MaxValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfNumber) {  	PdfNumber number = (PdfNumber)obj1;  	if (Math.Abs (number.DoubleValue) > float.MaxValue && number.ToString ().Contains (".")) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("real.number.is.out.of.range"));  	}  } else if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfString) {  	PdfString str = (PdfString)obj1;  	if (str.GetBytes ().Length > maxStringLength) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("pdf.string.is.too.long"));  	}  } else if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj1 is PdfDictionary) {  	PdfDictionary dictionary = (PdfDictionary)obj1;  	PdfName type = dictionary.GetAsName (PdfName.TYPE);  	if (PdfName.CATALOG.Equals (type)) {  		if (!dictionary.Contains (PdfName.METADATA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  		}  		if (dictionary.Contains (PdfName.REQUIREMENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  		}  		if (dictionary.Contains (PdfName.NEEDRENDERING)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  		}  		if (dictionary.Contains (PdfName.ACROFORM)) {  			PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  			if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  			}  		}  		if (dictionary.Contains (PdfName.NAMES)) {  			PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  			if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  			}  		}  		PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  		if (permissions != null) {  			foreach (PdfName dictKey in permissions.Keys) {  				if (PdfName.DOCMDP.Equals (dictKey)) {  					PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  					if (signatureDict != null) {  						PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  						if (references != null) {  							for (int i = 0; i < references.Size; i++) {  								PdfDictionary referenceDict = GetDirectDictionary (references [i]);  								if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  									throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  								}  							}  						}  					}  				} else if (PdfName.UR3.Equals (dictKey)) {  				} else {  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  				}  			}  		}  		if (CheckStructure (conformanceLevel)) {  			PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  			if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  			}  			if (!dictionary.Contains (PdfName.LANG)) {  				if (LOGGER.IsLogging (Level.WARN)) {  					LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  				}  			}  		}  	} else if (PdfName.PAGE.Equals (type)) {  		PdfName[] boxNames = new PdfName[] {  			PdfName.MEDIABOX'  			PdfName.CROPBOX'  			PdfName.TRIMBOX'  			PdfName.ARTBOX'  			PdfName.BLEEDBOX  		};  		foreach (PdfName boxName in boxNames) {  			PdfObject box = dictionary.GetDirectObject (boxName);  			if (box is PdfRectangle) {  				float width = ((PdfRectangle)box).Width;  				float height = ((PdfRectangle)box).Height;  				if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  			}  		}  		if (dictionary.Contains (PdfName.AA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  		}  		if (dictionary.Contains (PdfName.PRESSTEPS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  		}  		if (transparencyDetectedOnThePage) {  			PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  			if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  				transparencyWithoutPageGroupDetected = true;  			} else {  				PdfName csName = group.GetAsName (PdfName.CS);  				if (PdfName.DEVICERGB.Equals (csName))  					rgbUsed = true;  				if (PdfName.DEVICEGRAY.Equals (csName))  					grayUsed = true;  				if (PdfName.DEVICECMYK.Equals (csName))  					cmykUsed = true;  			}  		}  		transparencyDetectedOnThePage = false;  	} else if (PdfName.OUTPUTINTENT.Equals (type)) {  		isCheckOutputIntent = true;  		PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  		if (destOutputIntent != null && pdfaDestOutputIntent != null) {  			if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  		} else {  			pdfaDestOutputIntent = destOutputIntent;  		}  		PdfName gts = dictionary.GetAsName (PdfName.S);  		if (pdfaDestOutputIntent != null) {  			if (PdfName.GTS_PDFA1.Equals (gts)) {  				if (pdfaOutputIntentColorSpace != null)  					throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  				pdfaOutputIntentColorSpace = "";  			}  			String deviceClass = "";  			ICC_Profile icc_profile = writer.ColorProfile;  			if (PdfName.GTS_PDFA1.Equals (gts))  				pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  			deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  			if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  		} else {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  		}  	} else if (PdfName.EMBEDDEDFILE.Equals (type)) {  		CheckEmbeddedFile (dictionary);  	}  	PdfObject obj2 = dictionary.Get (PdfName.HALFTONETYPE);  	if (obj2 != null && obj2.IsNumber ()) {  		PdfNumber number = (PdfNumber)obj2;  		if (number.IntValue != 1 || number.IntValue != 5) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  		}  		if (dictionary.Contains (PdfName.HALFTONENAME)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  		}  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.CATALOG.Equals (type)) {  	if (!dictionary.Contains (PdfName.METADATA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  	}  	if (dictionary.Contains (PdfName.REQUIREMENTS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  	}  	if (dictionary.Contains (PdfName.NEEDRENDERING)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  	}  	if (dictionary.Contains (PdfName.ACROFORM)) {  		PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  		if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  		}  	}  	if (dictionary.Contains (PdfName.NAMES)) {  		PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  		if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  		}  	}  	PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  	if (permissions != null) {  		foreach (PdfName dictKey in permissions.Keys) {  			if (PdfName.DOCMDP.Equals (dictKey)) {  				PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  				if (signatureDict != null) {  					PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  					if (references != null) {  						for (int i = 0; i < references.Size; i++) {  							PdfDictionary referenceDict = GetDirectDictionary (references [i]);  							if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  								throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  							}  						}  					}  				}  			} else if (PdfName.UR3.Equals (dictKey)) {  			} else {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  			}  		}  	}  	if (CheckStructure (conformanceLevel)) {  		PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  		if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  		}  		if (!dictionary.Contains (PdfName.LANG)) {  			if (LOGGER.IsLogging (Level.WARN)) {  				LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  			}  		}  	}  } else if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.CATALOG.Equals (type)) {  	if (!dictionary.Contains (PdfName.METADATA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  	}  	if (dictionary.Contains (PdfName.REQUIREMENTS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  	}  	if (dictionary.Contains (PdfName.NEEDRENDERING)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  	}  	if (dictionary.Contains (PdfName.ACROFORM)) {  		PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  		if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  		}  	}  	if (dictionary.Contains (PdfName.NAMES)) {  		PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  		if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  		}  	}  	PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  	if (permissions != null) {  		foreach (PdfName dictKey in permissions.Keys) {  			if (PdfName.DOCMDP.Equals (dictKey)) {  				PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  				if (signatureDict != null) {  					PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  					if (references != null) {  						for (int i = 0; i < references.Size; i++) {  							PdfDictionary referenceDict = GetDirectDictionary (references [i]);  							if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  								throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  							}  						}  					}  				}  			} else if (PdfName.UR3.Equals (dictKey)) {  			} else {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  			}  		}  	}  	if (CheckStructure (conformanceLevel)) {  		PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  		if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  		}  		if (!dictionary.Contains (PdfName.LANG)) {  			if (LOGGER.IsLogging (Level.WARN)) {  				LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  			}  		}  	}  } else if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.CATALOG.Equals (type)) {  	if (!dictionary.Contains (PdfName.METADATA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  	}  	if (dictionary.Contains (PdfName.REQUIREMENTS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  	}  	if (dictionary.Contains (PdfName.NEEDRENDERING)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  	}  	if (dictionary.Contains (PdfName.ACROFORM)) {  		PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  		if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  		}  	}  	if (dictionary.Contains (PdfName.NAMES)) {  		PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  		if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  		}  	}  	PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  	if (permissions != null) {  		foreach (PdfName dictKey in permissions.Keys) {  			if (PdfName.DOCMDP.Equals (dictKey)) {  				PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  				if (signatureDict != null) {  					PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  					if (references != null) {  						for (int i = 0; i < references.Size; i++) {  							PdfDictionary referenceDict = GetDirectDictionary (references [i]);  							if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  								throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  							}  						}  					}  				}  			} else if (PdfName.UR3.Equals (dictKey)) {  			} else {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  			}  		}  	}  	if (CheckStructure (conformanceLevel)) {  		PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  		if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  		}  		if (!dictionary.Contains (PdfName.LANG)) {  			if (LOGGER.IsLogging (Level.WARN)) {  				LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  			}  		}  	}  } else if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.CATALOG.Equals (type)) {  	if (!dictionary.Contains (PdfName.METADATA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.contain.metadata"));  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.an.aa.entry"));  	}  	if (dictionary.Contains (PdfName.REQUIREMENTS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.requirements.entry"));  	}  	if (dictionary.Contains (PdfName.NEEDRENDERING)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.a.needrendering.entry"));  	}  	if (dictionary.Contains (PdfName.ACROFORM)) {  		PdfDictionary acroForm = GetDirectDictionary (dictionary.Get (PdfName.ACROFORM));  		if (acroForm != null && acroForm.Contains (PdfName.XFA)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.acroform.xfa.entry"));  		}  	}  	if (dictionary.Contains (PdfName.NAMES)) {  		PdfDictionary names = GetDirectDictionary (dictionary.Get (PdfName.NAMES));  		if (names != null && names.Contains (PdfName.ALTERNATEPRESENTATION)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.document.catalog.dictionary.shall.not.include.alternatepresentation.names.entry"));  		}  	}  	PdfDictionary permissions = GetDirectDictionary (dictionary.Get (PdfName.PERMS));  	if (permissions != null) {  		foreach (PdfName dictKey in permissions.Keys) {  			if (PdfName.DOCMDP.Equals (dictKey)) {  				PdfDictionary signatureDict = GetDirectDictionary (permissions.Get (PdfName.DOCMDP));  				if (signatureDict != null) {  					PdfArray references = GetDirectArray (signatureDict.Get (PdfName.REFERENCE));  					if (references != null) {  						for (int i = 0; i < references.Size; i++) {  							PdfDictionary referenceDict = GetDirectDictionary (references [i]);  							if (referenceDict.Contains (DIGESTLOCATION) || referenceDict.Contains (DIGESTMETHOD) || referenceDict.Contains (DIGESTVALUE)) {  								throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("signature.references.dictionary.shall.not.contain.digestlocation.digestmethod.digestvalue"));  							}  						}  					}  				}  			} else if (PdfName.UR3.Equals (dictKey)) {  			} else {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("no.keys.other.than.UR3.and.DocMDP.shall.be.present.in.a.permissions.dictionary"));  			}  		}  	}  	if (CheckStructure (conformanceLevel)) {  		PdfDictionary markInfo = GetDirectDictionary (dictionary.Get (PdfName.MARKINFO));  		if (markInfo == null || markInfo.GetAsBoolean (PdfName.MARKED) == null || markInfo.GetAsBoolean (PdfName.MARKED).BooleanValue == false) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("document.catalog.dictionary.shall.include.a.markinfo.dictionary.whose.entry.marked.shall.have.a.value.of.true"));  		}  		if (!dictionary.Contains (PdfName.LANG)) {  			if (LOGGER.IsLogging (Level.WARN)) {  				LOGGER.Warn (MessageLocalization.GetComposedMessage ("document.catalog.dictionary.should.contain.lang.entry"));  			}  		}  	}  } else if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.PAGE.Equals (type)) {  	PdfName[] boxNames = new PdfName[] {  		PdfName.MEDIABOX'  		PdfName.CROPBOX'  		PdfName.TRIMBOX'  		PdfName.ARTBOX'  		PdfName.BLEEDBOX  	};  	foreach (PdfName boxName in boxNames) {  		PdfObject box = dictionary.GetDirectObject (boxName);  		if (box is PdfRectangle) {  			float width = ((PdfRectangle)box).Width;  			float height = ((PdfRectangle)box).Height;  			if (width < minPageSize || width > maxPageSize || height < minPageSize || height > maxPageSize)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.page.less.3.units.nor.greater.14400.in.either.direction"));  		}  	}  	if (dictionary.Contains (PdfName.AA)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.aa.entry"));  	}  	if (dictionary.Contains (PdfName.PRESSTEPS)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("page.dictionary.shall.not.include.pressteps.entry"));  	}  	if (transparencyDetectedOnThePage) {  		PdfDictionary group = GetDirectDictionary (dictionary.Get (PdfName.GROUP));  		if (group == null || !PdfName.TRANSPARENCY.Equals (group.GetAsName (PdfName.S)) || !group.Contains (PdfName.CS)) {  			transparencyWithoutPageGroupDetected = true;  		} else {  			PdfName csName = group.GetAsName (PdfName.CS);  			if (PdfName.DEVICERGB.Equals (csName))  				rgbUsed = true;  			if (PdfName.DEVICEGRAY.Equals (csName))  				grayUsed = true;  			if (PdfName.DEVICECMYK.Equals (csName))  				cmykUsed = true;  		}  	}  	transparencyDetectedOnThePage = false;  } else if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.OUTPUTINTENT.Equals (type)) {  	isCheckOutputIntent = true;  	PdfObject destOutputIntent = dictionary.Get (PdfName.DESTOUTPUTPROFILE);  	if (destOutputIntent != null && pdfaDestOutputIntent != null) {  		if (pdfaDestOutputIntent.IndRef != destOutputIntent.IndRef)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("if.outputintents.array.more.than.one.entry.the.same.indirect.object"));  	} else {  		pdfaDestOutputIntent = destOutputIntent;  	}  	PdfName gts = dictionary.GetAsName (PdfName.S);  	if (pdfaDestOutputIntent != null) {  		if (PdfName.GTS_PDFA1.Equals (gts)) {  			if (pdfaOutputIntentColorSpace != null)  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  			pdfaOutputIntentColorSpace = "";  		}  		String deviceClass = "";  		ICC_Profile icc_profile = writer.ColorProfile;  		if (PdfName.GTS_PDFA1.Equals (gts))  			pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  		deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  		if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  	} else {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  	}  } else if (PdfName.EMBEDDEDFILE.Equals (type)) {  	CheckEmbeddedFile (dictionary);  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (pdfaDestOutputIntent != null) {  	if (PdfName.GTS_PDFA1.Equals (gts)) {  		if (pdfaOutputIntentColorSpace != null)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  		pdfaOutputIntentColorSpace = "";  	}  	String deviceClass = "";  	ICC_Profile icc_profile = writer.ColorProfile;  	if (PdfName.GTS_PDFA1.Equals (gts))  		pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  	deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  	if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  } else {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (pdfaDestOutputIntent != null) {  	if (PdfName.GTS_PDFA1.Equals (gts)) {  		if (pdfaOutputIntentColorSpace != null)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  		pdfaOutputIntentColorSpace = "";  	}  	String deviceClass = "";  	ICC_Profile icc_profile = writer.ColorProfile;  	if (PdfName.GTS_PDFA1.Equals (gts))  		pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  	deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  	if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  } else {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (pdfaDestOutputIntent != null) {  	if (PdfName.GTS_PDFA1.Equals (gts)) {  		if (pdfaOutputIntentColorSpace != null)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  		pdfaOutputIntentColorSpace = "";  	}  	String deviceClass = "";  	ICC_Profile icc_profile = writer.ColorProfile;  	if (PdfName.GTS_PDFA1.Equals (gts))  		pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  	deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  	if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  } else {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (pdfaDestOutputIntent != null) {  	if (PdfName.GTS_PDFA1.Equals (gts)) {  		if (pdfaOutputIntentColorSpace != null)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("a.pdfa.file.may.have.only.one.pdfa.outputintent"));  		pdfaOutputIntentColorSpace = "";  	}  	String deviceClass = "";  	ICC_Profile icc_profile = writer.ColorProfile;  	if (PdfName.GTS_PDFA1.Equals (gts))  		pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  	deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  	if (!"prtr".Equals (deviceClass) && !"mntr".Equals (deviceClass))  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.be.prtr.or.mntr"));  } else {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("outputintent.shall.have.gtspdfa1.and.destoutputintent"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.GTS_PDFA1.Equals (gts))  	pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (PdfName.GTS_PDFA1.Equals (gts))  	pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: pdfaOutputIntentColorSpace = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 16' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: deviceClass = Encoding.GetEncoding ("US-ASCII").GetString (icc_profile.Data' 12' 4);  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (obj2 != null && obj2.IsNumber ()) {  	PdfNumber number = (PdfNumber)obj2;  	if (number.IntValue != 1 || number.IntValue != 5) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  	}  	if (dictionary.Contains (PdfName.HALFTONENAME)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.not.contain.the.halftonename.key"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckPdfObject,The following statement contains a magic number: if (number.IntValue != 1 || number.IntValue != 5) {  	throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.extgstate.dictionary.shall.contain.the.halftonetype.key.of.value.1.or.5"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (obj1 is PdfAnnotation) {  	PdfAnnotation annot = (PdfAnnotation)obj1;  	PdfObject subtype = annot.Get (PdfName.SUBTYPE);  	if (subtype == null) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' "null"));  	}  	if (subtype != null && !allowedAnnotTypes.Contains ((PdfName)subtype)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ()));  	}  	if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  		PdfNumber f = annot.GetAsNumber (PdfName.F);  		if (f == null) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key"));  		}  		int flags = f.IntValue;  		if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) == true || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) == true || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW) == true || CheckFlag (flags' PdfAnnotation.FLAGS_TOGGLENOVIEW) == true) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.noview.and.togglenoview.flag.bits.shall.be.set.to.0"));  		}  		if (PdfName.TEXT.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  			if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1"));  			}  		}  	}  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry"));  	}  	if (CheckStructure (conformanceLevel)) {  		if (subtype is PdfName && contentAnnotations.Contains ((PdfName)subtype) && !annot.Contains (PdfName.CONTENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ()));  		}  	}  	PdfDictionary ap = GetDirectDictionary (annot.Get (PdfName.AP));  	if (ap != null) {  		if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  		PdfObject n = GetDirectObject (ap.Get (PdfName.N));  		if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) {  			if (n == null || (!n.IsDictionary () && n.Type != 0))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value"));  		} else {  			if (n == null || (!n.IsStream () && n.Type != 0))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  	} else {  		bool isCorrectRect = false;  		PdfArray rect = GetDirectArray (annot.Get (PdfName.RECT));  		if (rect != null && rect.Size == 4) {  			PdfNumber index0 = rect.GetAsNumber (0);  			PdfNumber index1 = rect.GetAsNumber (1);  			PdfNumber index2 = rect.GetAsNumber (2);  			PdfNumber index3 = rect.GetAsNumber (3);  			if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  				isCorrectRect = true;  		}  		if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (obj1 is PdfAnnotation) {  	PdfAnnotation annot = (PdfAnnotation)obj1;  	PdfObject subtype = annot.Get (PdfName.SUBTYPE);  	if (subtype == null) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' "null"));  	}  	if (subtype != null && !allowedAnnotTypes.Contains ((PdfName)subtype)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ()));  	}  	if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  		PdfNumber f = annot.GetAsNumber (PdfName.F);  		if (f == null) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key"));  		}  		int flags = f.IntValue;  		if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) == true || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) == true || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW) == true || CheckFlag (flags' PdfAnnotation.FLAGS_TOGGLENOVIEW) == true) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.noview.and.togglenoview.flag.bits.shall.be.set.to.0"));  		}  		if (PdfName.TEXT.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  			if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1"));  			}  		}  	}  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry"));  	}  	if (CheckStructure (conformanceLevel)) {  		if (subtype is PdfName && contentAnnotations.Contains ((PdfName)subtype) && !annot.Contains (PdfName.CONTENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ()));  		}  	}  	PdfDictionary ap = GetDirectDictionary (annot.Get (PdfName.AP));  	if (ap != null) {  		if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  		PdfObject n = GetDirectObject (ap.Get (PdfName.N));  		if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) {  			if (n == null || (!n.IsDictionary () && n.Type != 0))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value"));  		} else {  			if (n == null || (!n.IsStream () && n.Type != 0))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  	} else {  		bool isCorrectRect = false;  		PdfArray rect = GetDirectArray (annot.Get (PdfName.RECT));  		if (rect != null && rect.Size == 4) {  			PdfNumber index0 = rect.GetAsNumber (0);  			PdfNumber index1 = rect.GetAsNumber (1);  			PdfNumber index2 = rect.GetAsNumber (2);  			PdfNumber index3 = rect.GetAsNumber (3);  			if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  				isCorrectRect = true;  		}  		if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (obj1 is PdfAnnotation) {  	PdfAnnotation annot = (PdfAnnotation)obj1;  	PdfObject subtype = annot.Get (PdfName.SUBTYPE);  	if (subtype == null) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' "null"));  	}  	if (subtype != null && !allowedAnnotTypes.Contains ((PdfName)subtype)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.type.1.not.allowed"' subtype.ToString ()));  	}  	if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  		PdfNumber f = annot.GetAsNumber (PdfName.F);  		if (f == null) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("an.annotation.dictionary.shall.contain.the.f.key"));  		}  		int flags = f.IntValue;  		if (CheckFlag (flags' PdfAnnotation.FLAGS_PRINT) == false || CheckFlag (flags' PdfAnnotation.FLAGS_HIDDEN) == true || CheckFlag (flags' PdfAnnotation.FLAGS_INVISIBLE) == true || CheckFlag (flags' PdfAnnotation.FLAGS_NOVIEW) == true || CheckFlag (flags' PdfAnnotation.FLAGS_TOGGLENOVIEW) == true) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("the.f.keys.print.flag.bit.shall.be.set.to.1.and.its.hidden.invisible.noview.and.togglenoview.flag.bits.shall.be.set.to.0"));  		}  		if (PdfName.TEXT.Equals (annot.GetAsName (PdfName.SUBTYPE))) {  			if (CheckFlag (flags' PdfAnnotation.FLAGS_NOZOOM) == false || CheckFlag (flags' PdfAnnotation.FLAGS_NOROTATE) == false) {  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("text.annotations.should.set.the.nozoom.and.norotate.flag.bits.of.the.f.key.to.1"));  			}  		}  	}  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && (annot.Contains (PdfName.AA) || annot.Contains (PdfName.A))) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("widget.annotation.dictionary.or.field.dictionary.shall.not.include.a.or.aa.entry"));  	}  	if (CheckStructure (conformanceLevel)) {  		if (subtype is PdfName && contentAnnotations.Contains ((PdfName)subtype) && !annot.Contains (PdfName.CONTENTS)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("annotation.of.type.1.should.have.contents.key"' subtype.ToString ()));  		}  	}  	PdfDictionary ap = GetDirectDictionary (annot.Get (PdfName.AP));  	if (ap != null) {  		if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  		PdfObject n = GetDirectObject (ap.Get (PdfName.N));  		if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) {  			if (n == null || (!n.IsDictionary () && n.Type != 0))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value"));  		} else {  			if (n == null || (!n.IsStream () && n.Type != 0))  				throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  		}  	} else {  		bool isCorrectRect = false;  		PdfArray rect = GetDirectArray (annot.Get (PdfName.RECT));  		if (rect != null && rect.Size == 4) {  			PdfNumber index0 = rect.GetAsNumber (0);  			PdfNumber index1 = rect.GetAsNumber (1);  			PdfNumber index2 = rect.GetAsNumber (2);  			PdfNumber index3 = rect.GetAsNumber (3);  			if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  				isCorrectRect = true;  		}  		if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect)  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary"));  	}  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (ap != null) {  	if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  	}  	PdfObject n = GetDirectObject (ap.Get (PdfName.N));  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) {  		if (n == null || (!n.IsDictionary () && n.Type != 0))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value"));  	} else {  		if (n == null || (!n.IsStream () && n.Type != 0))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  	}  } else {  	bool isCorrectRect = false;  	PdfArray rect = GetDirectArray (annot.Get (PdfName.RECT));  	if (rect != null && rect.Size == 4) {  		PdfNumber index0 = rect.GetAsNumber (0);  		PdfNumber index1 = rect.GetAsNumber (1);  		PdfNumber index2 = rect.GetAsNumber (2);  		PdfNumber index3 = rect.GetAsNumber (3);  		if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  			isCorrectRect = true;  	}  	if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect)  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (ap != null) {  	if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  	}  	PdfObject n = GetDirectObject (ap.Get (PdfName.N));  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) {  		if (n == null || (!n.IsDictionary () && n.Type != 0))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value"));  	} else {  		if (n == null || (!n.IsStream () && n.Type != 0))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  	}  } else {  	bool isCorrectRect = false;  	PdfArray rect = GetDirectArray (annot.Get (PdfName.RECT));  	if (rect != null && rect.Size == 4) {  		PdfNumber index0 = rect.GetAsNumber (0);  		PdfNumber index1 = rect.GetAsNumber (1);  		PdfNumber index2 = rect.GetAsNumber (2);  		PdfNumber index3 = rect.GetAsNumber (3);  		if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  			isCorrectRect = true;  	}  	if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect)  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (ap != null) {  	if (ap.Contains (PdfName.R) || ap.Contains (PdfName.D)) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  	}  	PdfObject n = GetDirectObject (ap.Get (PdfName.N));  	if (PdfName.WIDGET.Equals (annot.GetAsName (PdfName.SUBTYPE)) && new PdfName ("Btn").Equals (annot.GetAsName (PdfName.FT))) {  		if (n == null || (!n.IsDictionary () && n.Type != 0))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.of.widget.subtype.and.btn.field.type.shall.contain.only.the.n.key.with.dictionary.value"));  	} else {  		if (n == null || (!n.IsStream () && n.Type != 0))  			throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("appearance.dictionary.shall.contain.only.the.n.key.with.stream.value"));  	}  } else {  	bool isCorrectRect = false;  	PdfArray rect = GetDirectArray (annot.Get (PdfName.RECT));  	if (rect != null && rect.Size == 4) {  		PdfNumber index0 = rect.GetAsNumber (0);  		PdfNumber index1 = rect.GetAsNumber (1);  		PdfNumber index2 = rect.GetAsNumber (2);  		PdfNumber index3 = rect.GetAsNumber (3);  		if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  			isCorrectRect = true;  	}  	if (!PdfName.POPUP.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !PdfName.LINK.Equals (annot.GetAsName (PdfName.SUBTYPE)) && !isCorrectRect)  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("every.annotation.shall.have.at.least.one.appearance.dictionary"));  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (rect != null && rect.Size == 4) {  	PdfNumber index0 = rect.GetAsNumber (0);  	PdfNumber index1 = rect.GetAsNumber (1);  	PdfNumber index2 = rect.GetAsNumber (2);  	PdfNumber index3 = rect.GetAsNumber (3);  	if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  		isCorrectRect = true;  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (rect != null && rect.Size == 4) {  	PdfNumber index0 = rect.GetAsNumber (0);  	PdfNumber index1 = rect.GetAsNumber (1);  	PdfNumber index2 = rect.GetAsNumber (2);  	PdfNumber index3 = rect.GetAsNumber (3);  	if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  		isCorrectRect = true;  }  
Magic Number,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckAnnotation,The following statement contains a magic number: if (rect != null && rect.Size == 4) {  	PdfNumber index0 = rect.GetAsNumber (0);  	PdfNumber index1 = rect.GetAsNumber (1);  	PdfNumber index2 = rect.GetAsNumber (2);  	PdfNumber index3 = rect.GetAsNumber (3);  	if (index0 != null && index1 != null && index2 != null && index3 != null && index0.DoubleValue == index2.DoubleValue && index1.DoubleValue == index3.DoubleValue)  		isCorrectRect = true;  }  
Magic Number,iTextSharp.text.pdf.intern,PdfAChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAChecker.cs,GetDirectObject,The following statement contains a magic number: while (obj is PdfIndirectReference) {  	PdfObject curr;  	if (obj.IsIndirect ())  		curr = PdfReader.GetPdfObject (obj);  	else  		cachedObjects.TryGetValue (new RefKey ((PdfIndirectReference)obj)' out curr);  	if (curr == null)  		break;  	obj = curr;  	//10 - is max allowed reference chain  	if (count++ > 10)  		break;  }  
Magic Number,iTextSharp.text.pdf.intern,PdfAChecker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfAChecker.cs,GetDirectObject,The following statement contains a magic number: if (count++ > 10)  	break;  
Missing Default,iTextSharp.text.pdf,PdfAStamperImp,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfAStamperImp.cs,ReadPdfAInfo,The following switch statement is missing a default case: switch (((IPdfAConformance)pdfIsoConformance).ConformanceLevel) {  case PdfAConformanceLevel.PDF_A_1A:  case PdfAConformanceLevel.PDF_A_1B:  	if (!"1".Equals (pdfaidPart.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.1.documents.can.be.opened.in.PdfAStamper"' "1"));  	}  	break;  case PdfAConformanceLevel.PDF_A_2A:  case PdfAConformanceLevel.PDF_A_2B:  case PdfAConformanceLevel.PDF_A_2U:  	if (!"2".Equals (pdfaidPart.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.1.documents.can.be.opened.in.PdfAStamper"' "2"));  	}  	break;  case PdfAConformanceLevel.PDF_A_3A:  case PdfAConformanceLevel.PDF_A_3B:  case PdfAConformanceLevel.PDF_A_3U:  	if (!"3".Equals (pdfaidPart.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("only.pdfa.1.documents.can.be.opened.in.PdfAStamper"' "3"));  	}  	break;  }  
Missing Default,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckColor,The following switch statement is missing a default case: switch (key) {  case PdfIsoKeys.PDFISOKEY_COLOR:  	if (obj1 is ExtendedColor) {  		ExtendedColor ec = (ExtendedColor)obj1;  		switch (ec.Type) {  		case ExtendedColor.TYPE_CMYK:  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_CMYK' obj1);  			break;  		case ExtendedColor.TYPE_GRAY:  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_GRAY' obj1);  			return;  		case ExtendedColor.TYPE_RGB:  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_RGB' obj1);  			break;  		case ExtendedColor.TYPE_SEPARATION:  			SpotColor sc = (SpotColor)ec;  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' sc.PdfSpotColor.AlternativeCS);  			break;  		case ExtendedColor.TYPE_SHADING:  			ShadingColor xc = (ShadingColor)ec;  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' xc.PdfShadingPattern.Shading.ColorSpace);  			break;  		case ExtendedColor.TYPE_PATTERN:  			PatternColor pc = (PatternColor)ec;  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' pc.Painter.DefaultColor);  			break;  		}  	} else if (obj1 is BaseColor)  		CheckColor (writer' PdfIsoKeys.PDFISOKEY_RGB' obj1);  	break;  case PdfIsoKeys.PDFISOKEY_CMYK:  	if (rgbUsed) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("devicergb.and.devicecmyk.colorspaces.cannot.be.used.both.in.one.file"));  	}  	cmykUsed = true;  	break;  case PdfIsoKeys.PDFISOKEY_RGB:  	if (cmykUsed) {  		throw new PdfAConformanceException (obj1' MessageLocalization.GetComposedMessage ("devicergb.and.devicecmyk.colorspaces.cannot.be.used.both.in.one.file"));  	}  	rgbUsed = true;  	break;  case PdfIsoKeys.PDFISOKEY_GRAY:  	grayUsed = true;  	break;  }  
Missing Default,iTextSharp.text.pdf.intern,PdfA1Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA1Checker.cs,CheckColor,The following switch statement is missing a default case: switch (ec.Type) {  case ExtendedColor.TYPE_CMYK:  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_CMYK' obj1);  	break;  case ExtendedColor.TYPE_GRAY:  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_GRAY' obj1);  	return;  case ExtendedColor.TYPE_RGB:  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_RGB' obj1);  	break;  case ExtendedColor.TYPE_SEPARATION:  	SpotColor sc = (SpotColor)ec;  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' sc.PdfSpotColor.AlternativeCS);  	break;  case ExtendedColor.TYPE_SHADING:  	ShadingColor xc = (ShadingColor)ec;  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' xc.PdfShadingPattern.Shading.ColorSpace);  	break;  case ExtendedColor.TYPE_PATTERN:  	PatternColor pc = (PatternColor)ec;  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' pc.Painter.DefaultColor);  	break;  }  
Missing Default,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckColor,The following switch statement is missing a default case: switch (key) {  case PdfIsoKeys.PDFISOKEY_COLOR:  	if (obj1 is ExtendedColor) {  		ExtendedColor ec = (ExtendedColor)obj1;  		switch (ec.Type) {  		case ExtendedColor.TYPE_CMYK:  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_CMYK' obj1);  			break;  		case ExtendedColor.TYPE_GRAY:  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_GRAY' obj1);  			return;  		case ExtendedColor.TYPE_RGB:  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_RGB' obj1);  			break;  		case ExtendedColor.TYPE_SEPARATION:  			SpotColor sc = (SpotColor)ec;  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' sc.PdfSpotColor.AlternativeCS);  			break;  		case ExtendedColor.TYPE_SHADING:  			ShadingColor xc = (ShadingColor)ec;  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' xc.PdfShadingPattern.Shading.ColorSpace);  			break;  		case ExtendedColor.TYPE_PATTERN:  			PatternColor pc = (PatternColor)ec;  			CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' pc.Painter.DefaultColor);  			break;  		}  	} else if (obj1 is BaseColor)  		CheckColor (writer' PdfIsoKeys.PDFISOKEY_RGB' obj1);  	break;  case PdfIsoKeys.PDFISOKEY_CMYK:  	cmykUsed = true;  	break;  case PdfIsoKeys.PDFISOKEY_RGB:  	rgbUsed = true;  	break;  case PdfIsoKeys.PDFISOKEY_GRAY:  	grayUsed = true;  	break;  }  
Missing Default,iTextSharp.text.pdf.intern,PdfA2Checker,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\intern\PdfA2Checker.cs,CheckColor,The following switch statement is missing a default case: switch (ec.Type) {  case ExtendedColor.TYPE_CMYK:  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_CMYK' obj1);  	break;  case ExtendedColor.TYPE_GRAY:  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_GRAY' obj1);  	return;  case ExtendedColor.TYPE_RGB:  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_RGB' obj1);  	break;  case ExtendedColor.TYPE_SEPARATION:  	SpotColor sc = (SpotColor)ec;  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' sc.PdfSpotColor.AlternativeCS);  	break;  case ExtendedColor.TYPE_SHADING:  	ShadingColor xc = (ShadingColor)ec;  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' xc.PdfShadingPattern.Shading.ColorSpace);  	break;  case ExtendedColor.TYPE_PATTERN:  	PatternColor pc = (PatternColor)ec;  	CheckColor (writer' PdfIsoKeys.PDFISOKEY_COLOR' pc.Painter.DefaultColor);  	break;  }  
Missing Default,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,The following switch statement is missing a default case: switch (((IPdfAConformance)pdfIsoConformance).ConformanceLevel) {  case PdfAConformanceLevel.PDF_A_1A:  case PdfAConformanceLevel.PDF_A_1B:  	if (!"1".Equals (pdfaidPart.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("different.pdf.a.version"' "1"));  	}  	break;  case PdfAConformanceLevel.PDF_A_2A:  case PdfAConformanceLevel.PDF_A_2B:  case PdfAConformanceLevel.PDF_A_2U:  	if (!"2".Equals (pdfaidPart.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("different.pdf.a.version"' "2"));  	}  	break;  case PdfAConformanceLevel.PDF_A_3A:  case PdfAConformanceLevel.PDF_A_3B:  case PdfAConformanceLevel.PDF_A_3U:  case PdfAConformanceLevel.ZUGFeRD:  	if (!"3".Equals (pdfaidPart.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("different.pdf.a.version"' "3"));  	}  	break;  }  
Missing Default,itextsharp.pdfa.iTextSharp.text.pdf,PdfACopy,F:\newReposMay17\itext_itextsharp\src\extras\itextsharp.pdfa\iTextSharp\text\pdf\PdfACopy.cs,CheckPdfAInfo,The following switch statement is missing a default case: switch (((IPdfAConformance)pdfIsoConformance).ConformanceLevel) {  case PdfAConformanceLevel.PDF_A_1A:  case PdfAConformanceLevel.PDF_A_2A:  case PdfAConformanceLevel.PDF_A_3A:  	if (!"A".Equals (pdfaidConformance.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("incompatible.pdf.a.conformance.level"' "a"));  	}  	break;  case PdfAConformanceLevel.PDF_A_2U:  case PdfAConformanceLevel.PDF_A_3U:  	if ("B".Equals (pdfaidConformance.Value)) {  		throw new PdfAConformanceException (MessageLocalization.GetComposedMessage ("incompatible.pdf.a.conformance.level"' "u"));  	}  	break;  }  
