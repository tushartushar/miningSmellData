Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The method has 110 lines of code.
Long Statement,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestDispose,The length of the statement  "            Assert.Throws<ObjectDisposedException>(() => { db.Status(DatabaseConnectionStatusCode.CacheMiss' out current' out highwater' false); }); " is 136.
Long Statement,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestExecute,The length of the statement  "                foreach (var result in db.Query("SELECT v FROM foo ORDER BY 1").Select((v' index) => Tuple.Create(index' v[0].ToInt()))) " is 120.
Long Statement,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The length of the statement  "                            new Business() { Name = "ACompany"' AddressId = addresses[0].Id.Value' WebSite = new Uri("http://www.acompany.example.com") }' " is 126.
Long Statement,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The length of the statement  "                            new Business() { Name = "BCompany"' AddressId = addresses[1].Id.Value' WebSite = new Uri("http://www.bcompany.example.com") } " is 125.
Long Statement,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestCreate,The length of the statement  "                    { "TestObjectWithAutoIncrementPrimaryKeyAndDefaultTableName_NotNull_Collated"' new IndexInfo(false' new string[] { "NotNull"' "Collated" }) }' " is 142.
Long Statement,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestForeignKeyConstraints,The length of the statement  "                Assert.Equal(db.Query("SELECT count(*) FROM " + TableMapping.Get<TestChildObject>().TableName).SelectScalarInt().First()' 0); " is 125.
Long Statement,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestForeignKeyConstraints,The length of the statement  "                Assert.Equal(db.Query("SELECT count(*) FROM " + TableMapping.Get<TestChildObject>().TableName).SelectScalarInt().First()' 1); " is 125.
Long Statement,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestIDatabaseConnectionDispose,The length of the statement  "                Assert.Throws<ObjectDisposedException>(() => { disposedDb.Status(DatabaseConnectionStatusCode.CacheMiss' out current2' out highwater2' false); }); " is 146.
Empty Catch Block,SQLitePCL.pretty.tests,test_cases,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\prettyTests.cs,test_exec_with_tail,The method has an empty catch block.
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestRollbackEvent,The following statement contains a magic number: Assert.Equal(rollbacks' 2);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestUpdateEvent,The following statement contains a magic number: rowid = 2;
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestUpdateEvent,The following statement contains a magic number: rowid = 2;
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestChanges,The following statement contains a magic number: Assert.Equal(db.TotalChanges' 3);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestChanges,The following statement contains a magic number: Assert.Equal(db.TotalChanges' 6);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestChanges,The following statement contains a magic number: Assert.Equal(db.Changes' 3);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestSetBusyTimeout,The following statement contains a magic number: var builder = SQLiteDatabaseConnectionBuilder.InMemory.With(busyTimeout: new TimeSpan(100));
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestStatements,The following statement contains a magic number: Assert.Equal(db.Statements.Count()' 3);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithCommitHook,The following statement contains a magic number: Assert.Equal(2' commits);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithCommitHook,The following statement contains a magic number: Assert.Equal(2' commits);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithCommitHook,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: i < 5
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(c' (0 + 1 + 2 + 3 + 4) + 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(c' (0 + 1 + 2 + 3 + 4) + 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(c' (0 + 1 + 2 + 3 + 4) + 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(c' (0 + 1 + 2 + 3 + 4) + 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: i < 5
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: i < 5
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithAggregateFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(2' db.Query("SELECT count_nulls(1'null'3'null'5);").SelectScalarInt().First());
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: builder = builder                  .WithScalarFunc("count_args"' (IReadOnlyList<ISQLiteValue> values) => values.Count.ToSQLiteValue())                  .WithScalarFunc("len_as_blobs"' (IReadOnlyList<ISQLiteValue> values) =>                      values.Where(v => v.SQLiteType != SQLiteType.Null).Aggregate(0' (acc' val) => acc + val.Length).ToSQLiteValue())                  .WithScalarFunc("my_concat"' (IReadOnlyList<ISQLiteValue> values) =>                      string.Join(""' values.Select(v => v.ToString())).ToSQLiteValue())                  .WithScalarFunc("my_mean"' (IReadOnlyList<ISQLiteValue> values) =>                      (values.Aggregate(0d' (acc' v) => acc + v.ToDouble()) / values.Count).ToSQLiteValue())                  .WithScalarFunc("makeblob"' (ISQLiteValue v) =>                      {                          byte[] b = new byte[v.ToInt()];                          for (int i = 0; i < b.Length; i++)                          {                              b[i] = (byte)(i % 256);                          }                          return b.ToSQLiteValue();                      })                  .WithScalarFunc("cube"' (ISQLiteValue x) => (x.ToInt64() * x.ToInt64() * x.ToInt64()).ToSQLiteValue())                  .WithScalarFunc("num_var"' () => (0).ToSQLiteValue())                  .WithScalarFunc("num_var"' (ISQLiteValue _1) => (1).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2) => (2).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3) => (3).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4) => (4).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5) => (5).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6) => (6).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7) => (7).ToSQLiteValue())                  .WithScalarFunc("num_var"' (_1' _2' _3' _4' _5' _6' _7' _8) => (8).ToSQLiteValue())                  .WithScalarFunc("zeroblob"' (ISQLiteValue i) => SQLiteValue.ZeroBlob(i.ToInt()))                  .WithScalarFunc("nullFunc"' () => SQLiteValue.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(8' db.Query("SELECT count_args(1'2'3'4'5'6'7'8);").SelectScalarInt().First());
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.True(8 <= db.Query("SELECT len_as_blobs(1'2'3'4'5'6'7'8);").SelectScalarInt().First());
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.True(result >= (36 / 8));
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.True(result >= (36 / 8));
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.True(result <= (36 / 8 + 1));
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.True(result <= (36 / 8 + 1));
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: int val = 5;
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: int val = 5;
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 2);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 3);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 4);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 5);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 6);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 7);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: Assert.Equal(result' 8);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWithScalarFunc,The following statement contains a magic number: int length = 10;
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWalCheckpoint,The following statement contains a magic number: Assert.Equal(2' logSize);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestWalCheckpoint,The following statement contains a magic number: Assert.Equal(2' framesCheckPointed);
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestTransaction,The following statement contains a magic number: var result = db.RunInTransaction(tdb =>                      {                          tdb.RunInTransaction(_tdb => _tdb.Execute("CREATE TABLE foo (x int);"));                          tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                              });                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            var failedResult = tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  throw new Exception();                              });                          Assert.False(failedResult);                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            string successResult;                          if(tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  return "SUCCESS";                              }' out successResult))                          {                              Assert.Equal(successResult' "SUCCESS");                          }                          else                           {                              Assert.True(false' "expect the transaction to succeed");                          }                            return "SUCCESS";                      });
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestTransaction,The following statement contains a magic number: var result = db.RunInTransaction(tdb =>                      {                          tdb.RunInTransaction(_tdb => _tdb.Execute("CREATE TABLE foo (x int);"));                          tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                              });                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            var failedResult = tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  throw new Exception();                              });                          Assert.False(failedResult);                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            string successResult;                          if(tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  return "SUCCESS";                              }' out successResult))                          {                              Assert.Equal(successResult' "SUCCESS");                          }                          else                           {                              Assert.True(false' "expect the transaction to succeed");                          }                            return "SUCCESS";                      });
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestTransaction,The following statement contains a magic number: var result = db.RunInTransaction(tdb =>                      {                          tdb.RunInTransaction(_tdb => _tdb.Execute("CREATE TABLE foo (x int);"));                          tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                              });                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            var failedResult = tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  throw new Exception();                              });                          Assert.False(failedResult);                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            string successResult;                          if(tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  return "SUCCESS";                              }' out successResult))                          {                              Assert.Equal(successResult' "SUCCESS");                          }                          else                           {                              Assert.True(false' "expect the transaction to succeed");                          }                            return "SUCCESS";                      });
Magic Number,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestTransaction,The following statement contains a magic number: var result = db.RunInTransaction(tdb =>                      {                          tdb.RunInTransaction(_tdb => _tdb.Execute("CREATE TABLE foo (x int);"));                          tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                              });                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            var failedResult = tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  throw new Exception();                              });                          Assert.False(failedResult);                          Assert.Equal(tdb.Query("SELECT * FROM foo").SelectScalarInt().ToList()' new int[]{ 1' 2' 3 });                            string successResult;                          if(tdb.TryRunInTransaction(_tdb =>                              {                                  _tdb.Execute("INSERT INTO foo (x) VALUES (1);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (2);");                                  _tdb.Execute("INSERT INTO foo (x) VALUES (3);");                                  return "SUCCESS";                              }' out successResult))                          {                              Assert.Equal(successResult' "SUCCESS");                          }                          else                           {                              Assert.True(false' "expect the transaction to succeed");                          }                            return "SUCCESS";                      });
Magic Number,SQLitePCL.pretty.tests,DatabaseBackupTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestDispose,The following statement contains a magic number: Enumerable.Range(0' 1000)
Magic Number,SQLitePCL.pretty.tests,DatabaseBackupTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestBackupWithPageStepping,The following statement contains a magic number: Enumerable.Range(0' 1000)
Magic Number,SQLitePCL.pretty.tests,DatabaseBackupTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestBackupWithPageStepping,The following statement contains a magic number: Assert.False(backup.Step(2));
Magic Number,SQLitePCL.pretty.tests,DatabaseBackupTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestBackup,The following statement contains a magic number: Enumerable.Range(0' 1000)
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestBindParameterCount,The following statement contains a magic number: Tuple<string' int>[] tests =              {                  Tuple.Create("CREATE TABLE foo (x int)"' 0)'                  Tuple.Create("CREATE TABLE foo2 (x int' y int)"' 0)'                  Tuple.Create("select * from foo"' 0)'                  Tuple.Create("INSERT INTO foo (x) VALUES (?)"' 1)'                  Tuple.Create("INSERT INTO foo2 (x' y) VALUES (?' ?)"' 2)              };
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Equal(stmt.BindParameters[2].Name' ":t");
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Equal(stmt.BindParameters[3].Name' ":d");
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Equal(stmt.BindParameters[4].Name' ":b");
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Equal(stmt.BindParameters[5].Name' ":q");
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Equal(stmt.BindParameters.Keys.Count()' 6);
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Equal(stmt.BindParameters.Values.Count()' 6);
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetBindParameters,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var x = stmt.BindParameters[100]; });
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestExecute,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestQuery,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestQuery,The following statement contains a magic number: var result = stmt.Query(50).Count();
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestQuery,The following statement contains a magic number: Assert.Equal(result' 50);
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestQuery,The following statement contains a magic number: Assert.Equal(result' 50);
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestClearBindings,The following statement contains a magic number: stmt.BindParameters[1].Bind(2);
Magic Number,SQLitePCL.pretty.tests,StatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestGetColumns,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() => { var x = stmt.Columns[3]; });
Magic Number,SQLitePCL.pretty.tests,BindParameters,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestBindExtensions,The following statement contains a magic number: stmt.BindParameters[0].Bind(1.1m);
Magic Number,SQLitePCL.pretty.tests,BindParameters,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestBindExtensions,The following statement contains a magic number: Assert.Equal(stmt.Current[0].ToDecimal()' new Decimal(1.1));
Magic Number,SQLitePCL.pretty.tests,ResultSetTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestCount,The following statement contains a magic number: Assert.Equal(row.Count' 2);
Magic Number,SQLitePCL.pretty.tests,ResultSetTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestColumns,The following statement contains a magic number: Assert.Equal(columns.Count' 2);
Magic Number,SQLitePCL.pretty.tests,ResultSetTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestColumns,The following statement contains a magic number: Assert.Equal(count' 2);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestRead,The following statement contains a magic number: byte[] bytes = new byte[1000];
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Position = 10; });
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Read(new byte[10]' 0' 2); });
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Read(new byte[10]' 0' 2); });
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Write(new byte[10]' 0' 1); });
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() => blob.SetLength(10));
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: blob.Position = 100;
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: blob.Position = 5;
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<IOException>(() => blob.Seek(-10' SeekOrigin.Begin));
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<IOException>(() => blob.Seek(-10' SeekOrigin.Current));
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<IOException>(() => blob.Seek(-100' SeekOrigin.End));
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => blob.Seek(-100' (SeekOrigin)10));
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => blob.Seek(-100' (SeekOrigin)10));
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: blob.Position = 5;
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: blob.Seek(2' SeekOrigin.Current);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 7);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestWrite,The following statement contains a magic number: byte[] bytes = new byte[1000];
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestWrite,The following statement contains a magic number: stream.Write(new byte[10]' 0' 10);
Magic Number,SQLitePCL.pretty.tests,BlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\ImplementationTests.cs,TestWrite,The following statement contains a magic number: stream.Write(new byte[10]' 0' 10);
Magic Number,SQLitePCL.pretty.tests,test_cases,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\prettyTests.cs,test_count,The following statement contains a magic number: Assert.Equal(c' 3);
Magic Number,SQLitePCL.pretty.tests,SQLite3Tests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLite3Tests.cs,TestVersion,The following statement contains a magic number: Assert.Equal(version.Major' 3);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValueExtensions,The following statement contains a magic number: short testShort = 2;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValueExtensions,The following statement contains a magic number: byte testByte = 2;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValueExtensions,The following statement contains a magic number: float testFloat = 2.0f;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValueExtensions,The following statement contains a magic number: TimeSpan testTimeSpan = new TimeSpan(100);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValueExtensions,The following statement contains a magic number: DateTimeOffset testDateTimeOffset = new DateTimeOffset(100' TimeSpan.Zero);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValueExtensions,The following statement contains a magic number: decimal testDecimal = 2.2m;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValue,The following statement contains a magic number: byte b = 8;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValue,The following statement contains a magic number: sbyte sb = 8;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestToSQLiteValue,The following statement contains a magic number: uint u = 8;
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestFloatValue,The following statement contains a magic number: double[] tests =              {                  1'                  1.0'                  1.11'                  1.7E+3'                  -195489100.8377'                  1.12345678901234567E100'                  -1.12345678901234567E100              };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestFloatValue,The following statement contains a magic number: double[] tests =              {                  1'                  1.0'                  1.11'                  1.7E+3'                  -195489100.8377'                  1.12345678901234567E100'                  -1.12345678901234567E100              };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestFloatValue,The following statement contains a magic number: double[] tests =              {                  1'                  1.0'                  1.11'                  1.7E+3'                  -195489100.8377'                  1.12345678901234567E100'                  -1.12345678901234567E100              };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestFloatValue,The following statement contains a magic number: double[] tests =              {                  1'                  1.0'                  1.11'                  1.7E+3'                  -195489100.8377'                  1.12345678901234567E100'                  -1.12345678901234567E100              };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestFloatValue,The following statement contains a magic number: double[] tests =              {                  1'                  1.0'                  1.11'                  1.7E+3'                  -195489100.8377'                  1.12345678901234567E100'                  -1.12345678901234567E100              };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestIntValue,The following statement contains a magic number: long[] tests =                  {                      2147483647' // Max int                      -2147483648' // Min int                      9223372036854775807' // Max Long                      -9223372036854775808' // Min Long                      -1234                  };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestIntValue,The following statement contains a magic number: long[] tests =                  {                      2147483647' // Max int                      -2147483648' // Min int                      9223372036854775807' // Max Long                      -9223372036854775808' // Min Long                      -1234                  };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestIntValue,The following statement contains a magic number: long[] tests =                  {                      2147483647' // Max int                      -2147483648' // Min int                      9223372036854775807' // Max Long                      -9223372036854775808' // Min Long                      -1234                  };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestIntValue,The following statement contains a magic number: long[] tests =                  {                      2147483647' // Max int                      -2147483648' // Min int                      9223372036854775807' // Max Long                      -9223372036854775808' // Min Long                      -1234                  };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestIntValue,The following statement contains a magic number: long[] tests =                  {                      2147483647' // Max int                      -2147483648' // Min int                      9223372036854775807' // Max Long                      -9223372036854775808' // Min Long                      -1234                  };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestZeroBlob,The following statement contains a magic number: int[] tests = { 0' 1' 2' 10 };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestZeroBlob,The following statement contains a magic number: int[] tests = { 0' 1' 2' 10 };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: byte[] blob = { 1' 2 };
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: db.Execute("INSERT INTO foo (w' x' y' z' n) VALUES (?'?'?'?'?)"' 32' "hello"' 3.14' blob' null);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: db.Execute("INSERT INTO foo (w' x' y' z' n) VALUES (?'?'?'?'?)"' 32' "hello"' 3.14' blob' null);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[0].ToInt()' 32);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].ColumnInfo.DatabaseName' "main");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].ColumnInfo.TableName' "foo");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].ColumnInfo.OriginName' "y");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].ColumnInfo.Name' "y");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].SQLiteType' SQLiteType.Float);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].ToDouble()' 3.14);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[2].ToDouble()' 3.14);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[3].ColumnInfo.DatabaseName' "main");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[3].ColumnInfo.TableName' "foo");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[3].ColumnInfo.OriginName' "z");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[3].ColumnInfo.Name' "z");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[3].SQLiteType' SQLiteType.Blob);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[3].ToBlob()' blob);
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[4].ColumnInfo.DatabaseName' "main");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[4].ColumnInfo.TableName' "foo");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[4].ColumnInfo.OriginName' "n");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[4].ColumnInfo.Name' "n");
Magic Number,SQLitePCL.pretty.tests,SQLiteValueTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteValueTests.cs,TestResultSetValue,The following statement contains a magic number: Assert.Equal(row[4].SQLiteType' SQLiteType.Null);
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911).Equals(SQLiteVersion.Of(3080911)));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911).Equals(SQLiteVersion.Of(3080911)));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911).Equals((object)SQLiteVersion.Of(3080911)));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911).Equals((object)SQLiteVersion.Of(3080911)));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) == SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) == SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911) != SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911) != SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: SQLiteVersion[] notEqualTests =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(2080911)'                  SQLiteVersion.Of(3070911)'                  SQLiteVersion.Of(3080910)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: SQLiteVersion[] notEqualTests =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(2080911)'                  SQLiteVersion.Of(3070911)'                  SQLiteVersion.Of(3080910)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: SQLiteVersion[] notEqualTests =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(2080911)'                  SQLiteVersion.Of(3070911)'                  SQLiteVersion.Of(3080910)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: SQLiteVersion[] notEqualTests =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(2080911)'                  SQLiteVersion.Of(3070911)'                  SQLiteVersion.Of(3080910)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911).Equals(null));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestEquality,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911).Equals(""));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestGetHashcode,The following statement contains a magic number: SQLiteVersion[] equalObjects =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(3080911)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestGetHashcode,The following statement contains a magic number: SQLiteVersion[] equalObjects =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(3080911)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestGetHashcode,The following statement contains a magic number: SQLiteVersion[] equalObjects =              {                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(3080911)'                  SQLiteVersion.Of(3080911)              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.Equal(0' SQLiteVersion.Of(3080911).CompareTo(SQLiteVersion.Of(3080911)));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.Equal(0' SQLiteVersion.Of(3080911).CompareTo(SQLiteVersion.Of(3080911)));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3080912));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3080912));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3081911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3081911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(4080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(4080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => SQLiteVersion.Of(3080911).CompareTo(null));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => SQLiteVersion.Of(3080911).CompareTo(""));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) > SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) > SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) >= SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) >= SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) >= SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) >= SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) <= SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.True(SQLiteVersion.Of(3080911) <= SQLiteVersion.Of(3080911));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestComparison,The following statement contains a magic number: Assert.False(SQLiteVersion.Of(3080911) < SQLiteVersion.Of(3080910));
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestToInt,The following statement contains a magic number: Assert.Equal(SQLiteVersion.Of(3080911).ToInt()' 3080911);
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestToInt,The following statement contains a magic number: Assert.Equal(SQLiteVersion.Of(3080911).ToInt()' 3080911);
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestToString,The following statement contains a magic number: Tuple<int' string>[] tests =              {                  Tuple.Create(3008007' "3.8.7")'                  Tuple.Create(44008007' "44.8.7")'                  Tuple.Create(3008080' "3.8.80")'                  Tuple.Create(3088007' "3.88.7")              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestToString,The following statement contains a magic number: Tuple<int' string>[] tests =              {                  Tuple.Create(3008007' "3.8.7")'                  Tuple.Create(44008007' "44.8.7")'                  Tuple.Create(3008080' "3.8.80")'                  Tuple.Create(3088007' "3.88.7")              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestToString,The following statement contains a magic number: Tuple<int' string>[] tests =              {                  Tuple.Create(3008007' "3.8.7")'                  Tuple.Create(44008007' "44.8.7")'                  Tuple.Create(3008080' "3.8.80")'                  Tuple.Create(3088007' "3.88.7")              };
Magic Number,SQLitePCL.pretty.tests,SQLiteVersionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\SQLiteVersionTests.cs,TestToString,The following statement contains a magic number: Tuple<int' string>[] tests =              {                  Tuple.Create(3008007' "3.8.7")'                  Tuple.Create(44008007' "44.8.7")'                  Tuple.Create(3008080' "3.8.80")'                  Tuple.Create(3088007' "3.88.7")              };
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanPropertyValue,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanConstant,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanConstant,The following statement contains a magic number: var query = SqlQuery.From<TestObject>().Select().Where(x => x.Cost < 5);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 7 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: Assert.Equal(db.Query(query' 6).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: Assert.Equal(db.Query(query' 6).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: Assert.Equal(db.Query(query' 5).Select(orm).Count()' 1);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: Assert.Equal(db.Query(query' 7).Select(orm).Count()' 3);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereLessThanOrEqualToBindParam,The following statement contains a magic number: Assert.Equal(db.Query(query' 7).Select(orm).Count()' 3);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 7 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: Assert.Equal(db.Query(query' 6).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: Assert.Equal(db.Query(query' 6).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: Assert.Equal(db.Query(query' 5).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: Assert.Equal(db.Query(query' 5).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereGreaterThanOrEqual,The following statement contains a magic number: Assert.Equal(db.Query(query' 7).Select(orm).Count()' 1);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereOr,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6' Flag = false }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereOr,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 7' Flag = false }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereOr,The following statement contains a magic number: Assert.Equal(db.Query(query).Select(orm).Count()' 3);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestMultipleBindParams,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6' Flag = false' Name = null }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestMultipleBindParams,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 7' Flag = true' Name = "bob" }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestMultipleBindParams,The following statement contains a magic number: Assert.Equal(db.Query(query' -1' true' null).Select(orm).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestMultipleBindParamsBoundByName,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 6' Flag = false' Name = null }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestMultipleBindParamsBoundByName,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 7' Flag = true' Name = "bob" }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereContains,The following statement contains a magic number: Assert.Equal(db.Query(query).Count()' 3);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereStartsWith,The following statement contains a magic number: Assert.Equal(db.Query(query).Count()' 3);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEndsWith,The following statement contains a magic number: Assert.Equal(db.Query(query).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEndsIsNull,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 100 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEndsIsNull,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 100' Name = "Bob" }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEndsIsNotNull,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 100 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEndsIsNotNull,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 100' Name = "Bob" }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEqual,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 100 }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereEqual,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 100' Name = "Bob" }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestOrderBy,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 2' Flag = false }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestOrderBy,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 2' Flag = true }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestElementAt,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 2' Flag = false }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestElementAt,The following statement contains a magic number: db.InsertOrReplace(new TestObject() { Cost = 2' Flag = true }' orm);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestElementAt,The following statement contains a magic number: var query = SqlQuery.From<TestObject>().Select().OrderBy(x => x.Cost).ThenBy(x => x.Flag).ElementAt(3);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestWhereWithCast,The following statement contains a magic number: Assert.Equal(db.Query(query).Count()' 2);
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The following statement contains a magic number: var addresses =                      db.InsertOrReplaceAll(                          new Address[]                          {                              new Address() { ZipCode = 12345 }'                              new Address() { ZipCode = 67890 }                          }' addressSelector).Values.ToList();
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The following statement contains a magic number: var addresses =                      db.InsertOrReplaceAll(                          new Address[]                          {                              new Address() { ZipCode = 12345 }'                              new Address() { ZipCode = 67890 }                          }' addressSelector).Values.ToList();
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The following statement contains a magic number: var employeesToBusiness =                      db.InsertOrReplaceAll(                          new EmployedBy[]                          {                              new EmployedBy() { EmployeeId = people[0].Id.Value' BusinessId = businesses[0].Id.Value }'                              new EmployedBy() { EmployeeId = people[1].Id.Value' BusinessId = businesses[0].Id.Value }'                              new EmployedBy() { EmployeeId = people[2].Id.Value' BusinessId = businesses[1].Id.Value }'                              new EmployedBy() { EmployeeId = people[2].Id.Value' BusinessId = businesses[0].Id.Value }'                          }' employedBySelector).Values.ToList();
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The following statement contains a magic number: var employeesToBusiness =                      db.InsertOrReplaceAll(                          new EmployedBy[]                          {                              new EmployedBy() { EmployeeId = people[0].Id.Value' BusinessId = businesses[0].Id.Value }'                              new EmployedBy() { EmployeeId = people[1].Id.Value' BusinessId = businesses[0].Id.Value }'                              new EmployedBy() { EmployeeId = people[2].Id.Value' BusinessId = businesses[1].Id.Value }'                              new EmployedBy() { EmployeeId = people[2].Id.Value' BusinessId = businesses[0].Id.Value }'                          }' employedBySelector).Values.ToList();
Magic Number,SQLitePCL.pretty.tests,SqlQueryTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,TestJoins,The following statement contains a magic number: Assert.Equal(peopleWhoWorkAt.Count' 3);
Magic Number,SQLitePCL.pretty.tests,TestObject,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,SQLitePCL.pretty.tests,TestObject,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + this.Id.GetHashCode();
Magic Number,SQLitePCL.pretty.tests,TestObject,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\QueryTests.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + this.Value.GetHashCode();
Magic Number,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestForeignKeyConstraints,The following statement contains a magic number: db.InsertOrReplace(new TestParentObject() { Id = 100 }' parentTableSelector);
Magic Number,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestForeignKeyConstraints,The following statement contains a magic number: db.InsertOrReplace(new TestChildObject() { ParentId = 100 }' childTableSelector);
Magic Number,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestForeignKeyConstraints,The following statement contains a magic number: Assert.Throws<SQLiteException>(() => db.TryDelete(100' parentTableSelector' out deleted));
Magic Number,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestInsertOrReplaceAll,The following statement contains a magic number: var changed = new List<TestObject>()                      {                          new TestObject.Builder() { Id = result.Values.ElementAt(0).Id' Value = "Goodbye1" }.Build()'                          new TestObject.Builder() { Id = result.Values.ElementAt(1).Id' Value = "Goodbye2" }.Build()'                          new TestObject.Builder() { Id = result.Values.ElementAt(2).Id' Value = "Goodye3" }.Build()                      };
Magic Number,SQLitePCL.pretty.tests,TableMappingTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\OrmTests\TableMappingTest.Async.cs,TestDelete,The following statement contains a magic number: db.TryDelete(1000000' orm' out deleted)
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Position = 10; });
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Read(new byte[10]' 0' 2); });
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Read(new byte[10]' 0' 2); });
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestDispose,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => { blob.Write(new byte[10]' 0' 1); });
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestRead,The following statement contains a magic number: byte[] bytes = new byte[1000];
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestWrite,The following statement contains a magic number: byte[] bytes = new byte[1000];
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestWrite,The following statement contains a magic number: await stream.WriteAsync(new byte[10]' 0' 10);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestWrite,The following statement contains a magic number: await stream.WriteAsync(new byte[10]' 0' 10);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() => blob.SetLength(10));
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: blob.Position = 100;
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: blob.Position = 5;
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<IOException>(() => blob.Seek(-10' SeekOrigin.Begin));
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<IOException>(() => blob.Seek(-10' SeekOrigin.Current));
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<IOException>(() => blob.Seek(-100' SeekOrigin.End));
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => blob.Seek(-100' (SeekOrigin)10));
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => blob.Seek(-100' (SeekOrigin)10));
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 5);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: blob.Position = 5;
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: blob.Seek(2' SeekOrigin.Current);
Magic Number,SQLitePCL.pretty.tests,AsyncBlobStreamTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncBlobStreamTests.cs,TestSeek,The following statement contains a magic number: Assert.Equal(blob.Position' 7);
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestUpdateEvent,The following statement contains a magic number: rowid = 2;
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestUpdateEvent,The following statement contains a magic number: rowid = 2;
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestUse,The following statement contains a magic number: await adb.Use(db => Enumerable.Range(0' 1000))                      .Scan(Tuple.Create(-1' -1)' (x' y) => Tuple.Create(x.Item1 + 1' y))                      .Do(result =>                          {                              Assert.Equal(result.Item2' result.Item1);                          });
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestUse,The following statement contains a magic number: int expected = 10;
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestUse,The following statement contains a magic number: var anotherUse = adb.Use(db => Enumerable.Range(0' 1000));
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestUse,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => adb.Use(db => Enumerable.Range(0' 1000)));
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestPrepareAllAsync,The following statement contains a magic number: Assert.Equal(stmts.Count' 3);
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestPrepareAllAsync,The following statement contains a magic number: var stmt2 = await stmts[2].Use<string>(stmt => stmt.SQL);
Magic Number,SQLitePCL.pretty.tests,AsyncDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncDatabaseConnectionTests.cs,TestQuery,The following statement contains a magic number: var result =                      await adb.Query("Select ?' ?' ?"' _0' _1' _2)                          .Select(row => Tuple.Create(row[0].ToString()' row[1].ToInt()' row[2].ToInt()))                          .FirstAsync();
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestUse,The following statement contains a magic number: await aStmt.Use(stmt => Enumerable.Range(0' 1000))                      .Scan(Tuple.Create<int' int>(-1' -1)' (x' y) => Tuple.Create(x.Item1 + 1' y))                      .Do(result =>                      {                          Assert.Equal(result.Item2' result.Item1);                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestUse,The following statement contains a magic number: var anotherUse = aStmt.Use(stmt => Enumerable.Range(0' 1000));
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestUse,The following statement contains a magic number: Assert.Throws<ObjectDisposedException>(() => aStmt.Use(stmt => Enumerable.Range(0' 1000)));
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestUse,The following statement contains a magic number: Assert.Equal(mutable' 2);
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementEnumerator,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.True(stmt.MoveNext());                          var row = stmt.Current;                          Assert.Equal(row[0].ToInt()' 1);                          Assert.Equal(row[1].ToInt()' 2);                          Assert.Equal(row[2].ToInt()' 3);                            Assert.False(stmt.MoveNext());                          Assert.False(stmt.MoveNext());                            stmt.Reset();                          Assert.True(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementEnumerator,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.True(stmt.MoveNext());                          var row = stmt.Current;                          Assert.Equal(row[0].ToInt()' 1);                          Assert.Equal(row[1].ToInt()' 2);                          Assert.Equal(row[2].ToInt()' 3);                            Assert.False(stmt.MoveNext());                          Assert.False(stmt.MoveNext());                            stmt.Reset();                          Assert.True(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementEnumerator,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.True(stmt.MoveNext());                          var row = stmt.Current;                          Assert.Equal(row[0].ToInt()' 1);                          Assert.Equal(row[1].ToInt()' 2);                          Assert.Equal(row[2].ToInt()' 3);                            Assert.False(stmt.MoveNext());                          Assert.False(stmt.MoveNext());                            stmt.Reset();                          Assert.True(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementBindings,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.False(stmt.IsBusy);                            stmt.BindParameters[0].Bind(0);                          stmt.BindParameters[1].Bind("1");                          stmt.BindParameters[2].Bind(2);                            Assert.Equal(stmt.BindParameters[":a"].Name' ":a");                          Assert.Equal(stmt.BindParameters[":b"].Name' ":b");                          Assert.Equal(stmt.BindParameters[":c"].Name' ":c");                            stmt.MoveNext();                          var row = stmt.Current;                            Assert.True(stmt.IsBusy);                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.ClearBindings();                          Assert.True(stmt.IsBusy);                          stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[1].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[2].SQLiteType' SQLiteType.Null);                            Assert.False(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementBindings,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.False(stmt.IsBusy);                            stmt.BindParameters[0].Bind(0);                          stmt.BindParameters[1].Bind("1");                          stmt.BindParameters[2].Bind(2);                            Assert.Equal(stmt.BindParameters[":a"].Name' ":a");                          Assert.Equal(stmt.BindParameters[":b"].Name' ":b");                          Assert.Equal(stmt.BindParameters[":c"].Name' ":c");                            stmt.MoveNext();                          var row = stmt.Current;                            Assert.True(stmt.IsBusy);                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.ClearBindings();                          Assert.True(stmt.IsBusy);                          stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[1].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[2].SQLiteType' SQLiteType.Null);                            Assert.False(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementBindings,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.False(stmt.IsBusy);                            stmt.BindParameters[0].Bind(0);                          stmt.BindParameters[1].Bind("1");                          stmt.BindParameters[2].Bind(2);                            Assert.Equal(stmt.BindParameters[":a"].Name' ":a");                          Assert.Equal(stmt.BindParameters[":b"].Name' ":b");                          Assert.Equal(stmt.BindParameters[":c"].Name' ":c");                            stmt.MoveNext();                          var row = stmt.Current;                            Assert.True(stmt.IsBusy);                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.ClearBindings();                          Assert.True(stmt.IsBusy);                          stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[1].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[2].SQLiteType' SQLiteType.Null);                            Assert.False(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementBindings,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.False(stmt.IsBusy);                            stmt.BindParameters[0].Bind(0);                          stmt.BindParameters[1].Bind("1");                          stmt.BindParameters[2].Bind(2);                            Assert.Equal(stmt.BindParameters[":a"].Name' ":a");                          Assert.Equal(stmt.BindParameters[":b"].Name' ":b");                          Assert.Equal(stmt.BindParameters[":c"].Name' ":c");                            stmt.MoveNext();                          var row = stmt.Current;                            Assert.True(stmt.IsBusy);                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.ClearBindings();                          Assert.True(stmt.IsBusy);                          stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[1].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[2].SQLiteType' SQLiteType.Null);                            Assert.False(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementBindings,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.False(stmt.IsBusy);                            stmt.BindParameters[0].Bind(0);                          stmt.BindParameters[1].Bind("1");                          stmt.BindParameters[2].Bind(2);                            Assert.Equal(stmt.BindParameters[":a"].Name' ":a");                          Assert.Equal(stmt.BindParameters[":b"].Name' ":b");                          Assert.Equal(stmt.BindParameters[":c"].Name' ":c");                            stmt.MoveNext();                          var row = stmt.Current;                            Assert.True(stmt.IsBusy);                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].ToInt()' 0);                          Assert.Equal(row[1].ToInt()' 1);                          Assert.Equal(row[2].ToString()' "2");                            stmt.ClearBindings();                          Assert.True(stmt.IsBusy);                          stmt.Reset();                          Assert.False(stmt.IsBusy);                          stmt.MoveNext();                          row = stmt.Current;                            Assert.Equal(row[0].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[1].SQLiteType' SQLiteType.Null);                          Assert.Equal(row[2].SQLiteType' SQLiteType.Null);                            Assert.False(stmt.MoveNext());                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestIStatementColumns,The following statement contains a magic number: await aStmt.Use(stmt =>                      {                          Assert.Equal(stmt.Columns[0].Name' "a");                          Assert.Equal(stmt.Columns[1].Name' "b");                          Assert.Equal(stmt.Columns[2].Name' "c");                      });
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestExecuteAsync,The following statement contains a magic number: i < 100
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestExecuteAsync,The following statement contains a magic number: Assert.Equal(count' 100);
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestQuery,The following statement contains a magic number: Enumerable.Range(0' 100)
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestQuery,The following statement contains a magic number: var result = await stmt.Query(50).Count();
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestQuery,The following statement contains a magic number: Assert.Equal(result' 50);
Magic Number,SQLitePCL.pretty.tests,AsyncStatementTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\AsyncTests\AsyncStatementTests.cs,TestQuery,The following statement contains a magic number: Assert.Equal(result' 50);
Missing Default,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestAuthorizer,The following switch statement is missing a default case: switch (actionCode)                          {                          // When creating a table an insert is first done.                              case ActionCode.Insert:                                  Assert.Equal(p0' "sqlite_master");                                  Assert.Null(p1);                                  Assert.Equal(dbName' "main");                                  Assert.Null(triggerOrView);                                  break;                              case ActionCode.CreateTable:                                  Assert.Equal(p0' "foo");                                  Assert.Null(p1);                                  Assert.Equal(dbName' "main");                                  Assert.Null(triggerOrView);                                  break;                                case ActionCode.Read:                                  Assert.NotNull(p0);                                  Assert.NotNull(p1);                                  Assert.Equal(dbName' "main");                                  Assert.Null(triggerOrView);                                  break;                            }
Missing Default,SQLitePCL.pretty.tests,SQLiteDatabaseConnectionTests,D:\research\architectureSmells\repos\bordoley_SQLitePCL.pretty\SQLitePCL.pretty.tests\DatabaseConnectionTests.cs,TestAuthorizer,The following switch statement is missing a default case: switch (actionCode)                      {                          case ActionCode.Read:                              Assert.NotNull(p0);                              Assert.NotNull(p1);                              Assert.Equal(dbName' "main");                                // A Hack. Goal is to prove that inner_most_trigger_or_view is not null when it is returned in the callback                              if (p0 == "foo") { Assert.NotNull(triggerOrView); }                              break;                        }
