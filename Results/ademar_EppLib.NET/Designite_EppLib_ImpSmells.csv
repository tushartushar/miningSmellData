Implementation smell,Namespace,Class,File,Method,Description
Long Method,EppLib.Entities,ContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The method has 231 lines of code.
Long Method,EppLib.Entities,DomainInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainInfoResponse.cs,ProcessDataNode,The method has 136 lines of code.
Complex Method,EppLib.Entities,ContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 50
Complex Method,EppLib.Entities,ContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Entities,ContactBase<T>,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactBase.cs,AddressToXml,Cyclomatic complexity of the method is 14
Complex Method,EppLib.Entities,ContactBase<T>,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactBase.cs,DiscloseToXml,Cyclomatic complexity of the method is 10
Complex Method,EppLib.Entities,ContactUpdate,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactUpdate.cs,BuildCommandElement,Cyclomatic complexity of the method is 12
Complex Method,EppLib.Entities,CiraCprCategories,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\CiraCprCategories.cs,GetByCode,Cyclomatic complexity of the method is 18
Complex Method,EppLib.Entities,DomainInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainInfoResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 32
Complex Method,EppLib.Entities,DomainUpdate,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainUpdate.cs,getAddRemoveElement,Cyclomatic complexity of the method is 10
Complex Method,EppLib.Entities,ContactCreate,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactCreate.cs,BuildCommandElement,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Entities,HostInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Host\HostInfoResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 16
Complex Method,EppLib.Entities,HostUpdate,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Host\HostUpdate.cs,getAddRemoveElement,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Entities,Login,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Login.cs,BuildCommandElement,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Entities,PollResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\PollResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Extensions.Iis,IisDomainInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Iis\IisDomainInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Extensions.Nominet.ContactInfo,NominetContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\ContactInfo\NominetContactInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 19
Complex Method,EppLib.Extensions.Nominet.DomainCheck,NominetDomainCheckExtension,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainCheck\NominetDomainCheckExtension.cs,AddressToXml,Cyclomatic complexity of the method is 14
Complex Method,EppLib.Extensions.Nominet.Notifications,HandshakeRejectedNotification,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\Notifications\HandshakeRejectedNotification.cs,ProcessDataNode,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Extensions.Nominet.Notifications,DomainsReleasedNotification,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\Notifications\DomainsReleasedNotification.cs,ProcessDataNode,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Extensions.Nominet.Notifications,RegistrarChangeNotification,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\Notifications\RegistrarChangeNotification.cs,ProcessDataNode,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Extensions.Nominet.DomainInfo,NominetDomainInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainInfo\NominetDomainInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 13
Complex Method,EppLib.Extensions.Nominet.DomainCreate,NominetDomainCreateExtension,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainCreate\NominetDomainCreateExtension.cs,ToXml,Cyclomatic complexity of the method is 10
Complex Method,EppLib.Extensions.Nominet.DomainUpdate,NominetDomainUpdateExtension,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainUpdate\NominetDomainUpdateExtension.cs,ToXml,Cyclomatic complexity of the method is 11
Long Parameter List,EppLib.Entities,Contact,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\Contact.cs,Contact,The method has 13 parameters. Parameters: contactId' fullName' companyName' city' street1' street2' street3' province' postalCode' countryCode' email' voice' fax
Long Parameter List,EppLib.Entities,Contact,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\Contact.cs,Contact,The method has 11 parameters. Parameters: contactId' fullName' companyName' city' streetAddress' province' postalCode' countryCode' email' voice' fax
Long Parameter List,EppLib.Entities,EppBase<T>,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\EppBase.cs,AddXmlElement,The method has 5 parameters. Parameters: doc' containingElement' tagName' value' namespaceUri
Long Parameter List,EppLib.Entities,EppExtension,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\EppExtension.cs,AddXmlElement,The method has 5 parameters. Parameters: doc' containingElement' tagName' value' namespaceUri
Long Parameter List,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,TcpTransport,The method has 6 parameters. Parameters: host' port' clientCertificate' loggingEnabled' readTimeout' writeTimeout
Long Statement,EppLib.Entities,DomainRelease,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainRelease.cs,BuildCommandElement,The length of the statement  "			var releaseNode = AddXmlElement(doc' domainRelease' "r:release"' null' "http://www.nominet.org.uk/epp/xml/std-release-1.0"); " is 124.
Long Statement,EppLib.Entities,DomainCreate,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainCreate.cs,BuildCommandElement,The length of the statement  "                var period = AddXmlElement(doc' domainCreate' "domain:period"' Period.Value.ToString(CultureInfo.InvariantCulture)' namespaceUri); " is 130.
Long Statement,EppLib.Entities,DomainRenew,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainRenew.cs,BuildCommandElement,The length of the statement  "            AddXmlElement(doc' domainRenew' "domain:curExpDate"' DateTime.Parse(CurrentExpirationDate' CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)' namespaceUri); " is 189.
Long Statement,EppLib.Entities,DomainRenew,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainRenew.cs,BuildCommandElement,The length of the statement  "                var period = AddXmlElement(doc' domainRenew' "domain:period"' m_period.Value.ToString(CultureInfo.InvariantCulture)' namespaceUri); " is 131.
Magic Number,EppLib.Entities,ContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The following statement contains a magic number: Contact.PostalInfo.m_address.Street3 = streetNodes[2].InnerText;
Magic Number,EppLib.Entities,ContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The following statement contains a magic number: streetNodes[2] != null
Magic Number,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: var lenghtBytes = new byte[4];
Magic Number,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: read = read + stream.Read(lenghtBytes' read' 4 - read);
Magic Number,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: read < 4
Magic Number,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: var length = BitConverter.ToInt32(lenghtBytes' 0) - 4;
Magic Number,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Write,The following statement contains a magic number: var lenght = bytes.Length + 4;
Magic Number,EppLib,TcpTransport,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Write,The following statement contains a magic number: stream.Write(lenghtBytes' 0' 4);
Missing Default,EppLib.Entities,ContactInfoResponse,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The following switch statement is missing a default case: switch (changeNode.LocalName)                          {                              case "name":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameLoc;                                  }                                  break;                              case "org":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationLoc;                                  }                                  break;                              case "addr":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressLoc;                                  }                                  break;                              case "voice":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Voice                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Voice;                                  break;                              case "fax":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Fax                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Fax;                                  break;                              case "email":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Email                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Email;                                  break;                          }
Missing Default,EppLib.Entities,CiraCprCategories,D:\research\architectureSmells\repos\ademar_EppLib.NET\EppLib\Entities\Contact\CiraCprCategories.cs,GetByCode,The following switch statement is missing a default case: switch (code)              {                  case CCT: return new CiraCprCategory(CCT' "Canadian Citizen");                  case RES:                      return new CiraCprCategory(RES' "Permanent Resident of Canada");                  case CCO:                      return new CiraCprCategory(CCO' "Corporation");                  case ABO:                      return new CiraCprCategory(ABO' "Aboriginal Peoples");                  case TDM:                      return new CiraCprCategory(TDM' "Trade-mark registered in Canada (by a non-Canadian owner)");                  case MAJ:                      return new CiraCprCategory(MAJ' "Her Majesty the Queen");                  case GOV:                      return new CiraCprCategory(GOV' "Government");                  case LGR:                      return new CiraCprCategory(LGR' "Legal Representative of a Canadian Citizen or Permanent Resident");                  case TRS:                      return new CiraCprCategory(TRS' "Trust stablished in Canada");                  case PRT:                      return new CiraCprCategory(PRT' "Partnership registered in Canada");                  case ASS:                      return new CiraCprCategory(ASS' "Canadian Unincorporated Association");                  case TRD:                      return new CiraCprCategory(TRD' "Canadian Trade Union");                  case PLT:                      return new CiraCprCategory(PLT' "Canadian Political Party");                  case EDU:                      return new CiraCprCategory(EDU' "Canadian Educational Institution");                  case LAM:                      return new CiraCprCategory(LAM' "Canadian Library' Archive or Museum");                  case HOP:                      return new CiraCprCategory(HOP' "Canadian Hospital");                  case INB:                      return new CiraCprCategory(INB' "Indian Band recognized by the Indian Act of Canada");                  case OMK:                      return new CiraCprCategory(OMK' "Offical Mark registered in Canada");                }
