Implementation smell,Namespace,Class,File,Method,Description
Long Method,EppLib.Entities,ContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The method has 231 lines of code.
Long Method,EppLib.Entities,DomainInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainInfoResponse.cs,ProcessDataNode,The method has 136 lines of code.
Complex Method,EppLib.Entities,ContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 39
Complex Method,EppLib.Entities,ContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Entities,ContactBase<T>,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactBase.cs,AddressToXml,Cyclomatic complexity of the method is 14
Complex Method,EppLib.Entities,ContactBase<T>,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactBase.cs,DiscloseToXml,Cyclomatic complexity of the method is 10
Complex Method,EppLib.Entities,ContactUpdate,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactUpdate.cs,BuildCommandElement,Cyclomatic complexity of the method is 12
Complex Method,EppLib.Entities,DomainInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainInfoResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 32
Complex Method,EppLib.Entities,DomainUpdate,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainUpdate.cs,getAddRemoveElement,Cyclomatic complexity of the method is 10
Complex Method,EppLib.Entities,ContactCreate,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactCreate.cs,BuildCommandElement,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Entities,HostInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Host\HostInfoResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 16
Complex Method,EppLib.Entities,HostUpdate,C:\repos\ademar_EppLib.NET\EppLib\Entities\Host\HostUpdate.cs,getAddRemoveElement,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Entities,Login,C:\repos\ademar_EppLib.NET\EppLib\Entities\Login.cs,BuildCommandElement,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Entities,PollResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\PollResponse.cs,ProcessDataNode,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Extensions.Iis,IisDomainInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Iis\IisDomainInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Extensions.Nominet.ContactInfo,NominetContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\ContactInfo\NominetContactInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 19
Complex Method,EppLib.Extensions.Nominet.DomainCheck,NominetDomainCheckExtension,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainCheck\NominetDomainCheckExtension.cs,AddressToXml,Cyclomatic complexity of the method is 14
Complex Method,EppLib.Extensions.Nominet.Notifications,HandshakeRejectedNotification,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\Notifications\HandshakeRejectedNotification.cs,ProcessDataNode,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Extensions.Nominet.Notifications,DomainsReleasedNotification,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\Notifications\DomainsReleasedNotification.cs,ProcessDataNode,Cyclomatic complexity of the method is 8
Complex Method,EppLib.Extensions.Nominet.Notifications,RegistrarChangeNotification,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\Notifications\RegistrarChangeNotification.cs,ProcessDataNode,Cyclomatic complexity of the method is 9
Complex Method,EppLib.Extensions.Nominet.DomainInfo,NominetDomainInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainInfo\NominetDomainInfoResponse.cs,ProcessExtensionNode,Cyclomatic complexity of the method is 13
Complex Method,EppLib.Extensions.Nominet.DomainCreate,NominetDomainCreateExtension,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainCreate\NominetDomainCreateExtension.cs,ToXml,Cyclomatic complexity of the method is 10
Complex Method,EppLib.Extensions.Nominet.DomainUpdate,NominetDomainUpdateExtension,C:\repos\ademar_EppLib.NET\EppLib\Extensions\Nominet\DomainUpdate\NominetDomainUpdateExtension.cs,ToXml,Cyclomatic complexity of the method is 11
Long Parameter List,EppLib.Entities,Contact,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\Contact.cs,Contact,The method has 13 parameters. Parameters: contactId' fullName' companyName' city' street1' street2' street3' province' postalCode' countryCode' email' voice' fax
Long Parameter List,EppLib.Entities,Contact,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\Contact.cs,Contact,The method has 11 parameters. Parameters: contactId' fullName' companyName' city' streetAddress' province' postalCode' countryCode' email' voice' fax
Long Parameter List,EppLib.Entities,EppBase<T>,C:\repos\ademar_EppLib.NET\EppLib\Entities\EppBase.cs,AddXmlElement,The method has 5 parameters. Parameters: doc' containingElement' tagName' value' namespaceUri
Long Parameter List,EppLib.Entities,EppExtension,C:\repos\ademar_EppLib.NET\EppLib\Entities\EppExtension.cs,AddXmlElement,The method has 5 parameters. Parameters: doc' containingElement' tagName' value' namespaceUri
Long Parameter List,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,TcpTransport,The method has 6 parameters. Parameters: host' port' clientCertificate' loggingEnabled' readTimeout' writeTimeout
Long Statement,EppLib.Entities,DomainRelease,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainRelease.cs,BuildCommandElement,The length of the statement  "			var releaseNode = AddXmlElement(doc' domainRelease' "r:release"' null' "http://www.nominet.org.uk/epp/xml/std-release-1.0"); " is 124.
Long Statement,EppLib.Entities,DomainCreate,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainCreate.cs,BuildCommandElement,The length of the statement  "                var period = AddXmlElement(doc' domainCreate' "domain:period"' Period.Value.ToString(CultureInfo.InvariantCulture)' namespaceUri); " is 130.
Long Statement,EppLib.Entities,DomainRenew,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainRenew.cs,BuildCommandElement,The length of the statement  "            AddXmlElement(doc' domainRenew' "domain:curExpDate"' DateTime.Parse(CurrentExpirationDate' CultureInfo.InvariantCulture).ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)' namespaceUri); " is 189.
Long Statement,EppLib.Entities,DomainRenew,C:\repos\ademar_EppLib.NET\EppLib\Entities\Domain\DomainRenew.cs,BuildCommandElement,The length of the statement  "                var period = AddXmlElement(doc' domainRenew' "domain:period"' m_period.Value.ToString(CultureInfo.InvariantCulture)' namespaceUri); " is 131.
Magic Number,EppLib.Entities,ContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The following statement contains a magic number: if (children != null)              {                  var idNode = children.SelectSingleNode("contact:id"' namespaces);                    if (idNode != null)                  {                      Contact.Id = idNode.InnerText;                  }                    var roidNode = children.SelectSingleNode("contact:roid"' namespaces);                    if (roidNode != null)                  {                      Contact.Roid = roidNode.InnerText;                  }                    var statusNode = children.SelectSingleNode("contact:status"' namespaces);                    if (statusNode != null)                  {                      if (statusNode.Attributes["s"] != null) Contact.Status = statusNode.Attributes["s"].Value;                  }                    var statusNodes = children.SelectNodes("contact:status"' namespaces);                    if (statusNodes != null)                  {                      if (Contact.StatusList == null) Contact.StatusList = new List<string>();                      foreach (XmlNode status in statusNodes)                      {                          if (status.Attributes["s"] != null) Contact.StatusList.Add(status.Attributes["s"].Value);                      }                  }                    var emailNode = children.SelectSingleNode("contact:email"' namespaces);                    if (emailNode != null)                  {                      Contact.Email = emailNode.InnerText;                  }                    var voiceNode = children.SelectSingleNode("contact:voice"' namespaces);                    if (voiceNode != null)                  {                      Contact.Voice = new Telephone(voiceNode.InnerText' "");                      if (voiceNode.Attributes["x"] != null)                      {                          Contact.Voice.Extension = voiceNode.Attributes["x"].Value;                      }                  }                    var faxNode = children.SelectSingleNode("contact:fax"' namespaces);                    if (faxNode != null)                  {                      Contact.Fax = new Telephone(faxNode.InnerText' "");                  }                    var clIdNode = children.SelectSingleNode("contact:clID"' namespaces);                    if (clIdNode != null)                  {                      Contact.ClId = clIdNode.InnerText;                  }                    var crIdNode = children.SelectSingleNode("contact:crID"' namespaces);                    if (crIdNode != null)                  {                      Contact.CrId = crIdNode.InnerText;                  }                    var upIdNode = children.SelectSingleNode("contact:upID"' namespaces);                    if (upIdNode != null)                  {                      Contact.UpId = upIdNode.InnerText;                  }                    var crDateNode = children.SelectSingleNode("contact:crDate"' namespaces);                    if (crDateNode != null)                  {                      Contact.CrDate = crDateNode.InnerText;                  }                    var upDateNode = children.SelectSingleNode("contact:upDate"' namespaces);                    if (upDateNode != null)                  {                      Contact.UpDate = upDateNode.InnerText;                  }                    var trDateNode = children.SelectSingleNode("contact:trDate"' namespaces);                    if (trDateNode != null)                  {                      Contact.TrDate = trDateNode.InnerText;                  }                    var authInfoNode = children.SelectSingleNode("contact:authInfo"' namespaces);                    if (authInfoNode != null)                  {                      var pwNode = authInfoNode.SelectSingleNode("contact:pw"' namespaces);                        if (pwNode != null)                      {                          Contact.Password = pwNode.InnerText;                      }                  }                    var discloseNode = children.SelectSingleNode("contact:disclose"' namespaces);                    if (discloseNode != null)                  {                      bool flag;                      if (!Boolean.TryParse(discloseNode.Attributes["flag"].Value' out flag))                      {                          if (discloseNode.Attributes["flag"].Value == "0")                          {                              flag = false;                          }                          else if (discloseNode.Attributes["flag"].Value == "1")                          {                              flag = true;                          }                          else                          {                              throw new Exception("Unable to parse contact:disclose flag");                          }                      }                      Contact.DiscloseFlag = flag;                      Contact.DiscloseMask = flag ? Contact.DiscloseFlags.None : Contact.DiscloseFlags.All;                        foreach (XmlNode changeNode in discloseNode.ChildNodes)                      {                          switch (changeNode.LocalName)                          {                              case "name":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameLoc;                                  }                                  break;                              case "org":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationLoc;                                  }                                  break;                              case "addr":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressLoc;                                  }                                  break;                              case "voice":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Voice                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Voice;                                  break;                              case "fax":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Fax                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Fax;                                  break;                              case "email":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Email                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Email;                                  break;                          }                      }                  }                    var postalInfoNode = children.SelectSingleNode("contact:postalInfo"' namespaces);                    if (postalInfoNode != null)                  {                      Contact.PostalInfo = new PostalInfo();                        var nameNode = postalInfoNode.SelectSingleNode("contact:name"' namespaces);                        if (nameNode != null)                      {                          Contact.PostalInfo.m_name = nameNode.InnerText;                      }                        var orgNode = postalInfoNode.SelectSingleNode("contact:org"' namespaces);                        if (orgNode != null)                      {                          Contact.PostalInfo.m_org = orgNode.InnerText;                      }                        Contact.PostalInfo.m_type = postalInfoNode.Attributes["type"].Value;                        var addrNode = postalInfoNode.SelectSingleNode("contact:addr"' namespaces);                        if (addrNode != null)                      {                          Contact.PostalInfo.m_address = new PostalAddress();                            var streetNodes = addrNode.SelectNodes("contact:street"' namespaces);                          if (streetNodes != null)                          {                              if (streetNodes[0] != null)                              {                                  Contact.PostalInfo.m_address.Street1 = streetNodes[0].InnerText;                              }                                if (streetNodes[1] != null)                              {                                  Contact.PostalInfo.m_address.Street2 = streetNodes[1].InnerText;                              }                                if (streetNodes[2] != null)                              {                                  Contact.PostalInfo.m_address.Street3 = streetNodes[2].InnerText;                              }                          }                            var cityNode = addrNode.SelectSingleNode("contact:city"' namespaces);                            if (cityNode != null)                          {                              Contact.PostalInfo.m_address.City = cityNode.InnerText;                          }                            var spNode = addrNode.SelectSingleNode("contact:sp"' namespaces);                            if (spNode != null)                          {                              Contact.PostalInfo.m_address.StateProvince = spNode.InnerText;                          }                            var pcNode = addrNode.SelectSingleNode("contact:pc"' namespaces);                            if (pcNode != null)                          {                              Contact.PostalInfo.m_address.PostalCode = pcNode.InnerText;                          }                            var ccNode = addrNode.SelectSingleNode("contact:cc"' namespaces);                            if (ccNode != null)                          {                              Contact.PostalInfo.m_address.CountryCode = ccNode.InnerText;                          }                      }                  }              }
Magic Number,EppLib.Entities,ContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The following statement contains a magic number: if (children != null)              {                  var idNode = children.SelectSingleNode("contact:id"' namespaces);                    if (idNode != null)                  {                      Contact.Id = idNode.InnerText;                  }                    var roidNode = children.SelectSingleNode("contact:roid"' namespaces);                    if (roidNode != null)                  {                      Contact.Roid = roidNode.InnerText;                  }                    var statusNode = children.SelectSingleNode("contact:status"' namespaces);                    if (statusNode != null)                  {                      if (statusNode.Attributes["s"] != null) Contact.Status = statusNode.Attributes["s"].Value;                  }                    var statusNodes = children.SelectNodes("contact:status"' namespaces);                    if (statusNodes != null)                  {                      if (Contact.StatusList == null) Contact.StatusList = new List<string>();                      foreach (XmlNode status in statusNodes)                      {                          if (status.Attributes["s"] != null) Contact.StatusList.Add(status.Attributes["s"].Value);                      }                  }                    var emailNode = children.SelectSingleNode("contact:email"' namespaces);                    if (emailNode != null)                  {                      Contact.Email = emailNode.InnerText;                  }                    var voiceNode = children.SelectSingleNode("contact:voice"' namespaces);                    if (voiceNode != null)                  {                      Contact.Voice = new Telephone(voiceNode.InnerText' "");                      if (voiceNode.Attributes["x"] != null)                      {                          Contact.Voice.Extension = voiceNode.Attributes["x"].Value;                      }                  }                    var faxNode = children.SelectSingleNode("contact:fax"' namespaces);                    if (faxNode != null)                  {                      Contact.Fax = new Telephone(faxNode.InnerText' "");                  }                    var clIdNode = children.SelectSingleNode("contact:clID"' namespaces);                    if (clIdNode != null)                  {                      Contact.ClId = clIdNode.InnerText;                  }                    var crIdNode = children.SelectSingleNode("contact:crID"' namespaces);                    if (crIdNode != null)                  {                      Contact.CrId = crIdNode.InnerText;                  }                    var upIdNode = children.SelectSingleNode("contact:upID"' namespaces);                    if (upIdNode != null)                  {                      Contact.UpId = upIdNode.InnerText;                  }                    var crDateNode = children.SelectSingleNode("contact:crDate"' namespaces);                    if (crDateNode != null)                  {                      Contact.CrDate = crDateNode.InnerText;                  }                    var upDateNode = children.SelectSingleNode("contact:upDate"' namespaces);                    if (upDateNode != null)                  {                      Contact.UpDate = upDateNode.InnerText;                  }                    var trDateNode = children.SelectSingleNode("contact:trDate"' namespaces);                    if (trDateNode != null)                  {                      Contact.TrDate = trDateNode.InnerText;                  }                    var authInfoNode = children.SelectSingleNode("contact:authInfo"' namespaces);                    if (authInfoNode != null)                  {                      var pwNode = authInfoNode.SelectSingleNode("contact:pw"' namespaces);                        if (pwNode != null)                      {                          Contact.Password = pwNode.InnerText;                      }                  }                    var discloseNode = children.SelectSingleNode("contact:disclose"' namespaces);                    if (discloseNode != null)                  {                      bool flag;                      if (!Boolean.TryParse(discloseNode.Attributes["flag"].Value' out flag))                      {                          if (discloseNode.Attributes["flag"].Value == "0")                          {                              flag = false;                          }                          else if (discloseNode.Attributes["flag"].Value == "1")                          {                              flag = true;                          }                          else                          {                              throw new Exception("Unable to parse contact:disclose flag");                          }                      }                      Contact.DiscloseFlag = flag;                      Contact.DiscloseMask = flag ? Contact.DiscloseFlags.None : Contact.DiscloseFlags.All;                        foreach (XmlNode changeNode in discloseNode.ChildNodes)                      {                          switch (changeNode.LocalName)                          {                              case "name":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameLoc;                                  }                                  break;                              case "org":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationLoc;                                  }                                  break;                              case "addr":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressLoc;                                  }                                  break;                              case "voice":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Voice                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Voice;                                  break;                              case "fax":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Fax                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Fax;                                  break;                              case "email":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Email                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Email;                                  break;                          }                      }                  }                    var postalInfoNode = children.SelectSingleNode("contact:postalInfo"' namespaces);                    if (postalInfoNode != null)                  {                      Contact.PostalInfo = new PostalInfo();                        var nameNode = postalInfoNode.SelectSingleNode("contact:name"' namespaces);                        if (nameNode != null)                      {                          Contact.PostalInfo.m_name = nameNode.InnerText;                      }                        var orgNode = postalInfoNode.SelectSingleNode("contact:org"' namespaces);                        if (orgNode != null)                      {                          Contact.PostalInfo.m_org = orgNode.InnerText;                      }                        Contact.PostalInfo.m_type = postalInfoNode.Attributes["type"].Value;                        var addrNode = postalInfoNode.SelectSingleNode("contact:addr"' namespaces);                        if (addrNode != null)                      {                          Contact.PostalInfo.m_address = new PostalAddress();                            var streetNodes = addrNode.SelectNodes("contact:street"' namespaces);                          if (streetNodes != null)                          {                              if (streetNodes[0] != null)                              {                                  Contact.PostalInfo.m_address.Street1 = streetNodes[0].InnerText;                              }                                if (streetNodes[1] != null)                              {                                  Contact.PostalInfo.m_address.Street2 = streetNodes[1].InnerText;                              }                                if (streetNodes[2] != null)                              {                                  Contact.PostalInfo.m_address.Street3 = streetNodes[2].InnerText;                              }                          }                            var cityNode = addrNode.SelectSingleNode("contact:city"' namespaces);                            if (cityNode != null)                          {                              Contact.PostalInfo.m_address.City = cityNode.InnerText;                          }                            var spNode = addrNode.SelectSingleNode("contact:sp"' namespaces);                            if (spNode != null)                          {                              Contact.PostalInfo.m_address.StateProvince = spNode.InnerText;                          }                            var pcNode = addrNode.SelectSingleNode("contact:pc"' namespaces);                            if (pcNode != null)                          {                              Contact.PostalInfo.m_address.PostalCode = pcNode.InnerText;                          }                            var ccNode = addrNode.SelectSingleNode("contact:cc"' namespaces);                            if (ccNode != null)                          {                              Contact.PostalInfo.m_address.CountryCode = ccNode.InnerText;                          }                      }                  }              }
Magic Number,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: var lenghtBytes = new byte[4];
Magic Number,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: while (read < 4)              {                  read = read + stream.Read(lenghtBytes' read' 4 - read);              }
Magic Number,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: while (read < 4)              {                  read = read + stream.Read(lenghtBytes' read' 4 - read);              }
Magic Number,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Read,The following statement contains a magic number: var length = BitConverter.ToInt32(lenghtBytes' 0) - 4;
Magic Number,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Write,The following statement contains a magic number: var lenght = bytes.Length + 4;
Magic Number,EppLib,TcpTransport,C:\repos\ademar_EppLib.NET\EppLib\TcpTransport.cs,Write,The following statement contains a magic number: stream.Write(lenghtBytes' 0' 4);
Missing Default,EppLib.Entities,ContactInfoResponse,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\ContactInfoResponse.cs,ProcessDataNode,The following switch statement is missing a default case: switch (changeNode.LocalName)                          {                              case "name":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.NameLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.NameLoc;                                  }                                  break;                              case "org":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.OrganizationLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.OrganizationLoc;                                  }                                  break;                              case "addr":                                  if (changeNode.Attributes["type"].Value == "int")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressInt                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressInt;                                  }                                  else if (changeNode.Attributes["type"].Value == "loc")                                  {                                      Contact.DiscloseMask = flag ?                                          Contact.DiscloseMask | Contact.DiscloseFlags.AddressLoc                                          : Contact.DiscloseMask & ~Contact.DiscloseFlags.AddressLoc;                                  }                                  break;                              case "voice":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Voice                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Voice;                                  break;                              case "fax":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Fax                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Fax;                                  break;                              case "email":                                  Contact.DiscloseMask = flag ?                                      Contact.DiscloseMask | Contact.DiscloseFlags.Email                                      : Contact.DiscloseMask & ~Contact.DiscloseFlags.Email;                                  break;                          }
Missing Default,EppLib.Entities,CiraCprCategories,C:\repos\ademar_EppLib.NET\EppLib\Entities\Contact\CiraCprCategories.cs,GetByCode,The following switch statement is missing a default case: switch (code)              {                  case CCT: return new CiraCprCategory(CCT' "Canadian Citizen");                  case RES:                      return new CiraCprCategory(RES' "Permanent Resident of Canada");                  case CCO:                      return new CiraCprCategory(CCO' "Corporation");                  case ABO:                      return new CiraCprCategory(ABO' "Aboriginal Peoples");                  case TDM:                      return new CiraCprCategory(TDM' "Trade-mark registered in Canada (by a non-Canadian owner)");                  case MAJ:                      return new CiraCprCategory(MAJ' "Her Majesty the Queen");                  case GOV:                      return new CiraCprCategory(GOV' "Government");                  case LGR:                      return new CiraCprCategory(LGR' "Legal Representative of a Canadian Citizen or Permanent Resident");                  case TRS:                      return new CiraCprCategory(TRS' "Trust stablished in Canada");                  case PRT:                      return new CiraCprCategory(PRT' "Partnership registered in Canada");                  case ASS:                      return new CiraCprCategory(ASS' "Canadian Unincorporated Association");                  case TRD:                      return new CiraCprCategory(TRD' "Canadian Trade Union");                  case PLT:                      return new CiraCprCategory(PLT' "Canadian Political Party");                  case EDU:                      return new CiraCprCategory(EDU' "Canadian Educational Institution");                  case LAM:                      return new CiraCprCategory(LAM' "Canadian Library' Archive or Museum");                  case HOP:                      return new CiraCprCategory(HOP' "Canadian Hospital");                  case INB:                      return new CiraCprCategory(INB' "Indian Band recognized by the Indian Act of Canada");                  case OMK:                      return new CiraCprCategory(OMK' "Offical Mark registered in Canada");                }
