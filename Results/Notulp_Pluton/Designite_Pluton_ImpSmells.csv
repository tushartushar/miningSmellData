Implementation smell,Namespace,Class,File,Method,Description
Long Method,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The method has 108 lines of code.
Complex Method,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_BuildingPartGradeChange,Cyclomatic complexity of the method is 8
Complex Method,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,GetQuotedArgs,Cyclomatic complexity of the method is 10
Complex Method,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,GetFriendlyTypeName,Cyclomatic complexity of the method is 10
Complex Method,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,process2,Cyclomatic complexity of the method is 12
Long Parameter List,Pluton.Events,GatherEvent,C:\repos\Notulp_Pluton\Pluton\Events\GatherEvent.cs,GatherEvent,The method has 5 parameters. Parameters: dispenser' from' to' itemAmt' amount
Long Parameter List,Pluton.Events,CraftEvent,C:\repos\Notulp_Pluton\Pluton\Events\CraftEvent.cs,CraftEvent,The method has 6 parameters. Parameters: self' bp' owner' instanceData' amount' skinid
Long Parameter List,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_PlayerGathering,The method has 5 parameters. Parameters: dispenser' to' itemAmt' gatherDamage' destroyFraction
Long Parameter List,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_PlayerStartCrafting,The method has 6 parameters. Parameters: self' bp' owner' instanceData' amount' skinID
Long Parameter List,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,AirDropAt,The method has 5 parameters. Parameters: x' y' z' speed' height
Long Parameter List,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,SpawnMapEntity,The method has 5 parameters. Parameters: name' x' y' z' q
Long Parameter List,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,DumpObjToFile,The method has 5 parameters. Parameters: path' obj' depth' maxItems' prefix
Long Parameter List,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,DumpObjToFile,The method has 6 parameters. Parameters: path' obj' depth' maxItems' disPrivate' prefix
Long Parameter List,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,DumpObjToFile,The method has 7 parameters. Parameters: path' obj' depth' maxItems' disPrivate' fullClassName' prefix
Long Parameter List,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,Dump,The method has 5 parameters. Parameters: obj' type' name' level' settings
Long Parameter List,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,ToDump,The method has 5 parameters. Parameters: obj' type' name' level' settings
Long Statement,Pluton,LuaPluginLoader,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\LUAPluginLoader.cs,Initialize,The length of the statement  "            ReflectionExtensions.SetFieldValueValue(typeof(MoonSharp.Interpreter.Platforms.PlatformAutoDetector)' "m_AutoDetectionsDone"' true); " is 132.
Long Statement,Pluton,LuaPluginLoader,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\LUAPluginLoader.cs,Initialize,The length of the statement  "            ReflectionExtensions.SetFieldValueValue(typeof(MoonSharp.Interpreter.Platforms.PlatformAutoDetector)' "<IsRunningOnUnity>k__BackingField"' true); " is 145.
Long Statement,Pluton,LuaPluginLoader,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\LUAPluginLoader.cs,Initialize,The length of the statement  "            ReflectionExtensions.SetFieldValueValue(typeof(MoonSharp.Interpreter.Platforms.PlatformAutoDetector)' "<IsRunningOnMono>k__BackingField"' true); " is 144.
Long Statement,Pluton,LuaPluginLoader,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\LUAPluginLoader.cs,Initialize,The length of the statement  "            ReflectionExtensions.SetFieldValueValue(typeof(MoonSharp.Interpreter.Platforms.PlatformAutoDetector)' "<IsRunningOnClr4>k__BackingField"' true); " is 144.
Long Statement,Pluton,Bootstrap,C:\repos\Notulp_Pluton\Pluton\Bootstrap.cs,InstallThreadedOutput,The length of the statement  "            Application.logMessageReceivedThreaded += new Application.LogCallback(delegate(string condition' string stackTrace' LogType type) { " is 131.
Long Statement,Pluton,Bootstrap,C:\repos\Notulp_Pluton\Pluton\Bootstrap.cs,InstallThreadedOutput,The length of the statement  "            Application.logMessageReceived += new Application.LogCallback(delegate(string condition' string stackTrace' LogType type) { " is 123.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Chat,The length of the statement  "                string text2 = string.Format("<color={2}>{0}</color>: {1}"' basePlayer.displayName.Replace('<'' '[').Replace('>'' ']')' pChat.FinalText' arg2); " is 143.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Chat,The length of the statement  "                                    ConsoleSystem.SendClientCommand(current' "chat.add"' basePlayer.userID' text2' Mathf.Clamp01(num - sqrMagnitude + 0.2f)); " is 121.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Command,The length of the statement  "            string[] args = arg.ArgsStr.Substring(2' arg.ArgsStr.Length - 3).Replace("\\"' "").Split(new string[] { " " }' StringSplitOptions.None); " is 136.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_BuildingPartGradeChange,The length of the statement  "            Effect.server.Run("assets/bundled/prefabs/fx/build/promote_" + bpgce.Grade.ToString().ToLower() + ".prefab"' bb' 0u' Vector3.zero' Vector3.zero); " is 145.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The length of the statement  "                    rpc.player.SendConsoleCommand("chat.add"' 0' String.Format("{0}: {1}"' Server.server_message_name.ColorText("fa5")' due.DenyReason)); " is 133.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The length of the statement  "                if (doaction && open && (baseLock.IsLocked() && Time.realtimeSinceStartup - (float)door.GetFieldValue("decayResetTimeLast") > 60)) { " is 132.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Placement,The length of the statement  "                GameObject gameObject = GameManager.server.CreatePrefab(construction.fullName' default(Vector3)' default(Quaternion)' true); " is 124.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_LootingEntity,The length of the statement  "                looter.SendConsoleCommand("chat.add"' 0' String.Format("{0}: {1}"' Server.server_message_name.ColorText("fa5")' ele.cancelReason)); " is 131.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_LootingPlayer,The length of the statement  "            var ple = new Events.PlayerLootEvent(playerLoot' Server.GetPlayer(looter)' Server.GetPlayer(playerLoot.entitySource as BasePlayer)); " is 132.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_LootingPlayer,The length of the statement  "                looter.SendConsoleCommand("chat.add"' 0' String.Format("{0}: {1}"' Server.server_message_name.ColorText("fa5")' ple.cancelReason)); " is 131.
Long Statement,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_LootingItem,The length of the statement  "                looter.SendConsoleCommand("chat.add"' 0' String.Format("{0}: {1}"' Server.server_message_name.ColorText("fa5")' ile.cancelReason)); " is 131.
Long Statement,Pluton,ReflectionExtensions,C:\repos\Notulp_Pluton\Pluton\ReflectionExtensions.cs,GetMethodInfo,The length of the statement  "                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.Static); " is 124.
Long Statement,Pluton,ReflectionExtensions,C:\repos\Notulp_Pluton\Pluton\ReflectionExtensions.cs,GetFieldInfo,The length of the statement  "                BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.Static)); " is 125.
Long Statement,Pluton,ReflectionExtensions,C:\repos\Notulp_Pluton\Pluton\ReflectionExtensions.cs,GetFieldInfo,The length of the statement  "                BindingFlags.NonPublic | BindingFlags.Public  | BindingFlags.Instance | BindingFlags.FlattenHierarchy | BindingFlags.Static));           " is 126.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,AttachParachute,The length of the statement  "            BaseEntity parachute = GameManager.server.CreateEntity("assets/prefabs/misc/parachute/parachute.prefab"' default(Vector3)' default(Quaternion)); " is 144.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,AirDrop,The length of the statement  "            BaseEntity baseEntity = GameManager.server.CreateEntity("assets/prefabs/npc/cargo plane/cargo_plane.prefab"' default(Vector3)' default(Quaternion)); " is 148.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,AirDropAt,The length of the statement  "            BaseEntity baseEntity = GameManager.server.CreateEntity("assets/prefabs/npc/cargo plane/cargo_plane.prefab"' default(Vector3)' default(Quaternion)); " is 148.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,PatrolHelicopter,The length of the statement  "            BaseEntity baseEntity = GameManager.server.CreateEntity("assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab"' default(Vector3)' default(Quaternion)' true); " is 165.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,PatrolHelicopterAt,The length of the statement  "            BaseEntity baseEntity = GameManager.server.CreateEntity("assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab"' default(Vector3)' default(Quaternion)' true); " is 165.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,GetGround,The length of the statement  "            if (Physics.Raycast(origin' Vector3.down' out hit' Vector3.Distance(origin' new Vector3(origin.x' -100f' origin.z))' 1 << 23)) { " is 128.
Long Statement,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,GetPrefabNames,The length of the statement  "            System.Collections.Generic.Dictionary<uint' string> pool = (System.Collections.Generic.Dictionary<uint' string>)ReflectionExtensions.GetStaticFieldValue(typeof(StringPool)' "toString"); " is 185.
Long Statement,Pluton,IniParser,C:\repos\Notulp_Pluton\Pluton\IniParser.cs,GetBoolSetting,The length of the statement  "            Logger.LogWarning($"[IniParser] [{section}] -> {setting} -> {this[section' setting]} cant be converted to Boolean. ({FilePath})"); " is 130.
Long Statement,Pluton,IniParser,C:\repos\Notulp_Pluton\Pluton\IniParser.cs,GetIntSetting,The length of the statement  "            Logger.LogWarning($"[IniParser] [{section}] -> {setting} -> {this[section' setting]} cant be converted to Int32. ({FilePath})"); " is 128.
Long Statement,Pluton,Logger,C:\repos\Notulp_Pluton\Pluton\Logger.cs,LogException,The length of the statement  "                Trace += stackTrace.GetFrame(i).GetMethod().DeclaringType.Name + "->" + stackTrace.GetFrame(i).GetMethod().Name + " | "; " is 120.
Long Statement,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,ChangeTriggerRadius,The length of the statement  "                throw new InvalidOperationException(String.Format("Radius can't be less then zero. ChangeTriggerRadius({0}' {1})"' trigger' newRadius)); " is 136.
Long Statement,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,GetServerFolder,The length of the statement  "            return Path.Combine(Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)))' "RustDedicated_Data"); " is 153.
Long Statement,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,process2,The length of the statement  "            if (t.IsPrimitive || t.IsEnum || (t.IsValueType && props.Length == 0 && fi.Length == 0) || s_bloatTypes.ContainsKey(t.FullName) || t == typeof(decimal)) { " is 154.
Long Statement,Pluton,StringExtensions,C:\repos\Notulp_Pluton\Pluton\StringExtensions.cs,JsonPretty,The length of the statement  "            return String.Join(Environment.NewLine' self.yieldPretty(indent).ToArray()).TrimStart('\n'' '\r'' ' '' '\t').Replace(":"' ": "); " is 128.
Long Statement,Pluton,StringExtensions,C:\repos\Notulp_Pluton\Pluton\StringExtensions.cs,yieldPretty,The length of the statement  "            foreach (string line in json.Replace("{"' "{\n").Replace("}"' "\n}").Replace("'\""' "'\n\"").Replace("["' "[\n").Replace("]"' "\n]").Replace("}'{"' "}'\n{").Replace("]'["' "]'\n[").Split('\n')) { " is 195.
Long Statement,Pluton,BasePlugin,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,Log,The length of the statement  "            File.AppendAllText(path' "[" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "] " + text + "\r\n"); " is 129.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,GET,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,POST,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,DELETE,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,PUT,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,PATCH,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,OPTIONS,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,Web,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\BasePlugin.cs,POSTJSON,The length of the statement  "                System.Net.Security.RemoteCertificateValidationCallback verifyssl = (sender' cert' chain' errors) => verifySSLcallback.Invoke(new SSLVerificationEvent(cert' chain' errors)); " is 173.
Long Statement,Pluton,CSSPlugin,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\CSSPlugin.cs,Load,The length of the statement  "                if (classType == null || !classType.IsSubclassOf(typeof(CSharpPlugin)) || !classType.IsPublic || classType.IsAbstract) { " is 120.
Long Statement,Pluton,PluginTypeWatcher,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\PluginWatcher.cs,OnPluginCreated,The length of the statement  "                    Pluton.Logger.Log(String.Format("[PluginWatcher] Couldn't load: {0}{3}{1}.{2}"' dir' filename' Type' Path.DirectorySeparatorChar)); " is 131.
Long Statement,Pluton,PluginTypeWatcher,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\PluginWatcher.cs,OnPluginChanged,The length of the statement  "                        Pluton.Logger.Log(String.Format("[PluginWatcher] Couldn't load: {0}{3}{1}.{2}"' dir' filename' Type' Path.DirectorySeparatorChar)); " is 131.
Long Statement,Pluton,PluginTypeWatcher,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\PluginWatcher.cs,OnPluginChanged,The length of the statement  "                    Pluton.Logger.Log(String.Format("[PluginWatcher] Couldn't load: {0}{3}{1}.{2}"' dir' filename' Type' Path.DirectorySeparatorChar)); " is 131.
Long Statement,Pluton,plugins,C:\repos\Notulp_Pluton\Pluton\plugins.cs,Loaded,The length of the statement  "                result += String.Format("    {0' -22} [{1' -10}]' timers: {2' 8}' parallel: {3' 8}\r\n"' plugin.Name' plugin.Type' plugin.Timers.Count + plugin.ParallelTimers.Count' plugin.ParallelTimers.Count); " is 195.
Long Statement,Pluton,plugins,C:\repos\Notulp_Pluton\Pluton\plugins.cs,Loaded,The length of the statement  "                result += String.Format("Author: {0}' about: {1}' version: {2}" + Environment.NewLine + Environment.NewLine' plugin.Author' plugin.About' plugin.Version); " is 154.
Long Statement,Pluton,PlutonUIEntity,C:\repos\Notulp_Pluton\Pluton\Objects\PlutonUIEntity.cs,CreateUI,The length of the statement  "            CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo() { connections = connections }' null' "AddUI"' new Facepunch.ObjectList?(new Facepunch.ObjectList(panels.ToString()))); " is 184.
Long Statement,Pluton,PlutonUIEntity,C:\repos\Notulp_Pluton\Pluton\Objects\PlutonUIEntity.cs,DestroyUI,The length of the statement  "                CommunityEntity.ServerInstance.ClientRPCEx(new Network.SendInfo() { connections = connections }' null' "DestroyPanel"' new Facepunch.ObjectList?(new Facepunch.ObjectList(panel.Obj.GetString("name")))); " is 201.
Complex Conditional,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The conditional expression  "(open && door.IsOpen()) || (!open && !door.IsOpen())"  is complex.
Complex Conditional,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The conditional expression  "doaction && open && (baseLock.IsLocked() && Time.realtimeSinceStartup - (float)door.GetFieldValue("decayResetTimeLast") > 60)"  is complex.
Complex Conditional,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,GetFriendlyTypeName,The conditional expression  "type.IsGenericParameter || type.IsPrimitive || !type.IsGenericType || type == typeof(decimal)"  is complex.
Complex Conditional,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,process2,The conditional expression  "t.IsPrimitive || t.IsEnum || (t.IsValueType && props.Length == 0 && fi.Length == 0) || s_bloatTypes.ContainsKey(t.FullName) || t == typeof(decimal)"  is complex.
Complex Conditional,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,process2,The conditional expression  "(t == typeof(int)) || (t == typeof(byte)) || (t == typeof(uint)) || t == typeof(long) ||                      t == typeof(ulong)"  is complex.
Complex Conditional,Pluton,CSPlugin,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\CSPlugin.cs,Load,The conditional expression  "classType == null || !classType.IsSubclassOf(typeof(CSharpPlugin)) || !classType.IsPublic || classType.IsAbstract"  is complex.
Complex Conditional,Pluton,CSSPlugin,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\CSSPlugin.cs,Load,The conditional expression  "classType == null || !classType.IsSubclassOf(typeof(CSharpPlugin)) || !classType.IsPublic || classType.IsAbstract"  is complex.
Magic Number,Pluton.Events,ChatEvent,C:\repos\Notulp_Pluton\Pluton\Events\ChatEvent.cs,ChatEvent,The following statement contains a magic number: OriginalText = args.ArgsStr.Substring(1' args.ArgsStr.Length - 2).Replace("\\"' "");
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Chat,The following statement contains a magic number: if (!ConVar.Chat.enabled) {                  arg.ReplyWith("Chat is disabled.");              } else {                  if (arg.ArgsStr == "\"\"") {                      return;                  }                    BasePlayer basePlayer = arg.Player();                  if (!basePlayer) {                      return;                  }                    ChatEvent pChat = new ChatEvent(Server.GetPlayer(basePlayer)' arg);                    string str = arg.GetString(0' "text");                    if (str.Length > 128)                      str = str.Substring(0' 128);                    if (str.Length <= 0)                      return;                      if (ConVar.Chat.serverlog) {                      ServerConsole.PrintColoured(new object[] {                          ConsoleColor.DarkYellow'                          basePlayer.displayName + ": "'                          ConsoleColor.DarkGreen'                          str                      });                      ConVar.Server.Log("Log.Chat.txt"' string.Format("{0}/{1}: {2}\r\n"' basePlayer.userID' basePlayer.displayName' str));                      Debug.Log(string.Format("[CHAT] {0}: {1}"' basePlayer.displayName' str));                  }                    string arg2 = "#5af";                  if (basePlayer.IsAdmin()) {                      arg2 = "#af5";                  }                    if (DeveloperList.IsDeveloper(basePlayer)) {                      arg2 = "#fa5";                  }                    OnNext("On_Chat"' pChat);                    string text2 = string.Format("<color={2}>{0}</color>: {1}"' basePlayer.displayName.Replace('<'' '[').Replace('>'' ']')' pChat.FinalText' arg2);                    if (pChat.FinalText != "") {                      Logger.ChatLog(pChat.BroadcastName' pChat.OriginalText);                      arg.ReplyWith(pChat.Reply);                        if (ConVar.Server.globalchat) {                          ConsoleSystem.Broadcast("chat.add"' basePlayer.userID' text2' 1);                      } else {                          float num = 2500;                          foreach (Connection current in Net.sv.connections) {                              if (current.player != null) {                                  float sqrMagnitude = (current.player.transform.position - basePlayer.transform.position).sqrMagnitude;                                  if (sqrMagnitude <= num) {                                      ConsoleSystem.SendClientCommand(current' "chat.add"' basePlayer.userID' text2' Mathf.Clamp01(num - sqrMagnitude + 0.2f));                                  }                              }                          }                      }                  }              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Chat,The following statement contains a magic number: if (!ConVar.Chat.enabled) {                  arg.ReplyWith("Chat is disabled.");              } else {                  if (arg.ArgsStr == "\"\"") {                      return;                  }                    BasePlayer basePlayer = arg.Player();                  if (!basePlayer) {                      return;                  }                    ChatEvent pChat = new ChatEvent(Server.GetPlayer(basePlayer)' arg);                    string str = arg.GetString(0' "text");                    if (str.Length > 128)                      str = str.Substring(0' 128);                    if (str.Length <= 0)                      return;                      if (ConVar.Chat.serverlog) {                      ServerConsole.PrintColoured(new object[] {                          ConsoleColor.DarkYellow'                          basePlayer.displayName + ": "'                          ConsoleColor.DarkGreen'                          str                      });                      ConVar.Server.Log("Log.Chat.txt"' string.Format("{0}/{1}: {2}\r\n"' basePlayer.userID' basePlayer.displayName' str));                      Debug.Log(string.Format("[CHAT] {0}: {1}"' basePlayer.displayName' str));                  }                    string arg2 = "#5af";                  if (basePlayer.IsAdmin()) {                      arg2 = "#af5";                  }                    if (DeveloperList.IsDeveloper(basePlayer)) {                      arg2 = "#fa5";                  }                    OnNext("On_Chat"' pChat);                    string text2 = string.Format("<color={2}>{0}</color>: {1}"' basePlayer.displayName.Replace('<'' '[').Replace('>'' ']')' pChat.FinalText' arg2);                    if (pChat.FinalText != "") {                      Logger.ChatLog(pChat.BroadcastName' pChat.OriginalText);                      arg.ReplyWith(pChat.Reply);                        if (ConVar.Server.globalchat) {                          ConsoleSystem.Broadcast("chat.add"' basePlayer.userID' text2' 1);                      } else {                          float num = 2500;                          foreach (Connection current in Net.sv.connections) {                              if (current.player != null) {                                  float sqrMagnitude = (current.player.transform.position - basePlayer.transform.position).sqrMagnitude;                                  if (sqrMagnitude <= num) {                                      ConsoleSystem.SendClientCommand(current' "chat.add"' basePlayer.userID' text2' Mathf.Clamp01(num - sqrMagnitude + 0.2f));                                  }                              }                          }                      }                  }              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Chat,The following statement contains a magic number: if (!ConVar.Chat.enabled) {                  arg.ReplyWith("Chat is disabled.");              } else {                  if (arg.ArgsStr == "\"\"") {                      return;                  }                    BasePlayer basePlayer = arg.Player();                  if (!basePlayer) {                      return;                  }                    ChatEvent pChat = new ChatEvent(Server.GetPlayer(basePlayer)' arg);                    string str = arg.GetString(0' "text");                    if (str.Length > 128)                      str = str.Substring(0' 128);                    if (str.Length <= 0)                      return;                      if (ConVar.Chat.serverlog) {                      ServerConsole.PrintColoured(new object[] {                          ConsoleColor.DarkYellow'                          basePlayer.displayName + ": "'                          ConsoleColor.DarkGreen'                          str                      });                      ConVar.Server.Log("Log.Chat.txt"' string.Format("{0}/{1}: {2}\r\n"' basePlayer.userID' basePlayer.displayName' str));                      Debug.Log(string.Format("[CHAT] {0}: {1}"' basePlayer.displayName' str));                  }                    string arg2 = "#5af";                  if (basePlayer.IsAdmin()) {                      arg2 = "#af5";                  }                    if (DeveloperList.IsDeveloper(basePlayer)) {                      arg2 = "#fa5";                  }                    OnNext("On_Chat"' pChat);                    string text2 = string.Format("<color={2}>{0}</color>: {1}"' basePlayer.displayName.Replace('<'' '[').Replace('>'' ']')' pChat.FinalText' arg2);                    if (pChat.FinalText != "") {                      Logger.ChatLog(pChat.BroadcastName' pChat.OriginalText);                      arg.ReplyWith(pChat.Reply);                        if (ConVar.Server.globalchat) {                          ConsoleSystem.Broadcast("chat.add"' basePlayer.userID' text2' 1);                      } else {                          float num = 2500;                          foreach (Connection current in Net.sv.connections) {                              if (current.player != null) {                                  float sqrMagnitude = (current.player.transform.position - basePlayer.transform.position).sqrMagnitude;                                  if (sqrMagnitude <= num) {                                      ConsoleSystem.SendClientCommand(current' "chat.add"' basePlayer.userID' text2' Mathf.Clamp01(num - sqrMagnitude + 0.2f));                                  }                              }                          }                      }                  }              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Command,The following statement contains a magic number: string[] args = arg.ArgsStr.Substring(2' arg.ArgsStr.Length - 3).Replace("\\"' "").Split(new string[] { " " }' StringSplitOptions.None);
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_Command,The following statement contains a magic number: string[] args = arg.ArgsStr.Substring(2' arg.ArgsStr.Length - 3).Replace("\\"' "").Split(new string[] { " " }' StringSplitOptions.None);
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_CombatEntityHurt,The following statement contains a magic number: try {                  Assert.Test(combatEnt.isServer' "This should be called serverside only");                  if (combatEnt.IsDead()) return;                  using (TimeWarning.New("Hurt"' 50)) {                      BaseNPC npc = combatEnt.GetComponent<BaseNPC>();                      BaseCorpse corpse = combatEnt.GetComponent<BaseCorpse>();                      BasePlayer player = combatEnt.GetComponent<BasePlayer>();                        combatEnt.ScaleDamage(info' useProtection);                        HurtEvent he;                      if (player != null) {                          Player p = Server.GetPlayer(player);                          if (p.Teleporting) {                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  info.damageTypes.types[i] = 0f;                              }                          }                            he = new PlayerHurtEvent(p' info);                          OnNext("On_PlayerHurt"' he);                      } else if (npc != null) {                          he = new NPCHurtEvent(new NPC(npc)' info);                          OnNext("On_NPCHurt"' he);                      } else if (corpse != null) {                          he = new CorpseHurtEvent(corpse' info);                          OnNext("On_CorpseHurt"' he);                      } else {                          he = new CombatEntityHurtEvent(combatEnt' info);                          OnNext("On_CombatEntityHurt"' he);                      }                        if (info.PointStart != Vector3.zero) {                          DirectionProperties[] directionProperties = (DirectionProperties[])combatEnt.GetFieldValue("propDirection");                          for (int i = 0; i < directionProperties.Length; i++) {                              if (!(directionProperties[i].extraProtection == null)) {                                  if (directionProperties[i].IsPointWithinRadius(combatEnt.transform' info.PointStart)) {                                      directionProperties[i].extraProtection.Scale(info.damageTypes);                                  }                              }                          }                      }                        // the DebugHurt() method                      if (ConVar.Vis.attack) {                          if (info.PointStart != info.PointEnd) {                              ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                                  60' Color.cyan' info.PointStart' info.PointEnd' 0.1                              });                              ConsoleSystem.Broadcast("ddraw.sphere"' new object[] {                                  60' Color.cyan' info.HitPositionWorld' 0.05                              });                          }                              string text = String.Empty;                              for (int i = 0; i < info.damageTypes.types.Length; i++) {                                  float num = info.damageTypes.types[i];                                  if (num != 0) {                                      string text2 = text;                                      text = String.Concat(new string[] {                                          text2' " "' ((Rust.DamageType)i).ToString().PadRight(10)' num.ToString("0.00")' "\r\n"                                      });                                  }                              }                              string text3 = String.Concat(new object[] {                                  "<color=lightblue>Damage:</color>".PadRight(10)'                                  info.damageTypes.Total().ToString("0.00")'                                  "\r\n<color=lightblue>Health:</color>".PadRight(10)'                                  combatEnt.health.ToString("0.00")' " / "'                                  (combatEnt.health - info.damageTypes.Total() > 0) ? "<color=green>" : "<color=red>"'                                  (combatEnt.health - info.damageTypes.Total()).ToString("0.00")' "</color>"'                                  "\r\n<color=lightblue>Hit Ent:</color>".PadRight(10)' combatEnt'                                  "\r\n<color=lightblue>Attacker:</color>".PadRight(10)' info.Initiator'                                  "\r\n<color=lightblue>Weapon:</color>".PadRight(10)' info.Weapon'                                  "\r\n<color=lightblue>Damages:</color>\r\n"' text                              });                              ConsoleSystem.Broadcast("ddraw.text"' new object[] {                                  60' Color.white' info.HitPositionWorld' text3                              });                          }                        combatEnt.health -= info.damageTypes.Total();                      combatEnt.SendNetworkUpdate(BasePlayer.NetworkQueue.Update);                      if (ConVar.Global.developer > 1) {                          Debug.Log(string.Concat(new object[]      		            {      			            "[Combat]".PadRight(10)'      			            combatEnt.gameObject.name'      			            " hurt "'      			            info.damageTypes.GetMajorityDamageType()'      			            "/"'      			            info.damageTypes.Total()'      			            " - "'      			            combatEnt.health.ToString("0")'      			            " health left"      		            }));                      }                      combatEnt.lastDamage = info.damageTypes.GetMajorityDamageType();                      combatEnt.lastAttacker = info.Initiator;                      combatEnt.SetFieldValue("_lastAttackedTime"' Time.time);                      if (combatEnt.health <= 0f) {                          combatEnt.Die(info);                          BuildingBlock bb = combatEnt.GetComponent<BuildingBlock>();                          if (bb != null)                          {                              OnNext("On_BuildingPartDestroyed"' new BuildingPartDestroyedEvent(bb' info));                          }                      }                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error in CombatEntityHurt hook.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The following statement contains a magic number: if (!due.IgnoreLock && baseLock != null) {                  doaction = open ? baseLock.OnTryToOpen(rpc.player) : baseLock.OnTryToClose(rpc.player);                    if (doaction && open && (baseLock.IsLocked() && Time.realtimeSinceStartup - (float)door.GetFieldValue("decayResetTimeLast") > 60)) {                      Decay.RadialDecayTouch (door.transform.position' 40' 270532608);                      door.SetFieldValue("decayResetTimeLast"' Time.realtimeSinceStartup);                  }              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The following statement contains a magic number: if (!due.IgnoreLock && baseLock != null) {                  doaction = open ? baseLock.OnTryToOpen(rpc.player) : baseLock.OnTryToClose(rpc.player);                    if (doaction && open && (baseLock.IsLocked() && Time.realtimeSinceStartup - (float)door.GetFieldValue("decayResetTimeLast") > 60)) {                      Decay.RadialDecayTouch (door.transform.position' 40' 270532608);                      door.SetFieldValue("decayResetTimeLast"' Time.realtimeSinceStartup);                  }              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_DoorUse,The following statement contains a magic number: if (!due.IgnoreLock && baseLock != null) {                  doaction = open ? baseLock.OnTryToOpen(rpc.player) : baseLock.OnTryToClose(rpc.player);                    if (doaction && open && (baseLock.IsLocked() && Time.realtimeSinceStartup - (float)door.GetFieldValue("decayResetTimeLast") > 60)) {                      Decay.RadialDecayTouch (door.transform.position' 40' 270532608);                      door.SetFieldValue("decayResetTimeLast"' Time.realtimeSinceStartup);                  }              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,On_PlayerGathering,The following statement contains a magic number: float num4 = num3 * destroyFraction * 2;
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,SetModded,The following statement contains a magic number: try {                  using (TimeWarning.New ("UpdateServerInformation"' 0.1f)) {                      SteamGameServer.SetServerName(ConVar.Server.hostname);                      SteamGameServer.SetMaxPlayerCount(ConVar.Server.maxplayers);                      SteamGameServer.SetPasswordProtected(false);                      SteamGameServer.SetMapName(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);                      string pchGameTags = string.Format("mp{0}'cp{1}'v{2}{3}{4}"' new object[] {      					ConVar.Server.maxplayers'      					BasePlayer.activePlayerList.Count'      					Rust.Protocol.network'      					ConVar.Server.pve ? "'pve" : string.Empty'      					pluton.enabled ? "'modded'pluton" : string.Empty      				});                        SteamGameServer.SetGameTags(pchGameTags);                      string[] array = ConVar.Server.description.SplitToChunks(100).ToArray<string>();                      for (int i = 0; i < 16; i++) {                          if (i < array.Length) {                              SteamGameServer.SetKeyValue(string.Format("description_{0:00}"' i)' array[i]);                          }                          else {                              SteamGameServer.SetKeyValue(string.Format("description_{0:00}"' i)' String.Empty);                          }                      }                      SteamGameServer.SetKeyValue("country"' SteamGameServerUtils.GetIPCountry());                      SteamGameServer.SetKeyValue("world.seed"' global::World.Seed.ToString());                      SteamGameServer.SetKeyValue("world.size"' global::World.Size.ToString());                      SteamGameServer.SetKeyValue("official"' ConVar.Server.official.ToString());                      SteamGameServer.SetKeyValue("pve"' ConVar.Server.pve.ToString());                      SteamGameServer.SetKeyValue("headerimage"' ConVar.Server.headerimage);                      SteamGameServer.SetKeyValue("url"' ConVar.Server.url);                      SteamGameServer.SetKeyValue("uptime"' ((int)Time.realtimeSinceStartup).ToString());                      SteamGameServer.SetKeyValue("mem_ws"' Performance.usedMemoryWorkingSetMB.ToString());                      SteamGameServer.SetKeyValue("mem_pv"' Performance.usedMemoryPrivateMB.ToString());                      SteamGameServer.SetKeyValue("gc_mb"' Performance.memoryAllocations.ToString());                      SteamGameServer.SetKeyValue("gc_cl"' Performance.memoryCollections.ToString());                      SteamGameServer.SetKeyValue("fps"' Performance.frameRate.ToString());                      SteamGameServer.SetKeyValue("fps_avg"' Performance.frameRateAverage.ToString("0.00"));                      SteamGameServer.SetKeyValue("ent_cnt"' BaseNetworkable.serverEntities.Count.ToString());                      SteamGameServer.SetKeyValue("build"' BuildInformation.VersionStampDays.ToString());                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error while setting the server modded.");                  Logger.LogException(ex);              }
Magic Number,Pluton,Hooks,C:\repos\Notulp_Pluton\Pluton\Hooks.cs,SetModded,The following statement contains a magic number: try {                  using (TimeWarning.New ("UpdateServerInformation"' 0.1f)) {                      SteamGameServer.SetServerName(ConVar.Server.hostname);                      SteamGameServer.SetMaxPlayerCount(ConVar.Server.maxplayers);                      SteamGameServer.SetPasswordProtected(false);                      SteamGameServer.SetMapName(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);                      string pchGameTags = string.Format("mp{0}'cp{1}'v{2}{3}{4}"' new object[] {      					ConVar.Server.maxplayers'      					BasePlayer.activePlayerList.Count'      					Rust.Protocol.network'      					ConVar.Server.pve ? "'pve" : string.Empty'      					pluton.enabled ? "'modded'pluton" : string.Empty      				});                        SteamGameServer.SetGameTags(pchGameTags);                      string[] array = ConVar.Server.description.SplitToChunks(100).ToArray<string>();                      for (int i = 0; i < 16; i++) {                          if (i < array.Length) {                              SteamGameServer.SetKeyValue(string.Format("description_{0:00}"' i)' array[i]);                          }                          else {                              SteamGameServer.SetKeyValue(string.Format("description_{0:00}"' i)' String.Empty);                          }                      }                      SteamGameServer.SetKeyValue("country"' SteamGameServerUtils.GetIPCountry());                      SteamGameServer.SetKeyValue("world.seed"' global::World.Seed.ToString());                      SteamGameServer.SetKeyValue("world.size"' global::World.Size.ToString());                      SteamGameServer.SetKeyValue("official"' ConVar.Server.official.ToString());                      SteamGameServer.SetKeyValue("pve"' ConVar.Server.pve.ToString());                      SteamGameServer.SetKeyValue("headerimage"' ConVar.Server.headerimage);                      SteamGameServer.SetKeyValue("url"' ConVar.Server.url);                      SteamGameServer.SetKeyValue("uptime"' ((int)Time.realtimeSinceStartup).ToString());                      SteamGameServer.SetKeyValue("mem_ws"' Performance.usedMemoryWorkingSetMB.ToString());                      SteamGameServer.SetKeyValue("mem_pv"' Performance.usedMemoryPrivateMB.ToString());                      SteamGameServer.SetKeyValue("gc_mb"' Performance.memoryAllocations.ToString());                      SteamGameServer.SetKeyValue("gc_cl"' Performance.memoryCollections.ToString());                      SteamGameServer.SetKeyValue("fps"' Performance.frameRate.ToString());                      SteamGameServer.SetKeyValue("fps_avg"' Performance.frameRateAverage.ToString("0.00"));                      SteamGameServer.SetKeyValue("ent_cnt"' BaseNetworkable.serverEntities.Count.ToString());                      SteamGameServer.SetKeyValue("build"' BuildInformation.VersionStampDays.ToString());                  }              } catch (Exception ex) {                  Logger.LogError("[Hooks] Error while setting the server modded.");                  Logger.LogException(ex);              }
Magic Number,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,AirDropAt,The following statement contains a magic number: float worldSize = (float)(global::World.Size - (global::World.Size / 7));
Magic Number,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,GetGround,The following statement contains a magic number: if (Physics.Raycast(origin' Vector3.down' out hit' Vector3.Distance(origin' new Vector3(origin.x' -100f' origin.z))' 1 << 23)) {                  ground = hit.point.y;              }
Magic Number,Pluton,World,C:\repos\Notulp_Pluton\Pluton\World.cs,FreezeTime,The following statement contains a magic number: if (freezeTimeTimer == null) {                  frozenTime = Time;                  freezeTimeTimer = new Timer(10000);                  freezeTimeTimer.Elapsed += new ElapsedEventHandler(this.Freeze);              }
Magic Number,Pluton,IniParser,C:\repos\Notulp_Pluton\Pluton\IniParser.cs,IniParser,The following statement contains a magic number: using (TextReader reader = new StreamReader(iniPath)) {                  for (string line = reader.ReadLine(); line != null; line = reader.ReadLine()) {                      line = line.Trim();                      if (line == String.Empty)                          continue;                        if (line.StartsWith("[") && line.EndsWith("]")) {                            section = line.Substring(1' line.Length - 2);                            if (!Sections.ContainsKey(section)) {                              Sections.Add(section' new IniSection(section));                              if (comments.Count != 0) {                                  Sections[section].Comments.AddRange(comments);                                  comments = new List<string>();                              }                          }                          currentSection = Sections[section];                          inroot = false;                      } else {                          if (line.StartsWith(";")) {                              comments.Add(line);                              continue;                          }                            string[] ConfEqValue = line.Split(new char[] { '=' }' 2);                            if (ConfEqValue.Length == 0)                              continue;                            if (inroot) {                              if (!Sections.ContainsKey(section)) {                                  Sections.Add(section' new IniSection(section));                                  if (comments.Count != 0) {                                      Sections[section].Comments.AddRange(comments);                                      comments = new List<string>();                                  }                              }                              currentSection = Sections[section];                              inroot = false;                          }                              if (ConfEqValue.Length == 2)                              currentSection.AddSetting(ConfEqValue[0]' ConfEqValue[1]);                            else if (ConfEqValue.Length == 1)                              currentSection.AddSetting(ConfEqValue[0]' null);                            if (comments.Count != 0) {                              currentSection.Settings[ConfEqValue[0]].Comments.AddRange(comments);                              comments = new List<string>();                          }                      }                  }              }
Magic Number,Pluton,IniParser,C:\repos\Notulp_Pluton\Pluton\IniParser.cs,IniParser,The following statement contains a magic number: using (TextReader reader = new StreamReader(iniPath)) {                  for (string line = reader.ReadLine(); line != null; line = reader.ReadLine()) {                      line = line.Trim();                      if (line == String.Empty)                          continue;                        if (line.StartsWith("[") && line.EndsWith("]")) {                            section = line.Substring(1' line.Length - 2);                            if (!Sections.ContainsKey(section)) {                              Sections.Add(section' new IniSection(section));                              if (comments.Count != 0) {                                  Sections[section].Comments.AddRange(comments);                                  comments = new List<string>();                              }                          }                          currentSection = Sections[section];                          inroot = false;                      } else {                          if (line.StartsWith(";")) {                              comments.Add(line);                              continue;                          }                            string[] ConfEqValue = line.Split(new char[] { '=' }' 2);                            if (ConfEqValue.Length == 0)                              continue;                            if (inroot) {                              if (!Sections.ContainsKey(section)) {                                  Sections.Add(section' new IniSection(section));                                  if (comments.Count != 0) {                                      Sections[section].Comments.AddRange(comments);                                      comments = new List<string>();                                  }                              }                              currentSection = Sections[section];                              inroot = false;                          }                              if (ConfEqValue.Length == 2)                              currentSection.AddSetting(ConfEqValue[0]' ConfEqValue[1]);                            else if (ConfEqValue.Length == 1)                              currentSection.AddSetting(ConfEqValue[0]' null);                            if (comments.Count != 0) {                              currentSection.Settings[ConfEqValue[0]].Comments.AddRange(comments);                              comments = new List<string>();                          }                      }                  }              }
Magic Number,Pluton,IniParser,C:\repos\Notulp_Pluton\Pluton\IniParser.cs,IniParser,The following statement contains a magic number: using (TextReader reader = new StreamReader(iniPath)) {                  for (string line = reader.ReadLine(); line != null; line = reader.ReadLine()) {                      line = line.Trim();                      if (line == String.Empty)                          continue;                        if (line.StartsWith("[") && line.EndsWith("]")) {                            section = line.Substring(1' line.Length - 2);                            if (!Sections.ContainsKey(section)) {                              Sections.Add(section' new IniSection(section));                              if (comments.Count != 0) {                                  Sections[section].Comments.AddRange(comments);                                  comments = new List<string>();                              }                          }                          currentSection = Sections[section];                          inroot = false;                      } else {                          if (line.StartsWith(";")) {                              comments.Add(line);                              continue;                          }                            string[] ConfEqValue = line.Split(new char[] { '=' }' 2);                            if (ConfEqValue.Length == 0)                              continue;                            if (inroot) {                              if (!Sections.ContainsKey(section)) {                                  Sections.Add(section' new IniSection(section));                                  if (comments.Count != 0) {                                      Sections[section].Comments.AddRange(comments);                                      comments = new List<string>();                                  }                              }                              currentSection = Sections[section];                              inroot = false;                          }                              if (ConfEqValue.Length == 2)                              currentSection.AddSetting(ConfEqValue[0]' ConfEqValue[1]);                            else if (ConfEqValue.Length == 1)                              currentSection.AddSetting(ConfEqValue[0]' null);                            if (comments.Count != 0) {                              currentSection.Settings[ConfEqValue[0]].Comments.AddRange(comments);                              comments = new List<string>();                          }                      }                  }              }
Magic Number,Pluton,Logger,C:\repos\Notulp_Pluton\Pluton\Logger.cs,LogRecieved,The following statement contains a magic number: if (loggedlistCleared.AddSeconds(2) < DateTime.Now) {                  AlreadyLogged.Clear();                  loggedlistCleared = DateTime.Now;              }
Magic Number,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,DumpObjToFile,The following statement contains a magic number: return DumpObjToFile(path' obj' 1' 30' false' false' prefix);
Magic Number,Pluton,Util,C:\repos\Notulp_Pluton\Pluton\Util.cs,DumpObjToFile,The following statement contains a magic number: return DumpObjToFile(path' obj' depth' 30' false' false' prefix);
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,process2,The following statement contains a magic number: _out.Append(new string(' '' depth * 2));
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,process2,The following statement contains a magic number: _out.Append(new string(' '' depth * 2));
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,dumpProperty,The following statement contains a magic number: try {                  if (p.GetIndexParameters().Length == 0) {                      object obj = p.GetValue(o' null);                      if (asString)                          process2(p.Name' (obj == null) ? p.PropertyType : obj.GetType()' (obj ?? "<null>").ToString()' level);                      else                          process2(p.Name' (obj == null) ? p.PropertyType : obj.GetType()' obj' level);                      _out.AppendLine();                  } else {                      _out.Append(new string(' '' level * 2));                      _out.AppendLine(p.Name + ": " + "(" + GetFriendlyTypeName(p.PropertyType) + ") *** indexed property ignored");                  }              } catch (Exception e) {                  if (e is NotSupportedException)                      return;                  _out.Append(new string(' '' level * 2));                  _out.AppendLine(p.Name + ": " + "??? thrown " + e.GetType().FullName);              }
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,dumpProperty,The following statement contains a magic number: try {                  if (p.GetIndexParameters().Length == 0) {                      object obj = p.GetValue(o' null);                      if (asString)                          process2(p.Name' (obj == null) ? p.PropertyType : obj.GetType()' (obj ?? "<null>").ToString()' level);                      else                          process2(p.Name' (obj == null) ? p.PropertyType : obj.GetType()' obj' level);                      _out.AppendLine();                  } else {                      _out.Append(new string(' '' level * 2));                      _out.AppendLine(p.Name + ": " + "(" + GetFriendlyTypeName(p.PropertyType) + ") *** indexed property ignored");                  }              } catch (Exception e) {                  if (e is NotSupportedException)                      return;                  _out.Append(new string(' '' level * 2));                  _out.AppendLine(p.Name + ": " + "??? thrown " + e.GetType().FullName);              }
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,dumpField,The following statement contains a magic number: try {                  object obj = p.GetValue(o);                  process2(p.Name' (obj == null) ? p.FieldType : obj.GetType()' obj' level);                  _out.AppendLine();              } catch (Exception e) {                  if (e is NotSupportedException)                      return;                  _out.Append(new string(' '' level * 2));                  _out.AppendLine(p.Name + ": " + "??? thrown " + e.GetType().FullName);              }
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,processEnumerables,The following statement contains a magic number: foreach (object info in enumerable) {                  Type tinside = info == null ? typeof(object) : info.GetType();                  process2("[" + index + "]"' tinside' info' nLevel + 1);                  _out.AppendLine();                  if (index++ > (_settings.MaxItems - 2)) {                      _out.AppendLine("...");                      break;                  }              }
Magic Number,Pluton,Dump,C:\repos\Notulp_Pluton\Pluton\Dump.cs,processArray,The following statement contains a magic number: if (tInside == typeof(byte)) {                  byte[] b = (byte[])arr;                  _out.AppendFormat(" {0} bytes [ "' arr.Length);                  for (int i = 0; i < b.Length; ++i) {                      if (i != 0)                          _out.Append(' ');                      _out.Append(b[i].ToString("x2"));                      if (i > (_settings.MaxItems - 2)) {                          _out.Append("...");                          break;                      }                  }                  _out.Append(" ]");                  return;              }
Magic Number,Pluton,Player,C:\repos\Notulp_Pluton\Pluton\Objects\Player.cs,MakeOwner,The following statement contains a magic number: basePlayer.net.connection.authLevel = 2;
Magic Number,Pluton,LoadOut,C:\repos\Notulp_Pluton\Pluton\Objects\LoadOut.cs,LoadOut,The following statement contains a magic number: items = new Dictionary<int' LoadOutItem>(30);
Magic Number,Pluton,LoadOut,C:\repos\Notulp_Pluton\Pluton\Objects\LoadOut.cs,Add,The following statement contains a magic number: if (itemCount >= 30) {                  Logger.LogDebug("[LoadOut] You may not add more then 30 items to one loadout.");                  return false;              }
Magic Number,Pluton,LoadOut,C:\repos\Notulp_Pluton\Pluton\Objects\LoadOut.cs,Reorganize,The following statement contains a magic number: items = new Dictionary<int' LoadOutItem>(30);
Magic Number,Pluton,Stopper,C:\repos\Notulp_Pluton\Pluton\Stopper.cs,Stopper,The following statement contains a magic number: WarnTimeMS = (long)(warnSecs * 1000);
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeAllTris,The following statement contains a magic number: int capacity = (Verts.Count - 2) * 6;
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeAllTris,The following statement contains a magic number: int capacity = (Verts.Count - 2) * 6;
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeSideTris,The following statement contains a magic number: for (int i = 0; i < length; i++) {                  Tris[TrisCount] = i;                  TrisCount += 1;                  if (i == (length - 1)) {                      Tris[TrisCount] = 0;                      Tris[TrisCount + 1] = 1;                      TrisCount += 2;                  } else if (i == (length - 2)) {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = 0;                      TrisCount += 2;                  } else {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = i + 2;                      TrisCount += 2;                  }              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeSideTris,The following statement contains a magic number: for (int i = 0; i < length; i++) {                  Tris[TrisCount] = i;                  TrisCount += 1;                  if (i == (length - 1)) {                      Tris[TrisCount] = 0;                      Tris[TrisCount + 1] = 1;                      TrisCount += 2;                  } else if (i == (length - 2)) {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = 0;                      TrisCount += 2;                  } else {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = i + 2;                      TrisCount += 2;                  }              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeSideTris,The following statement contains a magic number: for (int i = 0; i < length; i++) {                  Tris[TrisCount] = i;                  TrisCount += 1;                  if (i == (length - 1)) {                      Tris[TrisCount] = 0;                      Tris[TrisCount + 1] = 1;                      TrisCount += 2;                  } else if (i == (length - 2)) {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = 0;                      TrisCount += 2;                  } else {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = i + 2;                      TrisCount += 2;                  }              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeSideTris,The following statement contains a magic number: for (int i = 0; i < length; i++) {                  Tris[TrisCount] = i;                  TrisCount += 1;                  if (i == (length - 1)) {                      Tris[TrisCount] = 0;                      Tris[TrisCount + 1] = 1;                      TrisCount += 2;                  } else if (i == (length - 2)) {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = 0;                      TrisCount += 2;                  } else {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = i + 2;                      TrisCount += 2;                  }              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeSideTris,The following statement contains a magic number: for (int i = 0; i < length; i++) {                  Tris[TrisCount] = i;                  TrisCount += 1;                  if (i == (length - 1)) {                      Tris[TrisCount] = 0;                      Tris[TrisCount + 1] = 1;                      TrisCount += 2;                  } else if (i == (length - 2)) {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = 0;                      TrisCount += 2;                  } else {                      Tris[TrisCount] = i + 1;                      Tris[TrisCount + 1] = i + 2;                      TrisCount += 2;                  }              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeTopTris,The following statement contains a magic number: for (int i = 2; i <= length - 4; i += 2) {                  Tris[TrisCount] = 0;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeTopTris,The following statement contains a magic number: for (int i = 2; i <= length - 4; i += 2) {                  Tris[TrisCount] = 0;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeTopTris,The following statement contains a magic number: for (int i = 2; i <= length - 4; i += 2) {                  Tris[TrisCount] = 0;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeTopTris,The following statement contains a magic number: for (int i = 2; i <= length - 4; i += 2) {                  Tris[TrisCount] = 0;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeTopTris,The following statement contains a magic number: for (int i = 2; i <= length - 4; i += 2) {                  Tris[TrisCount] = 0;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeTopTris,The following statement contains a magic number: for (int i = 2; i <= length - 4; i += 2) {                  Tris[TrisCount] = 0;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeBottomTris,The following statement contains a magic number: for (int i = 3; i <= length - 3; i += 2) {                  Tris[TrisCount] = 1;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeBottomTris,The following statement contains a magic number: for (int i = 3; i <= length - 3; i += 2) {                  Tris[TrisCount] = 1;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeBottomTris,The following statement contains a magic number: for (int i = 3; i <= length - 3; i += 2) {                  Tris[TrisCount] = 1;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeBottomTris,The following statement contains a magic number: for (int i = 3; i <= length - 3; i += 2) {                  Tris[TrisCount] = 1;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeBottomTris,The following statement contains a magic number: for (int i = 3; i <= length - 3; i += 2) {                  Tris[TrisCount] = 1;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,ComputeBottomTris,The following statement contains a magic number: for (int i = 3; i <= length - 3; i += 2) {                  Tris[TrisCount] = 1;                  Tris[TrisCount + 1] = i;                  Tris[TrisCount + 2] = i + 2;                  TrisCount += 3;              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,Draw,The following statement contains a magic number: for (int i = 0; i < Tris.Length; i += 3) {                  DrawLine(Verts[Tris[i]]' Verts[Tris[i + 1]]' Color.red);                  DrawLine(Verts[Tris[i]]' Verts[Tris[i + 2]]' Color.red);                  DrawLine(Verts[Tris[i + 1]]' Verts[Tris[i + 2]]' Color.red);              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,Draw,The following statement contains a magic number: for (int i = 0; i < Tris.Length; i += 3) {                  DrawLine(Verts[Tris[i]]' Verts[Tris[i + 1]]' Color.red);                  DrawLine(Verts[Tris[i]]' Verts[Tris[i + 2]]' Color.red);                  DrawLine(Verts[Tris[i + 1]]' Verts[Tris[i + 2]]' Color.red);              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,Draw,The following statement contains a magic number: for (int i = 0; i < Tris.Length; i += 3) {                  DrawLine(Verts[Tris[i]]' Verts[Tris[i + 1]]' Color.red);                  DrawLine(Verts[Tris[i]]' Verts[Tris[i + 2]]' Color.red);                  DrawLine(Verts[Tris[i + 1]]' Verts[Tris[i + 2]]' Color.red);              }
Magic Number,Pluton,Zone2D,C:\repos\Notulp_Pluton\Pluton\Objects\Zone2D.cs,DrawLine,The following statement contains a magic number: ConsoleSystem.Broadcast("ddraw.arrow"' new object[] {                  60' color' From' To' 0.1f              });
Magic Number,Pluton,CSSPlugin,C:\repos\Notulp_Pluton\Pluton\PluginLoaders\CSSPlugin.cs,Compile,The following statement contains a magic number: try {                  string mcspath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)' "mcs.exe");                    using (new Stopper("CSSPlugin"' "Compile()")) {                        Process compiler = new Process();                        compiler.StartInfo.FileName = mcspath;                      compiler.StartInfo.Arguments = CompilePluginParams;                        compiler.StartInfo.WorkingDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);                        compiler.EnableRaisingEvents = true;                        compiler.ErrorDataReceived += MCSReturnedErrorData;                      compiler.Exited += MCSExited;                      compiler.OutputDataReceived += MCSReturnedOutputData;                        compiler.StartInfo.CreateNoWindow = true;                      compiler.StartInfo.UseShellExecute = false;                      compiler.StartInfo.RedirectStandardOutput = true;                      compiler.StartInfo.RedirectStandardError = true;                        string temppath = Path.Combine(RootDir.FullName' Name + ".plugin");                        if (File.Exists(temppath))                          File.Delete(temppath);                        compiler.Start();                        DateTime start = compiler.StartTime;                        compiler.BeginOutputReadLine();                      compiler.BeginErrorReadLine();                        compiler.WaitForExit();                        Logger.Log("Compile time: " + (compiler.ExitTime - start).ToString());                        compiler.Close();                        while (!Compiled) {                          System.Threading.Thread.Sleep(50);                      }                  }                  string path = Path.Combine(RootDir.FullName' Name + ".plugin");                  File.WriteAllText(Path.Combine(RootDir.FullName' Name + "_result.txt")' CompilationResults);                  if (File.Exists(path)) {                      return Assembly.Load(File.ReadAllBytes(path));                  } else {                      Logger.LogError("Couldn't compile " + Name + ".cs plugin.");                      if (PluginLoader.GetInstance().CurrentlyLoadingPlugins.Contains(Name))                          PluginLoader.GetInstance().CurrentlyLoadingPlugins.Remove(Name);                                            return null;                  }              } catch (Exception ex) {                  Logger.LogException(ex);                  return null;              }
Missing Default,Pluton,Logger,C:\repos\Notulp_Pluton\Pluton\Logger.cs,ThreadedLogRecieved,The following switch statement is missing a default case: switch (type) {                      case LogType.Log:                          Console.ForegroundColor = ConsoleColor.Gray;                          break;                      case LogType.Warning:                          Console.ForegroundColor = ConsoleColor.Yellow;                          break;                      case LogType.Error:                      case LogType.Exception:                      case LogType.Assert:                          Console.ForegroundColor = ConsoleColor.Red;                          break;                  }
