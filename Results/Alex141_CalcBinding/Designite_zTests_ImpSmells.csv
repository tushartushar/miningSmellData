Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingAssert,The method has 9 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' objTargetValue1' sourcePropertySetter2' targetValue2' objTargetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingAssert,The method has 9 parameters. Parameters: calcBinding' source' sourcePropertySetter1' targetValue1' objTargetValue1' sourcePropertySetter2' targetValue2' objTargetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BrushBindingAssert,The method has 7 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringBindingAssert,The method has 7 parameters. Parameters: calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringBindingAssert,The method has 8 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes' fallbackValue
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,ObjectBindingAssert,The method has 7 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,ObjectBindingAssert,The method has 7 parameters. Parameters: calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,LabelBindingAssert,The method has 7 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,LabelBindingAssert,The method has 7 parameters. Parameters: calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,VisibilityBindingAssert,The method has 7 parameters. Parameters: calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,VisibilityBindingAssert,The method has 7 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BoolBindingAssert,The method has 7 parameters. Parameters: calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BoolBindingAssert,The method has 7 parameters. Parameters: path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BindingAssert,The method has 11 parameters. Parameters: path' source' targetObject' targetProperty' targetPropertyGetter' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes' fallbackValue
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BindingAssert,The method has 10 parameters. Parameters: calcBinding' source' targetObject' targetProperty' targetPropertyGetter' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingBackAssert,The method has 10 parameters. Parameters: path' source' sourcePropertyGetter' stringTargetValue1' stringTargetValue2' objTargetValue1' objTargetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,VisibilityBindingBackAssert,The method has 8 parameters. Parameters: path' source' sourcePropertyGetter' targetValue1' targetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BoolBindingBackAssert,The method has 8 parameters. Parameters: path' source' sourcePropertyGetter' targetValue1' targetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,ObjectBindingBackAssert,The method has 8 parameters. Parameters: path' source' sourcePropertyGetter' targetValue1' targetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringBindingBackAssert,The method has 8 parameters. Parameters: path' source' sourcePropertyGetter' targetValue1' targetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BindingBackAssert,The method has 12 parameters. Parameters: path' source' sourcePropertyGetter' targetObject' targetProperty' targetPropertySetter' targetPropertyValue1' targetPropertyValue2' sourcePropertyValue1' sourcePropertyValue2' mode' resolvedTypes
Long Parameter List,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BindingBackAssert,The method has 11 parameters. Parameters: calcBinding' source' sourcePropertyGetter' targetObject' targetProperty' targetPropertySetter' targetPropertyValue1' targetPropertyValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes
Long Identifier,Tests,ExpectedExceptionExAttribute,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Net45AndHigh\ExpectedExceptionEx.cs,Verify,The length of the parameter differentExceptionTypesMsgTemplate is 34.
Long Identifier,Tests,ExpectedExceptionExAttribute,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Net45AndHigh\ExpectedExceptionEx.cs,Verify,The length of the parameter differentExceptionHResultsMsgTemplate is 37.
Long Identifier,Tests.Mocks,ServiceProviderMock,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Mocks\ServiceProviderMock.cs,,The length of the parameter useNullXamlSchemaContextProvider is 32.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingAssert,The length of the statement  "            StringBindingAssert(path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 123.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingAssert,The length of the statement  "            ObjectBindingAssert(path' source' sourcePropertySetter1' objTargetValue1' sourcePropertySetter2' objTargetValue2' resolvedTypes); " is 129.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingAssert,The length of the statement  "            StringBindingAssert(calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 130.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingAssert,The length of the statement  "            ObjectBindingAssert(calcBinding' source' sourcePropertySetter1' objTargetValue1' sourcePropertySetter2' objTargetValue2' resolvedTypes); " is 136.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BrushBindingAssert,The length of the statement  "            BindingAssert(path' source' button' Button.BackgroundProperty' () => button.Background' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 177.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringBindingAssert,The length of the statement  "            BindingAssert(calcBinding' source' textBox' TextBox.TextProperty' () => textBox.Text' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 175.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringBindingAssert,The length of the statement  "            BindingAssert(path' source' textBox' TextBox.TextProperty' () => textBox.Text' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes' fallbackValue); " is 183.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,ObjectBindingAssert,The length of the statement  "            LabelBindingAssert(path' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 122.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,ObjectBindingAssert,The length of the statement  "            LabelBindingAssert(calcBinding' source' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 129.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,LabelBindingAssert,The length of the statement  "            BindingAssert(path' source' label' Label.ContentProperty' () => label.Content' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 168.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,LabelBindingAssert,The length of the statement  "            BindingAssert(calcBinding' source' label' Label.ContentProperty' () => label.Content' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 175.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,VisibilityBindingAssert,The length of the statement  "            BindingAssert(calcBinding' source' label' Label.VisibilityProperty' () => label.Visibility' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 181.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,VisibilityBindingAssert,The length of the statement  "            BindingAssert(path' source' label' Label.VisibilityProperty' () => label.Visibility' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 174.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BoolBindingAssert,The length of the statement  "            BindingAssert(calcBinding' source' checkbox' CheckBox.IsCheckedProperty' () => checkbox.IsChecked' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 188.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,BoolBindingAssert,The length of the statement  "            BindingAssert(path' source' checkbox' CheckBox.IsCheckedProperty' () => checkbox.IsChecked' sourcePropertySetter1' targetValue1' sourcePropertySetter2' targetValue2' resolvedTypes); " is 181.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingBackAssert,The length of the statement  "            StringBindingBackAssert(path' source' sourcePropertyGetter' stringTargetValue1' stringTargetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes); " is 159.
Long Statement,Tests,BaseSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\BaseSystemTests.cs,StringAndObjectBindingBackAssert,The length of the statement  "            ObjectBindingBackAssert(path' source' sourcePropertyGetter' objTargetValue1' objTargetValue2' sourcePropertyValue1' sourcePropertyValue2' resolvedTypes); " is 153.
Long Statement,Tests,InverseTest,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\InverseTest.cs,TestInverse,The length of the statement  "            var realInverseExpr = inverse.InverseExpression(interpreter.Parse(expr' aParam).Expression' resParam).Expression.ToString(); " is 124.
Long Statement,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromStringTest,The length of the statement  "            Assert.AreEqual(10.299999999999999' converter.ConvertBack("15.7"' typeof(double)' "{0}+5.4"' CultureInfo.CurrentCulture)); " is 122.
Long Statement,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,BindingBadTest,The length of the statement  "            CreateConverter().Convert(new object[] { 2' DependencyProperty.UnsetValue }' typeof(string)' "{0}+3"' CultureInfo.InvariantCulture); " is 132.
Long Statement,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The length of the statement  "                () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20' " is 121.
Long Statement,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The length of the statement  "                () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34 " is 121.
Long Statement,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The length of the statement  "            AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true' " is 170.
Long Statement,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithoutSettingModeFailsTest,The length of the statement  "            Assert.IsInstanceOfType(metadata' typeof(FrameworkPropertyMetadata)' "Metadata of TextBox should be FrameworkMetadata"); " is 120.
Long Statement,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithDefaultModeFailsTest,The length of the statement  "            Assert.IsInstanceOfType(metadata' typeof(FrameworkPropertyMetadata)' "Metadata of TextBox should be FrameworkMetadata"); " is 120.
Long Statement,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithOneWayModeSuccessTest,The length of the statement  "            Assert.IsInstanceOfType(metadata' typeof(FrameworkPropertyMetadata)' "Metadata of TextBox should be FrameworkMetadata"); " is 120.
Long Statement,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithOneWayToSourceFailsTest,The length of the statement  "            Assert.IsInstanceOfType(metadata' typeof(FrameworkPropertyMetadata)' "Metadata of TextBox should be FrameworkMetadata"); " is 120.
Long Statement,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToStaticReadonlyPropertyWithDefaultModeFailsTest,The length of the statement  "            Assert.IsInstanceOfType(metadata' typeof(FrameworkPropertyMetadata)' "Metadata of TextBox should be FrameworkMetadata"); " is 120.
Long Statement,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The length of the statement  "            StringAndObjectBindingBackAssert("Math.Sin(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB' " is 124.
Long Statement,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The length of the statement  "            StringAndObjectBindingBackAssert("Math.Cos(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB' " is 124.
Long Statement,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The length of the statement  "            StringAndObjectBindingBackAssert("Math.Pow(Math.PI'local:StaticExampleClass.StaticA)"' null' () => StaticExampleClass.StaticA' " is 126.
Long Statement,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,ReturnEnumTest,The length of the statement  "            VisibilityBindingAssert("local:StaticExampleClass.EnumValue == local:Enum2.Value1 ? win:Visibility.Visible : local:StaticExampleClass.Visibility"' null' " is 152.
Long Statement,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,EnumWithTernaryOperatorTest,The length of the statement  "            ObjectBindingAssert("local:StaticExampleClass.EnumValue == local:Enum2.Value1 ? local:Enum1.Value1 : local:Enum1.Value2"' null' " is 127.
Long Statement,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,EnumWithTernaryOperatorTest,The length of the statement  "            ObjectBindingAssert("local:StaticExampleClass.EnumValue == local:Enum2.Value1 ? local:Enum1.Value1:local:Enum1.Value2"' null' " is 125.
Long Statement,Tests,ExpectedExceptionExAttribute,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Net45AndHigh\ExpectedExceptionEx.cs,Verify,The length of the statement  "            var differentExceptionTypesMsgTemplate = "Current test method threw exception {1}' but exception {2} was expected. Exception message: {3}: {4}"; " is 144.
Long Statement,Tests,ExpectedExceptionExAttribute,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Net45AndHigh\ExpectedExceptionEx.cs,Verify,The length of the statement  "            var differentExceptionHResultsMsgTemplate = "Current test method threw exception {1} with HResult {2}' but exception {3} with HResult {4} was expected. Exception message: {5}: {6}"; " is 181.
Long Statement,Tests,ExpectedExceptionExAttribute,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Net45AndHigh\ExpectedExceptionEx.cs,Verify,The length of the statement  "                var msg = String.Format(differentExceptionTypesMsgTemplate' "testname"' exception.GetType()' ExceptionType' exception.GetType()' exception.Message); " is 148.
Long Statement,Tests,ExpectedExceptionExAttribute,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\Net45AndHigh\ExpectedExceptionEx.cs,Verify,The length of the statement  "                var msg = String.Format(differentExceptionHResultsMsgTemplate' "testname"' exception.GetType()' exception.HResult' ExceptionType' HResult' exception.GetType()' exception.Message); " is 179.
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B"' test'                          () => { test.A = 20; test.B = 10; }' "10"' (double)10'                          () => { test.A = 20.34; test.B = 15; }' "5.34"' 5.34                      );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B"' test'                          () => { test.A = 20; test.B = 10; }' "10"' (double)10'                          () => { test.A = 20.34; test.B = 15; }' "5.34"' 5.34                      );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B"' test'                          () => { test.A = 20; test.B = 10; }' "10"' (double)10'                          () => { test.A = 20.34; test.B = 15; }' "5.34"' 5.34                      );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B"' test'                          () => { test.A = 20; test.B = 10; }' "10"' (double)10'                          () => { test.A = 20.34; test.B = 15; }' "5.34"' 5.34                      );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B"' test'                          () => { test.A = 20; test.B = 10; }' "10"' (double)10'                          () => { test.A = 20.34; test.B = 15; }' "5.34"' 5.34                      );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B"' test'                          () => { test.A = 20; test.B = 10; }' "10"' (double)10'                          () => { test.A = 20.34; test.B = 15; }' "5.34"' 5.34                      );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: i < 10
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-C"' test'                      () => { test.A = 10; test.C = -2; }' "12"' (double)12'                      () => { test.A = 20.34; test.C = 12; }' "8.34"' 8.34                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-C"' test'                      () => { test.A = 10; test.C = -2; }' "12"' (double)12'                      () => { test.A = 20.34; test.C = 12; }' "8.34"' 8.34                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-C"' test'                      () => { test.A = 10; test.C = -2; }' "12"' (double)12'                      () => { test.A = 20.34; test.C = 12; }' "8.34"' 8.34                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-C"' test'                      () => { test.A = 10; test.C = -2; }' "12"' (double)12'                      () => { test.A = 20.34; test.C = 12; }' "8.34"' 8.34                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-C"' test'                      () => { test.A = 10; test.C = -2; }' "12"' (double)12'                      () => { test.A = 20.34; test.C = 12; }' "8.34"' 8.34                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-C"' test'                      () => { test.A = 10; test.C = -2; }' "12"' (double)12'                      () => { test.A = 20.34; test.C = 12; }' "8.34"' 8.34                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("C-A"' test'                      () => { test.A = 10; test.C = -2; }' "-12"' (double)-12'                      () => { test.A = 20.34; test.C = 52; }' "31.66"' 31.66                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("C-A"' test'                      () => { test.A = 10; test.C = -2; }' "-12"' (double)-12'                      () => { test.A = 20.34; test.C = 52; }' "31.66"' 31.66                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("C-A"' test'                      () => { test.A = 10; test.C = -2; }' "-12"' (double)-12'                      () => { test.A = 20.34; test.C = 52; }' "31.66"' 31.66                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("C-A"' test'                      () => { test.A = 10; test.C = -2; }' "-12"' (double)-12'                      () => { test.A = 20.34; test.C = 52; }' "31.66"' 31.66                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("C-A"' test'                      () => { test.A = 10; test.C = -2; }' "-12"' (double)-12'                      () => { test.A = 20.34; test.C = 52; }' "31.66"' 31.66                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingAssert("C-A"' test'                      () => { test.A = 10; test.C = -2; }' "-12"' (double)-12'                      () => { test.A = 20.34; test.C = 52; }' "31.66"' 31.66                  );
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneExpressionCompilesOneTimeTest,The following statement contains a magic number: Assert.AreEqual(2' compileTimesParser.GlobalCalls);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("B+5"' test' () => test.B'                                      "10"' "-5"' 10' -5'                                      5' -10);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("B+5"' test' () => test.B'                                      "10"' "-5"' 10' -5'                                      5' -10);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("B+5"' test' () => test.B'                                      "10"' "-5"' 10' -5'                                      5' -10);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("B+5"' test' () => test.B'                                      "10"' "-5"' 10' -5'                                      5' -10);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: i < 10
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: Assert.AreEqual(2' compileTimesParser.GlobalCalls);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: Assert.AreEqual(2' compileTimesParser.GlobalCalls);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+6"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  94' -56);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+6"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  94' -56);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+6"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  94' -56);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+6"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  94' -56);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,OneBackExpressionCompilesOneTimeTest,The following statement contains a magic number: Assert.AreEqual(4' compileTimesParser.GlobalCalls);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: Assert.AreEqual(2' compileTimesParser.GlobalCalls);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: var lambdasWeakRefs = GetLambdasWeakRefs(compileTimesParser' 2);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: StringAndObjectBindingBackAssert("C+5"' test' () => test.C'                                  "100"' "-50"' 100' -50'                                  95' -55);
Magic Number,Tests,PerfOptimizationsTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PerfOptimizationsTests.cs,NotUsedExpressionsMustBeCollected,The following statement contains a magic number: Assert.AreEqual(4' compileTimesParser.GlobalCalls);
Magic Number,Tests,StringTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StringTests.cs,CharWithSingleQuotesWithSingleQuotesModeTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' source'                  () => source.Symbol = 'a'' "1224"' 1224'                  () => source.Symbol = '1'' "24"' 24              );
Magic Number,Tests,StringTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StringTests.cs,CharWithSingleQuotesWithSingleQuotesModeTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' source'                  () => source.Symbol = 'a'' "1224"' 1224'                  () => source.Symbol = '1'' "24"' 24              );
Magic Number,Tests,StringTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StringTests.cs,CharWithDoubleQuotesWithSingleQuotesModeTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' source'                  () => source.Symbol = '1'' "24"' 24'                  () => source.Symbol = '2'' "1224"' 1224              );
Magic Number,Tests,StringTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StringTests.cs,CharWithDoubleQuotesWithSingleQuotesModeTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' source'                  () => source.Symbol = '1'' "24"' 24'                  () => source.Symbol = '2'' "1224"' 1224              );
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertToObjectTest,The following statement contains a magic number: Assert.AreEqual(15' converter.Convert(10' typeof(object)' "{0}+5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertToObjectTest,The following statement contains a magic number: Assert.AreEqual(15' converter.Convert(10' typeof(object)' "{0}+5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertToObjectTest,The following statement contains a magic number: Assert.AreEqual(15.3' converter.Convert(10' typeof(object)' "{0}+5.3"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertToObjectTest,The following statement contains a magic number: Assert.AreEqual(15.3' converter.Convert(10' typeof(object)' "{0}+5.3"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertToStringTest,The following statement contains a magic number: Assert.AreEqual("15"' converter.Convert(10' typeof(string)' "{0}+(double)5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertToStringTest,The following statement contains a magic number: Assert.AreEqual("15.3"' converter.Convert(10' typeof(string)' "{0}+5.3"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromObjectTest,The following statement contains a magic number: Assert.AreEqual(10' converter.ConvertBack((object)15' typeof(int)' "{0}+5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromObjectTest,The following statement contains a magic number: Assert.AreEqual(10' converter.ConvertBack((object)15' typeof(int)' "{0}+5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromObjectTest,The following statement contains a magic number: Assert.AreEqual(9.2' converter.ConvertBack((object)15.0' typeof(double)' "{0}+5.8"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromObjectTest,The following statement contains a magic number: Assert.AreEqual(9.2' converter.ConvertBack((object)15.0' typeof(double)' "{0}+5.8"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,NullableValueTypesAreNotSupportedInConvertBackBinding,The following statement contains a magic number: Assert.AreEqual(null' converter.ConvertBack((object)10.0' typeof(double?)' "{0}+5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromStringTest,The following statement contains a magic number: Assert.AreEqual(10' converter.ConvertBack("15"' typeof(int)' "{0}+5"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,ConvertFromStringTest,The following statement contains a magic number: Assert.AreEqual(10.299999999999999' converter.ConvertBack("15.7"' typeof(double)' "{0}+5.4"' CultureInfo.CurrentCulture));
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,BindingBackCompileTimesShouldBeTwoTest,The following statement contains a magic number: Assert.AreEqual(2' interpreterMock.ParseCallsByExpressions.Count);
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,BindingBadTest,The following statement contains a magic number: CreateConverter().Convert(new object[] { 2' null }' typeof(string)' "{0}+3"' CultureInfo.InvariantCulture);
Magic Number,Tests,ConverterTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcConverterTests.cs,BindingBadTest,The following statement contains a magic number: CreateConverter().Convert(new object[] { 2' DependencyProperty.UnsetValue }' typeof(string)' "{0}+3"' CultureInfo.InvariantCulture);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A"' test'                  () => test.A = 10' "10"' (double)10'                  () => test.A = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A"' test'                  () => test.A = 10' "10"' (double)10'                  () => test.A = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A"' test'                  () => test.A = 10' "10"' (double)10'                  () => test.A = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A"' test'                  () => test.A = 10' "10"' (double)10'                  () => test.A = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+B+C"' test'                  () => { test.A = 10; test.B = 20; test.C = -2; }' "28"' (double)28'                  () => { test.A = 20.34; test.B = 15; test.C = 12; }' "47.34"' 47.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A-B-C"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "-15"' (double)-15'                  () => { test.A = 5; test.B = 3; test.C = -7; }' "9"' (double)9              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A*(B-C)"' test'                  () => { test.A = 10; test.B = 20; test.C = 5; }' "150"' (double)150'                  () => { test.A = 5.4; test.B = 3; test.C = -8; }'                  59.400000000000006.ToString(CultureInfo.InvariantCulture)'                  59.400000000000006                );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("2*A-B*0.5"' test'                  () => { test.A = 10; test.B = 20; }' "10"' (double)10'                  () => { test.A = 5.4; test.B = 3; }' "9.3"' (double)9.3              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("2*A-B*0.5"' test'                  () => { test.A = 10; test.B = 20; }' "10"' (double)10'                  () => { test.A = 5.4; test.B = 3; }' "9.3"' (double)9.3              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("2*A-B*0.5"' test'                  () => { test.A = 10; test.B = 20; }' "10"' (double)10'                  () => { test.A = 5.4; test.B = 3; }' "9.3"' (double)9.3              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("2*A-B*0.5"' test'                  () => { test.A = 10; test.B = 20; }' "10"' (double)10'                  () => { test.A = 5.4; test.B = 3; }' "9.3"' (double)9.3              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("2*A-B*0.5"' test'                  () => { test.A = 10; test.B = 20; }' "10"' (double)10'                  () => { test.A = 5.4; test.B = 3; }' "9.3"' (double)9.3              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("2*A-B*0.5"' test'                  () => { test.A = 10; test.B = 20; }' "10"' (double)10'                  () => { test.A = 5.4; test.B = 3; }' "9.3"' (double)9.3              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A % B"' test'                  () => { test.A = 10; test.B = 4; }' "2"' (double)2'                  () => { test.A = 12; test.B = 7; }' "5"' (double)5              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A % B"' test'                  () => { test.A = 10; test.B = 4; }' "2"' (double)2'                  () => { test.A = 12; test.B = 7; }' "5"' (double)5              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A % B"' test'                  () => { test.A = 10; test.B = 4; }' "2"' (double)2'                  () => { test.A = 12; test.B = 7; }' "5"' (double)5              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A % B"' test'                  () => { test.A = 10; test.B = 4; }' "2"' (double)2'                  () => { test.A = 12; test.B = 7; }' "5"' (double)5              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A % B"' test'                  () => { test.A = 10; test.B = 4; }' "2"' (double)2'                  () => { test.A = 12; test.B = 7; }' "5"' (double)5              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A % B"' test'                  () => { test.A = 10; test.B = 4; }' "2"' (double)2'                  () => { test.A = 12; test.B = 7; }' "5"' (double)5              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringBindingAssert(calcBinding' test'                  () => { test.A = 10; test.B = 3; }' "3.33"'                  () => { test.A = 20; test.B = -30; }' "-0.67"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringBindingAssert(calcBinding' test'                  () => { test.A = 10; test.B = 3; }' "3.33"'                  () => { test.A = 20; test.B = -30; }' "-0.67"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringBindingAssert(calcBinding' test'                  () => { test.A = 10; test.B = 3; }' "3.33"'                  () => { test.A = 20; test.B = -30; }' "-0.67"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringBindingAssert(calcBinding' test'                  () => { test.A = 10; test.B = 3; }' "3.33"'                  () => { test.A = 20; test.B = -30; }' "-0.67"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringBindingAssert(calcBinding' test'                  () => { test.A = 10; }' "-0.54"'                  () => { test.A = 20; }' "0.91"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringBindingAssert(calcBinding' test'                  () => { test.A = 10; }' "-0.54"'                  () => { test.A = 20; }' "0.91"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("A + 0.5*NestedViewModel.A + A + B + C + A - B"' test'                  () => { test.A = 10; test.NestedViewModel.A = 4; test.B = 5; test.C = 2; }' "34"' (double)34'                  () => { test.A = 12; test.NestedViewModel.A = 14; test.B = -2; test.C = 9; }' "52"' (double)52              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("-4+B"' test'                  () => { test.B = 7; }' "3"' 3'                  () => { test.B = 12; }' "8"' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("-4+B"' test'                  () => { test.B = 7; }' "3"' 3'                  () => { test.B = 12; }' "8"' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("-4+B"' test'                  () => { test.B = 7; }' "3"' 3'                  () => { test.B = 12; }' "8"' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathTest,The following statement contains a magic number: StringAndObjectBindingAssert("-4+B"' test'                  () => { test.B = 7; }' "3"' 3'                  () => { test.B = 12; }' "8"' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A == B) ? 10 : 20"' test'                  () => { test.A = 4; test.B = 4; }' "10"' 10'                  () => { test.A = 5; }' "20"' 20              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A == B) ? 10 : 20"' test'                  () => { test.A = 4; test.B = 4; }' "10"' 10'                  () => { test.A = 5; }' "20"' 20              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A == B) ? 10 : 20"' test'                  () => { test.A = 4; test.B = 4; }' "10"' 10'                  () => { test.A = 5; }' "20"' 20              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A == B) ? 10 : 20"' test'                  () => { test.A = 4; test.B = 4; }' "10"' 10'                  () => { test.A = 5; }' "20"' 20              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A == B) ? 10 : 20"' test'                  () => { test.A = 4; test.B = 4; }' "10"' 10'                  () => { test.A = 5; }' "20"' 20              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("!IsChecked or (A > B)"' test'                  () => { test.IsChecked = false; test.A = 20; test.B = 10; }' true'                  () => { test.IsChecked = true; test.A = 4; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("!IsChecked or (A > B)"' test'                  () => { test.IsChecked = false; test.A = 20; test.B = 10; }' true'                  () => { test.IsChecked = true; test.A = 4; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("!IsChecked or (A > B)"' test'                  () => { test.IsChecked = false; test.A = 20; test.B = 10; }' true'                  () => { test.IsChecked = true; test.A = 4; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B <= 5)"' test'                  () => { test.A = 1; test.B = 10; }' false'                  () => { test.B = 4; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B <= 5)"' test'                  () => { test.A = 1; test.B = 10; }' false'                  () => { test.B = 4; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less= 5)"' test'                  () => { test.A = 1; test.B = 6; }' false'                  () => { test.B = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less= 5)"' test'                  () => { test.A = 1; test.B = 6; }' false'                  () => { test.B = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less= 5)"' test'                  () => { test.A = 1; test.B = 5; }' true'                  () => { test.B = 4; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less= 5)"' test'                  () => { test.A = 1; test.B = 5; }' true'                  () => { test.B = 4; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less 5)"' test'                  () => { test.A = 1; test.B = 6; }' false'                  () => { test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less 5)"' test'                  () => { test.A = 1; test.B = 6; }' false'                  () => { test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less 5)"' test'                  () => { test.A = 1; test.B = 5; }' false'                  () => { test.B = 4; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,LogicTest,The following statement contains a magic number: BoolBindingAssert("A == 1 and (B less 5)"' test'                  () => { test.A = 1; test.B = 5; }' false'                  () => { test.B = 4; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+C"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.C = -2; }' "14"' (double)14'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.C = 12; }' "35.34"' 35.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A*0.2+NestedViewModel.DoubleNestedViewModel.B/8"' test'                  () => { test.A = 10; test.NestedViewModel.A = 30; test.NestedViewModel.DoubleNestedViewModel.B = 32; }' "20"' (double)20'                  () => { test.A = 20.34; test.NestedViewModel.A = 15; test.NestedViewModel.DoubleNestedViewModel.B = 17; }' "25.34"' 25.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A-0.4*A"' test'                  () => { test.A = 20; test.NestedViewModel.A = 30; }' "42"' (double)42'                  () => { test.A = 30; test.NestedViewModel.A = 10; }' "28"' (double)28              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A-0.4*A"' test'                  () => { test.A = 20; test.NestedViewModel.A = 30; }' "42"' (double)42'                  () => { test.A = 30; test.NestedViewModel.A = 10; }' "28"' (double)28              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A-0.4*A"' test'                  () => { test.A = 20; test.NestedViewModel.A = 30; }' "42"' (double)42'                  () => { test.A = 30; test.NestedViewModel.A = 10; }' "28"' (double)28              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A-0.4*A"' test'                  () => { test.A = 20; test.NestedViewModel.A = 30; }' "42"' (double)42'                  () => { test.A = 30; test.NestedViewModel.A = 10; }' "28"' (double)28              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A-0.4*A"' test'                  () => { test.A = 20; test.NestedViewModel.A = 30; }' "42"' (double)42'                  () => { test.A = 30; test.NestedViewModel.A = 10; }' "28"' (double)28              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelTest,The following statement contains a magic number: StringAndObjectBindingAssert("A+NestedViewModel.A-0.4*A"' test'                  () => { test.A = 20; test.NestedViewModel.A = 30; }' "42"' (double)42'                  () => { test.A = 30; test.NestedViewModel.A = 10; }' "28"' (double)28              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NullNullablePropertiesTest,The following statement contains a magic number: BoolBindingAssert("NullableA != null"' test'                  () => { test.NullableA = null; }' false'                  () => { test.NullableA = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NullNullablePropertiesTest,The following statement contains a magic number: ObjectBindingAssert("5 + NullableA"' test'                  () => { test.NullableA = null; }' null'                  () => { test.NullableA = 5; }' (double?)10              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NullNullablePropertiesTest,The following statement contains a magic number: ObjectBindingAssert("5 + NullableA"' test'                  () => { test.NullableA = null; }' null'                  () => { test.NullableA = 5; }' (double?)10              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NullNullablePropertiesTest,The following statement contains a magic number: ObjectBindingAssert("NullableA == 10"' test'                  () => { test.NullableA = null; }' null'                  () => { test.NullableA = 10; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,PropertyThatChangeItsTypeDuringBinding,The following statement contains a magic number: ObjectBindingAssert("FlickeringViewModel.A"' test'                  () => { test.FlickeringViewModel = new ConcreteViewModel1(100); }' (double)100'                  () => { test.FlickeringViewModel = new ConcreteViewModel2(150); }' (double)150              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,PropertyThatChangeItsTypeDuringBinding,The following statement contains a magic number: ObjectBindingAssert("FlickeringViewModel.A"' test'                  () => { test.FlickeringViewModel = new ConcreteViewModel1(100); }' (double)100'                  () => { test.FlickeringViewModel = new ConcreteViewModel2(150); }' (double)150              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,PropertyThatChangeItsTypeDuringBinding,The following statement contains a magic number: ObjectBindingAssert("FlickeringViewModel.A"' test'                  () => { test.FlickeringViewModel = new ConcreteViewModel1(100); }' (double)100'                  () => { test.FlickeringViewModel = new ConcreteViewModel2(150); }' (double)150              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,PropertyThatChangeItsTypeDuringBinding,The following statement contains a magic number: ObjectBindingAssert("FlickeringViewModel.A"' test'                  () => { test.FlickeringViewModel = new ConcreteViewModel1(100); }' (double)100'                  () => { test.FlickeringViewModel = new ConcreteViewModel2(150); }' (double)150              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("A+5"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  5.1999999999999993' (double)-10);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("A+5"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  5.1999999999999993' (double)-10);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("A+5"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  5.1999999999999993' (double)-10);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("A+5"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  5.1999999999999993' (double)-10);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-B+3.2"' test' () => test.B'                  "-3.8"' "8.3"' -3.8' 8.3'                  7' -5);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-B+3.2"' test' () => test.B'                  "-3.8"' "8.3"' -3.8' 8.3'                  7' -5);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-B+3.2"' test' () => test.B'                  "-3.8"' "8.3"' -3.8' 8.3'                  7' -5);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-B+3.2"' test' () => test.B'                  "-3.8"' "8.3"' -3.8' 8.3'                  7' -5);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-4+B"' test' () => test.B'                  "3"' "5"' 3' 5'                  7' 9);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-4+B"' test' () => test.B'                  "3"' "5"' 3' 5'                  7' 9);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-4+B"' test' () => test.B'                  "3"' "5"' 3' 5'                  7' 9);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("-4+B"' test' () => test.B'                  "3"' "5"' 3' 5'                  7' 9);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("((A+5)*3)/4-32"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  51.266666666666673' (double)31);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("((A+5)*3)/4-32"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  51.266666666666673' (double)31);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("((A+5)*3)/4-32"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  51.266666666666673' (double)31);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("((A+5)*3)/4-32"' test' () => test.A'                  "10.2"' "-5"' 10.2' -5'                  51.266666666666673' (double)31);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: Console.WriteLine(Math.Sin(31 / 100.0));
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: Console.WriteLine(Math.Sin(31 / 100.0));
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Tan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  46' -73);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Tan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  46' -73);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Tan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  46' -73);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Tan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  46' -73);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Asin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  47' -78);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Asin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  47' -78);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Asin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  47' -78);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Asin(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  47' -78);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Acos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  87' 62);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Acos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  87' 62);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Acos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  87' 62);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Acos(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  87' 62);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Atan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  54' -126);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Atan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  54' -126);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Atan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  54' -126);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Atan(B/100.0)"' test' () => test.B'                  "0.5"' "-0.9"' 0.5' -0.9'                  54' -126);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' 4)"' test' () => test.B'                  "16"' "256"' 16' 256'                  2' 4);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' 4)"' test' () => test.B'                  "16"' "256"' 16' 256'                  2' 4);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' 4)"' test' () => test.B'                  "16"' "256"' 16' 256'                  2' 4);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' 4)"' test' () => test.B'                  "16"' "256"' 16' 256'                  2' 4);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(4' B)"' test' () => test.B'                  "16"' "1"' 16' 1'                  2' 0);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(4' B)"' test' () => test.B'                  "16"' "1"' 16' 1'                  2' 0);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' -1)"' test' () => test.B'                  "0.1"' "0.05"' 0.1' 0.05'                  10' 20);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' -1)"' test' () => test.B'                  "0.1"' "0.05"' 0.1' 0.05'                  10' 20);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' -1)"' test' () => test.B'                  "0.1"' "0.05"' 0.1' 0.05'                  10' 20);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(B' -1)"' test' () => test.B'                  "0.1"' "0.05"' 0.1' 0.05'                  10' 20);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(B' 5)"' test' () => test.B'                  "4"' "-3.4"' 4' -3.4'                  625' 0);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(B' 5)"' test' () => test.B'                  "4"' "-3.4"' 4' -3.4'                  625' 0);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(B' 5)"' test' () => test.B'                  "4"' "-3.4"' 4' -3.4'                  625' 0);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(16' B)"' test' () => test.B'                  "2"' "1"' 2' 1'                  4' 16);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(16' B)"' test' () => test.B'                  "2"' "1"' 2' 1'                  4' 16);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(16' B)"' test' () => test.B'                  "2"' "1"' 2' 1'                  4' 16);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(Math.Cos(B/100.0))"' test' () => test.B'                  "0.8"' "-0.2"' 0.8' -0.2'                  38' 177);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(Math.Cos(B/100.0))"' test' () => test.B'                  "0.8"' "-0.2"' 0.8' -0.2'                  38' 177);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(Math.Cos(B/100.0))"' test' () => test.B'                  "0.8"' "-0.2"' 0.8' -0.2'                  38' 177);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MathBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(Math.Cos(B/100.0))"' test' () => test.B'                  "0.8"' "-0.2"' 0.8' -0.2'                  38' 177);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(2' NestedViewModel.A)"' test' () => test.NestedViewModel.A'                  "0.8"' "-0.2"' 0.8' -0.2'                  2.3784142300054421' 0.03125);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(2' NestedViewModel.A)"' test' () => test.NestedViewModel.A'                  "0.8"' "-0.2"' 0.8' -0.2'                  2.3784142300054421' 0.03125);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(2' NestedViewModel.A)"' test' () => test.NestedViewModel.A'                  "0.8"' "-0.2"' 0.8' -0.2'                  2.3784142300054421' 0.03125);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,NestedViewModelBackTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Log(2' NestedViewModel.A)"' test' () => test.NestedViewModel.A'                  "0.8"' "-0.2"' 0.8' -0.2'                  2.3784142300054421' 0.03125);
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,DataTriggerTest,The following statement contains a magic number: viewModel.A = 5;
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,DataTriggerTest,The following statement contains a magic number: viewModel.B = 7;
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,DataTriggerTest,The following statement contains a magic number: viewModel.B = 2;
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("PorksCount*2"' test'                  () => { test.PorksCount = 2; }' 4'                  () => { test.PorksCount = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("PorksCount*2"' test'                  () => { test.PorksCount = 2; }' 4'                  () => { test.PorksCount = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("PorksCount*2"' test'                  () => { test.PorksCount = 2; }' 4'                  () => { test.PorksCount = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("PorksCount*2"' test'                  () => { test.PorksCount = 2; }' 4'                  () => { test.PorksCount = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Pandus*2"' test'                  () => { test.Pandus = 2; }' 4'                  () => { test.Pandus = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Pandus*2"' test'                  () => { test.Pandus = 2; }' 4'                  () => { test.Pandus = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Pandus*2"' test'                  () => { test.Pandus = 2; }' 4'                  () => { test.Pandus = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Pandus*2"' test'                  () => { test.Pandus = 2; }' 4'                  () => { test.Pandus = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Fairlessly*2"' test'                  () => { test.Fairlessly = 2; }' 4'                  () => { test.Fairlessly = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Fairlessly*2"' test'                  () => { test.Fairlessly = 2; }' 4'                  () => { test.Fairlessly = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Fairlessly*2"' test'                  () => { test.Fairlessly = 2; }' 4'                  () => { test.Fairlessly = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Fairlessly*2"' test'                  () => { test.Fairlessly = 2; }' 4'                  () => { test.Fairlessly = 4; }' 8              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Fairless==5"' test'                  () => { test.Fairless = 5; }' true'                  () => { test.Fairless = 4; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsOfOperatorsAsPartOfPropertiesNamesTest,The following statement contains a magic number: ObjectBindingAssert("Fairless==5"' test'                  () => { test.Fairless = 5; }' true'                  () => { test.Fairless = 4; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithoutSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) or (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 5; test.B = 7; test.C = 9; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and(B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B)and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A>B) and (B > C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 3; }' true'                  () => { test.A = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 10; }' true'                  () => { test.C = 2; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less=(B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B)less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParsePseudonimsWithBracketsWithSpacesTest,The following statement contains a magic number: ObjectBindingAssert("(A+B) less= (B + C)"' test'                  () => { test.A = 5; test.B = 4; test.C = 5; }' true'                  () => { test.C = 3; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseLessEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A <= B"' test'                  () => { test.A = 5; test.B = 4; }' false'                  () => { test.A = 5; test.B = 7; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseLessEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A <= B"' test'                  () => { test.A = 5; test.B = 4; }' false'                  () => { test.A = 5; test.B = 7; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseLessEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A <= B"' test'                  () => { test.A = 5; test.B = 4; }' false'                  () => { test.A = 5; test.B = 7; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseLessEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A <= B"' test'                  () => { test.A = 5; test.B = 4; }' false'                  () => { test.A = 5; test.B = 7; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseGreaterEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A >= B"' test'                  () => { test.A = 3; test.B = 4; }' false'                  () => { test.A = 7; test.B = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseGreaterEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A >= B"' test'                  () => { test.A = 3; test.B = 4; }' false'                  () => { test.A = 7; test.B = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseGreaterEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A >= B"' test'                  () => { test.A = 3; test.B = 4; }' false'                  () => { test.A = 7; test.B = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseGreaterEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A >= B"' test'                  () => { test.A = 3; test.B = 4; }' false'                  () => { test.A = 7; test.B = 5; }' true              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A == B"' test'                  () => { test.A = 4; test.B = 4; }' true'                  () => { test.A = 7; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A == B"' test'                  () => { test.A = 4; test.B = 4; }' true'                  () => { test.A = 7; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A == B"' test'                  () => { test.A = 4; test.B = 4; }' true'                  () => { test.A = 7; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A == B"' test'                  () => { test.A = 4; test.B = 4; }' true'                  () => { test.A = 7; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseNotEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A != B"' test'                  () => { test.A = 3; test.B = 4; }' true'                  () => { test.A = 5; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseNotEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A != B"' test'                  () => { test.A = 3; test.B = 4; }' true'                  () => { test.A = 5; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseNotEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A != B"' test'                  () => { test.A = 3; test.B = 4; }' true'                  () => { test.A = 5; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,ParseNotEqualOperatorTest,The following statement contains a magic number: ObjectBindingAssert("A != B"' test'                  () => { test.A = 3; test.B = 4; }' true'                  () => { test.A = 5; test.B = 5; }' false              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MPropertyWithMathBindingTest,The following statement contains a magic number: StringAndObjectBindingAssert("M + Math.Abs(M)"' test'                  () => test.M = 10' "20"' (double)20'                  () => test.M = -10' "0"' (double)0              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MPropertyWithMathBindingTest,The following statement contains a magic number: StringAndObjectBindingAssert("M + Math.Abs(M)"' test'                  () => test.M = 10' "20"' (double)20'                  () => test.M = -10' "0"' (double)0              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,MPropertyWithMathBindingTest,The following statement contains a magic number: StringAndObjectBindingAssert("M + Math.Abs(M)"' test'                  () => test.M = 10' "20"' (double)20'                  () => test.M = -10' "0"' (double)0              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,BindingToPropertyContainingDigits,The following statement contains a magic number: StringAndObjectBindingAssert("N1"' test'                  () => test.N1 = 10' "10"' (double)10'                  () => test.N1 = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,BindingToPropertyContainingDigits,The following statement contains a magic number: StringAndObjectBindingAssert("N1"' test'                  () => test.N1 = 10' "10"' (double)10'                  () => test.N1 = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,BindingToPropertyContainingDigits,The following statement contains a magic number: StringAndObjectBindingAssert("N1"' test'                  () => test.N1 = 10' "10"' (double)10'                  () => test.N1 = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,BindingToPropertyContainingDigits,The following statement contains a magic number: StringAndObjectBindingAssert("N1"' test'                  () => test.N1 = 10' "10"' (double)10'                  () => test.N1 = 20.34' "20.34"' 20.34              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,FallbackValueNoConverterTest,The following statement contains a magic number: StringBindingAssert("NestedViewModel.A"' test'                  () => { test.NestedViewModel.A = 30; }' "30"'                  () => { test.NestedViewModel = null; }' "no value"'                  fallbackValue: "no value"              );
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,FallbackValueInMultiValueConverter,The following statement contains a magic number: StringBindingAssert("NestedViewModel.A+NestedViewModel.B"' test'                  () => { test.NestedViewModel.A = 10; test.NestedViewModel.B = 5; }' "15"'                  () => { test.NestedViewModel = null; }' "no value"'                  fallbackValue: "no value");
Magic Number,Tests,CalcBindingSystemTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\CalcBindingSystemTests.cs,FallbackValueInMultiValueConverter,The following statement contains a magic number: StringBindingAssert("NestedViewModel.A+NestedViewModel.B"' test'                  () => { test.NestedViewModel.A = 10; test.NestedViewModel.B = 5; }' "15"'                  () => { test.NestedViewModel = null; }' "no value"'                  fallbackValue: "no value");
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,PropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("MyProp.N+Other+(Next.N5ext1._Next2)-MyProp+4.56-MyProp.N"' null' true'                  new PropertyPathToken(0' 7' new[] { "MyProp"' "N" })'                  new PropertyPathToken(9' 13' new[] { "Other" })'                  new PropertyPathToken(16' 33' new[] { "Next"' "N5ext1"' "_Next2" })'                  new PropertyPathToken(36' 41' new[] { "MyProp" })'                  new PropertyPathToken(48' 55' new[] { "MyProp"' "N" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,StaticPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("local:MyClass.MyProp.N^local:MyClass.Other.B/(local:MyClass.Next.Next1.Next24)*(4.34*local:MyClass.MyProp.N)+local:MyClass.MyProp.M-24"' null' true'                  new StaticPropertyPathToken(0' 21' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(23' 43' "local"' "MyClass"' new[] { "Other"' "B" })'                  new StaticPropertyPathToken(46' 76' "local"' "MyClass"' new[] { "Next"' "Next1"' "Next24" })'                  new StaticPropertyPathToken(85' 106' "local"' "MyClass"' new[] { "MyProp"' "N" })'                  new StaticPropertyPathToken(109' 130' "local"' "MyClass"' new[] { "MyProp"' "M" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,EnumPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] { "MyProp" })'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] { "Prop" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,EnumPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] { "MyProp" })'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] { "Prop" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,EnumPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] { "MyProp" })'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] { "Prop" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,EnumPropertyPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] { "MyProp" })'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] { "Prop" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] {"MyProp"})'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] {"MyProp"})'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] {"MyProp"})'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("(1 > 0) ? local:MyClass.MyProp : local:MyClass.Prop"' resolver' true'                  new StaticPropertyPathToken(10' 29' "local"' "MyClass"' new[] {"MyProp"})'                  new StaticPropertyPathToken(33' 50' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? MyProp : local:MyClass.Prop"' resolver' true'                  new PropertyPathToken(8' 13' new[] {"MyProp"})'                  new StaticPropertyPathToken(17' 34' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? MyProp : local:MyClass.Prop"' resolver' true'                  new PropertyPathToken(8' 13' new[] {"MyProp"})'                  new StaticPropertyPathToken(17' 34' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? MyProp : local:MyClass.Prop"' resolver' true'                  new PropertyPathToken(8' 13' new[] {"MyProp"})'                  new StaticPropertyPathToken(17' 34' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? MyProp : local:MyClass.Prop"' resolver' true'                  new PropertyPathToken(8' 13' new[] {"MyProp"})'                  new StaticPropertyPathToken(17' 34' "local"' "MyClass"' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local : Prop"' resolver' true'                  new PropertyPathToken(8' 12' new[] {"Local"})'                  new PropertyPathToken(16' 19' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local : Prop"' resolver' true'                  new PropertyPathToken(8' 12' new[] {"Local"})'                  new PropertyPathToken(16' 19' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local : Prop"' resolver' true'                  new PropertyPathToken(8' 12' new[] {"Local"})'                  new PropertyPathToken(16' 19' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local : Prop"' resolver' true'                  new PropertyPathToken(8' 12' new[] {"Local"})'                  new PropertyPathToken(16' 19' new[] {"Prop"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local:Prop.P1 : P2"' resolver' true'                  new StaticPropertyPathToken(8' 20' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(24' 25' new [] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local:Prop.P1 : P2"' resolver' true'                  new StaticPropertyPathToken(8' 20' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(24' 25' new [] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local:Prop.P1 : P2"' resolver' true'                  new StaticPropertyPathToken(8' 20' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(24' 25' new [] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? Local:Prop.P1 : P2"' resolver' true'                  new StaticPropertyPathToken(8' 20' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(24' 25' new [] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (5+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(11' 23' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(27' 28' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (5+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(11' 23' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(27' 28' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (5+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(11' 23' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(27' 28' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (5+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(11' 23' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(27' 28' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (\"5\"+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(13' 25' "Local"' "Prop"' new[] { "P1" })'                  new PropertyPathToken(29' 30' new[] { "P2" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (\"5\"+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(13' 25' "Local"' "Prop"' new[] { "P1" })'                  new PropertyPathToken(29' 30' new[] { "P2" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (\"5\"+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(13' 25' "Local"' "Prop"' new[] { "P1" })'                  new PropertyPathToken(29' 30' new[] { "P2" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (\"5\"+Local:Prop.P1): P2"' resolver' true'                  new StaticPropertyPathToken(13' 25' "Local"' "Prop"' new[] { "P1" })'                  new PropertyPathToken(29' 30' new[] { "P2" })              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (Local1:Class2.P4+Local:Prop.P1) : P2"' resolver' true'                  new StaticPropertyPathToken(9' 24' "Local1"' "Class2"' new[] {"P4"})'                  new StaticPropertyPathToken(26' 38' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(43' 44' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (Local1:Class2.P4+Local:Prop.P1) : P2"' resolver' true'                  new StaticPropertyPathToken(9' 24' "Local1"' "Class2"' new[] {"P4"})'                  new StaticPropertyPathToken(26' 38' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(43' 44' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (Local1:Class2.P4+Local:Prop.P1) : P2"' resolver' true'                  new StaticPropertyPathToken(9' 24' "Local1"' "Class2"' new[] {"P4"})'                  new StaticPropertyPathToken(26' 38' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(43' 44' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (Local1:Class2.P4+Local:Prop.P1) : P2"' resolver' true'                  new StaticPropertyPathToken(9' 24' "Local1"' "Class2"' new[] {"P4"})'                  new StaticPropertyPathToken(26' 38' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(43' 44' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (Local1:Class2.P4+Local:Prop.P1) : P2"' resolver' true'                  new StaticPropertyPathToken(9' 24' "Local1"' "Class2"' new[] {"P4"})'                  new StaticPropertyPathToken(26' 38' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(43' 44' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? (Local1:Class2.P4+Local:Prop.P1) : P2"' resolver' true'                  new StaticPropertyPathToken(9' 24' "Local1"' "Class2"' new[] {"P4"})'                  new StaticPropertyPathToken(26' 38' "Local"' "Prop"' new[] {"P1"})'                  new PropertyPathToken(43' 44' new[] {"P2"})              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:Enum1.Prop1 : local:Enum2.Prop2"' resolver' true'                  new EnumToken(8' 24' "local"' typeof(ExampleEnum1)' "Prop1")'                  new EnumToken(28' 44' "local"' typeof(ExampleEnum2)' "Prop2")              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:Enum1.Prop1 : local:Enum2.Prop2"' resolver' true'                  new EnumToken(8' 24' "local"' typeof(ExampleEnum1)' "Prop1")'                  new EnumToken(28' 44' "local"' typeof(ExampleEnum2)' "Prop2")              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:Enum1.Prop1 : local:Enum2.Prop2"' resolver' true'                  new EnumToken(8' 24' "local"' typeof(ExampleEnum1)' "Prop1")'                  new EnumToken(28' 44' "local"' typeof(ExampleEnum2)' "Prop2")              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,ComplexTernarOperatorTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:Enum1.Prop1 : local:Enum2.Prop2"' resolver' true'                  new EnumToken(8' 24' "local"' typeof(ExampleEnum1)' "Prop1")'                  new EnumToken(28' 44' "local"' typeof(ExampleEnum2)' "Prop2")              );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,MathPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("Math.PI+Math.Sin(45.5)*Math.Cos(Math.ATan(55))"' null' true'                              new MathToken(0' 6' "PI")'                              new MathToken(8' 15' "Sin")'                              new MathToken(23' 30' "Cos")'                              new MathToken(32' 40' "ATan")                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,InternatializationPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:propiedad.icône : local:Класс.中國.český"' emptyResolver' true'                              new StaticPropertyPathToken(8' 28' "local"' "propiedad"' new[] { "icône" })'                              new StaticPropertyPathToken(32' 51' "local"' "Класс"' new[] { "中國"' "český" })                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,InternatializationPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:propiedad.icône : local:Класс.中國.český"' emptyResolver' true'                              new StaticPropertyPathToken(8' 28' "local"' "propiedad"' new[] { "icône" })'                              new StaticPropertyPathToken(32' 51' "local"' "Класс"' new[] { "中國"' "český" })                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,InternatializationPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:propiedad.icône : local:Класс.中國.český"' emptyResolver' true'                              new StaticPropertyPathToken(8' 28' "local"' "propiedad"' new[] { "icône" })'                              new StaticPropertyPathToken(32' 51' "local"' "Класс"' new[] { "中國"' "český" })                          );
Magic Number,Tests,PropertyPathAnalyzerTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\PropertyPathAnalyzerTests.cs,InternatializationPathTokensTest,The following statement contains a magic number: AssertPropertyPathes("1 > 0 ? local:propiedad.icône : local:Класс.中國.český"' emptyResolver' true'                              new StaticPropertyPathToken(8' 28' "local"' "propiedad"' new[] { "icône" })'                              new StaticPropertyPathToken(32' 51' "local"' "Класс"' new[] { "中國"' "český" })                          );
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithoutSettingModeSuccessTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithoutSettingModeSuccessTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithDefaultModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithDefaultModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithTwoWayModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)100);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithTwoWayModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)100);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithOneWayModeSuccessTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingLabelContentToReadonlyPropertyWithOneWayModeSuccessTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' Label.ContentProperty' (string s) => element.Content = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithoutSettingModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)100);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithoutSettingModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)100);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithDefaultModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithDefaultModeFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithOneWayModeSuccessTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithOneWayModeSuccessTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)10);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithOneWayToSourceFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)100);
Magic Number,Tests,ReadOnlySourcePropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\ReadOnlySourcePropertiesTests.cs,BindingTextBoxToReadonlyPropertyWithOneWayToSourceFailsTest,The following statement contains a magic number: BindingBackAssert(calcBinding' source' () => source.A'                  element' TextBox.TextProperty' (string s) => element.Text = s'                  "10"' "100"'                  (double)10' (double)100);
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("(local:StaticExampleClass.StaticA)"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("(local:StaticExampleClass.StaticA)"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("(local:StaticExampleClass.StaticA)"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("(local:StaticExampleClass.StaticA)"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA"' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,SingleStaticPropertyWithoutBracketsTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticA = 10' "10"' (double)10'                  () => StaticExampleClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticClassTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticStaticClass.StaticA"' null'                  () => StaticStaticClass.StaticA = 10' "10"' (double)10'                  () => StaticStaticClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticStaticClass"' typeof(StaticStaticClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticClassTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticStaticClass.StaticA"' null'                  () => StaticStaticClass.StaticA = 10' "10"' (double)10'                  () => StaticStaticClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticStaticClass"' typeof(StaticStaticClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticClassTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticStaticClass.StaticA"' null'                  () => StaticStaticClass.StaticA = 10' "10"' (double)10'                  () => StaticStaticClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticStaticClass"' typeof(StaticStaticClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticClassTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticStaticClass.StaticA"' null'                  () => StaticStaticClass.StaticA = 10' "10"' (double)10'                  () => StaticStaticClass.StaticA = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticStaticClass"' typeof(StaticStaticClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+5"' null'                  () => StaticExampleClass.StaticA = 10' "15"' (double)15'                  () => StaticExampleClass.StaticA = 20.34' "25.34"' 25.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+5"' null'                  () => StaticExampleClass.StaticA = 10' "15"' (double)15'                  () => StaticExampleClass.StaticA = 20.34' "25.34"' 25.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+5"' null'                  () => StaticExampleClass.StaticA = 10' "15"' (double)15'                  () => StaticExampleClass.StaticA = 20.34' "25.34"' 25.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+5"' null'                  () => StaticExampleClass.StaticA = 10' "15"' (double)15'                  () => StaticExampleClass.StaticA = 20.34' "25.34"' 25.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+local:StaticExampleClass.StaticB"' null'                  () => { StaticExampleClass.StaticA = 10.4; StaticExampleClass.StaticB = 2; }' "12.4"' (double)12.4'                  () => { StaticExampleClass.StaticA = 20.5; StaticExampleClass.StaticB = -20; }' "0.5"' (double)0.5'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+local:StaticExampleClass.StaticB"' null'                  () => { StaticExampleClass.StaticA = 10.4; StaticExampleClass.StaticB = 2; }' "12.4"' (double)12.4'                  () => { StaticExampleClass.StaticA = 20.5; StaticExampleClass.StaticB = -20; }' "0.5"' (double)0.5'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+local:StaticExampleClass.StaticB"' null'                  () => { StaticExampleClass.StaticA = 10.4; StaticExampleClass.StaticB = 2; }' "12.4"' (double)12.4'                  () => { StaticExampleClass.StaticA = 20.5; StaticExampleClass.StaticB = -20; }' "0.5"' (double)0.5'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+local:StaticExampleClass.StaticB"' null'                  () => { StaticExampleClass.StaticA = 10.4; StaticExampleClass.StaticB = 2; }' "12.4"' (double)12.4'                  () => { StaticExampleClass.StaticA = 20.5; StaticExampleClass.StaticB = -20; }' "0.5"' (double)0.5'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+local:StaticExampleClass.StaticB"' null'                  () => { StaticExampleClass.StaticA = 10.4; StaticExampleClass.StaticB = 2; }' "12.4"' (double)12.4'                  () => { StaticExampleClass.StaticA = 20.5; StaticExampleClass.StaticB = -20; }' "0.5"' (double)0.5'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA+local:StaticExampleClass.StaticB"' null'                  () => { StaticExampleClass.StaticA = 10.4; StaticExampleClass.StaticB = 2; }' "12.4"' (double)12.4'                  () => { StaticExampleClass.StaticA = 20.5; StaticExampleClass.StaticB = -20; }' "0.5"' (double)0.5'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA-A"' exampleViewModel'                  () => { StaticExampleClass.StaticA = 10; exampleViewModel.A = -4; }' "14"' (double)14'                  () => { StaticExampleClass.StaticA = 20.34; exampleViewModel.A = 8; }' "12.34"' 12.34'                      new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA-A"' exampleViewModel'                  () => { StaticExampleClass.StaticA = 10; exampleViewModel.A = -4; }' "14"' (double)14'                  () => { StaticExampleClass.StaticA = 20.34; exampleViewModel.A = 8; }' "12.34"' 12.34'                      new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA-A"' exampleViewModel'                  () => { StaticExampleClass.StaticA = 10; exampleViewModel.A = -4; }' "14"' (double)14'                  () => { StaticExampleClass.StaticA = 20.34; exampleViewModel.A = 8; }' "12.34"' 12.34'                      new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA-A"' exampleViewModel'                  () => { StaticExampleClass.StaticA = 10; exampleViewModel.A = -4; }' "14"' (double)14'                  () => { StaticExampleClass.StaticA = 20.34; exampleViewModel.A = 8; }' "12.34"' 12.34'                      new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA-A"' exampleViewModel'                  () => { StaticExampleClass.StaticA = 10; exampleViewModel.A = -4; }' "14"' (double)14'                  () => { StaticExampleClass.StaticA = 20.34; exampleViewModel.A = 8; }' "12.34"' 12.34'                      new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,AlgebraicStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticA-A"' exampleViewModel'                  () => { StaticExampleClass.StaticA = 10; exampleViewModel.A = -4; }' "14"' (double)14'                  () => { StaticExampleClass.StaticA = 20.34; exampleViewModel.A = 8; }' "12.34"' 12.34'                      new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,LogicStaticPropertyTest,The following statement contains a magic number: exampleViewModel.A = -5;
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,ReadonlyPropertiesTest,The following statement contains a magic number: BrushBindingAssert("(A>B) ? m:Brushes.White : m:Brushes.Black"' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' Brushes.Black'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' Brushes.White'                  new Dictionary<string' Type>() { { "m:Brushes"' typeof(Brushes) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,ReadonlyPropertiesTest,The following statement contains a magic number: BrushBindingAssert("(A>B) ? m:Brushes.White : m:Brushes.Black"' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' Brushes.Black'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' Brushes.White'                  new Dictionary<string' Type>() { { "m:Brushes"' typeof(Brushes) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,ReadonlyPropertiesTest,The following statement contains a magic number: BrushBindingAssert("(A>B) ? m:Brushes.White : m:Brushes.Black"' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' Brushes.Black'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' Brushes.White'                  new Dictionary<string' Type>() { { "m:Brushes"' typeof(Brushes) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,ReadonlyPropertiesTest,The following statement contains a magic number: BrushBindingAssert("(A>B) ? m:Brushes.White : m:Brushes.Black"' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' Brushes.Black'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' Brushes.White'                  new Dictionary<string' Type>() { { "m:Brushes"' typeof(Brushes) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,TernaryOperatorWithStringTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A < B?'LightBlue when A < B':'Red when A >= B') "' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' "LightBlue when A < B"' "LightBlue when A < B"'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' "Red when A >= B"' "Red when A >= B"              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,TernaryOperatorWithStringTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A < B?'LightBlue when A < B':'Red when A >= B') "' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' "LightBlue when A < B"' "LightBlue when A < B"'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' "Red when A >= B"' "Red when A >= B"              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,TernaryOperatorWithStringTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A < B?'LightBlue when A < B':'Red when A >= B') "' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' "LightBlue when A < B"' "LightBlue when A < B"'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' "Red when A >= B"' "Red when A >= B"              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,TernaryOperatorWithStringTest,The following statement contains a magic number: StringAndObjectBindingAssert("(A < B?'LightBlue when A < B':'Red when A >= B') "' exampleViewModel'                  () => { exampleViewModel.A = 10; exampleViewModel.B = 15; }' "LightBlue when A < B"' "LightBlue when A < B"'                  () => { exampleViewModel.A = 20; exampleViewModel.B = -2; }' "Red when A >= B"' "Red when A >= B"              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,TwoStaticPropertyPathesTest,The following statement contains a magic number: BrushBindingAssert("(local:StaticExampleClass.StaticA > 5?m:Brushes.White : m:Brushes.Black) "' null'                  () => { StaticExampleClass.StaticA = 4; }' Brushes.Black'                  () => { StaticExampleClass.StaticA = 10; }' Brushes.White'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                      {"m:Brushes"' typeof(Brushes)}                  }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,TwoStaticPropertyPathesTest,The following statement contains a magic number: BrushBindingAssert("(local:StaticExampleClass.StaticA > 5?m:Brushes.White : m:Brushes.Black) "' null'                  () => { StaticExampleClass.StaticA = 4; }' Brushes.Black'                  () => { StaticExampleClass.StaticA = 10; }' Brushes.White'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                      {"m:Brushes"' typeof(Brushes)}                  }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BoolToVisibilityTest,The following statement contains a magic number: VisibilityBindingAssert("local:StaticExampleClass.StaticA less 5"' null'                  () => { StaticExampleClass.StaticA = 4; }' Visibility.Visible'                  () => { StaticExampleClass.StaticA = 10; }' Visibility.Collapsed'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                  }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BoolToVisibilityTest,The following statement contains a magic number: VisibilityBindingAssert("local:StaticExampleClass.StaticA less 5"' null'                  () => { StaticExampleClass.StaticA = 4; }' Visibility.Visible'                  () => { StaticExampleClass.StaticA = 10; }' Visibility.Collapsed'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                  }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,UpdateSourceStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("local:StaticExampleClass.StaticA+5"' null' () => StaticExampleClass.StaticA'                  "10"' "-2"' 10' -2'                  5d' -7d' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,UpdateSourceStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("local:StaticExampleClass.StaticA+5"' null' () => StaticExampleClass.StaticA'                  "10"' "-2"' 10' -2'                  5d' -7d' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,UpdateSourceStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("local:StaticExampleClass.StaticA+5"' null' () => StaticExampleClass.StaticA'                  "10"' "-2"' 10' -2'                  5d' -7d' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,UpdateSourceStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("local:StaticExampleClass.StaticA+5"' null' () => StaticExampleClass.StaticA'                  "10"' "-2"' 10' -2'                  5d' -7d' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("Math.Round(Math.Sin(local:StaticExampleClass.StaticB *Math.PI / 2.0))"' null'                  () => { StaticExampleClass.StaticB = 1; }' "1"' 1d'                  () => { StaticExampleClass.StaticB = 6; }' "0"' 0d'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("Math.Round(Math.Cos(local:StaticExampleClass.StaticB *Math.PI / 2.0))"' null'                  () => { StaticExampleClass.StaticB = 3; }'  #if NETCOREAPP3_0                  "-0"' -0.0d'  #else                  "0"' 0.0d'  #endif                    () => { StaticExampleClass.StaticB = 4; }' "1"' 1d'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingAssert("Math.Round(Math.Cos(local:StaticExampleClass.StaticB *Math.PI / 2.0))"' null'                  () => { StaticExampleClass.StaticB = 3; }'  #if NETCOREAPP3_0                  "-0"' -0.0d'  #else                  "0"' 0.0d'  #endif                    () => { StaticExampleClass.StaticB = 4; }' "1"' 1d'                  new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Sin(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  52' -111' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Cos(local:StaticExampleClass.StaticB/100.0)"' null' () => StaticExampleClass.StaticB'                  "0.5"' "-0.9"' 0.5' -0.9'                  104' 269' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,MathTwoWayWithStaticPropertyTest,The following statement contains a magic number: StringAndObjectBindingBackAssert("Math.Pow(Math.PI'local:StaticExampleClass.StaticA)"' null' () => StaticExampleClass.StaticA'                  pi' "1"' double.Parse(pi' CultureInfo.InvariantCulture)' 1'  #if NETCOREAPP3_0                  1d'  #else                  0.999999999999999'   #endif                  0.0' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  });
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,DoubleQuotesInCharTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticChar = 'D'' "5"' 5'                  () => StaticExampleClass.StaticChar = 'A'' "4"' 4' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,DoubleQuotesInCharTest,The following statement contains a magic number: StringAndObjectBindingAssert(binding' null'                  () => StaticExampleClass.StaticChar = 'D'' "5"' 5'                  () => StaticExampleClass.StaticChar = 'A'' "4"' 4' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}                  }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticPropertyThatRaisePersonalEventTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticAWithPersonalEvent"' null'                  () => StaticExampleClass.StaticAWithPersonalEvent = 10' "10"' (double)10'                  () => StaticExampleClass.StaticAWithPersonalEvent = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticPropertyThatRaisePersonalEventTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticAWithPersonalEvent"' null'                  () => StaticExampleClass.StaticAWithPersonalEvent = 10' "10"' (double)10'                  () => StaticExampleClass.StaticAWithPersonalEvent = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticPropertyThatRaisePersonalEventTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticAWithPersonalEvent"' null'                  () => StaticExampleClass.StaticAWithPersonalEvent = 10' "10"' (double)10'                  () => StaticExampleClass.StaticAWithPersonalEvent = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,StaticPropertiesTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\StaticPropertiesTests.cs,BindingToStaticPropertyThatRaisePersonalEventTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.StaticAWithPersonalEvent"' null'                  () => StaticExampleClass.StaticAWithPersonalEvent = 10' "10"' (double)10'                  () => StaticExampleClass.StaticAWithPersonalEvent = 20.34' "20.34"' 20.34'                  new Dictionary<string' Type>() { { "local:StaticExampleClass"' typeof(StaticExampleClass) } }              );
Magic Number,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,BindingToEnumAndConstantTest,The following statement contains a magic number: StringAndObjectBindingAssert("EnumValue == local:Enum2.Value1 ?4:5"' exampleViewModel'                  () => exampleViewModel.EnumValue = Enum2.Value1' "4"' 4'                  () => exampleViewModel.EnumValue = Enum2.Value2' "5"' 5' new Dictionary<string' Type>                  {                      {"local:Enum2"' typeof(Enum2)}                  }              );
Magic Number,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,BindingToEnumAndConstantTest,The following statement contains a magic number: StringAndObjectBindingAssert("EnumValue == local:Enum2.Value1 ?4:5"' exampleViewModel'                  () => exampleViewModel.EnumValue = Enum2.Value1' "4"' 4'                  () => exampleViewModel.EnumValue = Enum2.Value2' "5"' 5' new Dictionary<string' Type>                  {                      {"local:Enum2"' typeof(Enum2)}                  }              );
Magic Number,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,BindingToEnumAndConstantTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.EnumValue == local:Enum2.Value1 ?4:5"' null'                  () => StaticExampleClass.EnumValue = Enum2.Value1' "4"' 4'                  () => StaticExampleClass.EnumValue = Enum2.Value2' "5"' 5' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                      {"local:Enum2"' typeof(Enum2)}                  }              );
Magic Number,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,BindingToEnumAndConstantTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.EnumValue == local:Enum2.Value1 ?4:5"' null'                  () => StaticExampleClass.EnumValue = Enum2.Value1' "4"' 4'                  () => StaticExampleClass.EnumValue = Enum2.Value2' "5"' 5' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                      {"local:Enum2"' typeof(Enum2)}                  }              );
Magic Number,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,EnumConstantTest,The following statement contains a magic number: StringAndObjectBindingAssert("Visibility==win:Visibility.Visible?1:2"' exampleViewModel'                  () => exampleViewModel.Visibility = Visibility.Collapsed' "2"' 2'                  () => exampleViewModel.Visibility = Visibility.Visible' "1"' 1' new Dictionary<string' Type>                  {                      {"win:Visibility"' typeof(Visibility)}                  }              );
Magic Number,Tests,EnumTests,D:\research\architectureSmells\repos\Alex141_CalcBinding\Tests\EnumTests.cs,EnumConstantTest,The following statement contains a magic number: StringAndObjectBindingAssert("local:StaticExampleClass.Visibility==win:Visibility.Visible?1:2"' null'                  () => StaticExampleClass.Visibility = Visibility.Collapsed' "2"' 2'                  () => StaticExampleClass.Visibility = Visibility.Visible' "1"' 1' new Dictionary<string' Type>                  {                      {"local:StaticExampleClass"' typeof(StaticExampleClass)}'                      {"win:Visibility"' typeof(Visibility)}                  }              );
