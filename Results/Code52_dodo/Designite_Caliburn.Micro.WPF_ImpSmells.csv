Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Caliburn.Micro,ActionMessage,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ActionMessage.cs,Invoke,Cyclomatic complexity of the method is 9
Complex Method,Caliburn.Micro,MessageBinder,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\MessageBinder.cs,CoerceValue,Cyclomatic complexity of the method is 10
Long Parameter List,Caliburn.Micro,Action,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Action.cs,Invoke,The method has 6 parameters. Parameters: target' methodName' view' source' eventArgs' parameters
Long Parameter List,Caliburn.Micro,ConventionManager,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ConventionManager.cs,SetBindingWithoutBindingOverwrite,The method has 6 parameters. Parameters: viewModelType' path' property' element' convention' bindableProperty
Long Parameter List,Caliburn.Micro,ConventionManager,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ConventionManager.cs,SetBindingWithoutBindingOrValueOverwrite,The method has 6 parameters. Parameters: viewModelType' path' property' element' convention' bindableProperty
Long Parameter List,Caliburn.Micro,Parser,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Parser.cs,BindParameter,The method has 5 parameters. Parameters: target' parameter' elementName' path' bindingMode
Long Identifier,Caliburn.Micro,ConventionManager,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ConventionManager.cs,ApplyHeaderTemplate,The length of the parameter headerTemplateSelectorProperty is 30.
Long Identifier,Caliburn.Micro,DefaultCloseStrategy<T>,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\DefaultCloseStrategy.cs,DefaultCloseStrategy,The length of the parameter closeConductedItemsWhenConductorCannotClose is 43.
Long Identifier,Caliburn.Micro,DefaultCloseStrategy<T>,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\DefaultCloseStrategy.cs,,The length of the parameter closeConductedItemsWhenConductorCannotClose is 43.
Long Identifier,Caliburn.Micro,EventAggregator,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\EventAggregator.cs,,The length of the parameter DefaultPublicationThreadMarshaller is 34.
Long Identifier,Caliburn.Micro,TypeMappingConfiguration,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\TypeMappingConfiguration.cs,,The length of the parameter DefaultSubNamespaceForViewModels is 32.
Long Identifier,Caliburn.Micro,TypeMappingConfiguration,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\TypeMappingConfiguration.cs,,The length of the parameter IncludeViewSuffixInViewModelNames is 33.
Long Statement,Caliburn.Micro,ActionMessage,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ActionMessage.cs,ElementLoaded,The length of the statement  "            const string bindingText = "<Binding xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation\' xmlns:cal='clr-namespace:Caliburn.Micro;assembly=Caliburn.Micro' Path='(cal:Message.Handler)' />"; " is 202.
Long Statement,Caliburn.Micro,ActionMessage,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ActionMessage.cs,Invoke,The length of the statement  "                var ex = new Exception(string.Format("Method {0} not found on target of type {1}."' context.Message.MethodName' context.Target.GetType())); " is 139.
Long Statement,Caliburn.Micro,Parser,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Parser.cs,CreateMessage,The length of the statement  "                    var paramString = messageText.Substring(openingParenthesisIndex + 1' closingParenthesisIndex - openingParenthesisIndex - 1); " is 124.
Long Statement,Caliburn.Micro,Parser,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Parser.cs,BindParameter,The length of the statement  "            var field = element.GetType().GetField(path + "Property"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 133.
Long Statement,Caliburn.Micro,Parser,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Parser.cs,BindParameter,The length of the statement  "            ConventionManager.ApplySilverlightTriggers(element' (DependencyProperty)field.GetValue(null)' x => expression' null' null); " is 123.
Long Statement,Caliburn.Micro,Screen,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Screen.cs,GetViewCloseAction,The length of the statement  "                var ex = new NotSupportedException("TryClose requires a parent IConductor or a view with a Close method or IsOpen property."); " is 126.
Complex Conditional,Caliburn.Micro,ConventionManager,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ConventionManager.cs,ApplyItemTemplate,The conditional expression  "!string.IsNullOrEmpty(itemsControl.DisplayMemberPath)                  || HasBinding(itemsControl' ItemsControl.DisplayMemberPathProperty)                      || itemsControl.ItemTemplate != null                          || !property.PropertyType.IsGenericType"  is complex.
Complex Conditional,Caliburn.Micro,Parser,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Parser.cs,SplitParameters,The conditional expression  "current == ''' && roundBrackets == 0 && squareBrackets == 0 && curlyBrackets == 0"  is complex.
Virtual Method Call from Constructor,Caliburn.Micro,Bootstrapper,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Bootstrapper.cs,Bootstrapper,The constructor "Bootstrapper" calls a virtual method "StartDesignTime".
Virtual Method Call from Constructor,Caliburn.Micro,Bootstrapper,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\Bootstrapper.cs,Bootstrapper,The constructor "Bootstrapper" calls a virtual method "StartRuntime".
Missing Default,Caliburn.Micro,AllActive,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ConductorWithCollectionAllActive.cs,AllActive,The following switch statement is missing a default case: switch(e.Action) {                              case NotifyCollectionChangedAction.Add:                              case NotifyCollectionChangedAction.Replace:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                              case NotifyCollectionChangedAction.Reset:                                  items.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                          }
Missing Default,Caliburn.Micro,OneActive,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.Silverlight\ConductorWithCollectionOneActive.cs,OneActive,The following switch statement is missing a default case: switch(e.Action) {                              case NotifyCollectionChangedAction.Add:                              case NotifyCollectionChangedAction.Replace:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                              case NotifyCollectionChangedAction.Reset:                                  items.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                          }
Missing Default,Caliburn.Micro,AttachedCollection<T>,C:\repos\Code52_dodo\lib\caliburn.micro\src\Caliburn.Micro.WPF\AttachedCollection.cs,OnCollectionChanged,The following switch statement is missing a default case: switch(e.Action) {                  case NotifyCollectionChangedAction.Add:                      e.NewItems.OfType<T>().Where(x => !Contains(x)).Apply(OnItemAdded);                      break;                  case NotifyCollectionChangedAction.Remove:                      e.OldItems.OfType<T>().Apply(OnItemRemoved);                      break;                  case NotifyCollectionChangedAction.Replace:                      e.OldItems.OfType<T>().Apply(OnItemRemoved);                      e.NewItems.OfType<T>().Where(x => !Contains(x)).Apply(OnItemAdded);                      break;                  case NotifyCollectionChangedAction.Reset:                      this.Apply(OnItemRemoved);                      this.Apply(OnItemAdded);                      break;              }
