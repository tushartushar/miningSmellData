Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Web.Razor.Test.Tokenizer,VBTokenizerIdentifierTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerIdentifierTest.cs,Keywords_Are_Recognized_As_Keyword_Tokens,The method has 153 lines of code.
Long Parameter List,System.Web.Razor.Test.Framework,CodeParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\CodeParserTestBase.cs,SingleSpanBlockTest,The method has 5 parameters. Parameters: document' spanContent' blockType' spanType' acceptedCharacters
Long Parameter List,System.Web.Razor.Test.Framework,CodeParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\CodeParserTestBase.cs,SingleSpanBlockTest,The method has 5 parameters. Parameters: document' spanContent' blockType' spanType' expectedErrors
Long Parameter List,System.Web.Razor.Test.Framework,CodeParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\CodeParserTestBase.cs,SingleSpanBlockTest,The method has 5 parameters. Parameters: document' blockType' spanType' acceptedCharacters' expectedError
Long Parameter List,System.Web.Razor.Test.Framework,CodeParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\CodeParserTestBase.cs,SingleSpanBlockTest,The method has 6 parameters. Parameters: document' spanContent' blockType' spanType' acceptedCharacters' expectedErrors
Long Parameter List,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,SingleSpanBlockTest,The method has 5 parameters. Parameters: document' spanContent' blockType' spanType' acceptedCharacters
Long Parameter List,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,SingleSpanBlockTest,The method has 5 parameters. Parameters: document' spanContent' blockType' spanType' expectedErrors
Long Parameter List,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,SingleSpanBlockTest,The method has 5 parameters. Parameters: document' blockType' spanType' acceptedCharacters' expectedError
Long Parameter List,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,SingleSpanBlockTest,The method has 6 parameters. Parameters: document' spanContent' blockType' spanType' acceptedCharacters' expectedErrors
Long Parameter List,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,RunParseTest,The method has 6 parameters. Parameters: document' parserActionSelector' expectedRoot' expectedErrors' designTimeParser' parserSelector
Long Parameter List,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The method has 6 parameters. Parameters: name' baselineName' generatePragmas' designTimeMode' expectedDesignTimePragmas' hostConfig
Long Parameter List,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,NamespaceImportTest,The method has 5 parameters. Parameters: content' expectedNS' acceptedCharacters' errorMessage' location
Long Parameter List,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,SetupTestContext,The method has 5 parameters. Parameters: document' positioningAction' codeParser' markupParser' activeParser
Long Parameter List,System.Web.Razor.Test.Parser.VB,VBErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBErrorTest.cs,EofBlockCore,The method has 6 parameters. Parameters: keyword' expectedTerminator' autoComplete' blockType' keywordIsMetaCode' classifier
Long Parameter List,System.Web.Razor.Test.Parser.VB,VBErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBErrorTest.cs,UnterminatedBlockCore,The method has 5 parameters. Parameters: keyword' expectedTerminator' blockType' keywordIsMetaCode' classifier
Long Parameter List,System.Web.Razor.Test.Utils,EventAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Utils\SpanAssert.cs,NextSpanIs,The method has 6 parameters. Parameters: enumerator' type' content' actualIndex' lineIndex' charIndex
Long Parameter List,System.Web.Razor.Test.Utils,EventAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Utils\SpanAssert.cs,IsSpan,The method has 6 parameters. Parameters: tok' type' content' actualIndex' lineIndex' charIndex
Long Statement,System.Web.Razor.Test,RazorDirectiveAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\RazorDirectiveAttributeTest.cs,EnsureRazorDirectiveProperties,The length of the statement  "            var attribute = (AttributeUsageAttribute)typeof(RazorDirectiveAttribute).GetCustomAttributes(typeof(AttributeUsageAttribute)' inherit: false) " is 141.
Long Statement,System.Web.Razor.Test,RazorTemplateEngineTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\RazorTemplateEngineTest.cs,GenerateCodeCopiesTextReaderContentToSeekableTextReaderAndPassesToGenerateCodeCore,The length of the statement  "            mockEngine.Object.GenerateCode(reader' className: className' rootNamespace: ns' sourceFileName: src' cancelToken: source.Token); " is 128.
Long Statement,System.Web.Razor.Test,RazorTemplateEngineTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\RazorTemplateEngineTest.cs,GenerateOutputsDesignTimeMappingsIfDesignTimeSetOnHost,The length of the statement  "            GeneratorResults results = engine.GenerateCode(new StringTextBuffer("foo @bar()")' className: null' rootNamespace: null' sourceFileName: "foo.cshtml"); " is 151.
Long Statement,System.Web.Razor.Test.Framework,CodeParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\CodeParserTestBase.cs,SingleSpanBlockTest,The length of the statement  "            SingleSpanBlockTest(document' spanContent' blockType' spanType' AcceptedCharacters.Any' expectedErrors ?? new RazorError[0]); " is 125.
Long Statement,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,ParseBlockTest,The length of the statement  "            RunParseTest(document' parser => parser.ParseBlock' expectedRoot' (expectedErrors ?? new RazorError[0]).ToList()' designTimeParser); " is 132.
Long Statement,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,SingleSpanBlockTest,The length of the statement  "            SingleSpanBlockTest(document' spanContent' blockType' spanType' AcceptedCharacters.Any' expectedErrors ?? new RazorError[0]); " is 125.
Long Statement,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,ParseDocumentTest,The length of the statement  "            RunParseTest(document' parser => parser.ParseDocument' expectedRoot' expectedErrors' designTimeParser' parserSelector: c => c.MarkupParser); " is 140.
Long Statement,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,EvaluateRazorErrors,The length of the statement  "                            String.Format("Expected that no errors would be raised' but the following errors were:\r\n{0}"' FormatErrors(actualErrors))); " is 125.
Long Statement,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,EvaluateRazorErrors,The length of the statement  "                            String.Format("Expected that {0} errors would be raised' but {1} errors were.\r\nExpected Errors: \r\n{2}\r\nActual Errors: \r\n{3}"' " is 133.
Long Statement,System.Web.Razor.Test.Framework,SpanFactoryExtensions,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\TestSpanBuilder.cs,EmptyCSharp,The length of the statement  "                self.Span(SpanKind.Code' new CSharpSymbol(self.LocationTracker.CurrentLocation' String.Empty' CSharpSymbolType.Unknown))); " is 122.
Long Statement,System.Web.Razor.Test.Framework,SpanFactoryExtensions,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\TestSpanBuilder.cs,EmptyHtml,The length of the statement  "            return self.Span(SpanKind.Markup' new HtmlSymbol(self.LocationTracker.CurrentLocation' String.Empty' HtmlSymbolType.Unknown)) " is 125.
Long Statement,System.Web.Razor.Test.Framework,SpanFactoryExtensions,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\TestSpanBuilder.cs,CodeTransition,The length of the statement  "            return self.Span(SpanKind.Transition' SyntaxConstants.TransitionString' markup: false).Accepts(AcceptedCharacters.None); " is 120.
Long Statement,System.Web.Razor.Test.Framework,SpanConstructorExtensions,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\TestSpanBuilder.cs,AutoCompleteWith,The length of the statement  "            return self.With(new AutoCompleteEditHandler(SpanConstructor.TestTokenizer) { AutoCompleteString = autoCompleteString' AutoCompleteAtEndOfSpan = atEndOfSpan }); " is 160.
Long Statement,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The length of the statement  "            string source = TestFile.Create(String.Format("CodeGenerator.{1}.Source.{0}.{2}"' name' LanguageName' FileExtension)).ReadAllText(); " is 132.
Long Statement,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The length of the statement  "            string expectedOutput = TestFile.Create(String.Format("CodeGenerator.{1}.Output.{0}.{2}"' baselineName' LanguageName' BaselineExtension)).ReadAllText(); " is 152.
Long Statement,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The length of the statement  "                results = engine.GenerateCode(buffer' className: name' rootNamespace: TestRootNamespaceName' sourceFileName: generatePragmas ? String.Format("{0}.{1}"' name' FileExtension) : null); " is 181.
Long Statement,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The length of the statement  "            WriteBaseline(String.Format(@"test\System.Web.Razor.Test\TestFiles\CodeGenerator\{0}\Output\{1}.{2}"' LanguageName' baselineName' BaselineExtension)' MiscUtils.StripRuntimeVersion(output.ToString())); " is 200.
Long Statement,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The length of the statement  "                Assert.True(expectedDesignTimePragmas != null || results.DesignTimeLineMappings == null || results.DesignTimeLineMappings.Count == 0); " is 134.
Long Statement,System.Web.Razor.Test.Generator,RazorCodeGeneratorTest<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\RazorCodeGeneratorTest.cs,RunTest,The length of the statement  "                Assert.True(expectedDesignTimePragmas == null || (results.DesignTimeLineMappings != null && results.DesignTimeLineMappings.Count > 0)); " is 135.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,ConstructorRequiresNonNullClassName,The length of the statement  "            Assert.ThrowsArgumentNullOrEmptyString(() => new VBRazorCodeGenerator(null' TestRootNamespaceName' TestPhysicalPath' CreateHost())' "className"); " is 145.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,ConstructorRequiresNonEmptyClassName,The length of the statement  "            Assert.ThrowsArgumentNullOrEmptyString(() => new VBRazorCodeGenerator(String.Empty' TestRootNamespaceName' TestPhysicalPath' CreateHost())' "className"); " is 153.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,ConstructorRequiresNonNullRootNamespaceName,The length of the statement  "            Assert.ThrowsArgumentNull(() => new VBRazorCodeGenerator("Foo"' null' TestPhysicalPath' CreateHost())' "rootNamespaceName"); " is 124.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,ConstructorRequiresNonNullHost,The length of the statement  "            Assert.ThrowsArgumentNull(() => new VBRazorCodeGenerator("Foo"' TestRootNamespaceName' TestPhysicalPath' null)' "host"); " is 120.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The length of the statement  "            RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 134.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The length of the statement  "            RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 122.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The length of the statement  "            RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 136.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The length of the statement  "            RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 138.
Long Statement,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The length of the statement  "            RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 122.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,ConstructorRequiresNonNullClassName,The length of the statement  "            Assert.ThrowsArgumentNullOrEmptyString(() => new CSharpRazorCodeGenerator(null' TestRootNamespaceName' TestPhysicalPath' CreateHost())' "className"); " is 149.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,ConstructorRequiresNonEmptyClassName,The length of the statement  "            Assert.ThrowsArgumentNullOrEmptyString(() => new CSharpRazorCodeGenerator(String.Empty' TestRootNamespaceName' TestPhysicalPath' CreateHost())' "className"); " is 157.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,ConstructorRequiresNonNullRootNamespaceName,The length of the statement  "            Assert.ThrowsArgumentNull(() => new CSharpRazorCodeGenerator("Foo"' null' TestPhysicalPath' CreateHost())' "rootNamespaceName"); " is 128.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,ConstructorRequiresNonNullHost,The length of the statement  "            Assert.ThrowsArgumentNull(() => new CSharpRazorCodeGenerator("Foo"' TestRootNamespaceName' TestPhysicalPath' null)' "host"); " is 124.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The length of the statement  "            RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 134.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The length of the statement  "            RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 122.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The length of the statement  "            RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 136.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The length of the statement  "            RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 138.
Long Statement,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The length of the statement  "            RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>() " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtEOF,The length of the statement  "                           new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' 8' 0' 8)' headerComplete: true)' " is 125.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,VerbatimBlockAutoCompleteAtEOF,The length of the statement  "                           new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' " is 128.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtStartOfFile,The length of the statement  "                           new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' 8' 0' 8)' headerComplete: true)' " is 125.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtStartOfFile,The length of the statement  "                                               Factory.Span(SpanKind.Code' new CSharpSymbol(Factory.LocationTracker.CurrentLocation' String.Empty' CSharpSymbolType.Unknown)) " is 126.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,VerbatimBlockAutoCompleteAtStartOfFile,The length of the statement  "                               Factory.Span(SpanKind.Code' new CSharpSymbol(Factory.LocationTracker.CurrentLocation' String.Empty' CSharpSymbolType.Unknown)) " is 126.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,VerbatimBlockAutoCompleteAtStartOfFile,The length of the statement  "                           new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' " is 128.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpDirectivesTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpDirectivesTest.cs,HelperDirective,The length of the statement  "                new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' new SourceLocation(8' 0' 8))' headerComplete: true)' " is 145.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The length of the statement  "                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1)); " is 139.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInVerbatimBlock,The length of the statement  "                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1)); " is 139.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpTemplateTest.cs,GetNestedTemplateError,The length of the statement  "            return new RazorError(RazorResources.ParseError_InlineMarkup_Blocks_Cannot_Be_Nested' new SourceLocation(characterIndex' 0' characterIndex)); " is 141.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpToMarkupSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpToMarkupSwitchTest.cs,ParseBlockGivesAllWhitespaceOnSameLineExcludingPreceedingNewlineButIncludingTrailingNewLineToMarkup,The length of the statement  "                                   Factory.Markup("Hello!\r\n").With(new SingleLineMarkupEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString' AcceptedCharacters.None)) " is 146.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpToMarkupSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpToMarkupSwitchTest.cs,ParseBlockParsesMarkupStatementOnSwitchCharacterFollowedByColon,The length of the statement  "                                   Factory.Markup("Bar\r\n").With(new SingleLineMarkupEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString' AcceptedCharacters.None)) " is 143.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpToMarkupSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpToMarkupSwitchTest.cs,ParseBlockSupportsAllKindsOfImplicitMarkupInCodeBlock,The length of the statement  "                                   Factory.Markup("Single Line Markup\r\n").With(new SingleLineMarkupEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString' AcceptedCharacters.None)) " is 158.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtOutputsZeroLengthCodeSpan,The length of the statement  "                                   Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace) " is 121.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtOutputsZeroLengthCodeSpan,The length of the statement  "                               new RazorError(String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS' "}")' new SourceLocation(2' 0' 2)) " is 136.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionDoesNotAcceptDotAfterAt,The length of the statement  "                                   Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace) " is 121.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionDoesNotAcceptDotAfterAt,The length of the statement  "                               new RazorError(String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS' ".")' new SourceLocation(2' 0' 2)) " is 136.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtAcceptsSingleSpaceOrNewlineAtDesignTime,The length of the statement  "                                   Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace) " is 121.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionDoesNotAcceptTrailingNewlineInRunTimeMode,The length of the statement  "                                   Factory.Code("foo.").AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace))' " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionAcceptsTrailingNewlineInDesignTimeMode,The length of the statement  "                                   Factory.Code("foo.").AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace))' " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CsHtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CsHtmlDocumentTest.cs,BlockCommentInImplicitExpressionIsHandledCorrectly,The length of the statement  "                                      Factory.Code("Html.Foo").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace) " is 121.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)' " is 126.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)' " is 129.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)    "' 8' 0' 8)' headerComplete: false)' " is 123.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementContinuesParsingHelperUntilEOF,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)' " is 120.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithEmbeddedCode,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)' " is 120.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithNewlinesBetweenCloseParenAndOpenBrace,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)\r\n\r\n\r\n\r\n{"' 8' 0' 8)' headerComplete: true)' " is 135.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementGivesWhitespaceAfterOpenBraceToMarkupInDesignMode,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)' " is 120.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)' " is 120.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The length of the statement  "                            new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)' " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The length of the statement  "            string expectedMessage = String.Format(RazorResources.ParseError_SingleLine_ControlFlowStatements_Not_Allowed' "{"' "<"); " is 121.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesNormalStringAtEndOfFile,The length of the statement  "                                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "if"' '}'' '{')' SourceLocation.Zero)); " is 126.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesVerbatimStringAtEndOfFile,The length of the statement  "                                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "if"' '}'' '{')' SourceLocation.Zero)); " is 126.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,RunUnterminatedSimpleKeywordBlock,The length of the statement  "            SingleSpanBlockTest(keyword + " (foo) { var foo = bar; if(foo != null) { bar(); } "' BlockType.Statement' SpanKind.Code' " is 120.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,RunUnterminatedSimpleKeywordBlock,The length of the statement  "                                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' keyword' '}'' '{')' SourceLocation.Zero)); " is 129.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpImplicitExpressionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpImplicitExpressionTest.cs,ParseBlockSupportsSlashesWithinComplexImplicitExpressions,The length of the statement  "            ImplicitExpressionTest("DataGridColumn.Template(\"Years of Service\"' e => (int)Math.Round((DateTime.Now - dt).TotalDays / 365))"); " is 131.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpImplicitExpressionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpImplicitExpressionTest.cs,ParseBlockProperlyParsesParenthesesAndBalancesThemInImplicitExpression,The length of the statement  "            ImplicitExpressionTest(@"foo().bar(""bi\""z""' 4)(""chained method; call"").baz(@""bo""""z""' '\''' () => { return 4; }' (4+5+new { foo = bar[4] }))"); " is 151.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpImplicitExpressionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpImplicitExpressionTest.cs,ParseBlockStopsBalancingParenthesesAtEOF,The length of the statement  "                                   errors: new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' new SourceLocation(4' 0' 4))); " is 138.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSkipsParenthesisedExpressionAndThenBalancesBracesIfFirstIdentifierIsForKeyword,The length of the statement  "            SingleSpanBlockTest("for(int i = 0; i < 10; new Foo { Bar = \"baz\" }) { Debug.WriteLine(@\"foo } bar\"); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 191.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSkipsParenthesisedExpressionAndThenBalancesBracesIfFirstIdentifierIsForeachKeyword,The length of the statement  "            SingleSpanBlockTest("foreach(int i = 0; i < 10; new Foo { Bar = \"baz\" }) { Debug.WriteLine(@\"foo } bar\"); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 195.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSkipsParenthesisedExpressionAndThenBalancesBracesIfFirstIdentifierIsWhileKeyword,The length of the statement  "            SingleSpanBlockTest("while(int i = 0; i < 10; new Foo { Bar = \"baz\" }) { Debug.WriteLine(@\"foo } bar\"); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 193.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSkipsParenthesisedExpressionAndThenBalancesBracesIfFirstIdentifierIsUsingKeywordFollowedByParen,The length of the statement  "            SingleSpanBlockTest("using(int i = 0; i < 10; new Foo { Bar = \"baz\" }) { Debug.WriteLine(@\"foo } bar\"); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 193.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsUsingsNestedWithinOtherBlocks,The length of the statement  "            SingleSpanBlockTest("if(foo) { using(int i = 0; i < 10; new Foo { Bar = \"baz\" }) { Debug.WriteLine(@\"foo } bar\"); } }"' BlockType.Statement' SpanKind.Code); " is 160.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSkipsParenthesisedExpressionAndThenBalancesBracesIfFirstIdentifierIsIfKeywordWithNoElseBranches,The length of the statement  "            SingleSpanBlockTest("if(int i = 0; i < 10; new Foo { Bar = \"baz\" }) { Debug.WriteLine(@\"foo } bar\"); }"' BlockType.Statement' SpanKind.Code); " is 145.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsBlockCommentBetweenIfAndElseClause,The length of the statement  "            SingleSpanBlockTest("if(foo) { bar(); } /* Foo */ /* Bar */ else { baz(); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 159.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsRazorCommentBetweenIfAndElseClause,The length of the statement  "            RunRazorCommentBetweenClausesTest("if(foo) { bar(); } "' " else { baz(); }"' acceptedCharacters: AcceptedCharacters.None); " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsBlockCommentBetweenElseIfAndElseClause,The length of the statement  "            SingleSpanBlockTest("if(foo) { bar(); } else if(bar) { baz(); } /* Foo */ /* Bar */ else { biz(); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 183.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsRazorCommentBetweenElseIfAndElseClause,The length of the statement  "            RunRazorCommentBetweenClausesTest("if(foo) { bar(); } else if(bar) { baz(); } "' " else { baz(); }"' acceptedCharacters: AcceptedCharacters.None); " is 146.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsBlockCommentBetweenIfAndElseIfClause,The length of the statement  "            SingleSpanBlockTest("if(foo) { bar(); } /* Foo */ /* Bar */ else if(bar) { baz(); }"' BlockType.Statement' SpanKind.Code); " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockAcceptsElseIfWithNoCondition,The length of the statement  "            // We don't want to be a full C# parser - If the else if is missing it's condition' the C# compiler can handle that' we have all the info we need to keep parsing " is 161.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockCorrectlyParsesDoWhileBlock,The length of the statement  "            SingleSpanBlockTest("do { var foo = bar; } while(foo != bar);"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 145.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockCorrectlyParsesDoWhileBlockMissingWhileConditionWithSemicolon,The length of the statement  "            SingleSpanBlockTest("do { var foo = bar; } while;"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 133.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsBlockCommentBetweenDoAndWhileClause,The length of the statement  "            SingleSpanBlockTest("do { var foo = bar; } /* Foo */ /* Bar */ while(true);"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 159.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsRazorCommentBetweenDoAndWhileClause,The length of the statement  "            RunRazorCommentBetweenClausesTest("do { var foo = bar; } "' " while(true);"' acceptedCharacters: AcceptedCharacters.None); " is 122.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSkipsParenthesisedExpressionAndThenBalancesBracesIfFirstIdentifierIsLockKeyword,The length of the statement  "            SingleSpanBlockTest("lock(foo) { Debug.WriteLine(@\"foo } bar\"); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 151.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockHasErrorsIfNamespaceImportMissingSemicolon,The length of the statement  "            NamespaceImportTest("using Foo.Bar.Baz"' " Foo.Bar.Baz"' acceptedCharacters: AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace' location: new SourceLocation(17' 0' 17)); " is 184.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockHasErrorsIfNamespaceAliasMissingSemicolon,The length of the statement  "            NamespaceImportTest("using Foo.Bar.Baz = FooBarBaz"' " Foo.Bar.Baz = FooBarBaz"' acceptedCharacters: AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace' location: new SourceLocation(29' 0' 29)); " is 208.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockParsesNamespaceImportWithSemicolonForUsingKeywordIfIsInValidFormat,The length of the statement  "            NamespaceImportTest("using Foo.Bar.Baz;"' " Foo.Bar.Baz"' AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace); " is 124.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockParsesNamespaceAliasWithSemicolonForUsingKeywordIfIsInValidFormat,The length of the statement  "            NamespaceImportTest("using FooBarBaz = FooBarBaz;"' " FooBarBaz = FooBarBaz"' AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace); " is 144.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesSingleLineCommentAtEndOfFile,The length of the statement  "                                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "foreach"' '}'' '{')' SourceLocation.Zero)); " is 131.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesBlockCommentAtEndOfFile,The length of the statement  "                                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "foreach"' '}'' '{')' SourceLocation.Zero)); " is 131.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesSingleSlashAtEndOfFile,The length of the statement  "                                new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "foreach"' '}'' '{')' SourceLocation.Zero)); " is 131.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsBlockCommentBetweenTryAndFinallyClause,The length of the statement  "            SingleSpanBlockTest("try { bar(); } /* Foo */ /* Bar */ finally { baz(); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 158.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsRazorCommentBetweenTryAndFinallyClause,The length of the statement  "            RunRazorCommentBetweenClausesTest("try { bar(); } "' " finally { biz(); }"' acceptedCharacters: AcceptedCharacters.None); " is 121.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsBlockCommentBetweenCatchAndFinallyClause,The length of the statement  "            SingleSpanBlockTest("try { bar(); } catch(bar) { baz(); } /* Foo */ /* Bar */ finally { biz(); }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 180.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsRazorCommentBetweenCatchAndFinallyClause,The length of the statement  "            RunRazorCommentBetweenClausesTest("try { bar(); } catch(bar) { baz(); } "' " finally { biz(); }"' acceptedCharacters: AcceptedCharacters.None); " is 143.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsTryStatementWithOneCatchClause,The length of the statement  "            SingleSpanBlockTest("try { var foo = new { } } catch(Foo Bar Baz) { var foo = new { } }"' BlockType.Statement' SpanKind.Code); " is 126.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsTryStatementWithMultipleCatchClause,The length of the statement  "            SingleSpanBlockTest("try { var foo = new { } } catch(Foo Bar Baz) { var foo = new { } } catch(Foo Bar Baz) { var foo = new { } } catch(Foo Bar Baz) { var foo = new { } }"' BlockType.Statement' SpanKind.Code); " is 208.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsMarkupWithinAdditionalCatchClauses,The length of the statement  "            RunSimpleWrappedMarkupTest("try { var foo = new { } } catch(Foo Bar Baz) { var foo = new { } } catch(Foo Bar Baz) { var foo = new { } } catch(Foo Bar Baz) {"' " <p>Foo</p> "' "}"); " is 180.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsTryStatementWithFinallyClause,The length of the statement  "            SingleSpanBlockTest("try { var foo = new { } } finally { var foo = new { } }"' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 160.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockSupportsMarkupWithinFinallyClause,The length of the statement  "            RunSimpleWrappedMarkupTest("try { var foo = new { } } finally {"' " <p>Foo</p> "' "}"' acceptedCharacters: AcceptedCharacters.None); " is 132.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockStopsParsingCatchClausesAfterFinallyBlock,The length of the statement  "            SingleSpanBlockTest(expectedContent + " catch(Foo Bar Baz) { }"' expectedContent' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 163.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockDoesNotAllowMultipleFinallyBlocks,The length of the statement  "            SingleSpanBlockTest(expectedContent + " finally { }"' expectedContent' BlockType.Statement' SpanKind.Code' acceptedCharacters: AcceptedCharacters.None); " is 152.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The length of the statement  "                         + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine " is 143.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The length of the statement  "                                new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))' " is 154.
Long Statement,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The length of the statement  "                                    new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)' " is 121.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))' " is 170.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The length of the statement  "                        Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))' " is 172.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))' " is 170.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The length of the statement  "                        Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))' " is 172.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The length of the statement  "                        Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))' " is 168.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The length of the statement  "                        Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))' " is 168.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))' " is 172.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The length of the statement  "                        Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))' " is 172.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The length of the statement  "                        Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))' " is 168.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The length of the statement  "                        Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))' " is 168.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))' " is 178.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The length of the statement  "                        Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))' " is 173.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))' " is 170.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))' " is 170.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The length of the statement  "                        Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))' " is 153.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))' " is 170.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))' " is 180.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))' " is 180.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))' " is 170.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributesDoNotCreateExtraDataForEntirelyLiteralAttribute,The length of the statement  "        <a class=""download"" href=""/Photo/Full/photoId"" title=""Download: (photo.FileTitle + photo.FileExtension)"">Download full photo</a> ((photo.FileSize / 1024) KB) " is 163.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributesDoNotCreateExtraDataForEntirelyLiteralAttribute,The length of the statement  "                <a href=""/User/View/comment.UserId"" title=""View comment.DisplayName's profile"">comment.DisplayName</a> commented at comment.CommentDate: " is 140.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The length of the statement  "                            new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))' " is 150.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The length of the statement  "                        new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The length of the statement  "                                   .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))' " is 141.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The length of the statement  "                               .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))' " is 141.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The length of the statement  "                            new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))' " is 150.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The length of the statement  "                                       .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))' " is 141.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))' " is 156.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The length of the statement  "                        Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))' " is 164.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))' " is 156.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The length of the statement  "                        Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))' " is 164.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The length of the statement  "                            new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))' " is 158.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The length of the statement  "                                Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))' " is 164.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsStartAndEndTagsToDifferInCase,The length of the statement  "            SingleSpanBlockTest("<li><p>Foo</P></lI>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 123.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockStopsAtMatchingCloseTagToStartTag,The length of the statement  "            SingleSpanBlockTest("<a><b></b></a><c></c>"' "<a><b></b></a>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 143.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockParsesUntilMatchingEndTagIfFirstNonWhitespaceCharacterIsStartTag,The length of the statement  "            SingleSpanBlockTest("<baz><boz><biz></biz></boz></baz>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 137.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsUnclosedTagsAsLongAsItCanRecoverToAnExpectedEndTag,The length of the statement  "            SingleSpanBlockTest("<foo><bar><baz></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 125.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockCanHandleSelfClosingTagsWithinBlock,The length of the statement  "            SingleSpanBlockTest("<foo><bar /></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 122.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The length of the statement  "                        Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))' " is 161.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))' " is 158.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The length of the statement  "                        Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))' " is 164.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The length of the statement  "                        Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))' " is 157.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))' " is 146.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The length of the statement  "                        Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))' " is 157.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The length of the statement  "                        Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))' " is 157.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))' " is 146.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The length of the statement  "                        Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))' " is 157.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsCommentWithinBlock,The length of the statement  "            SingleSpanBlockTest("<foo>bar<!-- zoop -->baz</foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 134.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockProperlyBalancesCommentStartAndEndTags,The length of the statement  "            SingleSpanBlockTest("<!--<foo></bar>-->"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 122.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockOnlyTerminatesCommentOnFullEndSequence,The length of the statement  "            SingleSpanBlockTest("<!--<foo>--</bar>-->"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 124.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockTerminatesCommentAtFirstOccurrenceOfEndSequence,The length of the statement  "            SingleSpanBlockTest("<foo><!--<foo></bar-->--></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 135.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockParsesSGMLDeclarationAsEmptyTag,The length of the statement  "            SingleSpanBlockTest("<foo><!DOCTYPE foo bar baz></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 137.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockTerminatesSGMLDeclarationAtFirstCloseAngle,The length of the statement  "            SingleSpanBlockTest("<foo><!DOCTYPE foo bar> baz></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 138.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockParsesXMLProcessingInstructionAsEmptyTag,The length of the statement  "            SingleSpanBlockTest("<foo><?xml foo bar baz?></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 134.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockTerminatesXMLProcessingInstructionAtQuestionMarkCloseAnglePair,The length of the statement  "            SingleSpanBlockTest("<foo><?xml foo bar?> baz</foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 134.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockDoesNotTerminateXMLProcessingInstructionAtCloseAngleUnlessPreceededByQuestionMark,The length of the statement  "            SingleSpanBlockTest("<foo><?xml foo bar> baz?></foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 135.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsScriptTagsWithLessThanSignsInThem,The length of the statement  "            SingleSpanBlockTest(@"<script>if(foo<bar) { alert(""baz"");)</script>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 152.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsScriptTagsWithSpacedLessThanSignsInThem,The length of the statement  "            SingleSpanBlockTest(@"<script>if(foo < bar) { alert(""baz"");)</script>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 154.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))' " is 150.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The length of the statement  "                               .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))' " is 160.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockAllowsInvalidTagNamesAsLongAsParserCanIdentifyEndTag,The length of the statement  "            SingleSpanBlockTest("<1-foo+bar>foo</1-foo+bar>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 130.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))' " is 154.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The length of the statement  "                        Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))' " is 159.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))' " is 148.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockParsesCodeWithinSingleLineMarkup,The length of the statement  "                    Factory.Markup("<li>Foo ").With(new SingleLineMarkupEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString))' " is 120.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockParsesCodeWithinSingleLineMarkup,The length of the statement  "                           .With(new SingleLineMarkupEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString' AcceptedCharacters.None)))); " is 121.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInText,The length of the statement  "            SingleSpanBlockTest("<foo>anurse@microsoft.com</foo>"' BlockType.Markup' SpanKind.Markup' acceptedCharacters: AcceptedCharacters.None); " is 135.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The length of the statement  "                    new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))' " is 150.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The length of the statement  "                               .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))' " is 160.
Long Statement,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,CSharpCodeParserDoesNotAcceptLeadingOrTrailingWhitespaceInDesignMode,The length of the statement  "                                Factory.Code("p.Name").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))' " is 121.
Long Statement,System.Web.Razor.Test.Parser,ParserVisitorExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserVisitorExtensionsTest.cs,VisitThrowsOnNullVisitor,The length of the statement  "            ParserResults results = new ParserResults(new BlockBuilder() { Type = BlockType.Comment }.Build()' new List<RazorError>()); " is 123.
Long Statement,System.Web.Razor.Test.Parser,CallbackParserListenerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CallbackParserListenerTest.cs,RunOnStartBlockTest,The length of the statement  "            RunCallbackTest(BlockType.Markup' ctor' (listener' expected) => listener.VisitStartBlock(new BlockBuilder() { Type = expected }.Build())' verifyResults); " is 153.
Long Statement,System.Web.Razor.Test.Parser,CallbackParserListenerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CallbackParserListenerTest.cs,RunOnEndBlockTest,The length of the statement  "            RunCallbackTest(BlockType.Markup' ctor' (listener' expected) => listener.VisitEndBlock(new BlockBuilder() { Type = expected }.Build())' verifyResults); " is 151.
Long Statement,System.Web.Razor.Test.Parser,CallbackParserListenerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CallbackParserListenerTest.cs,RunOnErrorTest,The length of the statement  "            RunCallbackTest(new RazorError("Foo"' SourceLocation.Zero)' ctor' (listener' expected) => listener.VisitError(expected)' verifyResults); " is 136.
Long Statement,System.Web.Razor.Test.Parser,BlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\BlockTest.cs,LocateOwnerReturnsNullIfNoSpanReturnsTrueForOwnsSpan,The length of the statement  "            TextChange change = new TextChange(128' 1' new StringTextBuffer("Foo @bar Baz")' 1' new StringTextBuffer("Foo @bor Baz")); " is 122.
Long Statement,System.Web.Razor.Test.Parser,BlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\BlockTest.cs,LocateOwnerReturnsNullIfChangeCrossesMultipleSpans,The length of the statement  "            TextChange change = new TextChange(4' 10' new StringTextBuffer("Foo @bar Baz")' 10' new StringTextBuffer("Foo @bor Baz")); " is 122.
Long Statement,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,ConstructorRequiresNonNullCodeParser,The length of the statement  "            Assert.ThrowsArgumentNull(() => new ParserContext(new SeekableTextReader(TextReader.Null)' null' new HtmlMarkupParser()' codeParser)' "codeParser"); " is 148.
Long Statement,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,ConstructorRequiresNonNullMarkupParser,The length of the statement  "            Assert.ThrowsArgumentNull(() => new ParserContext(new SeekableTextReader(TextReader.Null)' codeParser' null' codeParser)' "markupParser"); " is 138.
Long Statement,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,ConstructorRequiresNonNullActiveParser,The length of the statement  "            Assert.ThrowsArgumentNull(() => new ParserContext(new SeekableTextReader(TextReader.Null)' new CSharpCodeParser()' new HtmlMarkupParser()' null)' "activeParser"); " is 162.
Long Statement,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,ConstructorThrowsIfActiveParserIsNotCodeOrMarkupParser,The length of the statement  "            Assert.ThrowsArgument(() => new ParserContext(new SeekableTextReader(TextReader.Null)' new CSharpCodeParser()' new HtmlMarkupParser()' new CSharpCodeParser())' " is 159.
Long Statement,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,ConstructorInitializesProperties,The length of the statement  "            ParserContext context = new ParserContext(expectedBuffer' expectedCodeParser' expectedMarkupParser' expectedCodeParser); " is 120.
Long Statement,System.Web.Razor.Test.Parser,ParserContextTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserContextTest.cs,SetupTestContext,The length of the statement  "            ParserContext context = new ParserContext(new SeekableTextReader(new StringReader(document))' codeParser' markupParser' activeParser); " is 134.
Long Statement,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The length of the statement  "                new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1)); " is 153.
Long Statement,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,UnterminatedRazorCommentInVerbatimBlock,The length of the statement  "                new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1)); " is 153.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_EOF,The length of the statement  "                new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(value As String)"' 8' 0' 8)' headerComplete: true)' " is 126.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_EOF,The length of the statement  "                           .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndHelperKeyword })' " is 151.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,SectionDirective_AutoComplete_At_EOF,The length of the statement  "                           .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndSectionKeyword })' " is 152.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,VerbatimBlock_AutoComplete_At_EOF,The length of the statement  "                           .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndCodeKeyword }))' " is 150.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_StartOfFile,The length of the statement  "                new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(value As String)"' 8' 0' 8)' headerComplete: true)' " is 126.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_StartOfFile,The length of the statement  "                           .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndHelperKeyword })' " is 151.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,SectionDirective_AutoComplete_At_StartOfFile,The length of the statement  "                           .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndSectionKeyword })' " is 152.
Long Statement,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,VerbatimBlock_AutoComplete_At_StartOfFile,The length of the statement  "                           .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndCodeKeyword }))' " is 150.
Long Statement,System.Web.Razor.Test.Parser.VB,VBDirectiveTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBDirectiveTest.cs,VB_Functions_Directive,The length of the statement  "                    Factory.Code("\r\n    Public Function Foo() As String\r\n        Return \"Foo\"\r\n    End Function\r\n\r\n    Public Sub Bar()\r\n    End Sub\r\n") " is 148.
Long Statement,System.Web.Razor.Test.Parser.VB,VBDirectiveTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBDirectiveTest.cs,VB_Helper_Directive,The length of the statement  "                new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(s as String)"' 8' 0' 8)' headerComplete: true)' " is 122.
Long Statement,System.Web.Razor.Test.Parser.VB,VBExitStatementTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBExitStatementTest.cs,VB_Select_Statement_With_Exit,The length of the statement  "                    Factory.Code("Select Case Foo\r\n    Case 1\r\n        Exit Select\r\n    Case 2\r\n        Exit Select\r\nEnd Select\r\n") " is 123.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The length of the statement  "                    String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)' " is 124.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementMarksHelperSpanAsCanGrowIfMissingTrailingSpace,The length of the statement  "                    String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)' " is 124.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)' " is 126.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)' " is 129.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String)"' 8' 0' 8)' headerComplete: true)' " is 121.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementContinuesParsingHelperUntilEOF,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String)"' 8' 0' 8)' headerComplete: true)' " is 121.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithEmbeddedCode,The length of the statement  "                    new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String' bar as String)"' 8' 0' 8)' headerComplete: true)' " is 136.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The length of the statement  "                            new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)' " is 120.
Long Statement,System.Web.Razor.Test.Parser.VB,VBStatementTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBStatementTest.cs,VB_Select_Statement,The length of the statement  "                    Factory.Code("Select Case foo\r\n    Case 1\r\n        foo()\r\n    Case 2\r\n        bar()\r\n    Case Else\r\n        baz()\r\nEnd Select") " is 141.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHtmlDocumentTest.cs,BlockCommentInStringInCodeBlockIsIgnored,The length of the statement  "                        Factory.Code("If Request.IsAuthenticated Then" + Environment.NewLine + "    Dim foo = \"@* User is logged in! End If *@ bar\"" + Environment.NewLine + "    Write(\"Hello friend!\")" + Environment.NewLine + "End If") " is 215.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHtmlDocumentTest.cs,BlockCommentInTickCommentInCodeBlockIsIgnored,The length of the statement  "                        Factory.Code("If Request.IsAuthenticated Then" + Environment.NewLine + "    Dim foo = '@* User is logged in! End If *@ bar" + Environment.NewLine + "    Write(\"Hello friend!\")" + Environment.NewLine + "End If") " is 212.
Long Statement,System.Web.Razor.Test.Parser.VB,VBHtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHtmlDocumentTest.cs,BlockCommentInRemCommentInCodeBlockIsIgnored,The length of the statement  "                        Factory.Code("If Request.IsAuthenticated Then" + Environment.NewLine + "    Dim foo = REM @* User is logged in! End If *@ bar" + Environment.NewLine + "    Write(\"Hello friend!\")" + Environment.NewLine + "End If") " is 215.
Long Statement,System.Web.Razor.Test.Parser.VB,VBErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBErrorTest.cs,EofBlockCore,The length of the statement  "                                new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = expectedTerminator } : " is 128.
Long Statement,System.Web.Razor.Test.Parser.VB,VBErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBErrorTest.cs,EofBlockCore,The length of the statement  "                                    new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = expectedTerminator } : " is 128.
Long Statement,System.Web.Razor.Test.Parser.VB,VBBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBBlockTest.cs,ParseBlockSupportsSimpleFunctionsBlock,The length of the statement  "                    Factory.Code("\r\n    Public Sub Foo()\r\n        Bar()\r\n    End Sub\r\n\r\n    Private Function Bar() As Object\r\n        Return Nothing\r\n    End Function\r\n") " is 166.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo @bar")' 1' new StringTextBuffer("foo @foo. @bar")); " is 125.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            TextChange charTyped = new TextChange(14' 0' new StringTextBuffer("foo @foo. @barb")' 1' new StringTextBuffer("foo @foo. @barb")); " is 130.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            Assert.Equal(PartialParseResult.Provisional | PartialParseResult.Accepted' manager.CheckForStructureChangesAndWait(dotTyped)); " is 126.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            Assert.False(manager.Parser.LastResultProvisional' "LastResultProvisional flag should have been cleared but it was not"); " is 121.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo bar")' 1' new StringTextBuffer("foo @foo. bar")); " is 123.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            TextChange charTyped = new TextChange(9' 0' new StringTextBuffer("foo @foo. bar")' 1' new StringTextBuffer("foo @foo.b bar")); " is 126.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            Assert.Equal(PartialParseResult.Provisional | PartialParseResult.Accepted' manager.CheckForStructureChangesAndWait(dotTyped)); " is 126.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            Assert.False(manager.Parser.LastResultProvisional' "LastResultProvisional flag should have been cleared but it was not"); " is 121.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDeleteOfIdentifierPartsIfDotRemains,The length of the statement  "                        factory.Code("User.").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))' " is 120.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsMultipleInsertionIfItCausesIdentifierExpansionAndTrailingDot,The length of the statement  "                        factory.Code("User.").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))' " is 120.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsMultipleInsertionIfItOnlyCausesIdentifierExpansion,The length of the statement  "                        factory.Code("barbiz").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))' " is 121.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo @bar")' 1' new StringTextBuffer("foo @foo. @bar")); " is 125.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            TextChange charTyped = new TextChange(14' 0' new StringTextBuffer("foo @foo. @bar")' 1' new StringTextBuffer("foo @foo. @barb")); " is 129.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            Assert.Equal(PartialParseResult.Provisional | PartialParseResult.Accepted' manager.CheckForStructureChangesAndWait(dotTyped)); " is 126.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The length of the statement  "            Assert.False(manager.Parser.LastResultProvisional' "LastResultProvisional flag should have been cleared but it was not"); " is 121.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo bar")' 1' new StringTextBuffer("foo @foo. bar")); " is 123.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            TextChange charTyped = new TextChange(9' 0' new StringTextBuffer("foo @foo. bar")' 1' new StringTextBuffer("foo @foo.b bar")); " is 126.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            Assert.Equal(PartialParseResult.Provisional | PartialParseResult.Accepted' manager.CheckForStructureChangesAndWait(dotTyped)); " is 126.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The length of the statement  "            Assert.False(manager.Parser.LastResultProvisional' "LastResultProvisional flag should have been cleared but it was not"); " is 121.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,PartialParsingTestBase<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\PartialParsingTestBase.cs,CreateHost,The length of the statement  "                GeneratedClassContext = new GeneratedClassContext("Execute"' "Write"' "WriteLiteral"' "WriteTo"' "WriteLiteralTo"' "Template"' "DefineSection")' " is 144.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,PartialParsingTestBase<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\PartialParsingTestBase.cs,RunTypeKeywordTest,The length of the statement  "            RunFullReparseTest(new TextChange(keyword.Length' 0' old' 1' changed)' additionalFlags: PartialParseResult.SpanContextChanged); " is 127.
Long Statement,System.Web.Razor.Test.Parser.PartialParsing,TestParserManager,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\PartialParsingTestBase.cs,InitializeWithDocument,The length of the statement  "                CheckForStructureChangesAndWait(new TextChange(0' 0' new StringTextBuffer(String.Empty)' startDocument.Length' startDocument)); " is 127.
Long Statement,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CheckForStructureChangesStartsFullReparseIfChangeOverlapsMultipleSpans,The length of the statement  "            Assert.Equal(PartialParseResult.Rejected' parser.CheckForStructureChanges(new TextChange(0' 0' new StringTextBuffer(String.Empty)' 12' original))); " is 147.
Long Statement,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunCancelBacktrackOutsideLookaheadTest,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => reader.CancelBacktrack()' RazorResources.CancelBacktrack_Must_Be_Called_Within_Lookahead); " is 137.
Long Statement,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorRequiresNonNegativeOldPosition,The length of the statement  "            Assert.ThrowsArgumentOutOfRange(() => new TextChange(-1' 0' new Mock<ITextBuffer>().Object' 0' 0' new Mock<ITextBuffer>().Object)' "oldPosition"' "Value must be greater than or equal to 0."); " is 191.
Long Statement,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorRequiresNonNegativeNewPosition,The length of the statement  "            Assert.ThrowsArgumentOutOfRange(() => new TextChange(0' 0' new Mock<ITextBuffer>().Object' -1' 0' new Mock<ITextBuffer>().Object)' "newPosition"' "Value must be greater than or equal to 0."); " is 191.
Long Statement,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorRequiresNonNegativeOldLength,The length of the statement  "            Assert.ThrowsArgumentOutOfRange(() => new TextChange(0' -1' new Mock<ITextBuffer>().Object' 0' 0' new Mock<ITextBuffer>().Object)' "oldLength"' "Value must be greater than or equal to 0."); " is 189.
Long Statement,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorRequiresNonNegativeNewLength,The length of the statement  "            Assert.ThrowsArgumentOutOfRange(() => new TextChange(0' 0' new Mock<ITextBuffer>().Object' 0' -1' new Mock<ITextBuffer>().Object)' "newLength"' "Value must be greater than or equal to 0."); " is 189.
Long Statement,System.Web.Razor.Test.Text,TextReaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextReaderExtensionsTest.cs,ReadUntilWithPredicateThrowsArgExceptionIfPredicateNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => TextReaderExtensions.ReadUntil(new StringReader("Foo")' (Predicate<char>)null)' "condition"); " is 125.
Long Statement,System.Web.Razor.Test.Text,TextReaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextReaderExtensionsTest.cs,ReadUntilInclusiveWithPredicateThrowsArgExceptionIfPredicateNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => TextReaderExtensions.ReadUntil(new StringReader("Foo")' (Predicate<char>)null' inclusive: true)' "condition"); " is 142.
Long Statement,System.Web.Razor.Test.Text,TextReaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextReaderExtensionsTest.cs,ReadWhileWithPredicateThrowsArgNullIfPredicateNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => TextReaderExtensions.ReadWhile(new StringReader("Foo")' (Predicate<char>)null)' "condition"); " is 125.
Long Statement,System.Web.Razor.Test.Text,TextReaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextReaderExtensionsTest.cs,ReadWhileInclusiveWithPredicateThrowsArgNullIfPredicateNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => TextReaderExtensions.ReadWhile(new StringReader("Foo")' (Predicate<char>)null' inclusive: true)' "condition"); " is 142.
Long Statement,System.Web.Razor.Test.Text,TextReaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextReaderExtensionsTest.cs,ReadUntilWithPredicateHonorsInclusiveFlagWhenFalse,The length of the statement  "            RunReaderTest("foo bar baz 0 zoop zork zoink"' "foo bar baz "' '0'' r => r.ReadUntil(c => Char.IsDigit(c)' inclusive: false)); " is 126.
Long Statement,System.Web.Razor.Test.Text,TextReaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextReaderExtensionsTest.cs,ReadUntilWithPredicateHonorsInclusiveFlagWhenTrue,The length of the statement  "            RunReaderTest("foo bar baz 0 zoop zork zoink"' "foo bar baz 0"' ' '' r => r.ReadUntil(c => Char.IsDigit(c)' inclusive: true)); " is 126.
Long Statement,System.Web.Razor.Test.Tokenizer,VBTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerLiteralTest.cs,DateLiteral_Is_Terminated_At_EndHash,The length of the statement  "            TestTokenizer("# 8/23/1970 # 3:45:39AM"' new VBSymbol(0' 0' 0' "# 8/23/1970 #"' VBSymbolType.DateLiteral)' IgnoreRemaining); " is 124.
Long Statement,System.Web.Razor.Test.Tokenizer,VBTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerLiteralTest.cs,DateLiteral_Is_Terminated_At_EOL,The length of the statement  "            TestTokenizer("# 8/23/1970\n3:45:39AM"' new VBSymbol(0' 0' 0' "# 8/23/1970"' VBSymbolType.DateLiteral)' IgnoreRemaining); " is 121.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Single_Line_Comment_Is_Terminated_By_Newline,The length of the statement  "            TestTokenizer("// Foo Bar Baz\na"' new CSharpSymbol(0' 0' 0' "// Foo Bar Baz"' CSharpSymbolType.Comment)' IgnoreRemaining); " is 123.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Multi_Line_Comment_In_Single_Line_Comment_Has_No_Effect,The length of the statement  "            TestTokenizer("// Foo/*Bar*/ Baz\na"' new CSharpSymbol(0' 0' 0' "// Foo/*Bar*/ Baz"' CSharpSymbolType.Comment)' IgnoreRemaining); " is 129.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Multi_Line_Comment_Is_Terminated_By_End_Sequence,The length of the statement  "            TestTokenizer("/* Foo\nBar\nBaz */a"' new CSharpSymbol(0' 0' 0' "/* Foo\nBar\nBaz */"' CSharpSymbolType.Comment)' IgnoreRemaining); " is 131.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Unterminated_Multi_Line_Comment_Captures_To_EOF,The length of the statement  "            TestTokenizer("/* Foo\nBar\nBaz"' new CSharpSymbol(0' 0' 0' "/* Foo\nBar\nBaz"' CSharpSymbolType.Comment)' IgnoreRemaining); " is 124.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Nested_Multi_Line_Comments_Terminated_At_First_End_Sequence,The length of the statement  "            TestTokenizer("/* Foo/*\nBar\nBaz*/ */"' new CSharpSymbol(0' 0' 0' "/* Foo/*\nBar\nBaz*/"' CSharpSymbolType.Comment)' IgnoreRemaining); " is 135.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Nested_Multi_Line_Comments_Terminated_At_Full_End_Sequence,The length of the statement  "            TestTokenizer("/* Foo\nBar\nBaz* */"' new CSharpSymbol(0' 0' 0' "/* Foo\nBar\nBaz* */"' CSharpSymbolType.Comment)' IgnoreRemaining); " is 132.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,Trailing_Letter_Is_Not_Part_Of_Hex_Literal_If_Not_Type_Sufix,The length of the statement  "            TestTokenizer("0xDEADBEEFz"' new CSharpSymbol(0' 0' 0' "0xDEADBEEF"' CSharpSymbolType.IntegerLiteral)' IgnoreRemaining); " is 120.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,Character_Literal_Terminated_By_EOL_Even_When_Last_Char_Is_Slash_And_Followed_By_Stuff,The length of the statement  "            TestTokenizer("'foo\\\nflarg"' new CSharpSymbol(0' 0' 0' "'foo\\"' CSharpSymbolType.CharacterLiteral)' IgnoreRemaining); " is 120.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,Character_Literal_Terminated_By_CRLF_Even_When_Last_Char_Is_Slash_And_Followed_By_Stuff,The length of the statement  "            TestTokenizer("'foo\\\r\nflarg"' new CSharpSymbol(0' 0' 0' "'foo\\"' CSharpSymbolType.CharacterLiteral)' IgnoreRemaining); " is 122.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,Character_Literal_Allows_Escaped_Escape,The length of the statement  "            TestTokenizer("'foo\\\\'blah"' new CSharpSymbol(0' 0' 0' "'foo\\\\'"' CSharpSymbolType.CharacterLiteral)' IgnoreRemaining); " is 123.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,String_Literal_Terminated_By_CRLF_Even_When_Last_Char_Is_Slash_And_Followed_By_Stuff,The length of the statement  "            TestTokenizer("\"foo\\\r\nflarg"' new CSharpSymbol(0' 0' 0' "\"foo\\"' CSharpSymbolType.StringLiteral)' IgnoreRemaining); " is 121.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,String_Literal_Allows_Escaped_Escape,The length of the statement  "            TestTokenizer("\"foo\\\\\"blah"' new CSharpSymbol(0' 0' 0' "\"foo\\\\\""' CSharpSymbolType.StringLiteral)' IgnoreRemaining); " is 124.
Long Statement,System.Web.Razor.Test.Tokenizer,CSharpTokenizerLiteralTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerLiteralTest.cs,Verbatim_String_Literal_Is_Terminated_By_Slash_Double_Quote,The length of the statement  "            TestTokenizer("@\"foo\\\"bar\""' new CSharpSymbol(0' 0' 0' "@\"foo\\\""' CSharpSymbolType.StringLiteral)' IgnoreRemaining); " is 123.
Long Statement,System.Web.Razor.Test.Utils,EventAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Utils\SpanAssert.cs,NoMoreSpans,The length of the statement  "            Assert.False(tokens.Count > 0' String.Format(CultureInfo.InvariantCulture' @"There are more tokens available from the source: {0}"' FormatList(tokens))); " is 153.
Virtual Method Call from Constructor,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,ParserTestBase,The constructor "ParserTestBase" calls a virtual method "CreateSpanFactory".
Magic Number,System.Web.Razor.Test,RazorCodeLanguageTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\RazorCodeLanguageTest.cs,ServicesPropertyContainsEntriesForCSharpCodeLanguageService,The following statement contains a magic number: Assert.Equal(2' RazorCodeLanguage.Languages.Count);
Magic Number,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,WriteNode,The following statement contains a magic number: content = new String('.'' indent * 2) + content;
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreEqualIfDataIsEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfCodeLengthIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 56' 78);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 65' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 65' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 65' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartGeneratedColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 34' 65' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 43' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 43' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 43' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartColumnIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(12' 43' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping left = new GeneratedCodeMapping(12' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(21' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(21' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(21' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,GeneratedCodeMappingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\GeneratedCodeMappingTest.cs,GeneratedCodeMappingsAreNotEqualIfStartLineIsNotEqual,The following statement contains a magic number: GeneratedCodeMapping right = new GeneratedCodeMapping(21' 34' 56' 87);
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 2)'                  /* 03 */ new GeneratedCodeMapping(8' 6' 6' 33)'                  /* 04 */ new GeneratedCodeMapping(9' 46' 46' 3)'                  /* 05 */ new GeneratedCodeMapping(12' 3' 7' 1)'                  /* 06 */ new GeneratedCodeMapping(12' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTimeButCannotWrapPragmasAroundImportStatement,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 19)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 36)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 16)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 22)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 21)'              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 11' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 11' 11' 129)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorGeneratesCodeWithParserErrorsInDesignTimeMode,The following statement contains a magic number: RunTest("ParserError"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 16)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorGeneratesCodeWithParserErrorsInDesignTimeMode,The following statement contains a magic number: RunTest("ParserError"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 16)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorGeneratesCodeWithParserErrorsInDesignTimeMode,The following statement contains a magic number: RunTest("ParserError"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 16)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 25' 27)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 25' 27)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 11' 25' 27)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 17)'                  /* 02 */ new GeneratedCodeMapping(3' 20' 20' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 25' 25' 20)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 16' 16' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 27' 27' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 5)'                  /* 10 */ new GeneratedCodeMapping(17' 14' 14' 28)'                  /* 11 */ new GeneratedCodeMapping(19' 20' 20' 14)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForImplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ImplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForImplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ImplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForImplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ImplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForExplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ExplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForExplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ExplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForExplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ExplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForCodeBlockStartedAtEOF,The following statement contains a magic number: RunTest("CodeBlockAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 6' 6' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForCodeBlockStartedAtEOF,The following statement contains a magic number: RunTest("CodeBlockAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 6' 6' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForCodeBlockStartedAtEOF,The following statement contains a magic number: RunTest("CodeBlockAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 6' 6' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpression,The following statement contains a magic number: RunTest("EmptyImplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpression,The following statement contains a magic number: RunTest("EmptyImplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpression,The following statement contains a magic number: RunTest("EmptyImplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 6' 6' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyExplicitExpression,The following statement contains a magic number: RunTest("EmptyExplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyExplicitExpression,The following statement contains a magic number: RunTest("EmptyExplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,VBRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\VBRazorCodeGeneratorTest.cs,VBCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyExplicitExpression,The following statement contains a magic number: RunTest("EmptyExplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesMappingsForRazorCommentsAtDesignTime,The following statement contains a magic number: RunTest("RazorComments"' "RazorComments.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(4' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(5' 40' 39' 22)'                  /* 03 */ new GeneratedCodeMapping(6' 50' 49' 58)'                  /* 04 */ new GeneratedCodeMapping(12' 3' 3' 24)'                  /* 05 */ new GeneratedCodeMapping(13' 46' 46' 3)'                  /* 06 */ new GeneratedCodeMapping(15' 3' 7' 1)'                  /* 07 */ new GeneratedCodeMapping(15' 8' 8' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesImportStatementsAtDesignTime,The following statement contains a magic number: RunTest("Imports"' "Imports.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 1' 15)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 1' 32)'                  /* 03 */ new GeneratedCodeMapping(3' 2' 1' 12)'                  /* 04 */ new GeneratedCodeMapping(5' 30' 30' 21)'                  /* 05 */ new GeneratedCodeMapping(6' 36' 36' 20)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesFunctionsBlocksAtDesignTime,The following statement contains a magic number: RunTest("FunctionsBlock"' "FunctionsBlock.DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 13' 13' 4)'                  /* 02 */ new GeneratedCodeMapping(5' 13' 13' 104)'                  /* 03 */ new GeneratedCodeMapping(12' 26' 26' 11)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesHiddenSpansWithinCode,The following statement contains a magic number: RunTest("HiddenSpansInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 6' 5)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorGeneratesCodeWithParserErrorsInDesignTimeMode,The following statement contains a magic number: RunTest("ParserError"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 31)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorGeneratesCodeWithParserErrorsInDesignTimeMode,The following statement contains a magic number: RunTest("ParserError"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 31)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorGeneratesCodeWithParserErrorsInDesignTimeMode,The following statement contains a magic number: RunTest("ParserError"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 31)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesInheritsAtDesigntime,The following statement contains a magic number: RunTest("Inherits"' baselineName: "Inherits.Designtime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 2' 7' 5)'                  /* 02 */ new GeneratedCodeMapping(3' 11' 11' 25)'              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForUnfinishedExpressionsInCode,The following statement contains a magic number: RunTest("UnfinishedExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 2)'                  /* 02 */ new GeneratedCodeMapping(2' 2' 7' 9)'                  /* 03 */ new GeneratedCodeMapping(2' 11' 11' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasMarkupAndExpressions,The following statement contains a magic number: RunTest("DesignTime"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(2' 14' 13' 36)'                  /* 02 */ new GeneratedCodeMapping(3' 23' 23' 1)'                  /* 03 */ new GeneratedCodeMapping(3' 28' 28' 15)'                  /* 04 */ new GeneratedCodeMapping(8' 3' 7' 12)'                  /* 05 */ new GeneratedCodeMapping(9' 2' 7' 4)'                  /* 06 */ new GeneratedCodeMapping(9' 15' 15' 3)'                  /* 07 */ new GeneratedCodeMapping(9' 26' 26' 1)'                  /* 08 */ new GeneratedCodeMapping(14' 6' 7' 3)'                  /* 09 */ new GeneratedCodeMapping(17' 9' 24' 7)'                  /* 10 */ new GeneratedCodeMapping(17' 16' 16' 26)'                  /* 11 */ new GeneratedCodeMapping(19' 19' 19' 9)'                  /* 12 */ new GeneratedCodeMapping(21' 1' 1' 1)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForImplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ImplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForImplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ImplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForImplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ImplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForExplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ExplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForExplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ExplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForExplicitExpressionStartedAtEOF,The following statement contains a magic number: RunTest("ExplicitExpressionAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForCodeBlockStartedAtEOF,The following statement contains a magic number: RunTest("CodeBlockAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForCodeBlockStartedAtEOF,The following statement contains a magic number: RunTest("CodeBlockAtEOF"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpression,The following statement contains a magic number: RunTest("EmptyImplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpression,The following statement contains a magic number: RunTest("EmptyImplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpression,The following statement contains a magic number: RunTest("EmptyImplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 2' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyImplicitExpressionInCode,The following statement contains a magic number: RunTest("EmptyImplicitExpressionInCode"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(1' 3' 3' 6)'                  /* 02 */ new GeneratedCodeMapping(2' 6' 7' 0)'                  /* 03 */ new GeneratedCodeMapping(2' 6' 6' 2)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyExplicitExpression,The following statement contains a magic number: RunTest("EmptyExplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyExplicitExpression,The following statement contains a magic number: RunTest("EmptyExplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyExplicitExpression,The following statement contains a magic number: RunTest("EmptyExplicitExpression"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 7' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyCodeBlock,The following statement contains a magic number: RunTest("EmptyCodeBlock"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 3' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyCodeBlock,The following statement contains a magic number: RunTest("EmptyCodeBlock"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 3' 0)              });
Magic Number,System.Web.Razor.Test.Generator,CSharpRazorCodeGeneratorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Generator\CSharpRazorCodeGeneratorTest.cs,CSharpCodeGeneratorCorrectlyGeneratesDesignTimePragmasForEmptyCodeBlock,The following statement contains a magic number: RunTest("EmptyCodeBlock"' designTimeMode: true' expectedDesignTimePragmas: new List<GeneratedCodeMapping>()              {                  /* 01 */ new GeneratedCodeMapping(3' 3' 3' 0)              });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtEOF,The following statement contains a magic number: ParseBlockTest("@helper Strong(string value) {"'                             new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' 8' 0' 8)' headerComplete: true)'                                             Factory.CodeTransition()'                                             Factory.MetaCode("helper ")                                                 .Accepts(AcceptedCharacters.None)'                                             Factory.Code("Strong(string value) {")                                                 .Hidden()                                                 .Accepts(AcceptedCharacters.None)'                                             new StatementBlock(                                                 Factory.EmptyCSharp()                                                     .AsStatement()                                                     .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = "}" })                                                 )                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "helper"' "}"' "{")'                                            1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtEOF,The following statement contains a magic number: ParseBlockTest("@helper Strong(string value) {"'                             new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' 8' 0' 8)' headerComplete: true)'                                             Factory.CodeTransition()'                                             Factory.MetaCode("helper ")                                                 .Accepts(AcceptedCharacters.None)'                                             Factory.Code("Strong(string value) {")                                                 .Hidden()                                                 .Accepts(AcceptedCharacters.None)'                                             new StatementBlock(                                                 Factory.EmptyCSharp()                                                     .AsStatement()                                                     .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = "}" })                                                 )                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "helper"' "}"' "{")'                                            1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,SectionDirectiveAutoCompleteAtEOF,The following statement contains a magic number: ParseBlockTest("@section Header {"'                  new SectionBlock(new SectionCodeGenerator("Header")'                      Factory.CodeTransition()'                      Factory.MetaCode("section Header {")                             .AutoCompleteWith("}"' atEndOfSpan: true)                             .Accepts(AcceptedCharacters.Any)'                      new MarkupBlock())'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_X' "}")'                      17' 0' 17));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,SectionDirectiveAutoCompleteAtEOF,The following statement contains a magic number: ParseBlockTest("@section Header {"'                  new SectionBlock(new SectionCodeGenerator("Header")'                      Factory.CodeTransition()'                      Factory.MetaCode("section Header {")                             .AutoCompleteWith("}"' atEndOfSpan: true)                             .Accepts(AcceptedCharacters.Any)'                      new MarkupBlock())'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_X' "}")'                      17' 0' 17));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtStartOfFile,The following statement contains a magic number: ParseBlockTest("@helper Strong(string value) {" + Environment.NewLine                           + "<p></p>"'                             new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' 8' 0' 8)' headerComplete: true)'                                             Factory.CodeTransition()'                                             Factory.MetaCode("helper ")                                                 .Accepts(AcceptedCharacters.None)'                                             Factory.Code("Strong(string value) {")                                                 .Hidden()                                                 .Accepts(AcceptedCharacters.None)'                                             new StatementBlock(                                                 Factory.Code("\r\n")                                                     .AsStatement()                                                     .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = "}" })'                                                 new MarkupBlock(                                                     Factory.Markup(@"<p></p>")                                                         .With(new MarkupCodeGenerator())                                                         .Accepts(AcceptedCharacters.None)                                                     )'                                                 Factory.Span(SpanKind.Code' new CSharpSymbol(Factory.LocationTracker.CurrentLocation' String.Empty' CSharpSymbolType.Unknown))                                                     .With(new StatementCodeGenerator())                                                 )                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "helper"' "}"' "{")'                                            1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,HelperDirectiveAutoCompleteAtStartOfFile,The following statement contains a magic number: ParseBlockTest("@helper Strong(string value) {" + Environment.NewLine                           + "<p></p>"'                             new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' 8' 0' 8)' headerComplete: true)'                                             Factory.CodeTransition()'                                             Factory.MetaCode("helper ")                                                 .Accepts(AcceptedCharacters.None)'                                             Factory.Code("Strong(string value) {")                                                 .Hidden()                                                 .Accepts(AcceptedCharacters.None)'                                             new StatementBlock(                                                 Factory.Code("\r\n")                                                     .AsStatement()                                                     .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = "}" })'                                                 new MarkupBlock(                                                     Factory.Markup(@"<p></p>")                                                         .With(new MarkupCodeGenerator())                                                         .Accepts(AcceptedCharacters.None)                                                     )'                                                 Factory.Span(SpanKind.Code' new CSharpSymbol(Factory.LocationTracker.CurrentLocation' String.Empty' CSharpSymbolType.Unknown))                                                     .With(new StatementCodeGenerator())                                                 )                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "helper"' "}"' "{")'                                            1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,SectionDirectiveAutoCompleteAtStartOfFile,The following statement contains a magic number: ParseBlockTest("@section Header {" + Environment.NewLine                           + "<p>Foo</p>"'                  new SectionBlock(new SectionCodeGenerator("Header")'                      Factory.CodeTransition()'                      Factory.MetaCode("section Header {")                             .AutoCompleteWith("}"' atEndOfSpan: true)                             .Accepts(AcceptedCharacters.Any)'                      new MarkupBlock(                          Factory.Markup("\r\n<p>Foo</p>")))'                  new RazorError(String.Format(RazorResources.ParseError_Expected_X' "}")'                                  29' 1' 10));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpAutoCompleteTest.cs,SectionDirectiveAutoCompleteAtStartOfFile,The following statement contains a magic number: ParseBlockTest("@section Header {" + Environment.NewLine                           + "<p>Foo</p>"'                  new SectionBlock(new SectionCodeGenerator("Header")'                      Factory.CodeTransition()'                      Factory.MetaCode("section Header {")                             .AutoCompleteWith("}"' atEndOfSpan: true)                             .Accepts(AcceptedCharacters.Any)'                      new MarkupBlock(                          Factory.Markup("\r\n<p>Foo</p>")))'                  new RazorError(String.Format(RazorResources.ParseError_Expected_X' "}")'                                  29' 1' 10));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpDirectivesTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpDirectivesTest.cs,HelperDirective,The following statement contains a magic number: ParseBlockTest("@helper Strong(string value) { foo(); }"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' new SourceLocation(8' 0' 8))' headerComplete: true)'                      Factory.CodeTransition()'                      Factory.MetaCode("helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(string value) {")                             .Hidden()                             .Accepts(AcceptedCharacters.None)'                      new StatementBlock(                          Factory.Code(" foo(); ")                                 .AsStatement()                                 .With(new StatementCodeGenerator()))'                      Factory.Code("}")                             .Hidden()                             .Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpDirectivesTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpDirectivesTest.cs,HelperDirective,The following statement contains a magic number: ParseBlockTest("@helper Strong(string value) { foo(); }"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(string value) {"' new SourceLocation(8' 0' 8))' headerComplete: true)'                      Factory.CodeTransition()'                      Factory.MetaCode("helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(string value) {")                             .Hidden()                             .Accepts(AcceptedCharacters.None)'                      new StatementBlock(                          Factory.Code(" foo(); ")                                 .AsStatement()                                 .With(new StatementCodeGenerator()))'                      Factory.Code("}")                             .Hidden()                             .Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(" + Environment.NewLine                              + "@**@" + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(\r\n")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  CSharpSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None))'                          Factory.Code("\r\n")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")'                      4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(" + Environment.NewLine                              + "@**@" + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(\r\n")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  CSharpSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None))'                          Factory.Code("\r\n")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")'                      4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  CSharpSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  CSharpSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  CSharpSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  CSharpSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@{" + Environment.NewLine                              + "    <text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\n}"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@{" + Environment.NewLine                              + "    <text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\n}"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@{" + Environment.NewLine                              + "    <text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\n}"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@{" + Environment.NewLine                              + "    <text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\n}"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 8' 1' 4)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@{@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp()                                 .AsStatement()'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(Factory.LocationTracker.CurrentLocation'                                                                          String.Empty'                                                                          CSharpSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 2' 0' 2)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpRazorCommentsTest.cs,UnterminatedRazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@{@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp()                                 .AsStatement()'                          new CommentBlock(                              Factory.CodeTransition(CSharpSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' CSharpSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new CSharpSymbol(Factory.LocationTracker.CurrentLocation'                                                                          String.Empty'                                                                          CSharpSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 2' 0' 2)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpStatementTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpStatementTest.cs,UsingTypeAlias,The following statement contains a magic number: ParseBlockTest("@using StringDictionary = System.Collections.Generic.Dictionary<string' string>"'                             new DirectiveBlock(                                 Factory.CodeTransition()'                                 Factory.Code("using StringDictionary = System.Collections.Generic.Dictionary<string' string>")                                     .AsNamespaceImport(" StringDictionary = System.Collections.Generic.Dictionary<string' string>"' 5)                                     .Accepts(AcceptedCharacters.AnyExceptNewline)                                 ));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpStatementTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpStatementTest.cs,UsingNamespaceImport,The following statement contains a magic number: ParseBlockTest("@using System.Text.Encoding.ASCIIEncoding"'                             new DirectiveBlock(                                 Factory.CodeTransition()'                                 Factory.Code("using System.Text.Encoding.ASCIIEncoding")                                     .AsNamespaceImport(" System.Text.Encoding.ASCIIEncoding"' 5)                                     .Accepts(AcceptedCharacters.AnyExceptNewline)                                 ));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedTemplateInImplicitExpressionParens,The following statement contains a magic number: ParseBlockTest("Html.Repeat(10'" + TestNestedTemplateCode + ")"'                             new ExpressionBlock(                                 Factory.Code("Html.Repeat(10' ")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)'                                 TestNestedTemplate()'                                 Factory.Code(")")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace)                                 )'                             GetNestedTemplateError(42));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedTemplateInStatementWithinCodeBlock,The following statement contains a magic number: ParseBlockTest("foreach(foo in Bar) { Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + "); }"'                             new StatementBlock(                                 Factory.Code("foreach(foo in Bar) { Html.ExecuteTemplate(foo' ").AsStatement()'                                 TestNestedTemplate()'                                 Factory.Code("); }")                                     .AsStatement()                                     .Accepts(AcceptedCharacters.None)                                 )'                             GetNestedTemplateError(74));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedTemplateInStatementWithinStatementBlock,The following statement contains a magic number: ParseBlockTest("{ var foo = bar; Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + "); }"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code(" var foo = bar; Html.ExecuteTemplate(foo' ").AsStatement()'                                 TestNestedTemplate()'                                 Factory.Code("); ").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             GetNestedTemplateError(69));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpToMarkupSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpToMarkupSwitchTest.cs,ParseBlockGivesSpacesToCodeOnInvalidAtTagTransitionInDesignTimeMode,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @<p>Foo</p>    " + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new MarkupBlock(                                     Factory.MarkupTransition()'                                     Factory.Markup("<p>Foo</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("    \r\n").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )' true'                             new RazorError(RazorResources.ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start' 7' 1' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpToMarkupSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpToMarkupSwitchTest.cs,ParseBlockGivesSpacesToCodeOnInvalidAtTagTransitionInDesignTimeMode,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @<p>Foo</p>    " + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new MarkupBlock(                                     Factory.MarkupTransition()'                                     Factory.Markup("<p>Foo</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("    \r\n").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )' true'                             new RazorError(RazorResources.ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start' 7' 1' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtOutputsZeroLengthCodeSpan,The following statement contains a magic number: ParseBlockTest("{@}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.EmptyCSharp().AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace)                                     )'                                 Factory.EmptyCSharp().AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                             designTimeParser: true'                             expectedErrors: new[]                             {                                 new RazorError(String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS' "}")' new SourceLocation(2' 0' 2))                             });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtOutputsZeroLengthCodeSpan,The following statement contains a magic number: ParseBlockTest("{@}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.EmptyCSharp().AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace)                                     )'                                 Factory.EmptyCSharp().AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                             designTimeParser: true'                             expectedErrors: new[]                             {                                 new RazorError(String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS' "}")' new SourceLocation(2' 0' 2))                             });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionDoesNotAcceptDotAfterAt,The following statement contains a magic number: ParseBlockTest("{@.}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.EmptyCSharp().AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace)                                     )'                                 Factory.Code(".").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                             designTimeParser: true'                             expectedErrors: new[]                             {                                 new RazorError(String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS' ".")' new SourceLocation(2' 0' 2))                             });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionDoesNotAcceptDotAfterAt,The following statement contains a magic number: ParseBlockTest("{@.}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.EmptyCSharp().AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace)                                     )'                                 Factory.Code(".").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                             designTimeParser: true'                             expectedErrors: new[]                             {                                 new RazorError(String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_CS' ".")' new SourceLocation(2' 0' 2))                             });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtAcceptsSingleSpaceOrNewlineAtDesignTime,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @" + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace)                                     )'                                 Factory.Code("\r\n").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                  /* designTimeParser */ true'                             new RazorError(RazorResources.ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS' 8' 1' 5));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpVerbatimBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpVerbatimBlockTest.cs,InnerImplicitExpressionWithOnlySingleAtAcceptsSingleSpaceOrNewlineAtDesignTime,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @" + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp().AsImplicitExpression(KeywordSet' acceptTrailingDot: true).Accepts(AcceptedCharacters.NonWhiteSpace)                                     )'                                 Factory.Code("\r\n").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                  /* designTimeParser */ true'                             new RazorError(RazorResources.ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS' 8' 1' 5));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperCorrectlyParsesHelperWithNoSpaceInBody,The following statement contains a magic number: ParseDocumentTest("@helper Foo(){@Bar()}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(){"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(){").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.EmptyCSharp().AsStatement()'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("Bar()")                                      .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                      .Accepts(AcceptedCharacters.NonWhiteSpace))'                              Factory.EmptyCSharp().AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperCorrectlyParsesHelperWithNoSpaceInBody,The following statement contains a magic number: ParseDocumentTest("@helper Foo(){@Bar()}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(){"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(){").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.EmptyCSharp().AsStatement()'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("Bar()")                                      .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                      .Accepts(AcceptedCharacters.NonWhiteSpace))'                              Factory.EmptyCSharp().AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperCorrectlyParsesIncompleteHelperPreceedingCodeBlock,The following statement contains a magic number: ParseDocumentTest("@helper" + Environment.NewLine                              + "@{}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("helper"))'                      Factory.Markup("\r\n")'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp().AsStatement()'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperCorrectlyParsesIncompleteHelperPreceedingCodeBlock,The following statement contains a magic number: ParseDocumentTest("@helper" + Environment.NewLine                              + "@{}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("helper"))'                      Factory.Markup("\r\n")'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp().AsStatement()'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperRequiresSpaceBeforeSignature,The following statement contains a magic number: ParseDocumentTest("@helper{"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("helper"))'                      Factory.Markup("{"))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "{"))'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperRequiresSpaceBeforeSignature,The following statement contains a magic number: ParseDocumentTest("@helper{"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("helper"))'                      Factory.Markup("{"))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "{"))'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@helper () {"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("() {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("() {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.EmptyCSharp()                                     .AsStatement()                                     .AutoCompleteWith("}"))))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                          "helper"' "}"' "{")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@helper () {"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("() {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("() {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.EmptyCSharp()                                     .AsStatement()                                     .AutoCompleteWith("}"))))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                          "helper"' "}"' "{")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@helper () {"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("() {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("() {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.EmptyCSharp()                                     .AsStatement()                                     .AutoCompleteWith("}"))))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                          "helper"' "}"' "{")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@helper () {"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("() {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("() {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.EmptyCSharp()                                     .AsStatement()                                     .AutoCompleteWith("}"))))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                          "helper"' "}"' "{")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp().Hidden()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp().Hidden()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp().Hidden()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyCSharp().Hidden()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementMarksHelperSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseDocumentTest("@helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("helper").Accepts(AcceptedCharacters.Any)))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementMarksHelperSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseDocumentTest("@helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("helper").Accepts(AcceptedCharacters.Any)))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      \r\n").Hidden())'                      Factory.Markup(@"    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      \r\n").Hidden())'                      Factory.Markup(@"    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      \r\n").Hidden())'                      Factory.Markup(@"    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      \r\n").Hidden())'                      Factory.Markup(@"    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    \r\n").Hidden())'                      Factory.Markup("    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    \r\n").Hidden())'                      Factory.Markup("    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    \r\n").Hidden())'                      Factory.Markup("    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    \r\n").Hidden())'                      Factory.Markup("    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(                      RazorResources.ParseError_UnterminatedHelperParameterList'                      11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(                      RazorResources.ParseError_UnterminatedHelperParameterList'                      11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(                      RazorResources.ParseError_UnterminatedHelperParameterList'                      11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(                      RazorResources.ParseError_UnterminatedHelperParameterList'                      11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo)    " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)    \r\n").Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperParameters' "{")'                      29' 1' 0));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo)    " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)    \r\n").Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperParameters' "{")'                      29' 1' 0));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo)    " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)    \r\n").Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperParameters' "{")'                      29' 1' 0));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementContinuesParsingHelperUntilEOF,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo) {    " + Environment.NewLine                              + "    <p>Foo</p>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n")                                     .AsStatement()                                     .AutoCompleteWith("}")'                              new MarkupBlock(                                  Factory.Markup("    <p>Foo</p>").Accepts(AcceptedCharacters.None))'                              Factory.EmptyCSharp().AsStatement())))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                          "helper"' "}"' "{")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementContinuesParsingHelperUntilEOF,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo) {    " + Environment.NewLine                              + "    <p>Foo</p>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n")                                     .AsStatement()                                     .AutoCompleteWith("}")'                              new MarkupBlock(                                  Factory.Markup("    <p>Foo</p>").Accepts(AcceptedCharacters.None))'                              Factory.EmptyCSharp().AsStatement())))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                          "helper"' "}"' "{")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithEmbeddedCode,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo) {    " + Environment.NewLine                              + "    <p>@foo</p>" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("    <p>")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("foo")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.EmptyCSharp().AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithEmbeddedCode,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo) {    " + Environment.NewLine                              + "    <p>@foo</p>" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("    <p>")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("foo")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.EmptyCSharp().AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithNewlinesBetweenCloseParenAndOpenBrace,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo)" + Environment.NewLine                              + Environment.NewLine                              + Environment.NewLine                              + Environment.NewLine                              + "{    " + Environment.NewLine                              + "    <p>@foo</p>" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)\r\n\r\n\r\n\r\n{"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)\r\n\r\n\r\n\r\n{").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup(@"    <p>")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("foo")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.EmptyCSharp().AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithNewlinesBetweenCloseParenAndOpenBrace,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo)" + Environment.NewLine                              + Environment.NewLine                              + Environment.NewLine                              + Environment.NewLine                              + "{    " + Environment.NewLine                              + "    <p>@foo</p>" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)\r\n\r\n\r\n\r\n{"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)\r\n\r\n\r\n\r\n{").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup(@"    <p>")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("foo")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.EmptyCSharp().AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementGivesWhitespaceAfterOpenBraceToMarkupInDesignMode,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo) {    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n    ")                                     .AsStatement()                                     .AutoCompleteWith("}"))))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                               "helper"' "}"' "{")'                          new SourceLocation(1' 0' 1))                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperStatementGivesWhitespaceAfterOpenBraceToMarkupInDesignMode,The following statement contains a magic number: ParseDocumentTest("@helper Foo(string foo) {    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("    \r\n    ")                                     .AsStatement()                                     .AutoCompleteWith("}"))))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                               "helper"' "}"' "{")'                          new SourceLocation(1' 0' 1))                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest(@"@helper Foo(string foo) {" + Environment.NewLine                              + "    @helper Bar(string baz) {" + Environment.NewLine                              + "    }" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code(@"Bar(string baz) {").Hidden().Accepts(AcceptedCharacters.None)'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement())'                                  Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                              Factory.Code("\r\n").AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Helpers_Cannot_Be_Nested' 38' 1' 11)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest(@"@helper Foo(string foo) {" + Environment.NewLine                              + "    @helper Bar(string baz) {" + Environment.NewLine                              + "    }" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code(@"Bar(string baz) {").Hidden().Accepts(AcceptedCharacters.None)'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement())'                                  Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                              Factory.Code("\r\n").AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Helpers_Cannot_Be_Nested' 38' 1' 11)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest(@"@helper Foo(string foo) {" + Environment.NewLine                              + "    @helper Bar(string baz) {" + Environment.NewLine                              + "    }" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code(@"Bar(string baz) {").Hidden().Accepts(AcceptedCharacters.None)'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement())'                                  Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                              Factory.Code("\r\n").AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Helpers_Cannot_Be_Nested' 38' 1' 11)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest(@"@helper Foo(string foo) {" + Environment.NewLine                              + "    @helper Bar(string baz) {" + Environment.NewLine                              + "    }" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code(@"Bar(string baz) {").Hidden().Accepts(AcceptedCharacters.None)'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement())'                                  Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                              Factory.Code("\r\n").AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Helpers_Cannot_Be_Nested' 38' 1' 11)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest(@"@helper Foo(string foo) {" + Environment.NewLine                              + "    @helper Bar(string baz) {" + Environment.NewLine                              + "    }" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code(@"Bar(string baz) {").Hidden().Accepts(AcceptedCharacters.None)'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement())'                                  Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                              Factory.Code("\r\n").AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Helpers_Cannot_Be_Nested' 38' 1' 11)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest(@"@helper Foo(string foo) {" + Environment.NewLine                              + "    @helper Bar(string baz) {" + Environment.NewLine                              + "    }" + Environment.NewLine                              + "}"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo) {"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code(@"Foo(string foo) {").Hidden().Accepts(AcceptedCharacters.None)'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz) {"' 39' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code(@"Bar(string baz) {").Hidden().Accepts(AcceptedCharacters.None)'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement())'                                  Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                              Factory.Code("\r\n").AsStatement())'                          Factory.Code("}").Hidden().Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Helpers_Cannot_Be_Nested' 38' 1' 11)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockCapturesNewlineImmediatelyFollowing,The following statement contains a magic number: ParseDocumentTest("@section" + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("section\r\n")))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      10' 1' 0));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockCapturesWhitespaceToEndOfLineInSectionStatementMissingOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section Foo         " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo         \r\n"))'                      Factory.Markup("    "))'                  new RazorError(RazorResources.ParseError_MissingOpenBraceAfterSection' 12' 0' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockCapturesWhitespaceToEndOfLineInSectionStatementMissingOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section Foo         " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo         \r\n"))'                      Factory.Markup("    "))'                  new RazorError(RazorResources.ParseError_MissingOpenBraceAfterSection' 12' 0' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockCapturesWhitespaceToEndOfLineInSectionStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@section         " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("section         \r\n"))'                      Factory.Markup("    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      23' 1' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockCapturesWhitespaceToEndOfLineInSectionStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@section         " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("section         \r\n"))'                      Factory.Markup("    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      23' 1' 4));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockReportsErrorAndTerminatesSectionBlockIfKeywordNotFollowedByIdentifierStartCharacter,The following statement contains a magic number: ParseDocumentTest("@section 9 { <p>Foo</p> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("section "))'                      Factory.Markup("9 { <p>Foo</p> }"))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "9"))'                      9' 0' 9));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockReportsErrorAndTerminatesSectionBlockIfKeywordNotFollowedByIdentifierStartCharacter,The following statement contains a magic number: ParseDocumentTest("@section 9 { <p>Foo</p> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("section "))'                      Factory.Markup("9 { <p>Foo</p> }"))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "9"))'                      9' 0' 9));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockReportsErrorAndTerminatesSectionBlockIfNameNotFollowedByOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section foo-bar { <p>Foo</p> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo"))'                      Factory.Markup("-bar { <p>Foo</p> }"))'                  new RazorError(RazorResources.ParseError_MissingOpenBraceAfterSection' 12' 0' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockReportsErrorAndTerminatesSectionBlockIfNameNotFollowedByOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section foo-bar { <p>Foo</p> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo"))'                      Factory.Markup("-bar { <p>Foo</p> }"))'                  new RazorError(RazorResources.ParseError_MissingOpenBraceAfterSection' 12' 0' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParserOutputsErrorOnNestedSections,The following statement contains a magic number: ParseDocumentTest("@section foo { @section bar { <p>Foo</p> } }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" ")'                              new SectionBlock(new SectionCodeGenerator("bar")'                                  Factory.CodeTransition()'                                  Factory.MetaCode("section bar {")                                         .AutoCompleteWith(null' atEndOfSpan: true)'                                  new MarkupBlock(                                      Factory.Markup(" <p>Foo</p> "))'                                  Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                              Factory.Markup(" "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Sections_Cannot_Be_Nested'                          RazorResources.SectionExample_CS)'                      23' 0' 23));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParserOutputsErrorOnNestedSections,The following statement contains a magic number: ParseDocumentTest("@section foo { @section bar { <p>Foo</p> } }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" ")'                              new SectionBlock(new SectionCodeGenerator("bar")'                                  Factory.CodeTransition()'                                  Factory.MetaCode("section bar {")                                         .AutoCompleteWith(null' atEndOfSpan: true)'                                  new MarkupBlock(                                      Factory.Markup(" <p>Foo</p> "))'                                  Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                              Factory.Markup(" "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Sections_Cannot_Be_Nested'                          RazorResources.SectionExample_CS)'                      23' 0' 23));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockHandlesEOFAfterOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section foo {"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo {")                                 .AutoCompleteWith("}"' atEndOfSpan: true)'                          new MarkupBlock()))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_X' "}")'                      14' 0' 14));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockHandlesEOFAfterOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section foo {"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo {")                                 .AutoCompleteWith("}"' atEndOfSpan: true)'                          new MarkupBlock()))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_X' "}")'                      14' 0' 14));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockHandlesUnterminatedSection,The following statement contains a magic number: ParseDocumentTest("@section foo { <p>Foo{}</p>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo {")                                 .AutoCompleteWith("}"' atEndOfSpan: true)'                          new MarkupBlock(                  // Need to provide the markup span as fragments' since the parser will split the {} into separate symbols.                              Factory.Markup(" <p>Foo"' "{"' "}"' "</p>"))))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_X' "}")'                      27' 0' 27));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockHandlesUnterminatedSection,The following statement contains a magic number: ParseDocumentTest("@section foo { <p>Foo{}</p>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo {")                                 .AutoCompleteWith("}"' atEndOfSpan: true)'                          new MarkupBlock(                  // Need to provide the markup span as fragments' since the parser will split the {} into separate symbols.                              Factory.Markup(" <p>Foo"' "{"' "}"' "</p>"))))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_X' "}")'                      27' 0' 27));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockReportsErrorAndAcceptsWhitespaceToEndOfLineIfSectionNotFollowedByOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section foo      " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo      \r\n")))'                  new RazorError(RazorResources.ParseError_MissingOpenBraceAfterSection' 12' 0' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSectionTest.cs,ParseSectionBlockReportsErrorAndAcceptsWhitespaceToEndOfLineIfSectionNotFollowedByOpenBrace,The following statement contains a magic number: ParseDocumentTest("@section foo      " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section foo      \r\n")))'                  new RazorError(RazorResources.ParseError_MissingOpenBraceAfterSection' 12' 0' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockMethodProducesErrorIfWhitespaceBetweenTransitionAndBlockStartInEmbeddedExpression,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @   {}" + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp()                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))'                                 Factory.Code("   {}\r\n").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(RazorResources.ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS' 8' 1' 5));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockMethodProducesErrorIfWhitespaceBetweenTransitionAndBlockStartInEmbeddedExpression,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @   {}" + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp()                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))'                                 Factory.Code("   {}\r\n").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(RazorResources.ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_CS' 8' 1' 5));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockMethodProducesErrorIfEOFAfterTransitionInEmbeddedExpression,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp()                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(RazorResources.ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock' 8' 1' 5)'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")'                                 SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockMethodProducesErrorIfEOFAfterTransitionInEmbeddedExpression,The following statement contains a magic number: ParseBlockTest("{" + Environment.NewLine                           + "    @"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code("\r\n    ").AsStatement()'                                 new ExpressionBlock(                                     Factory.CodeTransition()'                                     Factory.EmptyCSharp()                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(RazorResources.ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock' 8' 1' 5)'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' RazorResources.BlockName_Code' "}"' "{")'                                 SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockCorrectlyHandlesInCorrectTransitionsIfImplicitExpressionParensUnclosed,The following statement contains a magic number: ParseBlockTest("Href(" + Environment.NewLine                           + "<h1>@Html.Foo(Bar);</h1>" + Environment.NewLine'                             new ExpressionBlock(                                 Factory.Code("Href(\r\n")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(4' 0' 4)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockCorrectlyHandlesInCorrectTransitionsIfImplicitExpressionParensUnclosed,The following statement contains a magic number: ParseBlockTest("Href(" + Environment.NewLine                           + "<h1>@Html.Foo(Bar);</h1>" + Environment.NewLine'                             new ExpressionBlock(                                 Factory.Code("Href(\r\n")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(4' 0' 4)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtEOFIfParenInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo(Bar(Baz)" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "Boz"'                             new ExpressionBlock(                                 Factory.Code("Foo(Bar(Baz)\r\nBiz\r\nBoz")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                                          "("' ")")'                                            new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtEOFIfParenInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo(Bar(Baz)" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "Boz"'                             new ExpressionBlock(                                 Factory.Code("Foo(Bar(Baz)\r\nBiz\r\nBoz")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                                          "("' ")")'                                            new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtMarkupIfParenInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo(Bar(Baz)" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "<html>" + Environment.NewLine                           + "Boz" + Environment.NewLine                           + "</html>"'                             new ExpressionBlock(                                 Factory.Code("Foo(Bar(Baz)\r\nBiz\r\n")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                                          "("' ")")'                                            new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtMarkupIfParenInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo(Bar(Baz)" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "<html>" + Environment.NewLine                           + "Boz" + Environment.NewLine                           + "</html>"'                             new ExpressionBlock(                                 Factory.Code("Foo(Bar(Baz)\r\nBiz\r\n")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                                          "("' ")")'                                            new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtEOFIfBracketInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo[Bar[Baz]" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "Boz"'                             new ExpressionBlock(                                 Factory.Code("Foo[Bar[Baz]\r\nBiz\r\nBoz")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "["' "]")'                                 new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtEOFIfBracketInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo[Bar[Baz]" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "Boz"'                             new ExpressionBlock(                                 Factory.Code("Foo[Bar[Baz]\r\nBiz\r\nBoz")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "["' "]")'                                 new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtMarkupIfBracketInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo[Bar[Baz]" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "<b>" + Environment.NewLine                           + "Boz" + Environment.NewLine                           + "</b>"'                             new ExpressionBlock(                                 Factory.Code("Foo[Bar[Baz]\r\nBiz\r\n")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "["' "]")'                                 new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockShouldReportErrorAndTerminateAtMarkupIfBracketInImplicitExpressionUnclosed,The following statement contains a magic number: ParseBlockTest("Foo[Bar[Baz]" + Environment.NewLine                           + "Biz" + Environment.NewLine                           + "<b>" + Environment.NewLine                           + "Boz" + Environment.NewLine                           + "</b>"'                             new ExpressionBlock(                                 Factory.Code("Foo[Bar[Baz]\r\nBiz\r\n")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "["' "]")'                                 new SourceLocation(3' 0' 3)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfElseBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("if(foo) { baz(); } else { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("if(foo) { baz(); } else { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "else"' '}'' '{')'                                 new SourceLocation(19' 0' 19)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfElseBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("if(foo) { baz(); } else { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("if(foo) { baz(); } else { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "else"' '}'' '{')'                                 new SourceLocation(19' 0' 19)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfElseIfBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("if(foo) { baz(); } else if { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("if(foo) { baz(); } else if { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "else if"' '}'' '{')'                                 new SourceLocation(19' 0' 19)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfElseIfBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("if(foo) { baz(); } else if { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("if(foo) { baz(); } else if { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "else if"' '}'' '{')'                                 new SourceLocation(19' 0' 19)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfCatchBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("try { baz(); } catch(Foo) { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("try { baz(); } catch(Foo) { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "catch"' '}'' '{')'                                 new SourceLocation(15' 0' 15)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfCatchBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("try { baz(); } catch(Foo) { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("try { baz(); } catch(Foo) { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "catch"' '}'' '{')'                                 new SourceLocation(15' 0' 15)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfFinallyBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("try { baz(); } finally { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("try { baz(); } finally { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "finally"' '}'' '{')'                                 new SourceLocation(15' 0' 15)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockReportsErrorIfFinallyBlockUnterminatedAtEOF,The following statement contains a magic number: ParseBlockTest("try { baz(); } finally { var foo = bar; if(foo != null) { bar(); } "'                             new StatementBlock(                                 Factory.Code("try { baz(); } finally { var foo = bar; if(foo != null) { bar(); } ").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF'                                               "finally"' '}'' '{')'                                 new SourceLocation(15' 0' 15)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The following statement contains a magic number: ParseBlockTest("if(foo) <p>Bar</p> else if(bar) <p>Baz</p> else <p>Boz</p>"'                             new StatementBlock(                                 Factory.Code("if(foo) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else if(bar) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Baz</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Boz</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(expectedMessage' 8' 0' 8)'                             new RazorError(expectedMessage' 32' 0' 32)'                             new RazorError(expectedMessage' 48' 0' 48));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The following statement contains a magic number: ParseBlockTest("if(foo) <p>Bar</p> else if(bar) <p>Baz</p> else <p>Boz</p>"'                             new StatementBlock(                                 Factory.Code("if(foo) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else if(bar) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Baz</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Boz</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(expectedMessage' 8' 0' 8)'                             new RazorError(expectedMessage' 32' 0' 32)'                             new RazorError(expectedMessage' 48' 0' 48));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The following statement contains a magic number: ParseBlockTest("if(foo) <p>Bar</p> else if(bar) <p>Baz</p> else <p>Boz</p>"'                             new StatementBlock(                                 Factory.Code("if(foo) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else if(bar) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Baz</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Boz</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(expectedMessage' 8' 0' 8)'                             new RazorError(expectedMessage' 32' 0' 32)'                             new RazorError(expectedMessage' 48' 0' 48));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The following statement contains a magic number: ParseBlockTest("if(foo) <p>Bar</p> else if(bar) <p>Baz</p> else <p>Boz</p>"'                             new StatementBlock(                                 Factory.Code("if(foo) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else if(bar) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Baz</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Boz</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(expectedMessage' 8' 0' 8)'                             new RazorError(expectedMessage' 32' 0' 32)'                             new RazorError(expectedMessage' 48' 0' 48));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The following statement contains a magic number: ParseBlockTest("if(foo) <p>Bar</p> else if(bar) <p>Baz</p> else <p>Boz</p>"'                             new StatementBlock(                                 Factory.Code("if(foo) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else if(bar) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Baz</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Boz</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(expectedMessage' 8' 0' 8)'                             new RazorError(expectedMessage' 32' 0' 32)'                             new RazorError(expectedMessage' 48' 0' 48));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockRequiresControlFlowStatementsToHaveBraces,The following statement contains a magic number: ParseBlockTest("if(foo) <p>Bar</p> else if(bar) <p>Baz</p> else <p>Boz</p>"'                             new StatementBlock(                                 Factory.Code("if(foo) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else if(bar) ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Baz</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("else ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Boz</p>").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.EmptyCSharp().AsStatement()                                 )'                             new RazorError(expectedMessage' 8' 0' 8)'                             new RazorError(expectedMessage' 32' 0' 32)'                             new RazorError(expectedMessage' 48' 0' 48));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockIncludesUnexpectedCharacterInSingleStatementControlFlowStatementError,The following statement contains a magic number: ParseBlockTest("if(foo)) { var bar = foo; }"'                             new StatementBlock(                                 Factory.Code("if(foo)) { var bar = foo; }").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_SingleLine_ControlFlowStatements_Not_Allowed'                                               "{"' ")")'                                 new SourceLocation(7' 0' 7)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockIncludesUnexpectedCharacterInSingleStatementControlFlowStatementError,The following statement contains a magic number: ParseBlockTest("if(foo)) { var bar = foo; }"'                             new StatementBlock(                                 Factory.Code("if(foo)) { var bar = foo; }").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_SingleLine_ControlFlowStatements_Not_Allowed'                                               "{"' ")")'                                 new SourceLocation(7' 0' 7)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockOutputsErrorIfAtSignFollowedByLessThanSignAtStatementStart,The following statement contains a magic number: ParseBlockTest("if(foo) { @<p>Bar</p> }"'                             new StatementBlock(                                 Factory.Code("if(foo) {").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup(" ")'                                     Factory.MarkupTransition()'                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("}").AsStatement()                                 )'                             new RazorError(                                 RazorResources.ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start'                                 10' 0' 10));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockOutputsErrorIfAtSignFollowedByLessThanSignAtStatementStart,The following statement contains a magic number: ParseBlockTest("if(foo) { @<p>Bar</p> }"'                             new StatementBlock(                                 Factory.Code("if(foo) {").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup(" ")'                                     Factory.MarkupTransition()'                                     Factory.Markup("<p>Bar</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("}").AsStatement()                                 )'                             new RazorError(                                 RazorResources.ParseError_AtInCode_Must_Be_Followed_By_Colon_Paren_Or_Identifier_Start'                                 10' 0' 10));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesIfBlockAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("if(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("if(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesIfBlockAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("if(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("if(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesForeachBlockAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("foreach(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("foreach(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(7' 0' 7)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesForeachBlockAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("foreach(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("foreach(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(7' 0' 7)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesWhileClauseInDoStatementAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("do { } while(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("do { } while(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(12' 0' 12)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesWhileClauseInDoStatementAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("do { } while(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("do { } while(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(12' 0' 12)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesUsingBlockAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("using(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("using(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(5' 0' 5)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesUsingBlockAtEOLWhenRecoveringFromMissingCloseParen,The following statement contains a magic number: ParseBlockTest("using(foo bar" + Environment.NewLine                           + "baz"'                             new StatementBlock(                                 Factory.Code("using(foo bar\r\n").AsStatement()                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(5' 0' 5)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockResumesIfStatementAfterOpenParen,The following statement contains a magic number: ParseBlockTest("if(" + Environment.NewLine                           + "else { <p>Foo</p> }"'                             new StatementBlock(                                 Factory.Code("if(\r\nelse {").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup(" <p>Foo</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("}").AsStatement().Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockResumesIfStatementAfterOpenParen,The following statement contains a magic number: ParseBlockTest("if(" + Environment.NewLine                           + "else { <p>Foo</p> }"'                             new StatementBlock(                                 Factory.Code("if(\r\nelse {").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup(" <p>Foo</p> ").Accepts(AcceptedCharacters.None)                                     )'                                 Factory.Code("}").AsStatement().Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(                                 String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                               "("' ")")'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesNormalCSharpStringsAtEOLIfEndQuoteMissing,The following statement contains a magic number: SingleSpanBlockTest("if(foo) {" + Environment.NewLine                                + "    var p = \"foo bar baz" + Environment.NewLine                                + ";" + Environment.NewLine                                + "}"'                                  BlockType.Statement' SpanKind.Code'                                  new RazorError(RazorResources.ParseError_Unterminated_String_Literal' 23' 1' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesNormalCSharpStringsAtEOLIfEndQuoteMissing,The following statement contains a magic number: SingleSpanBlockTest("if(foo) {" + Environment.NewLine                                + "    var p = \"foo bar baz" + Environment.NewLine                                + ";" + Environment.NewLine                                + "}"'                                  BlockType.Statement' SpanKind.Code'                                  new RazorError(RazorResources.ParseError_Unterminated_String_Literal' 23' 1' 12));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesNormalStringAtEndOfFile,The following statement contains a magic number: SingleSpanBlockTest("if(foo) { var foo = \"blah blah blah blah blah"' BlockType.Statement' SpanKind.Code'                                  new RazorError(RazorResources.ParseError_Unterminated_String_Literal' 20' 0' 20)'                                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "if"' '}'' '{')' SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesNormalStringAtEndOfFile,The following statement contains a magic number: SingleSpanBlockTest("if(foo) { var foo = \"blah blah blah blah blah"' BlockType.Statement' SpanKind.Code'                                  new RazorError(RazorResources.ParseError_Unterminated_String_Literal' 20' 0' 20)'                                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "if"' '}'' '{')' SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesVerbatimStringAtEndOfFile,The following statement contains a magic number: SingleSpanBlockTest("if(foo) { var foo = @\"blah " + Environment.NewLine                                + "blah; " + Environment.NewLine                                + "<p>Foo</p>" + Environment.NewLine                                + "blah " + Environment.NewLine                                + "blah"'                                  BlockType.Statement' SpanKind.Code'                                  new RazorError(RazorResources.ParseError_Unterminated_String_Literal' 20' 0' 20)'                                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "if"' '}'' '{')' SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockTerminatesVerbatimStringAtEndOfFile,The following statement contains a magic number: SingleSpanBlockTest("if(foo) { var foo = @\"blah " + Environment.NewLine                                + "blah; " + Environment.NewLine                                + "<p>Foo</p>" + Environment.NewLine                                + "blah " + Environment.NewLine                                + "blah"'                                  BlockType.Statement' SpanKind.Code'                                  new RazorError(RazorResources.ParseError_Unterminated_String_Literal' 20' 0' 20)'                                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "if"' '}'' '{')' SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockCorrectlyParsesMarkupIncorrectyAssumedToBeWithinAStatement,The following statement contains a magic number: ParseBlockTest("if(foo) {" + Environment.NewLine                           + "    var foo = \"foo bar baz" + Environment.NewLine                           + "    <p>Foo is @foo</p>" + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.Code("if(foo) {\r\n    var foo = \"foo bar baz\r\n    ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Foo is ")'                                     new ExpressionBlock(                                         Factory.CodeTransition()'                                         Factory.Code("foo")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                     Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                                 Factory.Code("}").AsStatement()                                 )'                             new RazorError(                                 RazorResources.ParseError_Unterminated_String_Literal'                                 25' 1' 14));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockCorrectlyParsesMarkupIncorrectyAssumedToBeWithinAStatement,The following statement contains a magic number: ParseBlockTest("if(foo) {" + Environment.NewLine                           + "    var foo = \"foo bar baz" + Environment.NewLine                           + "    <p>Foo is @foo</p>" + Environment.NewLine                           + "}"'                             new StatementBlock(                                 Factory.Code("if(foo) {\r\n    var foo = \"foo bar baz\r\n    ").AsStatement()'                                 new MarkupBlock(                                     Factory.Markup("<p>Foo is ")'                                     new ExpressionBlock(                                         Factory.CodeTransition()'                                         Factory.Code("foo")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                     Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                                 Factory.Code("}").AsStatement()                                 )'                             new RazorError(                                 RazorResources.ParseError_Unterminated_String_Literal'                                 25' 1' 14));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockCorrectlyRecoversFromMissingCloseParenInExpressionWithinCode,The following statement contains a magic number: ParseBlockTest(@"{String.Format(<html></html>}"'                  new StatementBlock(                      Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                      Factory.Code("String.Format(")                             .AsStatement()'                      new MarkupBlock(                          Factory.Markup("<html></html>").Accepts(AcceptedCharacters.None))'                      Factory.EmptyCSharp().AsStatement()'                      Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                  expectedErrors: new[] {                      new RazorError(                          String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")'                          14' 0' 14)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpErrorTest.cs,ParseBlockCorrectlyRecoversFromMissingCloseParenInExpressionWithinCode,The following statement contains a magic number: ParseBlockTest(@"{String.Format(<html></html>}"'                  new StatementBlock(                      Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                      Factory.Code("String.Format(")                             .AsStatement()'                      new MarkupBlock(                          Factory.Markup("<html></html>").Accepts(AcceptedCharacters.None))'                      Factory.EmptyCSharp().AsStatement()'                      Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                  expectedErrors: new[] {                      new RazorError(                          String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")'                          14' 0' 14)                  });
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpImplicitExpressionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpImplicitExpressionTest.cs,ParseBlockStopsBalancingParenthesesAtEOF,The following statement contains a magic number: ImplicitExpressionTest("foo(()"' "foo(()"'                                     acceptedCharacters: AcceptedCharacters.Any'                                     errors: new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' new SourceLocation(4' 0' 4)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpImplicitExpressionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpImplicitExpressionTest.cs,ParseBlockStopsBalancingParenthesesAtEOF,The following statement contains a magic number: ImplicitExpressionTest("foo(()"' "foo(()"'                                     acceptedCharacters: AcceptedCharacters.Any'                                     errors: new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' new SourceLocation(4' 0' 4)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,ParseInheritsStatementMarksInheritsSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseBlockTest("inherits"'                             new DirectiveBlock(                                 Factory.MetaCode("inherits").Accepts(AcceptedCharacters.Any)                                 )'                             new RazorError(                                 RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName'                                 new SourceLocation(8' 0' 8)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,ParseInheritsStatementMarksInheritsSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseBlockTest("inherits"'                             new DirectiveBlock(                                 Factory.MetaCode("inherits").Accepts(AcceptedCharacters.Any)                                 )'                             new RazorError(                                 RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName'                                 new SourceLocation(8' 0' 8)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,InheritsBlockOutputsErrorIfInheritsNotFollowedByTypeButAcceptsEntireLineAsCode,The following statement contains a magic number: ParseBlockTest("inherits                " + Environment.NewLine                           + "foo"'                             new DirectiveBlock(                                 Factory.MetaCode("inherits ").Accepts(AcceptedCharacters.None)'                                 Factory.Code("               \r\n")                                     .AsBaseType(String.Empty)                                 )'                             new RazorError(RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName' 24' 0' 24));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,InheritsBlockOutputsErrorIfInheritsNotFollowedByTypeButAcceptsEntireLineAsCode,The following statement contains a magic number: ParseBlockTest("inherits                " + Environment.NewLine                           + "foo"'                             new DirectiveBlock(                                 Factory.MetaCode("inherits ").Accepts(AcceptedCharacters.None)'                                 Factory.Code("               \r\n")                                     .AsBaseType(String.Empty)                                 )'                             new RazorError(RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName' 24' 0' 24));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,NamespaceImportInsideCodeBlockCausesError,The following statement contains a magic number: ParseBlockTest("{ using Foo.Bar.Baz; var foo = bar; }"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code(" using Foo.Bar.Baz; var foo = bar; ").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(                                 RazorResources.ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,NamespaceImportInsideCodeBlockCausesError,The following statement contains a magic number: ParseBlockTest("{ using Foo.Bar.Baz; var foo = bar; }"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code(" using Foo.Bar.Baz; var foo = bar; ").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(                                 RazorResources.ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,TypeAliasInsideCodeBlockIsNotHandledSpecially,The following statement contains a magic number: ParseBlockTest("{ using Foo = Bar.Baz; var foo = bar; }"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code(" using Foo = Bar.Baz; var foo = bar; ").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(                                 RazorResources.ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpSpecialBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpSpecialBlockTest.cs,TypeAliasInsideCodeBlockIsNotHandledSpecially,The following statement contains a magic number: ParseBlockTest("{ using Foo = Bar.Baz; var foo = bar; }"'                             new StatementBlock(                                 Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                                 Factory.Code(" using Foo = Bar.Baz; var foo = bar; ").AsStatement()'                                 Factory.MetaCode("}").Accepts(AcceptedCharacters.None)                                 )'                             new RazorError(                                 RazorResources.ParseError_NamespaceImportAndTypeAlias_Cannot_Exist_Within_CodeBlock'                                 new SourceLocation(2' 0' 2)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,NestedCodeBlockWithAtCausesError,The following statement contains a magic number: ParseBlockTest("if (true) { @if(false) { } }"'                             new StatementBlock(                                 Factory.Code("if (true) { ").AsStatement()'                                 new StatementBlock(                                     Factory.CodeTransition()'                                     Factory.Code("if(false) { }").AsStatement()                                     )'                                 Factory.Code(" }").AsStatement())'                             new RazorError(                                 String.Format(RazorResources.ParseError_Unexpected_Keyword_After_At'                                               "if")'                                 new SourceLocation(13' 0' 13)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,NestedCodeBlockWithAtCausesError,The following statement contains a magic number: ParseBlockTest("if (true) { @if(false) { } }"'                             new StatementBlock(                                 Factory.Code("if (true) { ").AsStatement()'                                 new StatementBlock(                                     Factory.CodeTransition()'                                     Factory.Code("if(false) { }").AsStatement()                                     )'                                 Factory.Code(" }").AsStatement())'                             new RazorError(                                 String.Format(RazorResources.ParseError_Unexpected_Keyword_After_At'                                               "if")'                                 new SourceLocation(13' 0' 13)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesParenBalancingAtEOF,The following statement contains a magic number: ImplicitExpressionTest("Html.En(code()"' "Html.En(code()"'                                     AcceptedCharacters.Any'                                     new RazorError(                                         String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                                       "("' ")")'                                         new SourceLocation(8' 0' 8)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesParenBalancingAtEOF,The following statement contains a magic number: ImplicitExpressionTest("Html.En(code()"' "Html.En(code()"'                                     AcceptedCharacters.Any'                                     new RazorError(                                         String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF'                                                       "("' ")")'                                         new SourceLocation(8' 0' 8)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockHasErrorsIfNamespaceImportMissingSemicolon,The following statement contains a magic number: NamespaceImportTest("using Foo.Bar.Baz"' " Foo.Bar.Baz"' acceptedCharacters: AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace' location: new SourceLocation(17' 0' 17));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockHasErrorsIfNamespaceImportMissingSemicolon,The following statement contains a magic number: NamespaceImportTest("using Foo.Bar.Baz"' " Foo.Bar.Baz"' acceptedCharacters: AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace' location: new SourceLocation(17' 0' 17));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockHasErrorsIfNamespaceAliasMissingSemicolon,The following statement contains a magic number: NamespaceImportTest("using Foo.Bar.Baz = FooBarBaz"' " Foo.Bar.Baz = FooBarBaz"' acceptedCharacters: AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace' location: new SourceLocation(29' 0' 29));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockHasErrorsIfNamespaceAliasMissingSemicolon,The following statement contains a magic number: NamespaceImportTest("using Foo.Bar.Baz = FooBarBaz"' " Foo.Bar.Baz = FooBarBaz"' acceptedCharacters: AcceptedCharacters.NonWhiteSpace | AcceptedCharacters.WhiteSpace' location: new SourceLocation(29' 0' 29));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesBlockCommentAtEndOfFile,The following statement contains a magic number: SingleSpanBlockTest(document' document' BlockType.Statement' SpanKind.Code'                                  new RazorError(String.Format(RazorResources.ParseError_BlockComment_Not_Terminated)' 24' 0' 24)'                                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "foreach"' '}'' '{')' SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParseBlockTerminatesBlockCommentAtEndOfFile,The following statement contains a magic number: SingleSpanBlockTest(document' document' BlockType.Statement' SpanKind.Code'                                  new RazorError(String.Format(RazorResources.ParseError_BlockComment_Not_Terminated)' 24' 0' 24)'                                  new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "foreach"' '}'' '{')' SourceLocation.Zero));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.CSharp,CSharpBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CSharp\CSharpBlockTest.cs,ParsersCanNestRecursively,The following statement contains a magic number: ParseBlockTest("foreach(var c in db.Categories) {" + Environment.NewLine                           + "            <div>" + Environment.NewLine                           + "                <h1>@c.Name</h1>" + Environment.NewLine                           + "                <ul>" + Environment.NewLine                           + "                    @foreach(var p in c.Products) {" + Environment.NewLine                           + "                        <li><a href=\"@Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })\">@p.Name</a></li>" + Environment.NewLine                           + "                    }" + Environment.NewLine                           + "                </ul>" + Environment.NewLine                           + "            </div>" + Environment.NewLine                           + "        }"'                  new StatementBlock(                      Factory.Code("foreach(var c in db.Categories) {\r\n").AsStatement()'                      new MarkupBlock(                          Factory.Markup("            <div>\r\n                <h1>")'                          new ExpressionBlock(                              Factory.CodeTransition()'                              Factory.Code("c.Name")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          Factory.Markup("</h1>\r\n                <ul>\r\n")'                          new StatementBlock(                              Factory.Code(@"                    ").AsStatement()'                              Factory.CodeTransition()'                              Factory.Code("foreach(var p in c.Products) {\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("                        <li><a")'                                  new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 193' 5' 30)' new LocationTagged<string>("\""' 256' 5' 93))'                                      Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                                      new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 200' 5' 37)' 200' 5' 37)'                                          new ExpressionBlock(                                              Factory.CodeTransition()'                                              Factory.Code("Html.ActionUrl(\"Products\"' \"Detail\"' new { id = p.Id })")                                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                     .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                      Factory.Markup("\"").With(SpanCodeGenerator.Null))'                                  Factory.Markup(">")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("p.Name")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</a></li>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.Code("                    }\r\n").AsStatement().Accepts(AcceptedCharacters.None))'                          Factory.Markup("                </ul>\r\n            </div>\r\n")                                 .Accepts(AcceptedCharacters.None))'                      Factory.Code("        }").AsStatement().Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 12' 0' 12))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiPartLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href='Foo Bar Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 20' 0' 20))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,DoubleQuotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"Foo Bar Baz\" />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href=\""' 2' 0' 2)' suffix: new LocationTagged<string>("\""' 20' 0' 20))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 9' 0' 9)' value: new LocationTagged<string>("Foo"' 9' 0' 9)))'                          Factory.Markup(" Bar").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 12' 0' 12)' value: new LocationTagged<string>("Bar"' 13' 0' 13)))'                          Factory.Markup(" Baz").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(" "' 16' 0' 16)' value: new LocationTagged<string>("Baz"' 17' 0' 17)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedLiteralAttribute,The following statement contains a magic number: ParseBlockTest("<a href=Foo Bar Baz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href="' 2' 0' 2)' suffix: new LocationTagged<string>(String.Empty' 11' 0' 11))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("Foo").With(new LiteralAttributeCodeGenerator(prefix: new LocationTagged<string>(String.Empty' 8' 0' 8)' value: new LocationTagged<string>("Foo"' 8' 0' 8))))'                      Factory.Markup(" Bar Baz />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,SimpleExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 13' 0' 13))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,MultiValueExpressionAttribute,The following statement contains a magic number: ParseBlockTest("<a href='@foo bar @baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" bar").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(" "' 13' 0' 13)' new LocationTagged<string>("bar"' 14' 0' 14)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(" "' 17' 0' 17)' 18' 0' 18)'                              Factory.Markup(" ").With(SpanCodeGenerator.Null)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,VirtualPathAttributesWorkWithConditionalAttributes,The following statement contains a magic number: ParseBlockTest("<a href='@foo ~/Foo/Bar' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 23' 0' 23))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' 9' 0' 9)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup(" ~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(" "' 13' 0' 13)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 14' 0' 14)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInBlock,The following statement contains a magic number: ParseBlockTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,UnquotedAttributeWithCodeWithSpacesInDocument,The following statement contains a magic number: ParseDocumentTest("<input value=@foo />"'                  new MarkupBlock(                      Factory.Markup("<input")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "value"' prefix: new LocationTagged<string>(" value="' 6' 0' 6)' suffix: new LocationTagged<string>(String.Empty' 17' 0' 17))'                          Factory.Markup(" value=").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 13' 0' 13)' 13' 0' 13)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("foo")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlAttributeTest.cs,ConditionalAttributeCollapserDoesNotRemoveUrlAttributeValues,The following statement contains a magic number: EvaluateParseTree(rewritten'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator(name: "href"' prefix: new LocationTagged<string>(" href='"' 2' 0' 2)' suffix: new LocationTagged<string>("'"' 18' 0' 18))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/Bar/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/Bar/Baz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,SimpleUrlInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/Bar/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)                                 .Accepts(AcceptedCharacters.Any)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/Bar/Baz")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                          new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                              Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                              Factory.Markup("~/Foo/")                                      .WithEditorHints(EditorHints.VirtualPath)                                      .With(new LiteralAttributeCodeGenerator(                                          new LocationTagged<string>(String.Empty' 9' 0' 9)'                                          new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                              new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                                  new ExpressionBlock(                                      Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                      Factory.Code("id")                                             .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace)))'                              Factory.Markup("/Baz")                                     .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                              Factory.Markup("'").With(SpanCodeGenerator.Null))'                          Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo/@id/Baz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 22' 0' 22))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' 15' 0' 15)'                              new ExpressionBlock(                                  Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Baz")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 18' 0' 18)' new LocationTagged<string>("/Baz"' 18' 0' 18)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithExpressionsInAttributeInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href='~/Foo/@id/Baz' /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 17' 0' 17)' new LocationTagged<string>("'"' 37' 0' 37))'                                  Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo/")                                         .WithEditorHints(EditorHints.VirtualPath)                                         .With(new LiteralAttributeCodeGenerator(                                             new LocationTagged<string>(String.Empty' 24' 0' 24)'                                             new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 24' 0' 24)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' 30' 0' 30)'                                      new ExpressionBlock(                                          Factory.CodeTransition().Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                                 .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Baz")                                         .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 33' 0' 33)' new LocationTagged<string>("/Baz"' 33' 0' 33)))'                                  Factory.Markup("'").With(SpanCodeGenerator.Null))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlWithComplexCharactersInAttributeInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href='~/Foo+Bar:Baz(Biz)'Boz' />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href='"' 2' 0' 2)' new LocationTagged<string>("'"' 31' 0' 31))'                          Factory.Markup(" href='").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 9' 0' 9)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 9' 0' 9)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupBlock,The following statement contains a magic number: ParseBlockTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupDocument,The following statement contains a magic number: ParseDocumentTest("<a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz />"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 2' 0' 2)' new LocationTagged<string>(String.Empty' 38' 0' 38))'                          Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                          Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                 .WithEditorHints(EditorHints.VirtualPath)                                 .With(new LiteralAttributeCodeGenerator(                                     new LocationTagged<string>(String.Empty' 8' 0' 8)'                                     new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 8' 0' 8)))'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 31' 0' 31)' 31' 0' 31)'                              new ExpressionBlock(                                  Factory.CodeTransition()                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Code("id")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                              .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 34' 0' 34)' new LocationTagged<string>("/Boz"' 34' 0' 34))))'                      Factory.Markup(" />")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlUrlAttributeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlUrlAttributeTest.cs,UrlInUnquotedAttributeValueInMarkupSection,The following statement contains a magic number: ParseDocumentTest("@section Foo { <a href=~/Foo+Bar:Baz(Biz)'Boz/@id/Boz /> }"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("Foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("section Foo {")                                 .AutoCompleteWith(null' atEndOfSpan: true)'                          new MarkupBlock(                              Factory.Markup(" <a")'                              new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href="' 17' 0' 17)' new LocationTagged<string>(String.Empty' 53' 0' 53))'                                  Factory.Markup(" href=").With(SpanCodeGenerator.Null)'                                  Factory.Markup("~/Foo+Bar:Baz(Biz)'Boz/")                                          .WithEditorHints(EditorHints.VirtualPath)                                          .With(new LiteralAttributeCodeGenerator(                                              new LocationTagged<string>(String.Empty' 23' 0' 23)'                                              new LocationTagged<SpanCodeGenerator>(new ResolveUrlCodeGenerator()' 23' 0' 23)))'                                  new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 46' 0' 46)' 46' 0' 46)'                                      new ExpressionBlock(                                          Factory.CodeTransition()                                                 .Accepts(AcceptedCharacters.None)'                                          Factory.Code("id")                                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                      .Accepts(AcceptedCharacters.NonWhiteSpace)))'                                  Factory.Markup("/Boz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 49' 0' 49)' new LocationTagged<string>("/Boz"' 49' 0' 49))))'                              Factory.Markup(" /> "))'                          Factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockHandlesOpenAngleWithProperTagFollowingIt,The following statement contains a magic number: ParseDocumentTest("@{" + Environment.NewLine                              + "<" + Environment.NewLine                              + "</html>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("<\r\n")                          )'                          new MarkupBlock(                              Factory.Markup(@"</html>").Accepts(AcceptedCharacters.None)                          )'                          Factory.EmptyCSharp().AsStatement()                      )                  )'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(String.Format(RazorResources.ParseError_UnexpectedEndTag' "html")' 7' 2' 0)'                      new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "code"' "}"' "{")' 1' 0' 1)                  });
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockHandlesOpenAngleWithProperTagFollowingIt,The following statement contains a magic number: ParseDocumentTest("@{" + Environment.NewLine                              + "<" + Environment.NewLine                              + "</html>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("<\r\n")                          )'                          new MarkupBlock(                              Factory.Markup(@"</html>").Accepts(AcceptedCharacters.None)                          )'                          Factory.EmptyCSharp().AsStatement()                      )                  )'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(String.Format(RazorResources.ParseError_UnexpectedEndTag' "html")' 7' 2' 0)'                      new RazorError(String.Format(RazorResources.ParseError_Expected_EndOfBlock_Before_EOF' "code"' "}"' "{")' 1' 0' 1)                  });
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockSupportsTagsWithAttributes,The following statement contains a magic number: ParseBlockTest("<foo bar=\"baz\"><biz><boz zoop=zork/></biz></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 13' 0' 13))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' new LocationTagged<string>("baz"' 10' 0' 10)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("><biz><boz")'                      new MarkupBlock(new AttributeBlockCodeGenerator("zoop"' new LocationTagged<string>(" zoop="' 24' 0' 24)' new LocationTagged<string>(String.Empty' 34' 0' 34))'                          Factory.Markup(" zoop=").With(SpanCodeGenerator.Null)'                          Factory.Markup("zork").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 30' 0' 30)' new LocationTagged<string>("zork"' 30' 0' 30))))'                      Factory.Markup("/></biz></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\">\" /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsCloseAngleBracketInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'>\' /></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup(">").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>(">"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup(" /></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfDoubleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\"/\"></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz=\""' 9' 0' 9)' new LocationTagged<string>("\""' 16' 0' 16))'                          Factory.Markup(" baz=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlBlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlBlockTest.cs,ParseBlockAllowsSlashInAttributeValueIfSingleQuoted,The following statement contains a magic number: ParseBlockTest("<foo><bar baz=\'/\'></bar></foo>"'                  new MarkupBlock(                      Factory.Markup("<foo><bar")'                      new MarkupBlock(new AttributeBlockCodeGenerator("baz"' new LocationTagged<string>(" baz='"' 9' 0' 9)' new LocationTagged<string>("'"' 16' 0' 16))'                          Factory.Markup(" baz='").With(SpanCodeGenerator.Null)'                          Factory.Markup("/").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 15' 0' 15)' new LocationTagged<string>("/"' 15' 0' 15)))'                          Factory.Markup("'").With(SpanCodeGenerator.Null))'                      Factory.Markup("></bar></foo>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentEmitsAtSignAsMarkupIfAtEndOfFile,The following statement contains a magic number: ParseDocumentTest("foo @"'                  new MarkupBlock(                      Factory.Markup("foo ")'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.EmptyCSharp()                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      Factory.EmptyHtml())'                  new RazorError(RazorResources.ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock' 5' 0' 5));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentEmitsAtSignAsMarkupIfAtEndOfFile,The following statement contains a magic number: ParseDocumentTest("foo @"'                  new MarkupBlock(                      Factory.Markup("foo ")'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.EmptyCSharp()                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      Factory.EmptyHtml())'                  new RazorError(RazorResources.ParseError_Unexpected_EndOfFile_At_Start_Of_CodeBlock' 5' 0' 5));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlDocumentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlDocumentTest.cs,ParseDocumentDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseDocumentTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>")));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockThrowsErrorIfEndTextTagContainsTextAfterName,The following statement contains a magic number: ParseBlockTest("<text></text foo bar>"'                  new MarkupBlock(                      Factory.MarkupTransition("<text>")'                      Factory.MarkupTransition("</text").Accepts(AcceptedCharacters.Any)'                      Factory.Markup(" "))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 6' 0' 6));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockThrowsErrorIfEndTextTagContainsTextAfterName,The following statement contains a magic number: ParseBlockTest("<text></text foo bar>"'                  new MarkupBlock(                      Factory.MarkupTransition("<text>")'                      Factory.MarkupTransition("</text").Accepts(AcceptedCharacters.Any)'                      Factory.Markup(" "))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 6' 0' 6));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlErrorTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlErrorTest.cs,ParseBlockWithUnfinishedTagAtEOFThrowsIncompleteTagException,The following statement contains a magic number: ParseBlockTest("<foo bar=baz"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar="' 4' 0' 4)' new LocationTagged<string>(String.Empty' 12' 0' 12))'                          Factory.Markup(" bar=").With(SpanCodeGenerator.Null)'                          Factory.Markup("baz").With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("baz"' 9' 0' 9)))))'                  new RazorError(String.Format(RazorResources.ParseError_UnfinishedTag' "foo")' new SourceLocation(0' 0' 0)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockSwitchesToCodeWhenSwapCharacterEncounteredInAttributeValue,The following statement contains a magic number: ParseBlockTest("<foo bar=\"@baz\" />"'                  new MarkupBlock(                      Factory.Markup("<foo")'                      new MarkupBlock(new AttributeBlockCodeGenerator("bar"' new LocationTagged<string>(" bar=\""' 4' 0' 4)' new LocationTagged<string>("\""' 14' 0' 14))'                          Factory.Markup(" bar=\"").With(SpanCodeGenerator.Null)'                          new MarkupBlock(new DynamicAttributeBlockCodeGenerator(new LocationTagged<string>(String.Empty' 10' 0' 10)' 10' 0' 10)'                              new ExpressionBlock(                                  Factory.CodeTransition()'                                  Factory.Code("baz")                                         .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                         .Accepts(AcceptedCharacters.NonWhiteSpace)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(" />").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser.Html,HtmlToCodeSwitchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\Html\HtmlToCodeSwitchTest.cs,ParseBlockDoesNotSwitchToCodeOnEmailAddressInAttribute,The following statement contains a magic number: ParseBlockTest("<a href=\"mailto:anurse@microsoft.com\">Email me</a>"'                  new MarkupBlock(                      Factory.Markup("<a")'                      new MarkupBlock(new AttributeBlockCodeGenerator("href"' new LocationTagged<string>(" href=\""' 2' 0' 2)' new LocationTagged<string>("\""' 36' 0' 36))'                          Factory.Markup(" href=\"").With(SpanCodeGenerator.Null)'                          Factory.Markup("mailto:anurse@microsoft.com")                                 .With(new LiteralAttributeCodeGenerator(new LocationTagged<string>(String.Empty' 9' 0' 9)' new LocationTagged<string>("mailto:anurse@microsoft.com"' 9' 0' 9)))'                          Factory.Markup("\"").With(SpanCodeGenerator.Null))'                      Factory.Markup(">Email me</a>").Accepts(AcceptedCharacters.None)));
Magic Number,System.Web.Razor.Test.Parser,ParserVisitorExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserVisitorExtensionsTest.cs,VisitSendsErrorsToVisitor,The following statement contains a magic number: List<RazorError> errors = new List<RazorError>() {                  new RazorError("Foo"' 1' 0' 1)'                  new RazorError("Bar"' 2' 0' 2)              };
Magic Number,System.Web.Razor.Test.Parser,ParserVisitorExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserVisitorExtensionsTest.cs,VisitSendsErrorsToVisitor,The following statement contains a magic number: List<RazorError> errors = new List<RazorError>() {                  new RazorError("Foo"' 1' 0' 1)'                  new RazorError("Bar"' 2' 0' 2)              };
Magic Number,System.Web.Razor.Test.Parser,ParserVisitorExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserVisitorExtensionsTest.cs,VisitCallsOnCompleteWhenAllNodesHaveBeenVisited,The following statement contains a magic number: List<RazorError> errors = new List<RazorError>() {                  new RazorError("Foo"' 1' 0' 1)'                  new RazorError("Bar"' 2' 0' 2)              };
Magic Number,System.Web.Razor.Test.Parser,ParserVisitorExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\ParserVisitorExtensionsTest.cs,VisitCallsOnCompleteWhenAllNodesHaveBeenVisited,The following statement contains a magic number: List<RazorError> errors = new List<RazorError>() {                  new RazorError("Foo"' 1' 0' 1)'                  new RazorError("Bar"' 2' 0' 2)              };
Magic Number,System.Web.Razor.Test.Parser,CallbackParserListenerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CallbackParserListenerTest.cs,ListenerCallsOnErrorCallbackUsingSynchronizationContextIfSpecified,The following statement contains a magic number: RunSyncContextTest(new RazorError("Bar"' 42' 42' 42)'                                 errorCallback => new CallbackVisitor(_ => { }' errorCallback' _ => { }' _ => { })'                                 (listener' expected) => listener.VisitError(expected));
Magic Number,System.Web.Razor.Test.Parser,CallbackParserListenerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CallbackParserListenerTest.cs,ListenerCallsOnErrorCallbackUsingSynchronizationContextIfSpecified,The following statement contains a magic number: RunSyncContextTest(new RazorError("Bar"' 42' 42' 42)'                                 errorCallback => new CallbackVisitor(_ => { }' errorCallback' _ => { }' _ => { })'                                 (listener' expected) => listener.VisitError(expected));
Magic Number,System.Web.Razor.Test.Parser,CallbackParserListenerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\CallbackParserListenerTest.cs,ListenerCallsOnErrorCallbackUsingSynchronizationContextIfSpecified,The following statement contains a magic number: RunSyncContextTest(new RazorError("Bar"' 42' 42' 42)'                                 errorCallback => new CallbackVisitor(_ => { }' errorCallback' _ => { }' _ => { })'                                 (listener' expected) => listener.VisitError(expected));
Magic Number,System.Web.Razor.Test.Parser,BlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\BlockTest.cs,LocateOwnerReturnsNullIfNoSpanReturnsTrueForOwnsSpan,The following statement contains a magic number: TextChange change = new TextChange(128' 1' new StringTextBuffer("Foo @bar Baz")' 1' new StringTextBuffer("Foo @bor Baz"));
Magic Number,System.Web.Razor.Test.Parser,BlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\BlockTest.cs,LocateOwnerReturnsNullIfChangeCrossesMultipleSpans,The following statement contains a magic number: TextChange change = new TextChange(4' 10' new StringTextBuffer("Foo @bar Baz")' 10' new StringTextBuffer("Foo @bor Baz"));
Magic Number,System.Web.Razor.Test.Parser,BlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\BlockTest.cs,LocateOwnerReturnsNullIfChangeCrossesMultipleSpans,The following statement contains a magic number: TextChange change = new TextChange(4' 10' new StringTextBuffer("Foo @bar Baz")' 10' new StringTextBuffer("Foo @bor Baz"));
Magic Number,System.Web.Razor.Test.Parser,BlockTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\BlockTest.cs,LocateOwnerReturnsNullIfChangeCrossesMultipleSpans,The following statement contains a magic number: TextChange change = new TextChange(4' 10' new StringTextBuffer("Foo @bar Baz")' 10' new StringTextBuffer("Foo @bor Baz"));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest(@"@foo(@**@"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  VBSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None))'                          Factory.EmptyVB()                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")'                      4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest(@"@foo(@**@"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  VBSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None))'                          Factory.EmptyVB()                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)))'                  new RazorError(                      String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")'                      4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  VBSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  VBSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  VBSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,UnterminatedRazorCommentInImplicitExpressionMethodCall,The following statement contains a magic number: ParseDocumentTest("@foo(@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.Code("foo(")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(                                  Factory.LocationTracker.CurrentLocation'                                  String.Empty'                                  VBSymbolType.Unknown))                                      .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 5' 0' 5)'                  new RazorError(String.Format(RazorResources.ParseError_Expected_CloseBracket_Before_EOF' "("' ")")' 4' 0' 4));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@Code" + Environment.NewLine                              + "    @<text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "End Code"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("@")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\nEnd Code"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@Code" + Environment.NewLine                              + "    @<text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "End Code"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("@")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\nEnd Code"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@Code" + Environment.NewLine                              + "    @<text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "End Code"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("@")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\nEnd Code"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,RazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@Code" + Environment.NewLine                              + "    @<text" + Environment.NewLine                              + "    @**@" + Environment.NewLine                              + "End Code"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n").AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition("@")'                              Factory.MarkupTransition("<text").Accepts(AcceptedCharacters.Any)'                              Factory.Markup("\r\n    ")'                              new CommentBlock(                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.Span(SpanKind.Comment' new HtmlSymbol(                                      Factory.LocationTracker.CurrentLocation'                                      String.Empty'                                      HtmlSymbolType.Unknown))                                         .Accepts(AcceptedCharacters.Any)'                                  Factory.MetaMarkup("*"' HtmlSymbolType.RazorCommentStar)                                         .Accepts(AcceptedCharacters.None)'                                  Factory.MarkupTransition(HtmlSymbolType.RazorCommentTransition)                                         .Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\nEnd Code"))))'                  new RazorError(RazorResources.ParseError_TextTagCannotContainAttributes' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_MissingEndTag' "text")' 12' 1' 5)'                  new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBRazorCommentsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBRazorCommentsTest.cs,UnterminatedRazorCommentInVerbatimBlock,The following statement contains a magic number: ParseDocumentTest("@Code" + Environment.NewLine                              + "@*"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new StatementBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          Factory.Code("\r\n")                                 .AsStatement()'                          new CommentBlock(                              Factory.CodeTransition(VBSymbolType.RazorCommentTransition)                                     .Accepts(AcceptedCharacters.None)'                              Factory.MetaCode("*"' VBSymbolType.RazorCommentStar)                                     .Accepts(AcceptedCharacters.None)'                              Factory.Span(SpanKind.Comment' new VBSymbol(Factory.LocationTracker.CurrentLocation'                                                                          String.Empty'                                                                          VBSymbolType.Unknown))                                     .Accepts(AcceptedCharacters.Any))))'                  new RazorError(RazorResources.ParseError_RazorComment_Not_Terminated' 7' 1' 0)'                  new RazorError(String.Format(RazorResources.ParseError_BlockNotTerminated' SyntaxConstants.VB.CodeKeyword' SyntaxConstants.VB.EndCodeKeyword)' 1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_EOF,The following statement contains a magic number: ParseBlockTest("@Helper Strong(value As String)"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(value As String)"' 8' 0' 8)' headerComplete: true)'                      Factory.CodeTransition()'                      Factory.MetaCode("Helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(value As String)")                             .Hidden()                             .Accepts(AcceptedCharacters.None)                             .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndHelperKeyword })'                      new StatementBlock())'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_EOF,The following statement contains a magic number: ParseBlockTest("@Helper Strong(value As String)"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(value As String)"' 8' 0' 8)' headerComplete: true)'                      Factory.CodeTransition()'                      Factory.MetaCode("Helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(value As String)")                             .Hidden()                             .Accepts(AcceptedCharacters.None)                             .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndHelperKeyword })'                      new StatementBlock())'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,VerbatimBlock_AutoComplete_At_EOF,The following statement contains a magic number: ParseBlockTest("@Code"'                  new StatementBlock(                      Factory.CodeTransition()'                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Span(SpanKind.Code' new VBSymbol(5' 0' 5' String.Empty' VBSymbolType.Unknown))                             .With(new StatementCodeGenerator())                             .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndCodeKeyword }))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Code"' "End Code")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,VerbatimBlock_AutoComplete_At_EOF,The following statement contains a magic number: ParseBlockTest("@Code"'                  new StatementBlock(                      Factory.CodeTransition()'                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Span(SpanKind.Code' new VBSymbol(5' 0' 5' String.Empty' VBSymbolType.Unknown))                             .With(new StatementCodeGenerator())                             .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndCodeKeyword }))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Code"' "End Code")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_StartOfFile,The following statement contains a magic number: ParseBlockTest("@Helper Strong(value As String)" + Environment.NewLine                           + "Foo"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(value As String)"' 8' 0' 8)' headerComplete: true)'                      Factory.CodeTransition()'                      Factory.MetaCode("Helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(value As String)")                             .Hidden()                             .Accepts(AcceptedCharacters.None)                             .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndHelperKeyword })'                      new StatementBlock(                          Factory.Code("\r\nFoo").AsStatement()))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBAutoCompleteTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBAutoCompleteTest.cs,HelperDirective_AutoComplete_At_StartOfFile,The following statement contains a magic number: ParseBlockTest("@Helper Strong(value As String)" + Environment.NewLine                           + "Foo"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(value As String)"' 8' 0' 8)' headerComplete: true)'                      Factory.CodeTransition()'                      Factory.MetaCode("Helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(value As String)")                             .Hidden()                             .Accepts(AcceptedCharacters.None)                             .With(new AutoCompleteEditHandler(CSharpLanguageCharacteristics.Instance.TokenizeString) { AutoCompleteString = SyntaxConstants.VB.EndHelperKeyword })'                      new StatementBlock(                          Factory.Code("\r\nFoo").AsStatement()))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBDirectiveTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBDirectiveTest.cs,VB_Helper_Directive,The following statement contains a magic number: ParseBlockTest("@Helper Strong(s as String)" + Environment.NewLine                           + "    s = s.ToUpperCase()" + Environment.NewLine                           + "    @<strong>s</strong>" + Environment.NewLine                           + "End Helper"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(s as String)"' 8' 0' 8)' headerComplete: true)'                      Factory.CodeTransition(SyntaxConstants.TransitionString)'                      Factory.MetaCode("Helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(s as String)").Hidden()'                      new StatementBlock(                          Factory.Code("\r\n    s = s.ToUpperCase()\r\n")                                 .AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition(SyntaxConstants.TransitionString)'                              Factory.Markup("<strong>s</strong>\r\n")                                     .Accepts(AcceptedCharacters.None))'                          Factory.EmptyVB()                                 .AsStatement()'                          Factory.MetaCode("End Helper")                                 .Accepts(AcceptedCharacters.None))));
Magic Number,System.Web.Razor.Test.Parser.VB,VBDirectiveTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBDirectiveTest.cs,VB_Helper_Directive,The following statement contains a magic number: ParseBlockTest("@Helper Strong(s as String)" + Environment.NewLine                           + "    s = s.ToUpperCase()" + Environment.NewLine                           + "    @<strong>s</strong>" + Environment.NewLine                           + "End Helper"'                  new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Strong(s as String)"' 8' 0' 8)' headerComplete: true)'                      Factory.CodeTransition(SyntaxConstants.TransitionString)'                      Factory.MetaCode("Helper ")                             .Accepts(AcceptedCharacters.None)'                      Factory.Code("Strong(s as String)").Hidden()'                      new StatementBlock(                          Factory.Code("\r\n    s = s.ToUpperCase()\r\n")                                 .AsStatement()'                          new MarkupBlock(                              Factory.Markup("    ")'                              Factory.MarkupTransition(SyntaxConstants.TransitionString)'                              Factory.Markup("<strong>s</strong>\r\n")                                     .Accepts(AcceptedCharacters.None))'                          Factory.EmptyVB()                                 .AsStatement()'                          Factory.MetaCode("End Helper")                                 .Accepts(AcceptedCharacters.None))));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@Helper ()"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("()"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("()").Hidden().AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@Helper ()"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("()"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("()").Hidden().AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@Helper ()"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("()"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("()").Hidden().AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperOutputsErrorButContinuesIfLParenFoundAfterHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@Helper ()"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("()"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("()").Hidden().AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "("))'                      8' 0' 8)'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@Helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@Helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@Helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementOutputsMarkerHelperHeaderSpanOnceKeywordComplete,The following statement contains a magic number: ParseDocumentTest("@Helper "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden()))'                  new RazorError(                      String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementMarksHelperSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseDocumentTest("@Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper")))'                  new RazorError(                      String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementMarksHelperSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseDocumentTest("@Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper")))'                  new RazorError(                      String.Format(RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start' RazorResources.ErrorComponent_EndOfFile)'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotComplete,The following statement contains a magic number: ParseDocumentTest("@Helper" + Environment.NewLine                              + "@Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper\r\n").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper")))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               String.Format(RazorResources.ErrorComponent_Character' "@"))'                          9' 1' 0)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          16' 1' 7)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotComplete,The following statement contains a magic number: ParseDocumentTest("@Helper" + Environment.NewLine                              + "@Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper\r\n").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper")))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               String.Format(RazorResources.ErrorComponent_Character' "@"))'                          9' 1' 0)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          16' 1' 7)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotComplete,The following statement contains a magic number: ParseDocumentTest("@Helper" + Environment.NewLine                              + "@Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper\r\n").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper")))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               String.Format(RazorResources.ErrorComponent_Character' "@"))'                          9' 1' 0)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          16' 1' 7)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotCompleteWithSpace,The following statement contains a magic number: ParseDocumentTest(@"@Helper @Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode(@"Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper").Accepts(AcceptedCharacters.Any)))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                              String.Format(RazorResources.ErrorComponent_Character' "@"))'                          8' 0' 8)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          15' 0' 15)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotCompleteWithSpace,The following statement contains a magic number: ParseDocumentTest(@"@Helper @Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode(@"Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper").Accepts(AcceptedCharacters.Any)))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                              String.Format(RazorResources.ErrorComponent_Character' "@"))'                          8' 0' 8)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          15' 0' 15)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotCompleteWithSpace,The following statement contains a magic number: ParseDocumentTest(@"@Helper @Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode(@"Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper").Accepts(AcceptedCharacters.Any)))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                              String.Format(RazorResources.ErrorComponent_Character' "@"))'                          8' 0' 8)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          15' 0' 15)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotCompleteWithSpace,The following statement contains a magic number: ParseDocumentTest(@"@Helper @Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode(@"Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper").Accepts(AcceptedCharacters.Any)))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                              String.Format(RazorResources.ErrorComponent_Character' "@"))'                          8' 0' 8)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          15' 0' 15)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotCompleteWithSpace,The following statement contains a magic number: ParseDocumentTest(@"@Helper @Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode(@"Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper").Accepts(AcceptedCharacters.Any)))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                              String.Format(RazorResources.ErrorComponent_Character' "@"))'                          8' 0' 8)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          15' 0' 15)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementTerminatesEarlyIfHeaderNotCompleteWithSpace,The following statement contains a magic number: ParseDocumentTest(@"@Helper @Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>(String.Empty' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode(@"Helper ").Accepts(AcceptedCharacters.None)'                          Factory.EmptyVB().Hidden())'                      new HelperBlock(                          Factory.CodeTransition()'                          Factory.MetaCode("Helper").Accepts(AcceptedCharacters.Any)))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                              String.Format(RazorResources.ErrorComponent_Character' "@"))'                          8' 0' 8)'                      new RazorError(                          String.Format(                              RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                               RazorResources.ErrorComponent_EndOfFile)'                          15' 0' 15)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementAllowsDifferentlyCasedEndHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@Helper Foo()" + Environment.NewLine                              + "end helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo()"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo()").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("end helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementAllowsDifferentlyCasedEndHelperKeyword,The following statement contains a magic number: ParseDocumentTest("@Helper Foo()" + Environment.NewLine                              + "end helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo()"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo()").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("end helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@Helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@Helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@Helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingName,The following statement contains a magic number: ParseDocumentTest("@Helper                       " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("                      "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("                      ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Helper_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      30' 0' 30));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@Helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@Helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@Helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenParen,The following statement contains a magic number: ParseDocumentTest("@Helper Foo    " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo    "' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo    ").Hidden())'                      Factory.Markup("\r\n    "))'                  new RazorError(                      String.Format(RazorResources.ParseError_MissingCharAfterHelperName' "(")'                      15' 0' 15));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(RazorResources.ParseError_UnterminatedHelperParameterList' 11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(RazorResources.ParseError_UnterminatedHelperParameterList' 11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(RazorResources.ParseError_UnterminatedHelperParameterList' 11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesAllContentToEndOfFileIfHelperStatementMissingCloseParenInParameterList,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(Foo Bar" + Environment.NewLine                              + "Biz" + Environment.NewLine                              + "Boz"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(Foo Bar\r\nBiz\r\nBoz"' 8' 0' 8)' headerComplete: false)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(Foo Bar\r\nBiz\r\nBoz").Hidden()))'                  new RazorError(RazorResources.ParseError_UnterminatedHelperParameterList' 11' 0' 11));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(foo as String)    " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(foo as String)")                                 .Hidden()                                 .AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock(                              Factory.Code("    \r\n").AsStatement())))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCapturesWhitespaceToEndOfLineIfHelperStatementMissingOpenBraceAfterParameterList,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(foo as String)    " + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(foo as String)")                                 .Hidden()                                 .AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock(                              Factory.Code("    \r\n").AsStatement())))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementContinuesParsingHelperUntilEOF,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(foo as String)" + Environment.NewLine                              + "    @<p>Foo</p>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(foo as String)")                                 .Hidden()                                 .AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock(                              Factory.Code("\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("    ")'                                  Factory.MarkupTransition()'                                  Factory.Markup("<p>Foo</p>").Accepts(AcceptedCharacters.None))'                              Factory.EmptyVB().AsStatement())))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementContinuesParsingHelperUntilEOF,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(foo as String)" + Environment.NewLine                              + "    @<p>Foo</p>"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(foo as String)")                                 .Hidden()                                 .AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock(                              Factory.Code("\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("    ")'                                  Factory.MarkupTransition()'                                  Factory.Markup("<p>Foo</p>").Accepts(AcceptedCharacters.None))'                              Factory.EmptyVB().AsStatement())))'                  new RazorError(                      String.Format(RazorResources.ParseError_BlockNotTerminated' "Helper"' "End Helper")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithEmbeddedCode,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(foo as String' bar as String)" + Environment.NewLine                              + "    @<p>@foo</p>" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String' bar as String)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(foo as String' bar as String)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("    ")'                                  Factory.MarkupTransition()'                                  Factory.Markup("<p>")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("foo")                                             .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.EmptyVB().AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementCorrectlyParsesHelperWithEmbeddedCode,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(foo as String' bar as String)" + Environment.NewLine                              + "    @<p>@foo</p>" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(foo as String' bar as String)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(foo as String' bar as String)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n").AsStatement()'                              new MarkupBlock(                                  Factory.Markup("    ")'                                  Factory.MarkupTransition()'                                  Factory.Markup("<p>")'                                  new ExpressionBlock(                                      Factory.CodeTransition()'                                      Factory.Code("foo")                                             .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                             .Accepts(AcceptedCharacters.NonWhiteSpace))'                                  Factory.Markup("</p>\r\n").Accepts(AcceptedCharacters.None))'                              Factory.EmptyVB().AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementGivesWhitespaceAfterCloseParenToMarkup,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)     " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)")                                 .Hidden()                                 .AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock(                              Factory.Code("     \r\n    ").AsStatement())))'                  designTimeParser: true'                  expectedErrors:                      new RazorError(                          String.Format(                              RazorResources.ParseError_BlockNotTerminated'                              "Helper"' "End Helper")'                          1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperStatementGivesWhitespaceAfterCloseParenToMarkup,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)     " + Environment.NewLine                              + "    "'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)")                                 .Hidden()                                 .AutoCompleteWith(SyntaxConstants.VB.EndHelperKeyword)'                          new StatementBlock(                              Factory.Code("     \r\n    ").AsStatement())))'                  designTimeParser: true'                  expectedErrors:                      new RazorError(                          String.Format(                              RazorResources.ParseError_BlockNotTerminated'                              "Helper"' "End Helper")'                          1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)" + Environment.NewLine                              + "    @Helper Bar(string baz)" + Environment.NewLine                              + "    End Helper" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code("Bar(string baz)").Hidden()'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement()'                                      Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          RazorResources.ParseError_Helpers_Cannot_Be_Nested'                          30' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)" + Environment.NewLine                              + "    @Helper Bar(string baz)" + Environment.NewLine                              + "    End Helper" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code("Bar(string baz)").Hidden()'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement()'                                      Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          RazorResources.ParseError_Helpers_Cannot_Be_Nested'                          30' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)" + Environment.NewLine                              + "    @Helper Bar(string baz)" + Environment.NewLine                              + "    End Helper" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code("Bar(string baz)").Hidden()'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement()'                                      Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          RazorResources.ParseError_Helpers_Cannot_Be_Nested'                          30' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)" + Environment.NewLine                              + "    @Helper Bar(string baz)" + Environment.NewLine                              + "    End Helper" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code("Bar(string baz)").Hidden()'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement()'                                      Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          RazorResources.ParseError_Helpers_Cannot_Be_Nested'                          30' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)" + Environment.NewLine                              + "    @Helper Bar(string baz)" + Environment.NewLine                              + "    End Helper" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code("Bar(string baz)").Hidden()'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement()'                                      Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          RazorResources.ParseError_Helpers_Cannot_Be_Nested'                          30' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBHelperTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBHelperTest.cs,ParseHelperAcceptsNestedHelpersButOutputsError,The following statement contains a magic number: ParseDocumentTest("@Helper Foo(string foo)" + Environment.NewLine                              + "    @Helper Bar(string baz)" + Environment.NewLine                              + "    End Helper" + Environment.NewLine                              + "End Helper"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Foo(string foo)"' 8' 0' 8)' headerComplete: true)'                          Factory.CodeTransition()'                          Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                          Factory.Code("Foo(string foo)").Hidden()'                          new StatementBlock(                              Factory.Code("\r\n    ").AsStatement()'                              new HelperBlock(new HelperCodeGenerator(new LocationTagged<string>("Bar(string baz)"' 37' 1' 12)' headerComplete: true)'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Helper ").Accepts(AcceptedCharacters.None)'                                  Factory.Code("Bar(string baz)").Hidden()'                                  new StatementBlock(                                      Factory.Code("\r\n    ").AsStatement()'                                      Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                              Factory.Code("\r\n").AsStatement()'                              Factory.MetaCode("End Helper").Accepts(AcceptedCharacters.None)))'                      Factory.EmptyHtml())'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          RazorResources.ParseError_Helpers_Cannot_Be_Nested'                          30' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParseSectionBlockCapturesNewlineImmediatelyFollowing,The following statement contains a magic number: ParseDocumentTest("@Section" + Environment.NewLine'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("Section\r\n")'                          new MarkupBlock()))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          RazorResources.ErrorComponent_EndOfFile)'                      10' 1' 0)'                  new RazorError(                      String.Format(                          RazorResources.ParseError_BlockNotTerminated'                          "Section"' "End Section")'                      1' 0' 1));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParseSectionRequiresNameBeOnSameLineAsSectionKeyword,The following statement contains a magic number: ParseDocumentTest("@Section " + Environment.NewLine                              + "Foo" + Environment.NewLine                              + "    <p>Body</p>" + Environment.NewLine                              + "End Section"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("Section ")'                          new MarkupBlock(                              Factory.Markup("\r\nFoo\r\n    <p>Body</p>\r\n"))'                          Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      9' 0' 9));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParseSectionRequiresNameBeOnSameLineAsSectionKeyword,The following statement contains a magic number: ParseDocumentTest("@Section " + Environment.NewLine                              + "Foo" + Environment.NewLine                              + "    <p>Body</p>" + Environment.NewLine                              + "End Section"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("Section ")'                          new MarkupBlock(                              Factory.Markup("\r\nFoo\r\n    <p>Body</p>\r\n"))'                          Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          RazorResources.ErrorComponent_Newline)'                      9' 0' 9));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParseSectionReportsErrorAndTerminatesSectionBlockIfKeywordNotFollowedByIdentifierStartCharacter,The following statement contains a magic number: ParseDocumentTest("@Section 9" + Environment.NewLine                              + "    <p>Foo</p>" + Environment.NewLine                              + "End Section"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("Section ")'                          new MarkupBlock(                              Factory.Markup("9\r\n    <p>Foo</p>\r\n"))'                          Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "9"))'                      9' 0' 9));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParseSectionReportsErrorAndTerminatesSectionBlockIfKeywordNotFollowedByIdentifierStartCharacter,The following statement contains a magic number: ParseDocumentTest("@Section 9" + Environment.NewLine                              + "    <p>Foo</p>" + Environment.NewLine                              + "End Section"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator(String.Empty)'                          Factory.CodeTransition()'                          Factory.MetaCode("Section ")'                          new MarkupBlock(                              Factory.Markup("9\r\n    <p>Foo</p>\r\n"))'                          Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Unexpected_Character_At_Section_Name_Start'                          String.Format(RazorResources.ErrorComponent_Character' "9"))'                      9' 0' 9));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParserOutputsErrorOnNestedSections,The following statement contains a magic number: ParseDocumentTest("@Section foo" + Environment.NewLine                              + "    @Section bar" + Environment.NewLine                              + "        <p>Foo</p>" + Environment.NewLine                              + "    End Section" + Environment.NewLine                              + "End Section"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("Section foo")'                          new MarkupBlock(                              Factory.Markup("\r\n")'                              new SectionBlock(new SectionCodeGenerator("bar")'                                  Factory.Code("    ").AsStatement()'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Section bar")'                                  new MarkupBlock(                                      Factory.Markup("\r\n        <p>Foo</p>\r\n    "))'                                  Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\n"))'                          Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Sections_Cannot_Be_Nested'                          RazorResources.SectionExample_VB)'                      26' 1' 12));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSectionTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSectionTest.cs,ParserOutputsErrorOnNestedSections,The following statement contains a magic number: ParseDocumentTest("@Section foo" + Environment.NewLine                              + "    @Section bar" + Environment.NewLine                              + "        <p>Foo</p>" + Environment.NewLine                              + "    End Section" + Environment.NewLine                              + "End Section"'                  new MarkupBlock(                      Factory.EmptyHtml()'                      new SectionBlock(new SectionCodeGenerator("foo")'                          Factory.CodeTransition()'                          Factory.MetaCode("Section foo")'                          new MarkupBlock(                              Factory.Markup("\r\n")'                              new SectionBlock(new SectionCodeGenerator("bar")'                                  Factory.Code("    ").AsStatement()'                                  Factory.CodeTransition()'                                  Factory.MetaCode("Section bar")'                                  new MarkupBlock(                                      Factory.Markup("\r\n        <p>Foo</p>\r\n    "))'                                  Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                              Factory.Markup("\r\n"))'                          Factory.MetaCode("End Section").Accepts(AcceptedCharacters.None))'                      Factory.EmptyHtml())'                  new RazorError(                      String.Format(                          RazorResources.ParseError_Sections_Cannot_Be_Nested'                          RazorResources.SectionExample_VB)'                      26' 1' 12));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInImplicitExpressionParens,The following statement contains a magic number: ParseBlockTest("Html.Repeat(10'" + TestNestedTemplateCode + ")"'                  new ExpressionBlock(                      Factory.Code("Html.Repeat(10'").AsImplicitExpression(KeywordSet)'                      TestNestedTemplate()'                      Factory.Code(")").AsImplicitExpression(KeywordSet).Accepts(AcceptedCharacters.NonWhiteSpace))'                  GetNestedSectionError(41' 0' 41));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInImplicitExpressionParens,The following statement contains a magic number: ParseBlockTest("Html.Repeat(10'" + TestNestedTemplateCode + ")"'                  new ExpressionBlock(                      Factory.Code("Html.Repeat(10'").AsImplicitExpression(KeywordSet)'                      TestNestedTemplate()'                      Factory.Code(")").AsImplicitExpression(KeywordSet).Accepts(AcceptedCharacters.NonWhiteSpace))'                  GetNestedSectionError(41' 0' 41));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInStatementWithinCodeBlock,The following statement contains a magic number: ParseBlockTest("For Each foo in Bar " + Environment.NewLine                           + "    Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + ")" + Environment.NewLine                           + "Next foo"'                  new StatementBlock(                      Factory.Code("For Each foo in Bar \r\n    Html.ExecuteTemplate(foo'")                             .AsStatement()'                      TestNestedTemplate()'                      Factory.Code(")\r\nNext foo")                             .AsStatement()                             .Accepts(AcceptedCharacters.WhiteSpace | AcceptedCharacters.NonWhiteSpace))'                  GetNestedSectionError(77' 1' 55));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInStatementWithinCodeBlock,The following statement contains a magic number: ParseBlockTest("For Each foo in Bar " + Environment.NewLine                           + "    Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + ")" + Environment.NewLine                           + "Next foo"'                  new StatementBlock(                      Factory.Code("For Each foo in Bar \r\n    Html.ExecuteTemplate(foo'")                             .AsStatement()'                      TestNestedTemplate()'                      Factory.Code(")\r\nNext foo")                             .AsStatement()                             .Accepts(AcceptedCharacters.WhiteSpace | AcceptedCharacters.NonWhiteSpace))'                  GetNestedSectionError(77' 1' 55));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInStatementWithinStatementBlock,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    Dim foo = bar" + Environment.NewLine                           + "    Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + ")" + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    Dim foo = bar\r\n    Html.ExecuteTemplate(foo'")                             .AsStatement()'                      TestNestedTemplate()'                      Factory.Code(")\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  GetNestedSectionError(80' 2' 55));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInStatementWithinStatementBlock,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    Dim foo = bar" + Environment.NewLine                           + "    Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + ")" + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    Dim foo = bar\r\n    Html.ExecuteTemplate(foo'")                             .AsStatement()'                      TestNestedTemplate()'                      Factory.Code(")\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  GetNestedSectionError(80' 2' 55));
Magic Number,System.Web.Razor.Test.Parser.VB,VBTemplateTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBTemplateTest.cs,ParseBlockProducesErrorButCorrectlyParsesNestedAnonymousSectionInStatementWithinStatementBlock,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    Dim foo = bar" + Environment.NewLine                           + "    Html.ExecuteTemplate(foo'" + TestNestedTemplateCode + ")" + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    Dim foo = bar\r\n    Html.ExecuteTemplate(foo'")                             .AsStatement()'                      TestNestedTemplate()'                      Factory.Code(")\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  GetNestedSectionError(80' 2' 55));
Magic Number,System.Web.Razor.Test.Parser.VB,VBExpressionsInCodeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBExpressionsInCodeTest.cs,InnerImplicitExpressionWithOnlySingleAtAcceptsSingleSpaceOrNewlineAtDesignTime,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    @" + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    ").AsStatement()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.EmptyVB()                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      Factory.Code("\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_VB' 11' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBExpressionsInCodeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBExpressionsInCodeTest.cs,InnerImplicitExpressionWithOnlySingleAtAcceptsSingleSpaceOrNewlineAtDesignTime,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    @" + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    ").AsStatement()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.EmptyVB()                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      Factory.Code("\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(RazorResources.ParseError_Unexpected_WhiteSpace_At_Start_Of_CodeBlock_VB' 11' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBExpressionsInCodeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBExpressionsInCodeTest.cs,InnerImplicitExpressionDoesNotAcceptDotAfterAt,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    @." + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    ").AsStatement()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.EmptyVB()                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      Factory.Code(".\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_VB' ".")'                           11' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBExpressionsInCodeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBExpressionsInCodeTest.cs,InnerImplicitExpressionDoesNotAcceptDotAfterAt,The following statement contains a magic number: ParseBlockTest("Code" + Environment.NewLine                           + "    @." + Environment.NewLine                           + "End Code"'                  new StatementBlock(                      Factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n    ").AsStatement()'                      new ExpressionBlock(                          Factory.CodeTransition()'                          Factory.EmptyVB()                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      Factory.Code(".\r\n").AsStatement()'                      Factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                  designTimeParser: true'                  expectedErrors: new[]                  {                      new RazorError(                          String.Format(RazorResources.ParseError_Unexpected_Character_At_Start_Of_CodeBlock_VB' ".")'                           11' 1' 5)                  });
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseInheritsStatementMarksInheritsSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseBlockTest("inherits"'                  new DirectiveBlock(                      Factory.MetaCode("inherits"))'                  new RazorError(                      RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseInheritsStatementMarksInheritsSpanAsCanGrowIfMissingTrailingSpace,The following statement contains a magic number: ParseBlockTest("inherits"'                  new DirectiveBlock(                      Factory.MetaCode("inherits"))'                  new RazorError(                      RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,InheritsBlockOutputsErrorIfInheritsNotFollowedByTypeButAcceptsEntireLineAsCode,The following statement contains a magic number: ParseBlockTest("inherits                " + Environment.NewLine                           + "foo"'                  new DirectiveBlock(                      Factory.MetaCode("inherits                ").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n").AsBaseType(String.Empty))'                  new RazorError(                      RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,InheritsBlockOutputsErrorIfInheritsNotFollowedByTypeButAcceptsEntireLineAsCode,The following statement contains a magic number: ParseBlockTest("inherits                " + Environment.NewLine                           + "foo"'                  new DirectiveBlock(                      Factory.MetaCode("inherits                ").Accepts(AcceptedCharacters.None)'                      Factory.Code("\r\n").AsBaseType(String.Empty))'                  new RazorError(                      RazorResources.ParseError_InheritsKeyword_Must_Be_Followed_By_TypeName'                      8' 0' 8));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseBlockShowsErrorIfNamespaceNotOnSameLineAsImportsKeyword,The following statement contains a magic number: ParseBlockTest("Imports" + Environment.NewLine                           + "Foo"'                  new DirectiveBlock(                      Factory.MetaCode("Imports\r\n")                             .With(new AddImportCodeGenerator(                                 ns: "\r\n"'                                 namespaceKeywordLength: SyntaxConstants.VB.ImportsKeywordLength)))'                  new RazorError(                      RazorResources.ParseError_NamespaceOrTypeAliasExpected'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseBlockShowsErrorIfNamespaceNotOnSameLineAsImportsKeyword,The following statement contains a magic number: ParseBlockTest("Imports" + Environment.NewLine                           + "Foo"'                  new DirectiveBlock(                      Factory.MetaCode("Imports\r\n")                             .With(new AddImportCodeGenerator(                                 ns: "\r\n"'                                 namespaceKeywordLength: SyntaxConstants.VB.ImportsKeywordLength)))'                  new RazorError(                      RazorResources.ParseError_NamespaceOrTypeAliasExpected'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseBlockThrowsErrorIfOptionIsNotFollowedByStrictOrExplicit,The following statement contains a magic number: ParseBlockTest("Option FizzBuzz On"'                  new DirectiveBlock(                      Factory.MetaCode("Option FizzBuzz On")                             .With(new SetVBOptionCodeGenerator(optionName: null' value: true)))'                  new RazorError(                      String.Format(RazorResources.ParseError_UnknownOption' "FizzBuzz")'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseBlockThrowsErrorIfOptionIsNotFollowedByStrictOrExplicit,The following statement contains a magic number: ParseBlockTest("Option FizzBuzz On"'                  new DirectiveBlock(                      Factory.MetaCode("Option FizzBuzz On")                             .With(new SetVBOptionCodeGenerator(optionName: null' value: true)))'                  new RazorError(                      String.Format(RazorResources.ParseError_UnknownOption' "FizzBuzz")'                      7' 0' 7));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseBlockThrowsErrorIfOptionStrictIsNotFollowedByOnOrOff,The following statement contains a magic number: ParseBlockTest("Option Strict Yes"'                  new DirectiveBlock(                      Factory.MetaCode("Option Strict Yes")                             .With(SetVBOptionCodeGenerator.Strict(true)))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_InvalidOptionValue'                          "Strict"' "Yes")'                      14' 0' 14));
Magic Number,System.Web.Razor.Test.Parser.VB,VBSpecialKeywordsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\VB\VBSpecialKeywordsTest.cs,ParseBlockThrowsErrorIfOptionStrictIsNotFollowedByOnOrOff,The following statement contains a magic number: ParseBlockTest("Option Strict Yes"'                  new DirectiveBlock(                      Factory.MetaCode("Option Strict Yes")                             .With(SetVBOptionCodeGenerator.Strict(true)))'                  new RazorError(                      String.Format(                          RazorResources.ParseError_InvalidOptionValue'                          "Strict"' "Yes")'                      14' 0' 14));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDeleteOfIdentifierPartsIfDotRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(10' 4' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDeleteOfIdentifierPartsIfDotRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(10' 4' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsDeleteOfIdentifierPartsIfSomeOfIdentifierRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(7' 2' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("Us")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsDeleteOfIdentifierPartsIfSomeOfIdentifierRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(7' 2' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("Us")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsMultipleInsertionIfItCausesIdentifierExpansionAndTrailingDot,The following statement contains a magic number: RunPartialParseTest(new TextChange(6' 0' old' 4' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsMultipleInsertionIfItCausesIdentifierExpansionAndTrailingDot,The following statement contains a magic number: RunPartialParseTest(new TextChange(6' 0' old' 4' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsMultipleInsertionIfItOnlyCausesIdentifierExpansion,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 3' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("barbiz")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsMultipleInsertionIfItOnlyCausesIdentifierExpansion,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 3' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("barbiz")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The following statement contains a magic number: TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo @bar")' 1' new StringTextBuffer("foo @foo. @bar"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The following statement contains a magic number: TextChange charTyped = new TextChange(14' 0' new StringTextBuffer("foo @foo. @barb")' 1' new StringTextBuffer("foo @foo. @barb"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The following statement contains a magic number: TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo bar")' 1' new StringTextBuffer("foo @foo. bar"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The following statement contains a magic number: TextChange charTyped = new TextChange(9' 0' new StringTextBuffer("foo @foo. bar")' 1' new StringTextBuffer("foo @foo.b bar"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierExpansionAtEndOfNonWhitespaceCharacters,The following statement contains a magic number: RunPartialParseTest(new TextChange(15' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("Code")                                 .Accepts(AcceptedCharacters.None)'                          factory.Code("\r\n    ").AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("food")                                     .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.Code("\r\n").AsStatement()'                          factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDotAfterIdentifierInMarkup,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 1' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("foo.")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" bar"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsAdditionalIdentifierCharactersIfEndOfSpanIsIdentifier,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 1' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("foob")                                 .AsImplicitExpression(VBCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" bar")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsAdditionalIdentifierStartCharactersIfEndOfSpanIsDot,The following statement contains a magic number: RunPartialParseTest(new TextChange(11' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          factory.Code(" ").AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("foo.b")                                     .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.Code(" ").AsStatement()'                          factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,VBPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\VBPartialParsingTest.cs,ImplicitExpressionAcceptsDotIfTrailingDotsAreAllowed,The following statement contains a magic number: RunPartialParseTest(new TextChange(10' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("Code").Accepts(AcceptedCharacters.None)'                          factory.Code(" ").AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("foo.")                                     .AsImplicitExpression(VBCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.Code(" ").AsStatement()'                          factory.MetaCode("End Code").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDeleteOfIdentifierPartsIfDotRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(10' 4' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDeleteOfIdentifierPartsIfDotRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(10' 4' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsDeleteOfIdentifierPartsIfSomeOfIdentifierRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(7' 2' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("Us").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsDeleteOfIdentifierPartsIfSomeOfIdentifierRemains,The following statement contains a magic number: RunPartialParseTest(new TextChange(7' 2' old' 0' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("Us").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsMultipleInsertionIfItCausesIdentifierExpansionAndTrailingDot,The following statement contains a magic number: RunPartialParseTest(new TextChange(6' 0' old' 4' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsMultipleInsertionIfItCausesIdentifierExpansionAndTrailingDot,The following statement contains a magic number: RunPartialParseTest(new TextChange(6' 0' old' 4' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("User.").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsMultipleInsertionIfItOnlyCausesIdentifierExpansion,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 3' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("barbiz").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsMultipleInsertionIfItOnlyCausesIdentifierExpansion,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 3' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("barbiz").AsImplicitExpression(CSharpCodeParser.DefaultKeywords).Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" baz")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierExpansionAtEndOfNonWhitespaceCharacters,The following statement contains a magic number: RunPartialParseTest(new TextChange(12' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          factory.Code("\r\n    ").AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("food")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.Code("\r\n").AsStatement()'                          factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierAfterDotAtEndOfNonWhitespaceCharacters,The following statement contains a magic number: RunPartialParseTest(new TextChange(13' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          factory.Code("\r\n    ").AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("foo.d")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.Code("\r\n").AsStatement()'                          factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsDotAtEndOfNonWhitespaceCharacters,The following statement contains a magic number: RunPartialParseTest(new TextChange(12' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          factory.Code("\r\n    ").AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code(@"foo.")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.Code("\r\n").AsStatement()'                          factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The following statement contains a magic number: TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo @bar")' 1' new StringTextBuffer("foo @foo. @bar"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionRejectsChangeWhichWouldHaveBeenAcceptedIfLastChangeWasProvisionallyAcceptedOnDifferentSpan,The following statement contains a magic number: TextChange charTyped = new TextChange(14' 0' new StringTextBuffer("foo @foo. @bar")' 1' new StringTextBuffer("foo @foo. @barb"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The following statement contains a magic number: TextChange dotTyped = new TextChange(8' 0' new StringTextBuffer("foo @foo bar")' 1' new StringTextBuffer("foo @foo. bar"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsIdentifierTypedAfterDotIfLastChangeWasProvisionalAcceptanceOfDot,The following statement contains a magic number: TextChange charTyped = new TextChange(9' 0' new StringTextBuffer("foo @foo. bar")' 1' new StringTextBuffer("foo @foo.b bar"));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionProvisionallyAcceptsDotAfterIdentifierInMarkup,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 1' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("foo.")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" bar"))'                  additionalFlags: PartialParseResult.Provisional);
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsAdditionalIdentifierCharactersIfEndOfSpanIsIdentifier,The following statement contains a magic number: RunPartialParseTest(new TextChange(8' 0' old' 1' changed)'                  new MarkupBlock(                      factory.Markup("foo ")'                      new ExpressionBlock(                          factory.CodeTransition()'                          factory.Code("foob")                                 .AsImplicitExpression(CSharpCodeParser.DefaultKeywords)                                 .Accepts(AcceptedCharacters.NonWhiteSpace))'                      factory.Markup(" bar")));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsAdditionalIdentifierStartCharactersIfEndOfSpanIsDot,The following statement contains a magic number: RunPartialParseTest(new TextChange(7' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          factory.EmptyCSharp().AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("foo.b")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.EmptyCSharp().AsStatement()'                          factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,CSharpPartialParsingTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\CSharpPartialParsingTest.cs,ImplicitExpressionAcceptsDotIfTrailingDotsAreAllowed,The following statement contains a magic number: RunPartialParseTest(new TextChange(6' 0' old' 1' changed)'                  new MarkupBlock(                      factory.EmptyHtml()'                      new StatementBlock(                          factory.CodeTransition()'                          factory.MetaCode("{").Accepts(AcceptedCharacters.None)'                          factory.EmptyCSharp().AsStatement()'                          new ExpressionBlock(                              factory.CodeTransition()'                              factory.Code("foo.")                                     .AsImplicitExpression(CSharpCodeParser.DefaultKeywords' acceptTrailingDot: true)                                     .Accepts(AcceptedCharacters.NonWhiteSpace))'                          factory.EmptyCSharp().AsStatement()'                          factory.MetaCode("}").Accepts(AcceptedCharacters.None))'                      factory.EmptyHtml()));
Magic Number,System.Web.Razor.Test.Parser.PartialParsing,PartialParsingTestBase<TLanguage>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Parser\PartialParsing\PartialParsingTestBase.cs,RunFullReparseTest,The following statement contains a magic number: Assert.Equal(2' manager.ParseCount);
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,TreesAreDifferentReturnsTrueIfTreeStructureIsDifferent,The following statement contains a magic number: Assert.True(BackgroundParser.TreesAreDifferent(                  original' modified' new[] {                      new TextChange(position: 4' oldLength: 0' oldBuffer: oldBuffer' newLength: 1' newBuffer: newBuffer)                  }));
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,TreesAreDifferentReturnsFalseIfTreeStructureIsSame,The following statement contains a magic number: Assert.False(BackgroundParser.TreesAreDifferent(                  original' modified' new[] {                      new TextChange(position: 5' oldLength: 0' oldBuffer: oldBuffer' newLength: 2' newBuffer: newBuffer)                  }));
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,TreesAreDifferentReturnsFalseIfTreeStructureIsSame,The following statement contains a magic number: Assert.False(BackgroundParser.TreesAreDifferent(                  original' modified' new[] {                      new TextChange(position: 5' oldLength: 0' oldBuffer: oldBuffer' newLength: 2' newBuffer: newBuffer)                  }));
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CheckForStructureChangesStartsFullReparseIfChangeOverlapsMultipleSpans,The following statement contains a magic number: TextChange change = new TextChange(7' 3' original' 3' changed);
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CheckForStructureChangesStartsFullReparseIfChangeOverlapsMultipleSpans,The following statement contains a magic number: TextChange change = new TextChange(7' 3' original' 3' changed);
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CheckForStructureChangesStartsFullReparseIfChangeOverlapsMultipleSpans,The following statement contains a magic number: TextChange change = new TextChange(7' 3' original' 3' changed);
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CheckForStructureChangesStartsFullReparseIfChangeOverlapsMultipleSpans,The following statement contains a magic number: Assert.Equal(PartialParseResult.Rejected' parser.CheckForStructureChanges(new TextChange(0' 0' new StringTextBuffer(String.Empty)' 12' original)));
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CheckForStructureChangesStartsFullReparseIfChangeOverlapsMultipleSpans,The following statement contains a magic number: Assert.Equal(2' parseCount);
Magic Number,System.Web.Razor.Test.Editor,RazorEditorParserTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Editor\RazorEditorParserTest.cs,CreateDummyChange,The following statement contains a magic number: return new TextChange(0' 0' new StringTextBuffer(String.Empty)' 3' new StringTextBuffer("foo"));
Magic Number,System.Web.Razor.Test.Text,LineTrackingStringBufferTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LineTrackingStringBufferTest.cs,CharAtCorrectlyReturnsLocation,The following statement contains a magic number: LineTrackingStringBuffer.CharacterReference chr = buffer.CharAt(14);
Magic Number,System.Web.Razor.Test.Text,LineTrackingStringBufferTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LineTrackingStringBufferTest.cs,CharAtCorrectlyReturnsLocation,The following statement contains a magic number: Assert.Equal(new SourceLocation(14' 3' 1)' chr.Location);
Magic Number,System.Web.Razor.Test.Text,LineTrackingStringBufferTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LineTrackingStringBufferTest.cs,CharAtCorrectlyReturnsLocation,The following statement contains a magic number: Assert.Equal(new SourceLocation(14' 3' 1)' chr.Location);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,PeekReturnsCurrentCharacterWithoutAdvancingPosition,The following statement contains a magic number: RunPeekTest("abc"' peekAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,PeekReturnsNegativeOneAtEndOfSourceReader,The following statement contains a magic number: RunPeekTest("abc"' peekAt: 3);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadReturnsCurrentCharacterAndAdvancesToNextCharacter,The following statement contains a magic number: RunReadTest("abc"' readAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsCharactersAreRead,The following statement contains a magic number: RunSourceLocationTest("abcdefg"' new SourceLocation(4' 0' 4)' checkAt: 4);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsCharactersAreRead,The following statement contains a magic number: RunSourceLocationTest("abcdefg"' new SourceLocation(4' 0' 4)' checkAt: 4);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsCharactersAreRead,The following statement contains a magic number: RunSourceLocationTest("abcdefg"' new SourceLocation(4' 0' 4)' checkAt: 4);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsSlashRInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(2' 0' 2)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsSlashRInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(2' 0' 2)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsSlashRInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(2' 0' 2)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(3' 1' 0)' checkAt: 3);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(3' 1' 0)' checkAt: 3);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashRInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\rb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashRInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\rb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\nb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\nb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,OnceBufferingBeginsReadsCanContinuePastEndOfBuffer,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcbcdefg"'                               Read'                               Lookahead(Read(2))'                               Read(2)'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,OnceBufferingBeginsReadsCanContinuePastEndOfBuffer,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcbcdefg"'                               Read'                               Lookahead(Read(2))'                               Read(2)'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadLineSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadLine()' expectedRaw: 8' expectedChar: 0' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadLineSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadLine()' expectedRaw: 8' expectedChar: 0' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadToEndSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadToEnd()' expectedRaw: 11' expectedChar: 3' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadToEndSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadToEnd()' expectedRaw: 11' expectedChar: 3' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadToEndSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadToEnd()' expectedRaw: 11' expectedChar: 3' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,ReadLineMaintainsCorrectCharacterPosition,The following statement contains a magic number: RunSourceLocationTest("abc\r\ndef"' new SourceLocation(5' 1' 0)' r => r.ReadLine());
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CancelBacktrackStopsNextEndLookaheadFromBacktracking,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcdefg"'                               Lookahead(                                   Read(2)'                                   CancelBacktrack                                   )'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,BufferingTextReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\BufferingTextReaderTest.cs,CancelBacktrackOnlyCancelsBacktrackingForInnermostNestedLookahead,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcdabcdefg"'                               Lookahead(                                   Read(2)'                                   Lookahead(                                       Read'                                       CancelBacktrack                                       )'                                   Read                                   )'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunEndLookaheadUpdatesSourceLocationTest,The following statement contains a magic number: RunLookaheadTest("abc\r\ndef\r\nghi"' null'                               Read(6)'                               CaptureSourceLocation(s => expectedLocation = s)'                               Lookahead(Read(6))'                               CaptureSourceLocation(s => actualLocation = s));
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunEndLookaheadUpdatesSourceLocationTest,The following statement contains a magic number: RunLookaheadTest("abc\r\ndef\r\nghi"' null'                               Read(6)'                               CaptureSourceLocation(s => expectedLocation = s)'                               Lookahead(Read(6))'                               CaptureSourceLocation(s => actualLocation = s));
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunReadUntilTest,The following statement contains a magic number: Assert.Equal(3' reader.CurrentLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunBufferReadTest,The following statement contains a magic number: char[] buffer = new char[4];
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunBufferReadTest,The following statement contains a magic number: read = readMethod(reader' buffer' 0' 4);
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunBufferReadTest,The following statement contains a magic number: Assert.Equal(4' read);
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunBufferReadTest,The following statement contains a magic number: Assert.Equal(5' actualLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,LookaheadTextReaderTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\LookaheadTextReaderTestBase.cs,RunBufferReadTest,The following statement contains a magic number: Assert.Equal(5' actualLocation.CharacterIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,ConstructorWithSourceLocationSetsCurrentLocationToSpecifiedValue,The following statement contains a magic number: SourceLocation loc = new SourceLocation(10' 42' 4);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,ConstructorWithSourceLocationSetsCurrentLocationToSpecifiedValue,The following statement contains a magic number: SourceLocation loc = new SourceLocation(10' 42' 4);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,ConstructorWithSourceLocationSetsCurrentLocationToSpecifiedValue,The following statement contains a magic number: SourceLocation loc = new SourceLocation(10' 42' 4);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesCorrectlyForMultiLineString,The following statement contains a magic number: Assert.Equal(26' tracker.CurrentLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesCorrectlyForMultiLineString,The following statement contains a magic number: Assert.Equal(45' tracker.CurrentLocation.LineIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesCorrectlyForMultiLineString,The following statement contains a magic number: Assert.Equal(3' tracker.CurrentLocation.CharacterIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesAbsoluteIndexOnNonNewlineCharacter,The following statement contains a magic number: Assert.Equal(11' tracker.CurrentLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesCharacterIndexOnNonNewlineCharacter,The following statement contains a magic number: Assert.Equal(46' tracker.CurrentLocation.CharacterIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationDoesNotAdvanceLineIndexOnNonNewlineCharacter,The following statement contains a magic number: Assert.Equal(42' tracker.CurrentLocation.LineIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesLineIndexOnSlashN,The following statement contains a magic number: Assert.Equal(43' tracker.CurrentLocation.LineIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesAbsoluteIndexOnSlashN,The following statement contains a magic number: Assert.Equal(11' tracker.CurrentLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesLineIndexOnSlashRFollowedByNonNewlineCharacter,The following statement contains a magic number: Assert.Equal(43' tracker.CurrentLocation.LineIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesAbsoluteIndexOnSlashRFollowedByNonNewlineCharacter,The following statement contains a magic number: Assert.Equal(11' tracker.CurrentLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationDoesNotAdvanceLineIndexOnSlashRFollowedBySlashN,The following statement contains a magic number: Assert.Equal(42' tracker.CurrentLocation.LineIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesAbsoluteIndexOnSlashRFollowedBySlashN,The following statement contains a magic number: Assert.Equal(11' tracker.CurrentLocation.AbsoluteIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTrackerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTrackerTest.cs,UpdateLocationAdvancesCharacterIndexOnSlashRFollowedBySlashN,The following statement contains a magic number: Assert.Equal(46' tracker.CurrentLocation.CharacterIndex);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,PeekReturnsCurrentCharacterWithoutAdvancingPosition,The following statement contains a magic number: RunPeekTest("abc"' peekAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,PeekReturnsNegativeOneAtEndOfSourceReader,The following statement contains a magic number: RunPeekTest("abc"' peekAt: 3);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadReturnsCurrentCharacterAndAdvancesToNextCharacter,The following statement contains a magic number: RunReadTest("abc"' readAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsCharactersAreRead,The following statement contains a magic number: RunSourceLocationTest("abcdefg"' new SourceLocation(4' 0' 4)' checkAt: 4);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsCharactersAreRead,The following statement contains a magic number: RunSourceLocationTest("abcdefg"' new SourceLocation(4' 0' 4)' checkAt: 4);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsCharactersAreRead,The following statement contains a magic number: RunSourceLocationTest("abcdefg"' new SourceLocation(4' 0' 4)' checkAt: 4);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsSlashRInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(2' 0' 2)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsSlashRInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(2' 0' 2)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterAndAbsoluteIndicesIncreaseAsSlashRInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(2' 0' 2)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(3' 1' 0)' checkAt: 3);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInTwoCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\r\nb"' new SourceLocation(3' 1' 0)' checkAt: 3);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashRInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\rb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashRInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\rb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\nb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CharacterIndexResetsToZeroAndLineIndexIncrementsWhenSlashNInSingleCharacterNewlineIsRead,The following statement contains a magic number: RunSourceLocationTest("f\nb"' new SourceLocation(2' 1' 0)' checkAt: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,OnceBufferingBeginsReadsCanContinuePastEndOfBuffer,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcbcdefg"'                               Read'                               Lookahead(Read(2))'                               Read(2)'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,OnceBufferingBeginsReadsCanContinuePastEndOfBuffer,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcbcdefg"'                               Read'                               Lookahead(Read(2))'                               Read(2)'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadLineSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadLine()' expectedRaw: 8' expectedChar: 0' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadLineSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadLine()' expectedRaw: 8' expectedChar: 0' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadToEndSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadToEnd()' expectedRaw: 11' expectedChar: 3' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadToEndSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadToEnd()' expectedRaw: 11' expectedChar: 3' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadToEndSupportsLookahead,The following statement contains a magic number: RunReadUntilTest(r => r.ReadToEnd()' expectedRaw: 11' expectedChar: 3' expectedLine: 2);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,ReadLineMaintainsCorrectCharacterPosition,The following statement contains a magic number: RunSourceLocationTest("abc\r\ndef"' new SourceLocation(5' 1' 0)' r => r.ReadLine());
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CancelBacktrackStopsNextEndLookaheadFromBacktracking,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcdefg"'                               Lookahead(                                   Read(2)'                                   CancelBacktrack                                   )'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,TextBufferReaderTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextBufferReaderTest.cs,CancelBacktrackOnlyCancelsBacktrackingForInnermostNestedLookahead,The following statement contains a magic number: RunLookaheadTest("abcdefg"' "abcdabcdefg"'                               Lookahead(                                   Read(2)'                                   Lookahead(                                       Read'                                       CancelBacktrack                                       )'                                   Read                                   )'                               ReadToEnd);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTest.cs,ConstructorWithLineAndCharacterIndexSetsAssociatedProperties,The following statement contains a magic number: SourceLocation loc = new SourceLocation(0' 42' 24);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTest.cs,ConstructorWithLineAndCharacterIndexSetsAssociatedProperties,The following statement contains a magic number: SourceLocation loc = new SourceLocation(0' 42' 24);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTest.cs,ConstructorWithLineAndCharacterIndexSetsAssociatedProperties,The following statement contains a magic number: Assert.Equal(42' loc.LineIndex);
Magic Number,System.Web.Razor.Test.Text,SourceLocationTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\SourceLocationTest.cs,ConstructorWithLineAndCharacterIndexSetsAssociatedProperties,The following statement contains a magic number: Assert.Equal(24' loc.CharacterIndex);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: TextChange change = new TextChange(42' 24' oldBuffer' 1337' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: TextChange change = new TextChange(42' 24' oldBuffer' 1337' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: TextChange change = new TextChange(42' 24' oldBuffer' 1337' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.Equal(42' change.OldPosition);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.Equal(24' change.OldLength);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ConstructorInitializesProperties,The following statement contains a magic number: Assert.Equal(1337' change.NewLength);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,TestIsInsert,The following statement contains a magic number: TextChange change = new TextChange(0' 0' oldBuffer' 35' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,TestIsReplace,The following statement contains a magic number: TextChange change = new TextChange(0' 5' oldBuffer' 10' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,TestIsReplace,The following statement contains a magic number: TextChange change = new TextChange(0' 5' oldBuffer' 10' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,OldTextReturnsOldSpanFromOldBuffer,The following statement contains a magic number: var textChange = new TextChange(2' 1' oldBuffer' 1' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NewTextWithInsertReturnsChangedTextFromBuffer,The following statement contains a magic number: var textChange = new TextChange(0' 0' oldBuffer' 3' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NewTextWithReplaceReturnsChangedTextFromBuffer,The following statement contains a magic number: var textChange = new TextChange(2' 2' oldBuffer' 1' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NewTextWithReplaceReturnsChangedTextFromBuffer,The following statement contains a magic number: var textChange = new TextChange(2' 2' oldBuffer' 1' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ApplyChangeWithInsertedTextReturnsNewContentWithChangeApplied,The following statement contains a magic number: var textChange = new TextChange(0' 0' oldBuffer' 3' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,ApplyChangeWithReplacedTextReturnsNewContentWithChangeApplied,The following statement contains a magic number: var textChange = new TextChange(1' 1' oldBuffer' 2' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NormalizeFixesUpIntelliSenseStyleReplacements,The following statement contains a magic number: var original = new TextChange(0' 4' oldBuffer' 5' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NormalizeFixesUpIntelliSenseStyleReplacements,The following statement contains a magic number: var original = new TextChange(0' 4' oldBuffer' 5' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NormalizeFixesUpIntelliSenseStyleReplacements,The following statement contains a magic number: Assert.Equal(new TextChange(4' 0' oldBuffer' 1' newBuffer)' normalized);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NormalizeDoesntAffectChangesWithoutCommonPrefixes,The following statement contains a magic number: var original = new TextChange(0' 5' oldBuffer' 9' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NormalizeDoesntAffectChangesWithoutCommonPrefixes,The following statement contains a magic number: var original = new TextChange(0' 5' oldBuffer' 9' newBuffer);
Magic Number,System.Web.Razor.Test.Text,TextChangeTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Text\TextChangeTest.cs,NormalizeDoesntAffectShrinkingReplacements,The following statement contains a magic number: var original = new TextChange(0' 8' oldBuffer' 1' newBuffer);
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_At_EOF_In_RazorComment,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz *"' VBSymbolType.RazorComment));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_At_EOF_In_RazorComment,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz *"' VBSymbolType.RazorComment));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(19' 0' 19' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(20' 0' 20' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(19' 0' 19' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(20' 0' 20' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(19' 0' 19' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(20' 0' 20' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(19' 0' 19' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(20' 0' 20' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(19' 0' 19' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(20' 0' 20' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo * Bar * Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(19' 0' 19' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(20' 0' 20' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo Bar Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(15' 0' 15' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(16' 0' 16' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo Bar Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(15' 0' 15' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(16' 0' 16' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo Bar Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(15' 0' 15' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(16' 0' 16' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo Bar Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(15' 0' 15' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(16' 0' 16' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo Bar Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(15' 0' 15' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(16' 0' 16' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new VBSymbol(0' 0' 0' "@"' VBSymbolType.RazorCommentTransition)'                            new VBSymbol(1' 0' 1' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(2' 0' 2' " Foo Bar Baz "' VBSymbolType.RazorComment)'                            new VBSymbol(15' 0' 15' "*"' VBSymbolType.RazorCommentStar)'                            new VBSymbol(16' 0' 16' "@"' VBSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerTest.cs,Next_Returns_Single_Newline_Token_For_CRLF,The following statement contains a magic number: TestTokenizer("\r\n\r\na"'                            new VBSymbol(0' 0' 0' "\r\n"' VBSymbolType.NewLine)'                            new VBSymbol(2' 1' 0' "\r\n"' VBSymbolType.NewLine)'                            IgnoreRemaining);
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerTest.cs,Next_Returns_Token_For_Whitespace_Characters,The following statement contains a magic number: TestTokenizer(" \f\t\u000B \n "'                            new VBSymbol(0' 0' 0' " \f\t\u000B "' VBSymbolType.WhiteSpace)'                            new VBSymbol(5' 0' 5' "\n"' VBSymbolType.NewLine)'                            new VBSymbol(6' 1' 0' " "' VBSymbolType.WhiteSpace));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerTest.cs,Next_Returns_Token_For_Whitespace_Characters,The following statement contains a magic number: TestTokenizer(" \f\t\u000B \n "'                            new VBSymbol(0' 0' 0' " \f\t\u000B "' VBSymbolType.WhiteSpace)'                            new VBSymbol(5' 0' 5' "\n"' VBSymbolType.NewLine)'                            new VBSymbol(6' 1' 0' " "' VBSymbolType.WhiteSpace));
Magic Number,System.Web.Razor.Test.Tokenizer,VBTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\VBTokenizerTest.cs,Next_Returns_Token_For_Whitespace_Characters,The following statement contains a magic number: TestTokenizer(" \f\t\u000B \n "'                            new VBSymbol(0' 0' 0' " \f\t\u000B "' VBSymbolType.WhiteSpace)'                            new VBSymbol(5' 0' 5' "\n"' VBSymbolType.NewLine)'                            new VBSymbol(6' 1' 0' " "' VBSymbolType.WhiteSpace));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_At_EOF_In_RazorComment,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz *"' CSharpSymbolType.RazorComment));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_At_EOF_In_RazorComment,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz *"' CSharpSymbolType.RazorComment));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(19' 0' 19' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(20' 0' 20' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(19' 0' 19' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(20' 0' 20' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(19' 0' 19' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(20' 0' 20' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(19' 0' 19' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(20' 0' 20' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(19' 0' 19' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(20' 0' 20' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo * Bar * Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(19' 0' 19' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(20' 0' 20' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo Bar Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(15' 0' 15' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(16' 0' 16' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo Bar Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(15' 0' 15' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(16' 0' 16' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo Bar Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(15' 0' 15' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(16' 0' 16' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo Bar Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(15' 0' 15' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(16' 0' 16' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo Bar Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(15' 0' 15' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(16' 0' 16' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerCommentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerCommentTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new CSharpSymbol(0' 0' 0' "@"' CSharpSymbolType.RazorCommentTransition)'                            new CSharpSymbol(1' 0' 1' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(2' 0' 2' " Foo Bar Baz "' CSharpSymbolType.RazorComment)'                            new CSharpSymbol(15' 0' 15' "*"' CSharpSymbolType.RazorCommentStar)'                            new CSharpSymbol(16' 0' 16' "@"' CSharpSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerTest.cs,Next_Returns_Single_Newline_Token_For_CRLF,The following statement contains a magic number: TestTokenizer("\r\n\r\na"'                            new CSharpSymbol(0' 0' 0' "\r\n"' CSharpSymbolType.NewLine)'                            new CSharpSymbol(2' 1' 0' "\r\n"' CSharpSymbolType.NewLine)'                            IgnoreRemaining);
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerTest.cs,Next_Returns_Token_For_Whitespace_Characters,The following statement contains a magic number: TestTokenizer(" \f\t\u000B \n "'                            new CSharpSymbol(0' 0' 0' " \f\t\u000B "' CSharpSymbolType.WhiteSpace)'                            new CSharpSymbol(5' 0' 5' "\n"' CSharpSymbolType.NewLine)'                            new CSharpSymbol(6' 1' 0' " "' CSharpSymbolType.WhiteSpace));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerTest.cs,Next_Returns_Token_For_Whitespace_Characters,The following statement contains a magic number: TestTokenizer(" \f\t\u000B \n "'                            new CSharpSymbol(0' 0' 0' " \f\t\u000B "' CSharpSymbolType.WhiteSpace)'                            new CSharpSymbol(5' 0' 5' "\n"' CSharpSymbolType.NewLine)'                            new CSharpSymbol(6' 1' 0' " "' CSharpSymbolType.WhiteSpace));
Magic Number,System.Web.Razor.Test.Tokenizer,CSharpTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\CSharpTokenizerTest.cs,Next_Returns_Token_For_Whitespace_Characters,The following statement contains a magic number: TestTokenizer(" \f\t\u000B \n "'                            new CSharpSymbol(0' 0' 0' " \f\t\u000B "' CSharpSymbolType.WhiteSpace)'                            new CSharpSymbol(5' 0' 5' "\n"' CSharpSymbolType.NewLine)'                            new CSharpSymbol(6' 1' 0' " "' CSharpSymbolType.WhiteSpace));
Magic Number,System.Web.Razor.Test.Tokenizer,TokenizerLookaheadTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\TokenizerLookaheadTest.cs,After_Cancelling_Lookahead_Tokenizer_Returns_Same_Tokens_As_It_Did_Before_Lookahead,The following statement contains a magic number: Assert.Equal(new HtmlSymbol(4' 0' 4' ">"' HtmlSymbolType.CloseAngle)' tokenizer.NextSymbol());
Magic Number,System.Web.Razor.Test.Tokenizer,TokenizerLookaheadTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\TokenizerLookaheadTest.cs,After_Cancelling_Lookahead_Tokenizer_Returns_Same_Tokens_As_It_Did_Before_Lookahead,The following statement contains a magic number: Assert.Equal(new HtmlSymbol(4' 0' 4' ">"' HtmlSymbolType.CloseAngle)' tokenizer.NextSymbol());
Magic Number,System.Web.Razor.Test.Tokenizer,TokenizerLookaheadTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\TokenizerLookaheadTest.cs,After_Cancelling_Lookahead_Tokenizer_Returns_Same_Tokens_As_It_Did_Before_Lookahead,The following statement contains a magic number: Assert.Equal(new HtmlSymbol(4' 0' 4' ">"' HtmlSymbolType.CloseAngle)' tokenizer.NextSymbol());
Magic Number,System.Web.Razor.Test.Tokenizer,TokenizerLookaheadTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\TokenizerLookaheadTest.cs,After_Cancelling_Lookahead_Tokenizer_Returns_Same_Tokens_As_It_Did_Before_Lookahead,The following statement contains a magic number: Assert.Equal(new HtmlSymbol(4' 0' 4' ">"' HtmlSymbolType.CloseAngle)' tokenizer.NextSymbol());
Magic Number,System.Web.Razor.Test.Tokenizer,TokenizerLookaheadTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\TokenizerLookaheadTest.cs,After_Accepting_Lookahead_Tokenizer_Returns_Next_Token,The following statement contains a magic number: Assert.Equal(new HtmlSymbol(4' 0' 4' ">"' HtmlSymbolType.CloseAngle)' tokenizer.NextSymbol());
Magic Number,System.Web.Razor.Test.Tokenizer,TokenizerLookaheadTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\TokenizerLookaheadTest.cs,After_Accepting_Lookahead_Tokenizer_Returns_Next_Token,The following statement contains a magic number: Assert.Equal(new HtmlSymbol(4' 0' 4' ">"' HtmlSymbolType.CloseAngle)' tokenizer.NextSymbol());
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Newline_Is_Recognized,The following statement contains a magic number: TestTokenizer("\n\r\r\n"'                            new HtmlSymbol(0' 0' 0' "\n"' HtmlSymbolType.NewLine)'                            new HtmlSymbol(1' 1' 0' "\r"' HtmlSymbolType.NewLine)'                            new HtmlSymbol(2' 2' 0' "\r\n"' HtmlSymbolType.NewLine));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Newline_Is_Recognized,The following statement contains a magic number: TestTokenizer("\n\r\r\n"'                            new HtmlSymbol(0' 0' 0' "\n"' HtmlSymbolType.NewLine)'                            new HtmlSymbol(1' 1' 0' "\r"' HtmlSymbolType.NewLine)'                            new HtmlSymbol(2' 2' 0' "\r\n"' HtmlSymbolType.NewLine));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_At_EOF_In_RazorComment,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz *"' HtmlSymbolType.RazorComment));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_At_EOF_In_RazorComment,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz *"' HtmlSymbolType.RazorComment));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(19' 0' 19' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(20' 0' 20' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(19' 0' 19' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(20' 0' 20' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(19' 0' 19' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(20' 0' 20' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(19' 0' 19' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(20' 0' 20' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(19' 0' 19' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(20' 0' 20' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Ignores_Star_Without_Trailing_At,The following statement contains a magic number: TestTokenizer("@* Foo * Bar * Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo * Bar * Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(19' 0' 19' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(20' 0' 20' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo Bar Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(15' 0' 15' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(16' 0' 16' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo Bar Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(15' 0' 15' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(16' 0' 16' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo Bar Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(15' 0' 15' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(16' 0' 16' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo Bar Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(15' 0' 15' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(16' 0' 16' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo Bar Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(15' 0' 15' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(16' 0' 16' "@"' HtmlSymbolType.RazorCommentTransition));
Magic Number,System.Web.Razor.Test.Tokenizer,HtmlTokenizerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Tokenizer\HtmlTokenizerTest.cs,Next_Returns_RazorComment_Token_For_Entire_Razor_Comment,The following statement contains a magic number: TestTokenizer("@* Foo Bar Baz *@"'                            new HtmlSymbol(0' 0' 0' "@"' HtmlSymbolType.RazorCommentTransition)'                            new HtmlSymbol(1' 0' 1' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(2' 0' 2' " Foo Bar Baz "' HtmlSymbolType.RazorComment)'                            new HtmlSymbol(15' 0' 15' "*"' HtmlSymbolType.RazorCommentStar)'                            new HtmlSymbol(16' 0' 16' "@"' HtmlSymbolType.RazorCommentTransition));
Missing Default,System.Web.Razor.Test.Framework,ParserTestBase,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Web.Razor.Test\Framework\ParserTestBase.cs,ConfigureAndAddSpanToBlock,The following switch statement is missing a default case: switch (block.Type)              {                  case BlockType.Markup:                      span.With(new MarkupCodeGenerator());                      break;                  case BlockType.Statement:                      span.With(new StatementCodeGenerator());                      break;                  case BlockType.Expression:                      block.CodeGenerator = new ExpressionCodeGenerator();                      span.With(new ExpressionCodeGenerator());                      break;              }
