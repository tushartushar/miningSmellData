Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfEnum,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOf,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.TestCommon,ClassInstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,SetFieldsAndProperties,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,Equal,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.TestCommon,MediaTypeHeaderValueComparer,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\MediaTypeHeaderValueComparer.cs,Compare,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,Equal,The method has 5 parameters. Parameters: expected' actual' ignoreCase' ignoreLineEndingDifferences' ignoreWhiteSpaceDifferences
Long Parameter List,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsArgumentOutOfRange,The method has 5 parameters. Parameters: testCode' paramName' exceptionMessage' allowDerivedExceptions' actualValue
Long Parameter List,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsInvalidEnumArgument,The method has 5 parameters. Parameters: testCode' paramName' invalidValue' enumType' allowDerivedExceptions
Long Parameter List,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeGenericMethod,The method has 5 parameters. Parameters: type' methodName' genericParameterType' parameterTypes' parameterValues
Long Parameter List,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeGenericMethod,The method has 5 parameters. Parameters: instance' methodName' genericParameterType' parameterTypes' parameterValues
Long Parameter List,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeGenericMethod,The method has 5 parameters. Parameters: instance' methodName' genericParameterType' parameterTypes' parameterValues
Long Parameter List,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,TestDataSetAttribute,The method has 5 parameters. Parameters: declaringType' propertyName' declaringType1' propertyName1' testDataVariations
Long Parameter List,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,TestDataSetAttribute,The method has 7 parameters. Parameters: declaringType' propertyName' declaringType1' propertyName1' declaringType2' propertyName2' testDataVariations
Long Parameter List,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,TestDataSetAttribute,The method has 9 parameters. Parameters: declaringType' propertyName' declaringType1' propertyName1' declaringType2' propertyName2' declaringType3' propertyName3' testDataVariations
Long Parameter List,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,TestDataSetAttribute,The method has 11 parameters. Parameters: declaringType' propertyName' declaringType1' propertyName1' declaringType2' propertyName2' declaringType3' propertyName3' declaringType4' propertyName4' testDataVariations
Long Parameter List,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,TestPropertyValue,The method has 5 parameters. Parameters: instance' getFunc' setFunc' valueToSet' valueToCheck
Long Parameter List,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,Property,The method has 5 parameters. Parameters: instance' propertyGetter' expectedDefaultValue' allowNull' roundTripTestValue
Long Parameter List,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,IntegerProperty,The method has 8 parameters. Parameters: instance' propertyGetter' expectedDefaultValue' minLegalValue' illegalLowerValue' maxLegalValue' illegalUpperValue' roundTripTestValue
Long Parameter List,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,NullableIntegerProperty,The method has 8 parameters. Parameters: instance' propertyGetter' expectedDefaultValue' minLegalValue' illegalLowerValue' maxLegalValue' illegalUpperValue' roundTripTestValue
Long Parameter List,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,EnumProperty,The method has 5 parameters. Parameters: instance' propertyGetter' expectedDefaultValue' illegalValue' roundTripTestValue
Long Parameter List,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,StringProperty,The method has 5 parameters. Parameters: instance' propertyGetter' expectedDefaultValue' allowNullAndEmpty' nullAndEmptyReturnValue
Long Parameter List,Microsoft.TestCommon,TheoryDataSet<TParam1;TParam2;TParam3;TParam4;TParam5>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\TheoryDataSet.cs,Add,The method has 5 parameters. Parameters: p1' p2' p3' p4' p5
Long Parameter List,System.Web.TestUtil,MemberHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\MemberHelper.cs,TestStringProperty,The method has 6 parameters. Parameters: instance' propertyName' initialValue' testDefaultValueAttribute' allowNullAndEmpty' nullAndEmptyReturnValue
Long Identifier,Microsoft.TestCommon,ClassInstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,,The length of the parameter dataContractCreatorWithNonPublicMembers is 39.
Long Identifier,Microsoft.TestCommon,TestData,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\DataSets\TestData.cs,,The length of the parameter ValueAndRefTypeTestDataCollection is 33.
Long Identifier,Microsoft.TestCommon,TestData,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\DataSets\TestData.cs,,The length of the parameter RepresentativeValueAndRefTypeTestDataCollection is 47.
Long Statement,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateRandomString,The length of the statement  "            string invalidXmlChars = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\u000B\u000C\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F\uFFFE\uFFFF"; " is 214.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfArray,The length of the statement  "            int size = (int)Math.Pow(CreatorSettings.MaxArrayLength' rndNumber); // this will create more small arrays than large ones " is 122.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfListOfT,The length of the statement  "            int size = (int)Math.Pow(CreatorSettings.MaxListLength' rndNumber); // this will create more small lists than large ones " is 120.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfLinkedListOfT,The length of the statement  "            int size = (int)Math.Pow(CreatorSettings.MaxListLength' rndNumber); // this will create more small lists than large ones " is 120.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfIEnumerableOfT,The length of the statement  "            int size = (int)Math.Pow(CreatorSettings.MaxListLength' rndNumber); // this will create more small lists than large ones " is 120.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfIEnumerableOfT,The length of the statement  "                throw new ArgumentException("Cannot create an instance of an IEnumerable<T> type which does not have a public Add method"); " is 123.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDictionaryOfKAndV,The length of the statement  "            int size = (int)Math.Pow(CreatorSettings.MaxListLength' rndNumber); // this will create more small dictionaries than large ones " is 127.
Long Statement,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOf,The length of the statement  "            MethodInfo randomFactoryMethod = type.GetMethod("CreateInstance"' BindingFlags.Public | BindingFlags.Static' null' new Type[] { typeof(Random) }' null); " is 152.
Long Statement,Microsoft.TestCommon,ClassInstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,GetDataMemberName,The length of the statement  "            DataMemberAttribute[] dataMemberAttr = (DataMemberAttribute[])member.GetCustomAttributes(typeof(DataMemberAttribute)' false); " is 125.
Long Statement,Microsoft.TestCommon,ClassInstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,TrySettingMembersOfGetOnlyCollection,The length of the statement  "                int size = (int)Math.Pow(CreatorSettings.MaxListLength' rndNumber); // this will create more small lists than large ones " is 120.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                permissions.AddPermission(new EnvironmentPermission(EnvironmentPermissionAccess.Read' "TEMP;TMP;USERNAME;OS;COMPUTERNAME")); " is 124.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                permissions.AddPermission(new FileIOPermission(FileIOPermissionAccess.AllAccess' AppDomain.CurrentDomain.BaseDirectory)); " is 121.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                permissions.AddPermission(new IsolatedStorageFilePermission(PermissionState.None) { UsageAllowed = IsolatedStorageContainment.AssemblyIsolationByUser' UserQuota = Int64.MaxValue }); " is 181.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web' PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293"' " is 345.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web.Extensions' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"' " is 356.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web.Abstractions' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"' " is 358.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web.Routing' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"' " is 353.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.ComponentModel.DataAnnotations' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"' " is 372.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web.DynamicData' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"' " is 357.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web.DataVisualization' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9"' " is 363.
Long Statement,Microsoft.TestCommon,PartialTrustTestClassCommand,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PartialTrustRunner.cs,CreatePartialTrustAppDomain,The length of the statement  "                "System.Web.ApplicationServices' PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9" " is 364.
Long Statement,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsArgumentNullOrEmpty,The length of the statement  "            return Throws<ArgumentException>(testCode' "Value cannot be null or empty.\r\nParameter name: " + paramName' allowDerivedExceptions: false); " is 140.
Long Statement,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsArgumentGreaterThan,The length of the statement  "            return ThrowsArgumentOutOfRange(testCode' paramName' String.Format("Value must be greater than {0}."' value)' false' actualValue); " is 130.
Long Statement,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsArgumentGreaterThanOrEqualTo,The length of the statement  "            return ThrowsArgumentOutOfRange(testCode' paramName' String.Format("Value must be greater than or equal to {0}."' value)' false' actualValue); " is 142.
Long Statement,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsArgumentLessThan,The length of the statement  "            return ThrowsArgumentOutOfRange(testCode' paramName' String.Format("Value must be less than {0}."' maxValue)' false' actualValue); " is 130.
Long Statement,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsArgumentLessThanOrEqualTo,The length of the statement  "            return ThrowsArgumentOutOfRange(testCode' paramName' String.Format("Value must be less than or equal to {0}."' maxValue)' false' actualValue); " is 142.
Long Statement,Microsoft.TestCommon,Assert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Assert.cs,ThrowsInvalidEnumArgument,The length of the statement  "                String.Format("The value of argument '{0}' ({1}) is invalid for Enum type '{2}'.{3}Parameter name: {0}"' paramName' invalidValue' enumType.Name' Environment.NewLine)' " is 166.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,GetConstructor,The length of the statement  "            Assert.True(ctor != null' String.Format("Test error: failed to locate generic ctor for type '{0}<{1}>''"' genericBaseType.Name' genericParameterType.Name)); " is 156.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,GetConstructor,The length of the statement  "            Assert.True(ctor != null' String.Format("Test error: failed to locate generic ctor for type '{0}<>''"' genericBaseType.Name)); " is 126.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeConstructor,The length of the statement  "            Assert.True(ctor != null' String.Format("Test error: failed to locate generic ctor for type '{0}<{1}>''"' genericBaseType.Name' genericParameterType.Name)); " is 156.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeConstructor,The length of the statement  "            Assert.True(ctor != null' String.Format("Test error: failed to locate generic ctor for type '{0}<>''"' genericBaseType.Name)); " is 126.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeConstructor,The length of the statement  "            Assert.True(ctor != null' String.Format("Test error: failed to locate generic ctor for type '{0}<{1}>''"' genericBaseType.Name' genericParameterType.Name)); " is 156.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,InvokeConstructor,The length of the statement  "            Assert.True(ctor != null' String.Format("Test error: failed to locate generic ctor for type '{0}<>''"' genericBaseType.Name)); " is 126.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,CreateGenericMethod,The length of the statement  "            MethodInfo methodInfo = type.GetMethods().Where((m) => m.Name.Equals(methodName' StringComparison.OrdinalIgnoreCase) && m.IsGenericMethod && AreAssignableFrom(m.GetParameters()' parameterTypes)).FirstOrDefault(); " is 212.
Long Statement,Microsoft.TestCommon,GenericTypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\GenericTypeAssert.cs,FindMethod,The length of the statement  "            return type.GetMethods().FirstOrDefault((m) => String.Equals(m.Name' methodName' StringComparison.Ordinal) && AreAssignableFrom(m.GetParameters()' parameterValues)); " is 165.
Long Statement,Microsoft.TestCommon,HttpAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\HttpAssert.cs,Equal,The length of the statement  "                KeyValuePair<string' IEnumerable<string>> actualHeader = actualHeaders.FirstOrDefault(h => h.Key == expectedHeader.Key); " is 120.
Long Statement,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,GetBaseDataSet,The length of the statement  "            return TryGetDataSetFromTestDataCollection(declaringType' propertyName' variations) ?? GetDataSet(declaringType' propertyName); " is 127.
Long Statement,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,GetTestDataPropertyValue,The length of the statement  "                throw new ArgumentException(String.Format("Could not find public static property {0} on {1}"' propertyName' declaringType.FullName)); " is 133.
Long Statement,Microsoft.TestCommon,TestDataSetAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TestDataSetAttribute.cs,GetDataSet,The length of the statement  "                throw new InvalidOperationException(String.Format("{0}.{1} is either null or does not implement IEnumerable"' declaringType.FullName' propertyName)); " is 149.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,CheckProperty,The length of the statement  "            Assert.True(expected == actual' String.Format("Type '{0}' should{1} be {2}."' type.FullName' expected ? "" : " NOT"' property)); " is 128.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,HasProperties,The length of the statement  "            TypeAssert.CheckProperty(type' (typeProperties & TypeProperties.IsDisposable) > 0' typeof(IDisposable).IsAssignableFrom(type)' "disposable"); " is 141.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,HasProperties,The length of the statement  "            TypeAssert.CheckProperty(type' (typeProperties & TypeProperties.IsGenericType) > 0' type.IsGenericType' "a generic type"); " is 122.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,HasProperties,The length of the statement  "            TypeAssert.CheckProperty(type' (typeProperties & TypeProperties.IsGenericTypeDefinition) > 0' type.IsGenericTypeDefinition' "a generic type definition"); " is 153.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,HasProperties,The length of the statement  "            TypeAssert.CheckProperty(type' (typeProperties & TypeProperties.IsNestedPrivate) > 0' type.IsNestedPrivate' "nested private"); " is 126.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,HasProperties,The length of the statement  "            TypeAssert.CheckProperty(type' (typeProperties & TypeProperties.IsNestedPublic) > 0' type.IsNestedPublic' "nested public"); " is 123.
Long Statement,Microsoft.TestCommon,TypeAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\Microsoft\TestCommon\TypeAssert.cs,HasProperties,The length of the statement  "                TypeAssert.CheckProperty(type' true' isAssignableFrom.IsAssignableFrom(type)' String.Format("assignable from {0}"' isAssignableFrom.FullName)); " is 143.
Long Statement,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,IntegerProperty,The length of the statement  "                Assert.ThrowsArgumentGreaterThanOrEqualTo(() => { setFunc(instance' illegalLowerValue.Value); }' "value"' minLegalValue.Value.ToString()' illegalLowerValue.Value); " is 163.
Long Statement,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,IntegerProperty,The length of the statement  "                Assert.ThrowsArgumentLessThanOrEqualTo(() => { setFunc(instance' illegalLowerValue.Value); }' "value"' maxLegalValue.Value.ToString()' illegalUpperValue.Value); " is 160.
Long Statement,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,NullableIntegerProperty,The length of the statement  "                Assert.ThrowsArgumentGreaterThanOrEqualTo(() => { setFunc(instance' illegalLowerValue.Value); }' "value"' minLegalValue.Value.ToString()' illegalLowerValue.Value); " is 163.
Long Statement,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,NullableIntegerProperty,The length of the statement  "                Assert.ThrowsArgumentLessThanOrEqualTo(() => { setFunc(instance' illegalLowerValue.Value); }' "value"' maxLegalValue.Value.ToString()' illegalUpperValue.Value); " is 160.
Long Statement,Microsoft.TestCommon,ReflectionAssert,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ReflectionAssert.cs,EnumProperty,The length of the statement  "            Assert.ThrowsInvalidEnumArgument(() => { setFunc(instance' illegalValue); }' "value"' Convert.ToInt32(illegalValue)' typeof(TResult)); " is 134.
Long Statement,System.Web.WebPages.TestUtils,AppDomainUtils,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\AppDomainUtils.cs,RunInSeparateAppDomain,The length of the statement  "                AppDomainHelper helper = appDomain.CreateInstanceAndUnwrap(typeof(AppDomainUtils).Assembly.FullName' typeof(AppDomainHelper).FullName) as AppDomainHelper; " is 154.
Long Statement,System.Web.WebPages.TestUtils,AppDomainUtils,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\AppDomainUtils.cs,SetPreAppStartStage,The length of the statement  "            var value = ((FieldInfo)typeof(BuildManager).Assembly.GetType("System.Web.Compilation.PreStartInitStage").GetMember("DuringPreStartInit")[0]).GetValue(null); " is 157.
Long Statement,System.Web.WebPages.TestUtils,PreAppStartTestHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PreAppStartTestHelper.cs,TestPreAppStartClass,The length of the statement  "            string typeMessage = String.Format("The type '{0}' must be static' public' and named 'PreApplicationStartCode'."' preAppStartType.FullName); " is 140.
Long Statement,System.Web.WebPages.TestUtils,PreAppStartTestHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PreAppStartTestHelper.cs,TestPreAppStartClass,The length of the statement  "            Assert.True(preAppStartType.IsSealed && preAppStartType.IsAbstract && preAppStartType.IsPublic && preAppStartType.Name == "PreApplicationStartCode"' typeMessage); " is 162.
Long Statement,System.Web.WebPages.TestUtils,PreAppStartTestHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PreAppStartTestHelper.cs,TestPreAppStartClass,The length of the statement  "            string editorBrowsableMessage = String.Format("The only attribute on type '{0}' must be [EditorBrowsable(EditorBrowsableState.Never)]."' preAppStartType.FullName); " is 163.
Long Statement,System.Web.WebPages.TestUtils,PreAppStartTestHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PreAppStartTestHelper.cs,TestPreAppStartClass,The length of the statement  "            Assert.True(attrs.Length == 1 && ((EditorBrowsableAttribute)attrs[0]).State == EditorBrowsableState.Never' editorBrowsableMessage); " is 131.
Long Statement,System.Web.WebPages.TestUtils,PreAppStartTestHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\PreAppStartTestHelper.cs,TestPreAppStartClass,The length of the statement  "            string startMethodMessage = String.Format("The only public member on type '{0}' must be a method called Start()."' preAppStartType.FullName); " is 141.
Long Statement,System.Web.WebPages.TestUtils,TestFile,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\TestFile.cs,Create,The length of the statement  "            return new TestFile(String.Format(ResourceNameFormat' Assembly.GetCallingAssembly().GetName().Name' localResourceName)' Assembly.GetCallingAssembly()); " is 151.
Long Statement,System.Web.WebPages.TestUtils,WebUtils,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\WebUtils.cs,CreateHttpRuntime,The length of the statement  "            var appDomainAppVPathField = typeof(HttpRuntime).GetField("_appDomainAppVPath"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 150.
Long Statement,System.Web.WebPages.TestUtils,WebUtils,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\WebUtils.cs,CreateHttpRuntime,The length of the statement  "                var appDomainAppPathField = typeof(HttpRuntime).GetField("_appDomainAppPath"' BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance); " is 148.
Long Statement,System.Web.WebPages.TestUtils,WebUtils,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\WebUtils.cs,CreateVirtualPath,The length of the statement  "            var method = vPath.GetMethod("CreateNonRelativeTrailingSlash"' BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public); " is 131.
Long Statement,System.Web.TestUtil,CultureReplacer,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\CultureReplacer.cs,Dispose,The length of the statement  "                Assert.True(Thread.CurrentThread.ManagedThreadId == _threadId' "The current thread is not the same as the thread invoking the constructor. This should never happen."); " is 167.
Long Statement,System.Web.TestUtil,MemberHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\MemberHelper.cs,GetPropertyInfo,The length of the statement  "            PropertyInfo propInfo = instance.GetType().GetProperty(propertyName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 139.
Long Statement,System.Web.TestUtil,MemberHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\MemberHelper.cs,TestEvent,The length of the statement  "            MethodInfo methodInfo = GetMethodInfo(instance' "On" + eventName' attrs: MethodAttributes.Family | MethodAttributes.Virtual); " is 125.
Long Statement,System.Web.TestUtil,MemberHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\MemberHelper.cs,TestEnumProperty,The length of the statement  "            var targetException = Assert.Throws<TargetInvocationException>(() => propInfo.SetValue(instance' Convert.ToInt32(values[0]) - 1' null)); " is 136.
Long Statement,System.Web.TestUtil,MemberHelper,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\MemberHelper.cs,TestEnumProperty,The length of the statement  "            targetException = Assert.Throws<TargetInvocationException>(() => propInfo.SetValue(instance' Convert.ToInt32(values[values.Length - 1]) + 1' null)); " is 148.
Magic Number,Microsoft.TestCommon,CreatorSettings,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreatorSettings,The following statement contains a magic number: MaxArrayLength = 10;
Magic Number,Microsoft.TestCommon,CreatorSettings,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreatorSettings,The following statement contains a magic number: MaxListLength = 10;
Magic Number,Microsoft.TestCommon,CreatorSettings,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreatorSettings,The following statement contains a magic number: MaxStringLength = 100;
Magic Number,Microsoft.TestCommon,CreatorSettings,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreatorSettings,The following statement contains a magic number: NullValueProbability = 0.01;
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfBoolean,The following statement contains a magic number: return rndGen.Next(2) == 0;
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDateTime,The following statement contains a magic number: int kind = rndGen.Next(3);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDateTimeOffset,The following statement contains a magic number: int offsetMinutes = rndGen.Next(-14 * 60' 14 * 60);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDateTimeOffset,The following statement contains a magic number: int offsetMinutes = rndGen.Next(-14 * 60' 14 * 60);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDateTimeOffset,The following statement contains a magic number: int offsetMinutes = rndGen.Next(-14 * 60' 14 * 60);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDateTimeOffset,The following statement contains a magic number: int offsetMinutes = rndGen.Next(-14 * 60' 14 * 60);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDecimal,The following statement contains a magic number: bool isNegative = rndGen.Next(2) == 0;
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDecimal,The following statement contains a magic number: const int MaxDecimalScale = 28;
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: bool negative = rndGen.Next(2) == 0;
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: int temp = rndGen.Next(40);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: switch (temp)              {                  case 0: return Double.NaN;                  case 1: return Double.PositiveInfinity;                  case 2: return Double.NegativeInfinity;                  case 3: return Double.MinValue;                  case 4: return Double.MaxValue;                  case 5: return Double.Epsilon;                  default:                      result = (double)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: switch (temp)              {                  case 0: return Double.NaN;                  case 1: return Double.PositiveInfinity;                  case 2: return Double.NegativeInfinity;                  case 3: return Double.MinValue;                  case 4: return Double.MaxValue;                  case 5: return Double.Epsilon;                  default:                      result = (double)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: switch (temp)              {                  case 0: return Double.NaN;                  case 1: return Double.PositiveInfinity;                  case 2: return Double.NegativeInfinity;                  case 3: return Double.MinValue;                  case 4: return Double.MaxValue;                  case 5: return Double.Epsilon;                  default:                      result = (double)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: switch (temp)              {                  case 0: return Double.NaN;                  case 1: return Double.PositiveInfinity;                  case 2: return Double.NegativeInfinity;                  case 3: return Double.MinValue;                  case 4: return Double.MaxValue;                  case 5: return Double.Epsilon;                  default:                      result = (double)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfDouble,The following statement contains a magic number: switch (temp)              {                  case 0: return Double.NaN;                  case 1: return Double.PositiveInfinity;                  case 2: return Double.NegativeInfinity;                  case 3: return Double.MinValue;                  case 4: return Double.MaxValue;                  case 5: return Double.Epsilon;                  default:                      result = (double)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfGuid,The following statement contains a magic number: byte[] temp = new byte[16];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfInt16,The following statement contains a magic number: byte[] rndValue = new byte[2];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfInt16,The following statement contains a magic number: result = (short)(result << 8);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfInt32,The following statement contains a magic number: byte[] rndValue = new byte[4];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfInt32,The following statement contains a magic number: result = (int)(result << 8);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfInt64,The following statement contains a magic number: byte[] rndValue = new byte[8];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfInt64,The following statement contains a magic number: result = (long)(result << 8);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfObject,The following statement contains a magic number: return (rndGen.Next(5) == 0) ? null : new object();
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: bool negative = rndGen.Next(2) == 0;
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: int temp = rndGen.Next(40);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: switch (temp)              {                  case 0: return Single.NaN;                  case 1: return Single.PositiveInfinity;                  case 2: return Single.NegativeInfinity;                  case 3: return Single.MinValue;                  case 4: return Single.MaxValue;                  case 5: return Single.Epsilon;                  default:                      result = (float)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: switch (temp)              {                  case 0: return Single.NaN;                  case 1: return Single.PositiveInfinity;                  case 2: return Single.NegativeInfinity;                  case 3: return Single.MinValue;                  case 4: return Single.MaxValue;                  case 5: return Single.Epsilon;                  default:                      result = (float)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: switch (temp)              {                  case 0: return Single.NaN;                  case 1: return Single.PositiveInfinity;                  case 2: return Single.NegativeInfinity;                  case 3: return Single.MinValue;                  case 4: return Single.MaxValue;                  case 5: return Single.Epsilon;                  default:                      result = (float)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: switch (temp)              {                  case 0: return Single.NaN;                  case 1: return Single.PositiveInfinity;                  case 2: return Single.NegativeInfinity;                  case 3: return Single.MinValue;                  case 4: return Single.MaxValue;                  case 5: return Single.Epsilon;                  default:                      result = (float)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfSingle,The following statement contains a magic number: switch (temp)              {                  case 0: return Single.NaN;                  case 1: return Single.PositiveInfinity;                  case 2: return Single.NegativeInfinity;                  case 3: return Single.MinValue;                  case 4: return Single.MaxValue;                  case 5: return Single.Epsilon;                  default:                      result = (float)(rndGen.NextDouble() * 100000);                      if (negative)                      {                          result = -result;                      }                        return result;              }
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfUInt16,The following statement contains a magic number: byte[] rndValue = new byte[2];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfUInt16,The following statement contains a magic number: result = (ushort)(result << 8);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfUInt32,The following statement contains a magic number: byte[] rndValue = new byte[4];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfUInt32,The following statement contains a magic number: result = (uint)(result << 8);
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfUInt64,The following statement contains a magic number: byte[] rndValue = new byte[8];
Magic Number,Microsoft.TestCommon,PrimitiveCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfUInt64,The following statement contains a magic number: result = (ulong)(result << 8);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: rndGen.Next(3) > 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: rndGen.Next(10) == 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: sb.Append(rndGen.Next(65536));
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: rndGen.Next(2) > 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: rndGen.Next(3) > 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: i < rndGen.Next(1' 4)
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: rndGen.Next(4) > 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUri,The following statement contains a magic number: rndGen.Next(3) == 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateScheme,The following statement contains a magic number: int size = rndGen.Next(1' 10);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv4Address,The following statement contains a magic number: sb.Append(rndGen.Next(1000));
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv4Address,The following statement contains a magic number: i < 4
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddIPv6AddressPart,The following statement contains a magic number: int size = rndGen.Next(1' 10);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddIPv6AddressPart,The following statement contains a magic number: size = 4;
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddIPv6AddressPart,The following statement contains a magic number: size > 4
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: int temp = rndGen.Next(6);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: switch (temp)                  {                      case 0:                          sb.Append("::");                          break;                      case 1:                          sb.Append("::1");                          break;                      case 2:                          sb.Append("FF01::101");                          break;                      case 3:                          sb.Append("::1");                          break;                      case 4:                          for (i = 0; i < 3; i++)                          {                              AddIPv6AddressPart(sb' rndGen);                              sb.Append(':');                          }                            for (i = 0; i < 3; i++)                          {                              sb.Append(':');                              AddIPv6AddressPart(sb' rndGen);                          }                            break;                      default:                          for (i = 0; i < 8; i++)                          {                              if (i > 0)                              {                                  sb.Append(':');                              }                                AddIPv6AddressPart(sb' rndGen);                          }                            break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: switch (temp)                  {                      case 0:                          sb.Append("::");                          break;                      case 1:                          sb.Append("::1");                          break;                      case 2:                          sb.Append("FF01::101");                          break;                      case 3:                          sb.Append("::1");                          break;                      case 4:                          for (i = 0; i < 3; i++)                          {                              AddIPv6AddressPart(sb' rndGen);                              sb.Append(':');                          }                            for (i = 0; i < 3; i++)                          {                              sb.Append(':');                              AddIPv6AddressPart(sb' rndGen);                          }                            break;                      default:                          for (i = 0; i < 8; i++)                          {                              if (i > 0)                              {                                  sb.Append(':');                              }                                AddIPv6AddressPart(sb' rndGen);                          }                            break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: switch (temp)                  {                      case 0:                          sb.Append("::");                          break;                      case 1:                          sb.Append("::1");                          break;                      case 2:                          sb.Append("FF01::101");                          break;                      case 3:                          sb.Append("::1");                          break;                      case 4:                          for (i = 0; i < 3; i++)                          {                              AddIPv6AddressPart(sb' rndGen);                              sb.Append(':');                          }                            for (i = 0; i < 3; i++)                          {                              sb.Append(':');                              AddIPv6AddressPart(sb' rndGen);                          }                            break;                      default:                          for (i = 0; i < 8; i++)                          {                              if (i > 0)                              {                                  sb.Append(':');                              }                                AddIPv6AddressPart(sb' rndGen);                          }                            break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: switch (temp)                  {                      case 0:                          sb.Append("::");                          break;                      case 1:                          sb.Append("::1");                          break;                      case 2:                          sb.Append("FF01::101");                          break;                      case 3:                          sb.Append("::1");                          break;                      case 4:                          for (i = 0; i < 3; i++)                          {                              AddIPv6AddressPart(sb' rndGen);                              sb.Append(':');                          }                            for (i = 0; i < 3; i++)                          {                              sb.Append(':');                              AddIPv6AddressPart(sb' rndGen);                          }                            break;                      default:                          for (i = 0; i < 8; i++)                          {                              if (i > 0)                              {                                  sb.Append(':');                              }                                AddIPv6AddressPart(sb' rndGen);                          }                            break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: switch (temp)                  {                      case 0:                          sb.Append("::");                          break;                      case 1:                          sb.Append("::1");                          break;                      case 2:                          sb.Append("FF01::101");                          break;                      case 3:                          sb.Append("::1");                          break;                      case 4:                          for (i = 0; i < 3; i++)                          {                              AddIPv6AddressPart(sb' rndGen);                              sb.Append(':');                          }                            for (i = 0; i < 3; i++)                          {                              sb.Append(':');                              AddIPv6AddressPart(sb' rndGen);                          }                            break;                      default:                          for (i = 0; i < 8; i++)                          {                              if (i > 0)                              {                                  sb.Append(':');                              }                                AddIPv6AddressPart(sb' rndGen);                          }                            break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateIPv6Address,The following statement contains a magic number: switch (temp)                  {                      case 0:                          sb.Append("::");                          break;                      case 1:                          sb.Append("::1");                          break;                      case 2:                          sb.Append("FF01::101");                          break;                      case 3:                          sb.Append("::1");                          break;                      case 4:                          for (i = 0; i < 3; i++)                          {                              AddIPv6AddressPart(sb' rndGen);                              sb.Append(':');                          }                            for (i = 0; i < 3; i++)                          {                              sb.Append(':');                              AddIPv6AddressPart(sb' rndGen);                          }                            break;                      default:                          for (i = 0; i < 8; i++)                          {                              if (i > 0)                              {                                  sb.Append(':');                              }                                AddIPv6AddressPart(sb' rndGen);                          }                            break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateHostName,The following statement contains a magic number: int domainLabelCount = rndGen.Next(4);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateHostName,The following statement contains a magic number: size = rndGen.Next(10) - 1;
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateHostName,The following statement contains a magic number: size = rndGen.Next(10) - 1;
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateHost,The following statement contains a magic number: int temp = rndGen.Next(3);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateHost,The following statement contains a magic number: switch (temp)                  {                      case 0:                          CreateIPv4Address(sb' rndGen);                          break;                      case 1:                          CreateIPv6Address(sb' rndGen);                          break;                      case 2:                          CreateHostName(sb' rndGen);                          break;                  }
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUserInfo,The following statement contains a magic number: AddChars(sb' rndGen' alpha' rndGen.Next(1' 10));
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUserInfo,The following statement contains a magic number: AddChars(sb' rndGen' alpha' rndGen.Next(1' 10));
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateUserInfo,The following statement contains a magic number: rndGen.Next(3) > 0
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddEscapedChar,The following statement contains a magic number: AddChars(sb' rndGen' hex' 2);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddPathSegment,The following statement contains a magic number: int size = rndGen.Next(1' 10);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddUriC,The following statement contains a magic number: int size = rndGen.Next(20);
Magic Number,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,AddUriC,The following statement contains a magic number: rndGen.Next(5) > 0
Magic Number,Microsoft.TestCommon,InstanceCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateInstanceOfNullableOfT,The following statement contains a magic number: rndGen.Next(5) == 0
Magic Number,Microsoft.TestCommon,StringEqualException,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\StringAssertException.cs,ShortenAndEncode,The following statement contains a magic number: int start = Math.Max(position - 20' 0);
Magic Number,Microsoft.TestCommon,StringEqualException,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\StringAssertException.cs,ShortenAndEncode,The following statement contains a magic number: int end = Math.Min(position + 41' value.Length);
Magic Number,Microsoft.TestCommon,StringEqualException,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\StringAssertException.cs,ShortenAndEncode,The following statement contains a magic number: StringBuilder printedValue = new StringBuilder(100);
Magic Number,Microsoft.TestCommon,StringEqualException,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\StringAssertException.cs,ShortenAndEncode,The following statement contains a magic number: StringBuilder printedPointer = new StringBuilder(100);
Magic Number,Microsoft.TestCommon,ForceGCAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ForceGCAttribute.cs,After,The following statement contains a magic number: GC.Collect(99);
Magic Number,Microsoft.TestCommon,ForceGCAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ForceGCAttribute.cs,After,The following statement contains a magic number: GC.Collect(99);
Magic Number,Microsoft.TestCommon,ForceGCAttribute,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\ForceGCAttribute.cs,After,The following statement contains a magic number: GC.Collect(99);
Missing Default,Microsoft.TestCommon,UriCreator,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\Microsoft.TestCommon\InstanceCreator.cs,CreateHost,The following switch statement is missing a default case: switch (temp)                  {                      case 0:                          CreateIPv4Address(sb' rndGen);                          break;                      case 1:                          CreateIPv6Address(sb' rndGen);                          break;                      case 2:                          CreateHostName(sb' rndGen);                          break;                  }
