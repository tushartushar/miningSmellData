Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJsonFromContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromContentTests.cs,BuildParams,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Formatting,FormUrlEncodedJsonFromUriQueryTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromUriQueryTests.cs,BuildParams,Cyclomatic complexity of the method is 10
Complex Method,System.Net.Http.Formatting,ObjectComparer,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonNetSerializationTest.cs,Equals,Cyclomatic complexity of the method is 12
Complex Method,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,Cyclomatic complexity of the method is 16
Complex Method,System.Net.Http.Formatting,JTokenRoundTripComparer,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenRoundTripComparer.cs,Compare,Cyclomatic complexity of the method is 14
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,ReadFromStreamAsync_UsesCorrectCharacterEncodingHelper,The method has 6 parameters. Parameters: formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteToStreamAsync_UsesCorrectCharacterEncodingHelper,The method has 6 parameters. Parameters: formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,ReadContentUsingCorrectCharacterEncodingHelper,The method has 6 parameters. Parameters: formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding
Long Parameter List,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteContentUsingCorrectCharacterEncodingHelper,The method has 6 parameters. Parameters: formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding
Long Parameter List,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,MatchAcceptHeader_ReturnsMatch,The method has 5 parameters. Parameters: acceptHeaders' supportedMediaTypes' expectedMediaType' expectedQuality' ranking
Long Parameter List,System.Net.Http,ReadErrorStream,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,WriteErrorStream,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,System.Net.Http,TestableMediaTypeFormatter,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\ObjectContentTests.cs,WriteToStreamAsync,The method has 5 parameters. Parameters: type' value' stream' content' transportContext
Long Parameter List,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,ValidateResult,The method has 5 parameters. Parameters: requestLine' method' requestUri' version' headers
Long Parameter List,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,ValidateResult,The method has 5 parameters. Parameters: statusLine' version' statusCode' reasonPhrase' headers
Long Parameter List,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,ParseBufferInSteps,The method has 5 parameters. Parameters: parser' buffer' readsize' bodyParts' totalBytesConsumed
Long Identifier,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteToStreamAsync_WritesDataButDoesNotCloseStream,The length of the parameter actualSampleTypeByteRepresentation is 34.
Long Identifier,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,,The length of the parameter ExceptionStreamProviderMessage is 30.
Long Identifier,System.Net.Http,ParserData,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\ParserData.cs,,The length of the parameter HttpRequestUriWithPortAndQuery is 30.
Long Statement,System.Net.Http.Formatting,ObjectComparer,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonNetSerializationTest.cs,Equals,The length of the statement  "                if (typeof(JToken).IsAssignableFrom(xType) || xType == typeof(ArgumentNullException) || xType == typeof(KeyValuePair<JToken' JToken>)) " is 134.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterMatchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterMatchTest.cs,Ctor_ThrowsOnNullFormatter,The length of the statement  "            Assert.ThrowsArgumentNull(() => new MediaTypeFormatterMatch(null' null' null' MediaTypeFormatterMatchRanking.None)' "formatter"); " is 129.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterMatchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterMatchTest.cs,Ctor_ClonesMediaType,The length of the statement  "            MediaTypeFormatterMatch match = new MediaTypeFormatterMatch(formatter' mediaType' null' MediaTypeFormatterMatchRanking.MatchOnCanWriteType); " is 140.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterMatchTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterMatchTest.cs,Ctor_InitializesDefaultValues,The length of the statement  "            MediaTypeFormatterMatch match = new MediaTypeFormatterMatch(formatter' null' null' MediaTypeFormatterMatchRanking.MatchOnCanWriteType); " is 135.
Long Statement,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,CanReadType_ReturnsExpectedValues,The length of the statement  "            Assert.False(isSerializable != canSupport && isSerializable' String.Format("CanReadType returned wrong value for '{0}'."' variationType)); " is 138.
Long Statement,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,CanReadType_ReturnsExpectedValues,The length of the statement  "            Assert.False(isSerializable != canSupport && isSerializable' String.Format("2nd CanReadType returned wrong value for '{0}'."' variationType)); " is 142.
Long Statement,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsync,The length of the statement  "            bool canSerialize = IsTypeSerializableWithJsonSerializer(variationType' testData) && Assert.Http.CanRoundTrip(variationType); " is 125.
Long Statement,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsync,The length of the statement  "                    stream => readObj = Assert.Task.SucceedsWithResult(formatter.ReadFromStreamAsync(variationType' stream' content' null))); " is 121.
Long Statement,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,UseDataContractJsonSerializer_True,The length of the statement  "            Assert.Task.Succeeds(jsonFormatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 140.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectWorks,The length of the statement  "            Assert.IsType<Nest>(formatter.ReadFromStreamAsync(typeof(Nest)' content.ReadAsStreamAsync().Result' content' null).Result); " is 123.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,UseXmlSerializer_True,The length of the statement  "            Assert.Task.Succeeds(xmlFormatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 139.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,UseXmlSerializer_True,The length of the statement  "                "SampleType should not be serialized with data contract name DataContractSampleType because UseXmlSerializer is set to true."); " is 127.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,UseXmlSerializer_True_Indent,The length of the statement  "            Assert.Task.Succeeds(xmlFormatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 139.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,UseXmlSerializer_True_Indent,The length of the statement  "            Assert.True(serializedString.Contains("\r\n")' "Using default XmlSerializer with Indent set to true should emit data with indentation."); " is 137.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsyncUsingXmlSerializer,The length of the statement  "            bool canSerialize = IsSerializableWithXmlSerializer(variationType' testData) && Assert.Http.CanRoundTrip(variationType); " is 120.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsyncUsingXmlSerializer,The length of the statement  "                    stream => readObj = Assert.Task.SucceedsWithResult(formatter.ReadFromStreamAsync(variationType' stream' content' null))); " is 121.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,ReadFromStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            return ReadFromStreamAsync_UsesCorrectCharacterEncodingHelper(formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding); " is 140.
Long Statement,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,WriteToStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            return WriteToStreamAsync_UsesCorrectCharacterEncodingHelper(formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding); " is 139.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,ReadFromStreamAsync_WhenContentLengthIsZero_DoesNotReadStream,The length of the statement  "                        mockStream.Verify(s => s.BeginRead(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())' Times.Never()); " is 152.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteToStreamAsync_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => { formatter.WriteToStreamAsync(null' new object()' Stream.Null' null' null); }' "type"); " is 120.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteToStreamAsync_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => { formatter.WriteToStreamAsync(typeof(object)' new object()' null' null' null); }' "writeStream"); " is 130.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteToStreamAsync_WhenObjectIsNull_WritesDataButDoesNotCloseStream,The length of the statement  "                    mockStream.Verify(s => s.BeginWrite(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())' Times.Never()); " is 153.
Long Statement,System.Net.Http.Formatting,StringWithQualityHeaderValueComparerTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\StringWithQualityHeaderValueComparerTests.cs,ComparerSortsListCorrectly,The length of the statement  "            IEnumerable<StringWithQualityHeaderValue> actualSorted = unsortedValues.OrderByDescending(m => m' StringWithQualityHeaderValueComparer.QualityComparer); " is 152.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties(typeof(FormUrlEncodedJson)' TypeAssert.TypeProperties.IsClass | TypeAssert.TypeProperties.IsStatic); " is 126.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,TryParseThrowsInvalidMaxDepth,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => FormUrlEncodedJson.TryParse(CreateQuery()' -1' out value)' "maxDepth"' "1"' -1); " is 128.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,TryParseThrowsInvalidMaxDepth,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => FormUrlEncodedJson.TryParse(CreateQuery()' 0' out value)' "maxDepth"' "1"' 0); " is 126.
Long Statement,System.Net.Http.Formatting,BufferedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\BufferedMediaTypeFormatterTests.cs,ReadFromStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            return ReadFromStreamAsync_UsesCorrectCharacterEncodingHelper(formatter' content' content' mediaType' encoding' isDefaultEncoding); " is 131.
Long Statement,System.Net.Http.Formatting,BufferedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\BufferedMediaTypeFormatterTests.cs,WriteToStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            return WriteToStreamAsync_UsesCorrectCharacterEncodingHelper(formatter' content' content' mediaType' encoding' isDefaultEncoding); " is 130.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,Negotiate_WhenRequestParameterIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => _negotiator.Negotiate(typeof(string)' null' Enumerable.Empty<MediaTypeFormatter>())' "request"); " is 128.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,Negotiate_UsesRequestedFormatterForXHRAndMatchAllPlusOtherAcceptHeader,The length of the statement  "            _request.Headers.Accept.ParseAdd("text/html'application/xhtml+xml'application/xml;q=0.9'*/*;q=0.8"); // XHR header sent by Firefox 3b5 " is 134.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,ComputeFormatterMatches_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.ComputeFormatterMatches(type: null' request: request' formatters: formatters)' "type"); " is 130.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,ComputeFormatterMatches_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.ComputeFormatterMatches(type: type' request: null' formatters: formatters)' "request"); " is 130.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,ComputeFormatterMatches_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.ComputeFormatterMatches(type: type' request: request' formatters: null)' "formatters"); " is 130.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,MatchAcceptHeader_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.MatchAcceptHeader(sortedAcceptValues: null' formatter: formatter)' "sortedAcceptValues"); " is 132.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,MatchAcceptHeader_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.MatchAcceptHeader(sortedAcceptValues: sortedAcceptValues' formatter: null)' "formatter"); " is 132.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,MatchAcceptHeader_ReturnsMatch,The length of the statement  "            List<MediaTypeWithQualityHeaderValue> unsortedAcceptHeaders = acceptHeaders.Select(a => MediaTypeWithQualityHeaderValue.Parse(a)).ToList(); " is 139.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,MatchAcceptHeader_ReturnsMatch,The length of the statement  "            IEnumerable<MediaTypeWithQualityHeaderValue> sortedAcceptHeaders = negotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(unsortedAcceptHeaders); " is 147.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,ShouldMatchOnType_ReturnsExpectedResult,The length of the statement  "            List<MediaTypeWithQualityHeaderValue> unsortedAcceptHeaders = acceptHeaders.Select(a => MediaTypeWithQualityHeaderValue.Parse(a)).ToList(); " is 139.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,ShouldMatchOnType_ReturnsExpectedResult,The length of the statement  "            IEnumerable<MediaTypeWithQualityHeaderValue> sortedAcceptHeaders = negotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(unsortedAcceptHeaders); " is 147.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,SelectResponseCharacterEncoding_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.SelectResponseCharacterEncoding(request: null' formatter: formatter)' "request"); " is 124.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,SelectResponseCharacterEncoding_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.SelectResponseCharacterEncoding(request: request' formatter: null)' "formatter"); " is 124.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,SortMediaTypeWithQualityHeaderValuesByQFactor_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.SortMediaTypeWithQualityHeaderValuesByQFactor((HttpHeaderValueCollection<MediaTypeWithQualityHeaderValue>)null)' "headerValues"); " is 172.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,SortMediaTypeWithQualityHeaderValuesByQFactor_SortsCorrectly,The length of the statement  "            IEnumerable<MediaTypeWithQualityHeaderValue> actualSorted = negotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(unsortedValues); " is 133.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,SortStringWithQualityHeaderValuesByQFactor_ThrowsOnNull,The length of the statement  "            Assert.ThrowsArgumentNull(() => negotiator.SortStringWithQualityHeaderValuesByQFactor((HttpHeaderValueCollection<StringWithQualityHeaderValue>)null)' "headerValues"); " is 166.
Long Statement,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,SortStringWithQualityHeaderValuesByQFactor_SortsCorrectly,The length of the statement  "            IEnumerable<StringWithQualityHeaderValue> actualSorted = negotiator.SortStringWithQualityHeaderValuesByQFactor(unsortedValues); " is 127.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,Constructor,The length of the statement  "            Assert.True(formatter.SupportedMediaTypes.Contains(mediaType)' String.Format("SupportedMediaTypes should have included {0}."' mediaType.ToString())); " is 149.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectWithBigDepthQuotaWorks,The length of the statement  "            JToken result = (JToken)formatter.ReadFromStreamAsync(typeof(JToken)' content.ReadAsStreamAsync().Result' content' null).Result; " is 128.
Long Statement,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,WriteToStreamAsyncThrowsNotImplemented,The length of the statement  "                "The media type formatter of type 'FormUrlEncodedMediaTypeFormatter' does not support writing because it does not implement the WriteToStreamAsync method."); " is 157.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,CanReadType_ReturnsExpectedValues,The length of the statement  "            Assert.False(isSerializable != canSupport && isSerializable' String.Format("CanReadType returned wrong value for '{0}'."' variationType)); " is 138.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,CanReadType_ReturnsExpectedValues,The length of the statement  "            Assert.False(isSerializable != canSupport && isSerializable' String.Format("2nd CanReadType returned wrong value for '{0}'."' variationType)); " is 142.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsJToken,The length of the statement  "            JToken after = Assert.Task.SucceedsWithResult<object>(formatter.ReadFromStreamAsync(typeof(JToken)' memStream' null' null)) as JToken; " is 134.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsync,The length of the statement  "            bool canSerialize = IsTypeSerializableWithJsonSerializer(variationType' testData) && Assert.Http.CanRoundTrip(variationType); " is 125.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsync,The length of the statement  "                    stream => readObj = Assert.Task.SucceedsWithResult(formatter.ReadFromStreamAsync(variationType' stream' content' null))); " is 121.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,UseDataContractJsonSerializer_False,The length of the statement  "            Assert.Task.Succeeds(formatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 136.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,UseDataContractJsonSerializer_False,The length of the statement  "            //    "SampleType should be serialized with data contract name DataContractSampleType because UseDataContractJsonSerializer is set to true."); " is 142.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,UseDataContractJsonSerializer_False,The length of the statement  "            Assert.False(serializedString.Contains("\r\n")' "Using JsonSerializer should emit data without indentation by default."); " is 121.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,UseDataContractJsonSerializer_False_Indent,The length of the statement  "            Assert.Task.Succeeds(formatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 136.
Long Statement,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,UseDataContractJsonSerializer_False_Indent,The length of the statement  "            Assert.True(serializedString.Contains("\r\n")' "Using JsonSerializer with Indent set to true should emit data with indentation."); " is 130.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterCollectionTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterCollectionTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties(typeof(MediaTypeFormatterCollection)' TypeAssert.TypeProperties.IsPublicVisibleClass' typeof(Collection<MediaTypeFormatter>)); " is 152.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterExtensionsTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties(typeof(MediaTypeFormatterExtensions)' TypeAssert.TypeProperties.IsPublicVisibleClass | TypeAssert.TypeProperties.IsStatic); " is 149.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterExtensionsTests.cs,AddQueryStringMappingThrowsWithNullThis,The length of the statement  "            Assert.ThrowsArgumentNull(() => formatter.AddQueryStringMapping("name"' "value"' new MediaTypeHeaderValue("application/xml"))' "formatter"); " is 140.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterExtensionsTests.cs,AddRequestHeaderMappingThrowsWithNullThis,The length of the statement  "            Assert.ThrowsArgumentNull(() => formatter.AddRequestHeaderMapping("name"' "value"' StringComparison.CurrentCulture' true' new MediaTypeHeaderValue("application/xml"))' "formatter"); " is 181.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterExtensionsTests.cs,AddRequestHeaderMappingAddsSuccessfully,The length of the statement  "            formatter.AddRequestHeaderMapping("name"' "value"' StringComparison.CurrentCulture' true' new MediaTypeHeaderValue("application/xml")); " is 135.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterExtensionsTests.cs,AddRequestHeaderMapping1ThrowsWithNullThis,The length of the statement  "            Assert.ThrowsArgumentNull(() => formatter.AddRequestHeaderMapping("name"' "value"' StringComparison.CurrentCulture' true' "application/xml")' "formatter"); " is 155.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties(typeof(MediaTypeFormatter)' TypeAssert.TypeProperties.IsPublicVisibleClass | TypeAssert.TypeProperties.IsAbstract); " is 141.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,SupportedMediaTypes_AddThrowsWithMediaRange,The length of the statement  "            Assert.ThrowsArgument(() => supportedMediaTypes.Add(mediaType)' "item"' Error.Format(Properties.Resources.CannotUseMediaRangeForSupportedMediaType' typeof(MediaTypeHeaderValue).Name' mediaType.MediaType)); " is 205.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,SupportedMediaTypes_InsertThrowsWithMediaRange,The length of the statement  "            Assert.ThrowsArgument(() => supportedMediaTypes.Insert(0' mediaType)' "item"' Error.Format(Properties.Resources.CannotUseMediaRangeForSupportedMediaType' typeof(MediaTypeHeaderValue).Name' mediaType.MediaType)); " is 211.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,ReadFromStreamAsync_ThrowsNotSupportedException,The length of the statement  "                "The media type formatter of type 'MediaTypeFormatterProxy' does not support reading because it does not implement the ReadFromStreamAsync method."); " is 149.
Long Statement,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,WriteToStreamAsync_ThrowsNotSupportedException,The length of the statement  "                "The media type formatter of type 'MediaTypeFormatterProxy' does not support writing because it does not implement the WriteToStreamAsync method."); " is 148.
Long Statement,System.Net.Http.Formatting,MediaTypeWithQualityHeaderValueComparerTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeWithQualityHeaderValueComparerTests.cs,ComparerSortsListCorrectly,The length of the statement  "            IEnumerable<MediaTypeWithQualityHeaderValue> actualSorted = unsortedValues.OrderByDescending(m => m' MediaTypeWithQualityHeaderValueComparer.QualityComparer); " is 158.
Long Statement,System.Net.Http.Formatting,ParsedMediaTypeHeadeValueTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\ParsedMediaTypeHeaderValueTests.cs,MediaTypeHeaderValue_EnsuresValidMediaType,The length of the statement  "            Assert.Throws<Exception>(() => new MediaTypeHeaderValue(invalidMediaType)' exceptionMessage: null' allowDerivedExceptions: true); " is 129.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,ConstructorThrowsWithEmptyQueryParameterName,The length of the statement  "            Assert.ThrowsArgumentNull(() => new QueryStringMapping(queryStringParameterName' "json"' mediaType)' "queryStringParameterName"); " is 129.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,ConstructorThrowsWithEmptyQueryParameterValue,The length of the statement  "            Assert.ThrowsArgumentNull(() => new QueryStringMapping("query"' queryStringParameterValue' mediaType)' "queryStringParameterValue"); " is 132.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,ConstructorThrowsWithNullMediaTypeHeaderValue,The length of the statement  "            Assert.ThrowsArgumentNull(() => new QueryStringMapping(queryStringParameterName' queryStringParameterValue' (MediaTypeHeaderValue)null)' "mediaType"); " is 150.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,Constructor1ThrowsWithEmptyQueryParameterName,The length of the statement  "            Assert.ThrowsArgumentNull(() => new QueryStringMapping(queryStringParameterName' "json"' mediaType)' "queryStringParameterName"); " is 129.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,Constructor1ThrowsWithEmptyQueryParameterValue,The length of the statement  "            Assert.ThrowsArgumentNull(() => new QueryStringMapping("query"' queryStringParameterValue' mediaType)' "queryStringParameterValue"); " is 132.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,Constructor1ThrowsWithEmptyMediaType,The length of the statement  "            Assert.ThrowsArgumentNull(() => new QueryStringMapping(queryStringParameterName' queryStringParameterValue' (MediaTypeHeaderValue)null)' "mediaType"); " is 150.
Long Statement,System.Net.Http.Formatting,QueryStringMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\QueryStringMappingTests.cs,TryMatchMediaTypeThrowsWithNullUriInHttpRequestMessage,The length of the statement  "            string errorMessage = Error.Format(Properties.Resources.NonNullUriRequiredForMediaTypeMapping' typeof(QueryStringMapping).Name); " is 128.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,Constructor,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.CurrentCulture' true' mediaType); " is 131.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,ConstructorThrowsWithEmptyHeaderName,The length of the statement  "            Assert.ThrowsArgumentNull(() => new RequestHeaderMapping(headerName' "value"' StringComparison.CurrentCulture' false' mediaType)' "headerName"); " is 144.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,ConstructorThrowsWithEmptyHeaderValue,The length of the statement  "            Assert.ThrowsArgumentNull(() => new RequestHeaderMapping("name"' headerValue' StringComparison.CurrentCulture' false' mediaType)' "headerValue"); " is 145.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,ConstructorThrowsWithNullMediaTypeHeaderValue,The length of the statement  "            Assert.ThrowsArgumentNull(() => new RequestHeaderMapping(headerName' headerValue' StringComparison.CurrentCulture' false' (MediaTypeHeaderValue)null)' "mediaType"); " is 164.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,ConstructorThrowsWithInvalidStringComparison,The length of the statement  "            Assert.ThrowsInvalidEnumArgument(() => new RequestHeaderMapping(headerName' headerValue' (StringComparison)invalidValue' false' mediaType)' " is 139.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,Constructor1,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.CurrentCulture' true' mediaType); " is 131.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,Constructor1ThrowsWithEmptyHeaderName,The length of the statement  "            Assert.ThrowsArgumentNull(() => new RequestHeaderMapping(headerName' "value"' StringComparison.CurrentCulture' false' mediaType)' "headerName"); " is 144.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,Constructor1ThrowsWithEmptyHeaderValue,The length of the statement  "            Assert.ThrowsArgumentNull(() => new RequestHeaderMapping("name"' headerValue' StringComparison.CurrentCulture' false' mediaType)' "headerValue"); " is 145.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,Constructor1ThrowsWithEmptyMediaType,The length of the statement  "            Assert.ThrowsArgumentNull(() => new RequestHeaderMapping(headerName' headerValue' StringComparison.CurrentCulture' false' mediaType)' "mediaType"); " is 147.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,TryMatchMediaTypeReturnsTrueWithNameAndValueInRequest,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.Ordinal' subset' mediaType); " is 126.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,TryMatchMediaTypeReturnsTrueWithNameAndValueSubsetInRequest,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.Ordinal' true' mediaType); " is 124.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,TryMatchMediaTypeReturnsFalseWithNameNotInRequest,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.Ordinal' false' mediaType); " is 125.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,TryMatchMediaTypeReturnsFalseWithValueNotInRequest,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.Ordinal' false' mediaType); " is 125.
Long Statement,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,TryMatchMediaTypeThrowsWithNullHttpRequestMessage,The length of the statement  "            RequestHeaderMapping mapping = new RequestHeaderMapping(headerName' headerValue' StringComparison.CurrentCulture' true' mediaType); " is 131.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,UseXmlSerializer_False,The length of the statement  "            Assert.Task.Succeeds(xmlFormatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 139.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,UseXmlSerializer_False_Indent,The length of the statement  "            Assert.Task.Succeeds(xmlFormatter.WriteToStreamAsync(typeof(SampleType)' new SampleType()' memoryStream' content' transportContext: null)); " is 139.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsyncUsingXmlSerializer,The length of the statement  "            bool canSerialize = IsSerializableWithXmlSerializer(variationType' testData) && Assert.Http.CanRoundTrip(variationType); " is 120.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,ReadFromStreamAsync_RoundTripsWriteToStreamAsyncUsingXmlSerializer,The length of the statement  "                    stream => readObj = Assert.Task.SucceedsWithResult(formatter.ReadFromStreamAsync(variationType' stream' content' null))); " is 121.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,ReadFromStream_AsyncRoundTripsWriteToStreamUsingDataContractSerializer,The length of the statement  "            bool canSerialize = IsSerializableWithDataContractSerializer(variationType' testData) && Assert.Http.CanRoundTrip(variationType); " is 129.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,ReadFromStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            string formattedContent = "<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">" + content + "</string>"; " is 123.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,ReadFromStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            return ReadFromStreamAsync_UsesCorrectCharacterEncodingHelper(formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding); " is 140.
Long Statement,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,WriteToStreamAsync_UsesCorrectCharacterEncoding,The length of the statement  "            return WriteToStreamAsync_UsesCorrectCharacterEncodingHelper(formatter' content' formattedContent' mediaType' encoding' isDefaultEncoding); " is 139.
Long Statement,System.Net.Http.Internal,MultipartWriteDelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\MultipartWriteDelegatingStreamTest.cs,MultipartWriteDelegatingStreamTest_CallsCallbackOnSuccess,The length of the statement  "            mockInnerStream.Setup(s => s.BeginWrite(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())) " is 141.
Long Statement,System.Net.Http.Internal,MultipartWriteDelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\MultipartWriteDelegatingStreamTest.cs,MultipartWriteDelegatingStreamTest_CallsCallbackOnFailure,The length of the statement  "            mockInnerStream.Setup(s => s.BeginWrite(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())) " is 141.
Long Statement,System.Net.Http.Internal,ReadOnlyStreamWithEncodingPreambleTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\ReadOnlyStreamWithEncodingPreambleTest.cs,StreamWithoutPreamble,The length of the statement  "                using (ReadOnlyStreamWithEncodingPreamble wrapperStream = new ReadOnlyStreamWithEncodingPreamble(inputStream' encoding)) " is 120.
Long Statement,System.Net.Http,MimeBodyPartTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MimeBodyPartTest.cs,Dispose_ClosesOutputStreamOnNonMemoryStream,The length of the statement  "            mockStreamProvider.Setup(sp => sp.GetStream(It.IsAny<HttpContent>()' It.IsAny<HttpContentHeaders>())).Returns(mockStream.Object); " is 129.
Long Statement,System.Net.Http,MimeBodyPartTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MimeBodyPartTest.cs,Dispose_SetsPositionToZeroOnMemoryStream,The length of the statement  "            mockStreamProvider.Setup(sp => sp.GetStream(It.IsAny<HttpContent>()' It.IsAny<HttpContentHeaders>())).Returns(mockStream.Object); " is 129.
Long Statement,System.Net.Http,PushStreamContentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\PushStreamContentTest.cs,CompleteTaskOnCloseStream_Dispose_CompletesTaskButDoNotCloseInnerStream,The length of the statement  "            MockCompleteTaskOnCloseStream mockStream = new MockCompleteTaskOnCloseStream(mockInnerStream.Object' serializeToStreamTask); " is 124.
Long Statement,System.Net.Http,PushStreamContentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\PushStreamContentTest.cs,NonClosingDelegatingStream_Close_CompletesTaskButDoNotCloseInnerStream,The length of the statement  "            MockCompleteTaskOnCloseStream mockStream = new MockCompleteTaskOnCloseStream(mockInnerStream.Object' serializeToStreamTask); " is 124.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_String_WhenClientIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => client.PostAsync("http://www.example.com"' new object()' new JsonMediaTypeFormatter()' "text/json")' "client"); " is 143.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_String_WhenRequestUriIsNull_ThrowsException,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => _client.PostAsync((string)null' new object()' new JsonMediaTypeFormatter()' "text/json")' " is 136.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_String_WhenAuthoritativeMediaTypeIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PostAsync("http://example.com/myapi/"' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 128.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_String_WhenAuthoritativeMediaTypeStringIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PostAsync("http://example.com/myapi/"' new object()' _formatter' mediaType' CancellationToken.None); " is 121.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_String_WhenFormatterIsSet_CreatesRequestWithObjectContentAndCorrectFormatter,The length of the statement  "            var result = _client.PostAsync("http://example.com/myapi/"' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 128.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_String_WhenClientIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => client.PutAsync("http://www.example.com"' new object()' new JsonMediaTypeFormatter()' "text/json")' "client"); " is 142.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_String_WhenRequestUriIsNull_ThrowsException,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => _client.PutAsync((string)null' new object()' new JsonMediaTypeFormatter()' "text/json")' " is 135.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_String_WhenAuthoritativeMediaTypeIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PutAsync("http://example.com/myapi/"' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 127.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_String_WhenFormatterIsSet_CreatesRequestWithObjectContentAndCorrectFormatter,The length of the statement  "            var result = _client.PutAsync("http://example.com/myapi/"' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 127.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_String_WhenAuthoritativeMediaTypeStringIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PutAsync("http://example.com/myapi/"' new object()' _formatter' mediaType' CancellationToken.None); " is 120.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_Uri_WhenClientIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => client.PostAsync(new Uri("http://www.example.com")' new object()' new JsonMediaTypeFormatter()' "text/json")' "client"); " is 152.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_Uri_WhenRequestUriIsNull_ThrowsException,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => _client.PostAsync((Uri)null' new object()' new JsonMediaTypeFormatter()' "text/json")' " is 133.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_Uri_WhenAuthoritativeMediaTypeIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PostAsync(new Uri("http://example.com/myapi/")' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 137.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_Uri_WhenFormatterIsSet_CreatesRequestWithObjectContentAndCorrectFormatter,The length of the statement  "            var result = _client.PostAsync(new Uri("http://example.com/myapi/")' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 137.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_Uri_WhenAuthoritativeMediaTypeStringIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PostAsync(new Uri("http://example.com/myapi/")' new object()' _formatter' mediaType' CancellationToken.None); " is 130.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PostAsync_Uri_WhenMediaTypeFormatterIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => _client.PostAsync(new Uri("http://example.com")' new object()' formatter: null)' "formatter"); " is 126.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_Uri_WhenClientIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => client.PutAsync(new Uri("http://www.example.com")' new object()' new JsonMediaTypeFormatter()' "text/json")' "client"); " is 151.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_Uri_WhenRequestUriIsNull_ThrowsException,The length of the statement  "            Assert.Throws<InvalidOperationException>(() => _client.PutAsync((Uri)null' new object()' new JsonMediaTypeFormatter()' "text/json")' " is 132.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_Uri_WhenAuthoritativeMediaTypeIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PutAsync(new Uri("http://example.com/myapi/")' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 136.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_Uri_WhenFormatterIsSet_CreatesRequestWithObjectContentAndCorrectFormatter,The length of the statement  "            var result = _client.PutAsync(new Uri("http://example.com/myapi/")' new object()' _formatter' _mediaTypeHeader' CancellationToken.None); " is 136.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_Uri_WhenAuthoritativeMediaTypeStringIsSet_CreatesRequestWithAppropriateContentType,The length of the statement  "            var result = _client.PutAsync(new Uri("http://example.com/myapi/")' new object()' _formatter' mediaType' CancellationToken.None); " is 129.
Long Statement,System.Net.Http,HttpClientExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpClientExtensionsTest.cs,PutAsync_Uri_WhenMediaTypeFormatterIsNull_ThrowsException,The length of the statement  "            Assert.ThrowsArgumentNull(() => _client.PutAsync(new Uri("http://example.com")' new object()' formatter: null)' "formatter"); " is 125.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentParameterIsNull_Throws,The length of the statement  "            Assert.ThrowsArgumentNull(() => HttpContentExtensions.ReadAsAsync(null' typeof(string)' _emptyFormatterList)' "content"); " is 121.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenTypeParameterIsNull_Throws,The length of the statement  "            Assert.ThrowsArgumentNull(() => HttpContentExtensions.ReadAsAsync(new StringContent("")' null' _emptyFormatterList)' "type"); " is 125.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenFormattersParameterIsNull_Throws,The length of the statement  "            Assert.ThrowsArgumentNull(() => HttpContentExtensions.ReadAsAsync(new StringContent("")' typeof(string)' null)' "formatters"); " is 126.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_ReadsFromContent_ThenInvokesFormattersReadFromStreamMethod,The length of the statement  "                .Setup(f => f.ReadFromStreamAsync(typeof(string)' It.IsAny<Stream>()' It.IsAny<HttpContent>()' It.IsAny<IFormatterLogger>())) " is 125.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_InvokesFormatterEvenIfContentLengthIsZero,The length of the statement  "            _formatterMock.Verify(f => f.ReadFromStreamAsync(typeof(string)' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Once()); " is 139.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsCompatibleType_ReadsValueFromObjectContent,The length of the statement  "            _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Never()); " is 142.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsNull_IfTypeIsNullable_SerializesAndDeserializesValue,The length of the statement  "            _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Exactly(6)); " is 145.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsNull_IfTypeIsNotNullable_SerializesAndDeserializesValue,The length of the statement  "            _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Exactly(2)); " is 145.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsNotCompatibleType_SerializesAndDeserializesValue,The length of the statement  "            _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Exactly(2)); " is 145.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsMultipartContentAndFormatterCanReadFromTheContent,The length of the statement  "            _formatterMock.Setup(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' It.IsAny<HttpContent>()' It.IsAny<IFormatterLogger>())) " is 141.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,SetupUpRoundTripSerialization,The length of the statement  "            _formatterMock.Setup(f => f.WriteToStreamAsync(It.IsAny<Type>()' It.IsAny<object>()' It.IsAny<Stream>()' It.IsAny<HttpContent>()' It.IsAny<TransportContext>())) " is 160.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,SetupUpRoundTripSerialization,The length of the statement  "            _formatterMock.Setup(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' It.IsAny<HttpContent>()' It.IsAny<IFormatterLogger>())) " is 141.
Long Statement,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,SetupUpRoundTripSerialization,The length of the statement  "                .Returns<Type' Stream' HttpContent' IFormatterLogger>((type' stream' content' logger) => TaskHelpers.FromResult<object>(factory(type))); " is 136.
Long Statement,System.Net.Http,HttpRequestMessageExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpRequestMessageCommonExtensionsTest.cs,IsCorrectType,The length of the statement  "            Assert.Type.HasProperties(typeof(HttpRequestMessageExtensions)' TypeAssert.TypeProperties.IsStatic | TypeAssert.TypeProperties.IsPublicVisibleClass); " is 149.
Long Statement,System.Net.Http,FormattingUtilitiesTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\FormattingUtilitiesTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties(typeof(FormattingUtilities)' TypeAssert.TypeProperties.IsClass | TypeAssert.TypeProperties.IsStatic); " is 127.
Long Statement,System.Net.Http,MediaTypeConstantsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeConstantsTests.cs,ApplicationOctetStreamMediaType_ReturnsClone,The length of the statement  "            ValidateClones(MediaTypeConstants.ApplicationOctetStreamMediaType' MediaTypeConstants.ApplicationOctetStreamMediaType' null); " is 125.
Long Statement,System.Net.Http,MediaTypeConstantsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeConstantsTests.cs,ApplicationFormUrlEncodedMediaType_ReturnsClone,The length of the statement  "            ValidateClones(MediaTypeConstants.ApplicationFormUrlEncodedMediaType' MediaTypeConstants.ApplicationFormUrlEncodedMediaType' null); " is 131.
Long Statement,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_VerifyArguments,The length of the statement  "            Assert.ThrowsArgument(() => new StringContent(String.Empty' Encoding.UTF8' "application/http").ReadAsHttpRequestMessageAsync()' "content"); " is 139.
Long Statement,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_VerifyArguments,The length of the statement  "            Assert.ThrowsArgument(() => new StringContent(String.Empty' Encoding.UTF8' "application/http").ReadAsHttpResponseMessageAsync()' "content"); " is 140.
Long Statement,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,RoundtripServerResponse,The length of the statement  "            HttpContent content = CreateContent(false' message' @"<html><head><title>Object moved</title></head><body><h2>Object moved to <a href=""/en-us/"">here</a>.</h2></body></html>"); " is 177.
Long Statement,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_ThrowsOnBadStreamProvider,The length of the statement  "            InvalidOperationException exception = Assert.Throws<InvalidOperationException>(() => content.ReadAsMultipartAsync(new BadStreamProvider()).Result); " is 147.
Long Statement,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_ThrowsOnWriteError,The length of the statement  "            IOException exception = Assert.Throws<IOException>(() => content.ReadAsMultipartAsync(new WriteErrorStreamProvider()).Result); " is 126.
Long Statement,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_MultipleLongBodyParts,The length of the statement  "            MultipartMemoryStreamProvider result = content.ReadAsMultipartAsync(new MultipartMemoryStreamProvider()' ParserData.MinBufferSize).Result; " is 138.
Long Statement,System.Net.Http,HttpMessageContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpMessageContentTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties<HttpMessageContent' HttpContent>(TypeAssert.TypeProperties.IsPublicVisibleClass | TypeAssert.TypeProperties.IsDisposable); " is 148.
Long Statement,System.Net.Http,ObjectContentOfTTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\ObjectContentOfTTests.cs,Constructor_WhenFormatterParameterIsNull_Throws,The length of the statement  "            Assert.ThrowsArgumentNull(() => new ObjectContent<string>(""' formatter: null' mediaType: _jsonHeaderValue)' "formatter"); " is 122.
Long Statement,System.Net.Http,ObjectContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\ObjectContentTests.cs,Constructor_WhenFormatterArgumentIsNull_ThrowsEsxception,The length of the statement  "            Assert.ThrowsArgumentNull(() => new ObjectContent(typeof(Object)' _value' formatter: null' mediaType: "foo/bar")' "formatter"); " is 127.
Long Statement,System.Net.Http,ObjectContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\ObjectContentTests.cs,Constructor_WhenFormatterArgumentIsNull_ThrowsEsxception,The length of the statement  "            Assert.ThrowsArgumentNull(() => new ObjectContent(typeof(Object)' _value' formatter: null' mediaType: _jsonHeaderValue)' "formatter"); " is 134.
Long Statement,System.Net.Http,UriExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\UriExtensionsTests.cs,TypeIsCorrect,The length of the statement  "            Assert.Type.HasProperties(typeof(UriExtensions)' TypeAssert.TypeProperties.IsPublicVisibleClass | TypeAssert.TypeProperties.IsStatic); " is 134.
Long Statement,System.Net.Http.Handlers,ProgressContentTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressContentTest.cs,SerializeToStreamAsync_InsertsProgressStream,The length of the statement  "            ProgressMessageHandler progressHandler = MockProgressEventHandler.CreateProgressMessageHandler(out progressEventHandler' sendProgress: true); " is 141.
Long Statement,System.Net.Http.Handlers,ProgressMessageHandlerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressMessageHandlerTest.cs,SendAsync_DoesNotInsertSendProgressWithoutEntityOrHandlerPresent,The length of the statement  "            HttpMessageInvoker invoker = CreateMessageInvoker(includeResponseEntity: false' addReceiveProgressHandler: false' addSendProgressHandler: addSendProgressHandler); " is 162.
Long Statement,System.Net.Http.Handlers,ProgressMessageHandlerTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressMessageHandlerTest.cs,SendAsync_InsertsReceiveProgressWhenResponseEntityPresent,The length of the statement  "            HttpMessageInvoker invoker = CreateMessageInvoker(includeResponseEntity: insertResponseEntity' addSendProgressHandler: false' addReceiveProgressHandler: addReceiveProgressHandler); " is 180.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Read_ReportsBytesRead,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressEventHandler' sendProgress: false); " is 153.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Read_ReportsBytesRead,The length of the statement  "            ProgressStream progressStream = CreateProgressStream(innerStream: innerStream' progressMessageHandler: progressMessageHandler' response: response); " is 147.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,ReadByte_ReportsBytesRead,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressEventHandler' sendProgress: false); " is 153.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,ReadByte_ReportsBytesRead,The length of the statement  "            ProgressStream progressStream = CreateProgressStream(innerStream: innerStream' progressMessageHandler: progressMessageHandler' response: response); " is 147.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndRead_ReportsBytesRead,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressEventHandler' sendProgress: false); " is 153.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndRead_ReportsBytesRead,The length of the statement  "            ProgressStream progressStream = CreateProgressStream(innerStream: innerStream' progressMessageHandler: progressMessageHandler' response: response); " is 147.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Write_ReportsBytesWritten,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressEventHandler' sendProgress: true); " is 152.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Write_ReportsBytesWritten,The length of the statement  "            ProgressStream progressStream = CreateProgressStream(innerStream: innerStream' progressMessageHandler: progressMessageHandler' request: request); " is 145.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,WriteByte_ReportsBytesWritten,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressEventHandler' sendProgress: true); " is 152.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,WriteByte_ReportsBytesWritten,The length of the statement  "            ProgressStream progressStream = CreateProgressStream(innerStream: innerStream' progressMessageHandler: progressMessageHandler' request: request); " is 145.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndWrite_ReportsBytesWritten,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressEventHandler' sendProgress: true); " is 152.
Long Statement,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndWrite_ReportsBytesWritten,The length of the statement  "            ProgressStream progressStream = CreateProgressStream(innerStream: innerStream' progressMessageHandler: progressMessageHandler' request: request); " is 145.
Long Statement,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_CompletesSynchronouslyIfInnerStreamCompletesSynchronously,The length of the statement  "            mockInnerStream.Setup(s => s.BeginWrite(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())) " is 141.
Long Statement,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_CompletesWithExceptionIfInnerStreamThrows,The length of the statement  "            mockInnerStream.Setup(s => s.BeginWrite(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())) " is 141.
Long Statement,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_ReportsBytesWritten,The length of the statement  "            mockInnerStream.Setup(s => s.BeginWrite(It.IsAny<byte[]>()' It.IsAny<int>()' It.IsAny<int>()' It.IsAny<AsyncCallback>()' It.IsAny<object>())) " is 141.
Long Statement,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_ReportsBytesWritten,The length of the statement  "            ProgressMessageHandler progressMessageHandler = MockProgressEventHandler.CreateProgressMessageHandler(out mockProgressHandler' sendProgress: true); " is 147.
Long Statement,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_ReportsBytesWritten,The length of the statement  "            ProgressStream progressStream = ProgressStreamTest.CreateProgressStream(progressMessageHandler: progressMessageHandler' request: request); " is 138.
Long Statement,System.Net.Http.Formatting.Parsers,FormUrlEncodedParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\FormUrlEncodedParserTests.cs,ParseBufferInSteps,The length of the statement  "                state = parser.ParseBuffer(parseBuffer' parseBuffer.Length' ref bytesConsumed' totalBytesConsumed == buffer.Length - size); " is 123.
Long Statement,System.Net.Http.Formatting.Parsers,FormUrlEncodedParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\FormUrlEncodedParserTests.cs,FormUrlEncodedParserThrowsOnInvalidSize,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => { new FormUrlEncodedParser(CreateCollection()' MinMessageSize - 1); }' "maxMessageSize"' MinMessageSize.ToString()' MinMessageSize - 1); " is 184.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,HttpRequestHeaderParserConstructorTest,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => new HttpRequestHeaderParser(result' ParserData.MinRequestLineSize - 1' ParserData.MinHeaderSize)' " is 145.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,HttpRequestHeaderParserConstructorTest,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => new HttpRequestHeaderParser(result' ParserData.MinRequestLineSize' ParserData.MinHeaderSize - 1)' " is 145.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,HttpRequestHeaderParserConstructorTest,The length of the statement  "            HttpRequestHeaderParser parser = new HttpRequestHeaderParser(result' ParserData.MinRequestLineSize' ParserData.MinHeaderSize); " is 126.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,RequestHeaderParserNullBuffer,The length of the statement  "            HttpRequestHeaderParser parser = new HttpRequestHeaderParser(result' ParserData.MinRequestLineSize' ParserData.MinHeaderSize); " is 126.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,RequestHeaderParserMinimumBuffer,The length of the statement  "            HttpRequestHeaderParser parser = new HttpRequestHeaderParser(result' ParserData.MinRequestLineSize' ParserData.MinHeaderSize); " is 126.
Long Statement,System.Net.Http.Formatting.Parsers,HttpRequestLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestLineParserTests.cs,HttpRequestLineParserConstructorTest,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => new HttpRequestLineParser(requestLine' ParserData.MinRequestLineSize - 1)' " is 122.
Long Statement,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,HttpResponseHeaderParserConstructorTest,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => new HttpResponseHeaderParser(result' ParserData.MinStatusLineSize - 1' ParserData.MinHeaderSize)' " is 145.
Long Statement,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,HttpResponseHeaderParserConstructorTest,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => new HttpResponseHeaderParser(result' ParserData.MinStatusLineSize' ParserData.MinHeaderSize - 1)' " is 145.
Long Statement,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,HttpResponseHeaderParserConstructorTest,The length of the statement  "            HttpResponseHeaderParser parser = new HttpResponseHeaderParser(result' ParserData.MinStatusLineSize' ParserData.MinHeaderSize); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,ResponseHeaderParserNullBuffer,The length of the statement  "            HttpResponseHeaderParser parser = new HttpResponseHeaderParser(result' ParserData.MinStatusLineSize' ParserData.MinHeaderSize); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,ResponseHeaderParserMinimumBuffer,The length of the statement  "            HttpResponseHeaderParser parser = new HttpResponseHeaderParser(result' ParserData.MinStatusLineSize' ParserData.MinHeaderSize); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserConstructorTest,The length of the statement  "            Assert.ThrowsArgumentGreaterThanOrEqualTo(() => new InternetMessageFormatHeaderParser(headers.ElementAt(0)' ParserData.MinHeaderSize - 1)' " is 138.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserEmptyBuffer,The length of the statement  "            InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSingleNameValueHeader,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSingleNameValueHeader,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSingleNameHeader,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSingleNameHeader,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserMultipleNameHeader,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserMultipleNameHeader,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserLwsHeader,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserLwsHeader,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserInvalidHeader,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserInvalidHeader,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                { @"JsonProperties0"' @"{ ""SessionId"": ""{27729E1-B37B-4D29-AA0A-E367906C206E}""' ""MessageId"": ""{701332E1-B37B-4D29-AA0A-E367906C206E}""' ""TimeToLive"" : 90' ""CorrelationId"": ""{701332F3-B37B-4D29-AA0A-E367906C206E}""' ""SequenceNumber"" : 12345' ""DeliveryCount"" : 2' ""To"" : ""http://contoso.com/path1""' ""ReplyTo"" : ""http://fabrikam.com/path1""'  ""SentTimeUtc"" : ""Sun' 06 Nov 1994 08:49:37 GMT""' ""ScheduledEnqueueTimeUtc"" : ""Sun' 06 Nov 1994 08:49:37 GMT""}" }' " is 484.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                { @"JsonProperties1"' @"{ ""SessionId"": ""{2813D4D2-46A9-4F4D-8904-E9BDE3712B70}""' ""MessageId"": ""{24AE31D6-63B8-46F3-9975-A3DAF1B6D3F4}""' ""TimeToLive"" : 80' ""CorrelationId"": ""{896DD5BD-1645-44D7-9E7C-D7F70958ECD6}""' ""SequenceNumber"" : 54321' ""DeliveryCount"" : 4' ""To"" : ""http://contoso.com/path2""' ""ReplyTo"" : ""http://fabrikam.com/path2""'  ""SentTimeUtc"" : ""Sun' 06 Nov 1994 10:49:37 GMT""' ""ScheduledEnqueueTimeUtc"" : ""Sun' 06 Nov 1994 10:49:37 GMT""}" }' " is 485.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                { @"P3P"' @"CP=""ALL IND DSP COR ADM CONo CUR CUSo IVAo IVDo PSA PSD TAI TELo OUR SAMo CNT COM INT NAV ONL PHY PRE PUR UNI""" }' " is 128.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                { @"Cookie"' @"omniID=1297715979621_9f45_1519_3f8a_f22f85346ac6; WT_FPC=id=65.55.227.138-2323234032.30136233:lv=1309374389020:ss=1309374389020; A=I&I=AxUFAAAAAACNCAAADYEZ7CFPss7Swnujy4PXZA!!&M=1&CS=126mAa0002ZB51a02gZB51a; MC1=GUID=568428660ad44d4ab8f46133f4b03738&HASH=6628&LV=20113&V=3; WT_NVR_RU=0=msdn:1=:2=; MUID=A44DE185EA1B4E8088CCF7B348C5D65F; MSID=Microsoft.CreationDate=03/04/2011 23:38:15&Microsoft.LastVisitDate=06/20/2011 04:15:08&Microsoft.VisitStartDate=06/20/2011 04:15:08&Microsoft.CookieId=f658f3f2-e6d6-42ab-b86b-96791b942b6f&Microsoft.TokenId=ffffffff-ffff-ffff-ffff-ffffffffffff&Microsoft.NumberOfVisits=106&Microsoft.CookieFirstVisit=1&Microsoft.IdentityToken=AA==&Microsoft.MicrosoftId=0441-6141-1523-9969; msresearch=%7B%22version%22%3A%224.6%22%2C%22state%22%3A%7B%22name%22%3A%22IDLE%22%2C%22url%22%3Aundefined%2C%22timestamp%22%3A1299281911415%7D%2C%22lastinvited%22%3A1299281911415%2C%22userid%22%3A%2212992819114151265672533023080%22%2C%22vendorid%22%3A1%2C%22surveys%22%3A%5Bundefined%5D%7D; CodeSnippetContainerLang=C#; msdn=L=1033; ADS=SN=175A21EF; s_cc=true; s_sq=%5B%5BB%5D%5D; TocHashCookie=ms310241(n)/aa187916(n)/aa187917(n)/dd273952(n)/dd295083(n)/ff472634(n)/ee667046(n)/ee667070(n)/gg259047(n)/gg618436(n)/; WT_NVR=0=/:1=query|library|en-us:2=en-us/vcsharp|en-us/library" }' " is 1314.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                { @"Set-Cookie"' @"A=I&I=AxUFAAAAAADsBgAA1sWZz4FGun/kOeyV4LGZVg!!&M=1; domain=.microsoft.com; expires=Sun' 30-Jun-2041 00:14:40 GMT; path=/" }' " is 143.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "            byte[] data = InternetMessageFormatHeaderParserTests.CreateBuffer(headerData.Select((kv) => { return String.Format("{0}: {1}"' kv.Key' kv.Value); }).ToArray()); " is 160.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSpecializedHeaders,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSplitHeader,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserSplitHeader,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserDataTooBigSingle,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(ParserData.MinHeaderSize' out headers); " is 140.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserDataTooBigSingle,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserTestDataTooBigMulti,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,RunRfc5322SampleTest,The length of the statement  "                InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(data.Length' out headers); " is 127.
Long Statement,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,RunRfc5322SampleTest,The length of the statement  "                ParserState state = InternetMessageFormatHeaderParserTests.ParseBufferInSteps(parser' data' cnt' out totalBytesConsumed); " is 121.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MimeMultipartParserConstructorTest,The length of the statement  "                Assert.ThrowsArgument(() => { new MimeMultipartParser(empty' ParserData.MinMessageSize); }' "boundary"' allowDerivedExceptions: true); " is 134.
Long Statement,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserNullBuffer,The length of the statement  "            Assert.ThrowsArgumentNull(() => { parser.ParseBuffer(null' 0' ref bytesConsumed' out out1' out out2' out isFinal); }' "buffer"); " is 128.
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromContentTests.cs,GeneratedJTokenTest,The following statement contains a magic number: CreatorSettings.MaxArrayLength = 5;
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromContentTests.cs,GeneratedJTokenTest,The following statement contains a magic number: CreatorSettings.MaxListLength = 3;
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromContentTests.cs,GeneratedJTokenTest,The following statement contains a magic number: CreatorSettings.MaxStringLength = 3;
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromContentTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromContentTests.cs,GeneratedJTokenTest,The following statement contains a magic number: i < 1000
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromUriQueryTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromUriQueryTests.cs,GeneratedJTokenTest,The following statement contains a magic number: CreatorSettings.MaxArrayLength = 5;
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromUriQueryTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromUriQueryTests.cs,GeneratedJTokenTest,The following statement contains a magic number: CreatorSettings.MaxListLength = 3;
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromUriQueryTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromUriQueryTests.cs,GeneratedJTokenTest,The following statement contains a magic number: CreatorSettings.MaxStringLength = 3;
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonFromUriQueryTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedFromUriQueryTests.cs,GeneratedJTokenTest,The following statement contains a magic number: i < 1000
Magic Number,System.Net.Http.Formatting,JsonNetSerializationTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonNetSerializationTest.cs,DeserializingDeepArraysThrows,The following statement contains a magic number: int depth = 500;
Magic Number,System.Net.Http.Formatting,JsonNetValidationTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonNetValidationTest.cs,HittingMaxDepthRaisesOnlyOneValidationError,The following statement contains a magic number: i < 5000
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJToken,The following statement contains a magic number: switch (rndGen.Next(10))                  {                      case 0:                      case 1:                      case 2:                          // 30% chance to create an array                          return CreateJArray(rndGen' depth);                      case 3:                      case 4:                      case 5:                          // 30% chance to create an object                          return CreateJObject(rndGen' depth);                      default:                          // 40% chance to create a primitive                          break;                  }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJToken,The following statement contains a magic number: switch (rndGen.Next(10))                  {                      case 0:                      case 1:                      case 2:                          // 30% chance to create an array                          return CreateJArray(rndGen' depth);                      case 3:                      case 4:                      case 5:                          // 30% chance to create an object                          return CreateJObject(rndGen' depth);                      default:                          // 40% chance to create a primitive                          break;                  }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJToken,The following statement contains a magic number: switch (rndGen.Next(10))                  {                      case 0:                      case 1:                      case 2:                          // 30% chance to create an array                          return CreateJArray(rndGen' depth);                      case 3:                      case 4:                      case 5:                          // 30% chance to create an object                          return CreateJObject(rndGen' depth);                      default:                          // 40% chance to create a primitive                          break;                  }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJToken,The following statement contains a magic number: switch (rndGen.Next(10))                  {                      case 0:                      case 1:                      case 2:                          // 30% chance to create an array                          return CreateJArray(rndGen' depth);                      case 3:                      case 4:                      case 5:                          // 30% chance to create an object                          return CreateJObject(rndGen' depth);                      default:                          // 40% chance to create a primitive                          break;                  }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJToken,The following statement contains a magic number: switch (rndGen.Next(10))                  {                      case 0:                      case 1:                      case 2:                          // 30% chance to create an array                          return CreateJArray(rndGen' depth);                      case 3:                      case 4:                      case 5:                          // 30% chance to create an object                          return CreateJObject(rndGen' depth);                      default:                          // 40% chance to create a primitive                          break;                  }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJsonPrimitive,The following statement contains a magic number: switch (rndGen.Next(17))              {                  case 0:                      return PrimitiveCreator.CreateInstanceOfChar(rndGen);                  case 1:                      return new JValue(PrimitiveCreator.CreateInstanceOfByte(rndGen));                  case 2:                      return PrimitiveCreator.CreateInstanceOfSByte(rndGen);                  case 3:                      return PrimitiveCreator.CreateInstanceOfInt16(rndGen);                  case 4:                      return PrimitiveCreator.CreateInstanceOfUInt16(rndGen);                  case 5:                      return PrimitiveCreator.CreateInstanceOfInt32(rndGen);                  case 6:                      return PrimitiveCreator.CreateInstanceOfUInt32(rndGen);                  case 7:                      return PrimitiveCreator.CreateInstanceOfInt64(rndGen);                  case 8:                      return PrimitiveCreator.CreateInstanceOfUInt64(rndGen);                  case 9:                      return PrimitiveCreator.CreateInstanceOfDecimal(rndGen);                  case 10:                      return PrimitiveCreator.CreateInstanceOfDouble(rndGen);                  case 11:                      return PrimitiveCreator.CreateInstanceOfSingle(rndGen);                  case 12:                      return PrimitiveCreator.CreateInstanceOfDateTime(rndGen);                  case 13:                      return PrimitiveCreator.CreateInstanceOfDateTimeOffset(rndGen);                  case 14:                  case 15:                      // TODO: 199532 fix uri comparer                      return PrimitiveCreator.CreateInstanceOfString(rndGen);                  default:                      return PrimitiveCreator.CreateInstanceOfBoolean(rndGen);              }
Magic Number,System.Net.Http.Formatting,JTokenCreatorSurrogate,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JTokenCreatorSurrogate.cs,CreateJObject,The following statement contains a magic number: key = PrimitiveCreator.CreateInstanceOfString(rndGen' 10' keyChars);
Magic Number,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,MaxDepth_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new DataContractJsonMediaTypeFormatter()'                  c => c.MaxDepth'                  expectedDefaultValue: 256'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 256);
Magic Number,System.Net.Http.Formatting,DataContractJsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DataContractJsonMediaTypeFormatterTests.cs,MaxDepth_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new DataContractJsonMediaTypeFormatter()'                  c => c.MaxDepth'                  expectedDefaultValue: 256'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 256);
Magic Number,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectWorks,The following statement contains a magic number: XmlSerializerMediaTypeFormatter formatter = new XmlSerializerMediaTypeFormatter() { MaxDepth = 5001 };
Magic Number,System.Net.Http.Formatting,XmlSerializerMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlSerializerMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectWorks,The following statement contains a magic number: StringContent content = new StringContent(GetDeeplyNestedObject(5000));
Magic Number,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,ReadFromStreamAsync_ReadsDataButDoesNotCloseStream,The following statement contains a magic number: return formatter.ReadFromStreamAsync(typeof(SampleType)' memStream' content' null).ContinueWith(                  readTask =>                  {                      // Assert                      Assert.Equal(TaskStatus.RanToCompletion' readTask.Status);                      Assert.True(memStream.CanRead);                        var value = Assert.IsType<SampleType>(readTask.Result);                      Assert.Equal(42' value.Number);                  });
Magic Number,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,ReadFromStreamAsync_WhenContentLengthIsNull_ReadsDataButDoesNotCloseStream,The following statement contains a magic number: return formatter.ReadFromStreamAsync(typeof(SampleType)' memStream' content' null).ContinueWith(                  readTask =>                  {                      // Assert                      Assert.Equal(TaskStatus.RanToCompletion' readTask.Status);                      Assert.True(memStream.CanRead);                        var value = Assert.IsType<SampleType>(readTask.Result);                      Assert.Equal(42' value.Number);                  });
Magic Number,System.Net.Http.Formatting,MediaTypeFormatterTestBase<TFormatter>,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTestBase.cs,WriteToStreamAsync_WritesDataButDoesNotCloseStream,The following statement contains a magic number: SampleType sampleType = new SampleType { Number = 42 };
Magic Number,System.Net.Http.Formatting,FormDataCollectionTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormDataCollectionTests.cs,CaseInSensitive,The following statement contains a magic number: Assert.Equal(2' nvc.Count);
Magic Number,System.Net.Http.Formatting,FormDataCollectionTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormDataCollectionTests.cs,ToNameValueCollection,The following statement contains a magic number: Assert.Equal(4' nvc.Count);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,ParseThrowsMaxDepthExceeded,The following statement contains a magic number: Assert.ThrowsArgument(() => { FormUrlEncodedJson.Parse(query' 2); }' null);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,ParseThrowsMaxDepthExceeded,The following statement contains a magic number: Assert.NotNull(FormUrlEncodedJson.Parse(query' 3));
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,TryParseReturnsFalseMaxDepthExceeded,The following statement contains a magic number: Assert.False(FormUrlEncodedJson.TryParse(query' 2' out value)' "Parse should have failed due to too high depth.");
Magic Number,System.Net.Http.Formatting,FormUrlEncodedJsonTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedJsonTests.cs,TryParseReturnsFalseMaxDepthExceeded,The following statement contains a magic number: Assert.True(FormUrlEncodedJson.TryParse(query' 3' out value)' "Expected non-null JsonObject instance");
Magic Number,System.Net.Http.Formatting,BufferedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\BufferedMediaTypeFormatterTests.cs,BufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new MockBufferedMediaTypeFormatter()'                  c => c.BufferSize'                  expectedDefaultValue: 16 * 1024'                  minLegalValue: 0'                  illegalLowerValue: -1'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,BufferedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\BufferedMediaTypeFormatterTests.cs,BufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new MockBufferedMediaTypeFormatter()'                  c => c.BufferSize'                  expectedDefaultValue: 16 * 1024'                  minLegalValue: 0'                  illegalLowerValue: -1'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,BufferedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\BufferedMediaTypeFormatterTests.cs,BufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new MockBufferedMediaTypeFormatter()'                  c => c.BufferSize'                  expectedDefaultValue: 16 * 1024'                  minLegalValue: 0'                  illegalLowerValue: -1'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,MockBufferedMediaTypeFormatter,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\BufferedMediaTypeFormatterTests.cs,ReadFromStream,The following statement contains a magic number: return new SampleType { Number = 42 };
Magic Number,System.Net.Http.Formatting,DefaultContentNegotiatorTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\DefaultContentNegotiatorTests.cs,MatchMediaTypeMapping_ReturnsMatch,The following statement contains a magic number: MockMediaTypeMapping mockMediaTypeMapping = new MockMediaTypeMapping(mappingMediatype' 0.75);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadBufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new FormUrlEncodedMediaTypeFormatter()'                  c => c.ReadBufferSize'                  expectedDefaultValue: 32 * 1024'                  minLegalValue: 256'                  illegalLowerValue: 255'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadBufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new FormUrlEncodedMediaTypeFormatter()'                  c => c.ReadBufferSize'                  expectedDefaultValue: 32 * 1024'                  minLegalValue: 256'                  illegalLowerValue: 255'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadBufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new FormUrlEncodedMediaTypeFormatter()'                  c => c.ReadBufferSize'                  expectedDefaultValue: 32 * 1024'                  minLegalValue: 256'                  illegalLowerValue: 255'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadBufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new FormUrlEncodedMediaTypeFormatter()'                  c => c.ReadBufferSize'                  expectedDefaultValue: 32 * 1024'                  minLegalValue: 256'                  illegalLowerValue: 255'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadBufferSize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new FormUrlEncodedMediaTypeFormatter()'                  c => c.ReadBufferSize'                  expectedDefaultValue: 32 * 1024'                  minLegalValue: 256'                  illegalLowerValue: 255'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 1024);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,MaxDepthReturnsCorrectValue,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                   new FormUrlEncodedMediaTypeFormatter()'                   f => f.MaxDepth'                   expectedDefaultValue: 256'                   minLegalValue: 1'                   illegalLowerValue: 0'                   maxLegalValue: null'                   illegalUpperValue: null'                   roundTripTestValue: 10);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,MaxDepthReturnsCorrectValue,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                   new FormUrlEncodedMediaTypeFormatter()'                   f => f.MaxDepth'                   expectedDefaultValue: 256'                   minLegalValue: 1'                   illegalLowerValue: 0'                   maxLegalValue: null'                   illegalUpperValue: null'                   roundTripTestValue: 10);
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectThrows,The following statement contains a magic number: FormUrlEncodedMediaTypeFormatter formatter = new FormUrlEncodedMediaTypeFormatter() { MaxDepth = 100 };
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectThrows,The following statement contains a magic number: StringContent content = new StringContent(GetDeeplyNestedObject(125));
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectWithBigDepthQuotaWorks,The following statement contains a magic number: FormUrlEncodedMediaTypeFormatter formatter = new FormUrlEncodedMediaTypeFormatter() { MaxDepth = 150 };
Magic Number,System.Net.Http.Formatting,FormUrlEncodedMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\FormUrlEncodedMediaTypeFormatterTests.cs,ReadDeeplyNestedObjectWithBigDepthQuotaWorks,The following statement contains a magic number: StringContent content = new StringContent(GetDeeplyNestedObject(125));
Magic Number,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,MaxDepth_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new JsonMediaTypeFormatter()'                  c => c.MaxDepth'                  expectedDefaultValue: 256'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 256);
Magic Number,System.Net.Http.Formatting,JsonMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\JsonMediaTypeFormatterTests.cs,MaxDepth_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new JsonMediaTypeFormatter()'                  c => c.MaxDepth'                  expectedDefaultValue: 256'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 256);
Magic Number,System.Net.Http.Formatting,MediaTypeFormatterCollectionTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterCollectionTests.cs,Constructor,The following statement contains a magic number: Assert.Equal(3' collection.Count);
Magic Number,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,MaxCollectionKeySize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty<MediaTypeFormatter' int>(                  null'                  c => MediaTypeFormatter.MaxHttpCollectionKeys'                  expectedDefaultValue: PlatformInfo.Platform == Platform.Net40 ? 1000 : Int32.MaxValue'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 125);
Magic Number,System.Net.Http.Formatting,MediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\MediaTypeFormatterTests.cs,MaxCollectionKeySize_RoundTrips,The following statement contains a magic number: Assert.Reflection.IntegerProperty<MediaTypeFormatter' int>(                  null'                  c => MediaTypeFormatter.MaxHttpCollectionKeys'                  expectedDefaultValue: PlatformInfo.Platform == Platform.Net40 ? 1000 : Int32.MaxValue'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 125);
Magic Number,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,ConstructorThrowsWithInvalidStringComparison,The following statement contains a magic number: int invalidValue = 999;
Magic Number,System.Net.Http.Formatting,RequestHeaderMappingTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\RequestHeaderMappingTests.cs,Constructor1ThrowsWithInvalidStringComparison,The following statement contains a magic number: int invalidValue = 999;
Magic Number,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,MaxDepthReturnsCorrectValue,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new XmlMediaTypeFormatter()'                  f => f.MaxDepth'                  expectedDefaultValue: 256'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 10);
Magic Number,System.Net.Http.Formatting,XmlMediaTypeFormatterTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\XmlMediaTypeFormatterTests.cs,MaxDepthReturnsCorrectValue,The following statement contains a magic number: Assert.Reflection.IntegerProperty(                  new XmlMediaTypeFormatter()'                  f => f.MaxDepth'                  expectedDefaultValue: 256'                  minLegalValue: 1'                  illegalLowerValue: 0'                  maxLegalValue: null'                  illegalUpperValue: null'                  roundTripTestValue: 10);
Magic Number,System.Net.Http.Internal,DelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\DelegatingStreamTest.cs,DelegatingStream_Read,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,System.Net.Http.Internal,DelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\DelegatingStreamTest.cs,DelegatingStream_BeginRead,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,System.Net.Http.Internal,DelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\DelegatingStreamTest.cs,DelegatingStream_SetLength,The following statement contains a magic number: mockStream.SetLength(10L);
Magic Number,System.Net.Http.Internal,DelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\DelegatingStreamTest.cs,DelegatingStream_SetLength,The following statement contains a magic number: mockInnerStream.Verify(s => s.SetLength(10L)' Times.Once());
Magic Number,System.Net.Http.Internal,DelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\DelegatingStreamTest.cs,DelegatingStream_Write,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,System.Net.Http.Internal,DelegatingStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Internal\DelegatingStreamTest.cs,DelegatingStream_BeginWrite,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,System.Net.Http,MimeBodyPartTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MimeBodyPartTest.cs,GetOutputStream_ThrowsOnInvalidStreamProvider,The following statement contains a magic number: MimeBodyPart bodypart = new MimeBodyPart(streamProvider' 1024);
Magic Number,System.Net.Http,MimeBodyPartTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MimeBodyPartTest.cs,Dispose_ClosesOutputStreamOnNonMemoryStream,The following statement contains a magic number: MimeBodyPart bodypart = new MimeBodyPart(mockStreamProvider.Object' 1024);
Magic Number,System.Net.Http,MimeBodyPartTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MimeBodyPartTest.cs,Dispose_SetsPositionToZeroOnMemoryStream,The following statement contains a magic number: MimeBodyPart bodypart = new MimeBodyPart(mockStreamProvider.Object' 1024);
Magic Number,System.Net.Http,HttpHeaderExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpHeaderExtensionsTest.cs,CopyTo_CopiesContentHeaders,The following statement contains a magic number: source.ContentLength = 1234;
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: var content = new ObjectContent<int[]>(new int[] { 10' 20' 30' 40 }' new JsonMediaTypeFormatter());
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: var content = new ObjectContent<int[]>(new int[] { 10' 20' 30' 40 }' new JsonMediaTypeFormatter());
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: var content = new ObjectContent<int[]>(new int[] { 10' 20' 30' 40 }' new JsonMediaTypeFormatter());
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: var content = new ObjectContent<int[]>(new int[] { 10' 20' 30' 40 }' new JsonMediaTypeFormatter());
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: Assert.Equal(new byte[] { 10' 20' 30' 40 }' result);
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: Assert.Equal(new byte[] { 10' 20' 30' 40 }' result);
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: Assert.Equal(new byte[] { 10' 20' 30' 40 }' result);
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsyncOfT_WhenContentIsObjectContent_GoesThroughSerializationCycleToConvertTypes,The following statement contains a magic number: Assert.Equal(new byte[] { 10' 20' 30' 40 }' result);
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsNull_IfTypeIsNullable_SerializesAndDeserializesValue,The following statement contains a magic number: _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Exactly(6));
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsNull_IfTypeIsNotNullable_SerializesAndDeserializesValue,The following statement contains a magic number: _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Exactly(2));
Magic Number,System.Net.Http,HttpContentExtensionsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentExtensionsTest.cs,ReadAsAsync_WhenContentIsObjectContentAndValueIsNotCompatibleType_SerializesAndDeserializesValue,The following statement contains a magic number: _formatterMock.Verify(f => f.ReadFromStreamAsync(It.IsAny<Type>()' It.IsAny<Stream>()' content' It.IsAny<IFormatterLogger>())' Times.Exactly(2));
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_Throws_TheHeaderSizeExceededTheDefaultLimit,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] response = new[] {                  @"HTTP/1.1 200 OK"'                  String.Format("Set-Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpResponseMessage httpResponse = content.ReadAsHttpResponseMessageAsync(64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpResponseMessage httpResponse = content.ReadAsHttpResponseMessageAsync(64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpResponseMessage httpResponse = content.ReadAsHttpResponseMessageAsync(64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpResponseMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpResponseMessage httpResponse = content.ReadAsHttpResponseMessageAsync(64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: string[] request = new[] {                  @"GET / HTTP/1.1"'                  @"Host: msdn.microsoft.com"'                  String.Format("Cookie: {0}={1}"' new String('a'' 16 * 1024)' new String('b'' 16 * 1024))              };
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpRequestMessage httpRequest = content.ReadAsHttpRequestMessageAsync(Uri.UriSchemeHttp' 64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpRequestMessage httpRequest = content.ReadAsHttpRequestMessageAsync(Uri.UriSchemeHttp' 64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpRequestMessage httpRequest = content.ReadAsHttpRequestMessageAsync(Uri.UriSchemeHttp' 64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMessageExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMessageExtensionsTests.cs,ReadAsHttpRequestMessageAsync_LargeHeaderSize,The following statement contains a magic number: HttpRequestMessage httpRequest = content.ReadAsHttpRequestMessageAsync(Uri.UriSchemeHttp' 64 * 1024' 64 * 1024).Result;
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ValidateContents,The following statement contains a magic number: Assert.Equal(4' content.Headers.Count());
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_ParsesContent,The following statement contains a magic number: Assert.Equal(3' result.Contents.Count);
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_ParsesContent,The following statement contains a magic number: Assert.Equal(3' result.Contents.Count);
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_ParsesContent,The following statement contains a magic number: result = successContent.ReadAsMultipartAsync(new MultipartMemoryStreamProvider()' 1024).Result;
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_ParsesContent,The following statement contains a magic number: Assert.Equal(3' result.Contents.Count);
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_UsingMultipartContent,The following statement contains a magic number: Assert.Equal(3' result.Contents.Count);
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_UsingMultipartContent,The following statement contains a magic number: Assert.Equal("C"' result.Contents[2].ReadAsStringAsync().Result);
Magic Number,System.Net.Http,HttpContentMultipartExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\HttpContentMultipartExtensionsTests.cs,ReadAsMultipartAsync_NestedMultipartContent,The following statement contains a magic number: const int nesting = 10;
Magic Number,System.Net.Http,MultipartFileStreamProviderTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MultipartFileStreamProviderTests.cs,GetStream,The following statement contains a magic number: Assert.Equal(2' provider.FileData.Count);
Magic Number,System.Net.Http,MultipartFormDataStreamProviderTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\MultipartFormDataStreamProviderTests.cs,PostProcessing_ProcessesFormData,The following statement contains a magic number: int maxContents = 16;
Magic Number,System.Net.Http,UriExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\UriExtensionsTests.cs,TryReadQueryAsSucceeds,The following statement contains a magic number: Assert.Equal(2' so1.a);
Magic Number,System.Net.Http,UriExtensionsTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\UriExtensionsTests.cs,TryReadQueryAsTSucceeds,The following statement contains a magic number: Assert.Equal(2' so1.a);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Read_ReportsBytesRead,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Read_ReportsBytesRead,The following statement contains a magic number: Assert.Equal((100L * totalBytesRead) / expectedLength' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Read_ReportsBytesRead,The following statement contains a magic number: Assert.Equal(100' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,ReadByte_ReportsBytesRead,The following statement contains a magic number: Assert.Equal((100L * totalBytesRead) / expectedLength' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,ReadByte_ReportsBytesRead,The following statement contains a magic number: Assert.Equal(100' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndRead_ReportsBytesRead,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndRead_ReportsBytesRead,The following statement contains a magic number: Assert.Equal((100L * totalBytesRead) / expectedLength' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndRead_ReportsBytesRead,The following statement contains a magic number: Assert.Equal(100' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Write_ReportsBytesWritten,The following statement contains a magic number: bytesWritten = Math.Min(8' (int)expectedLength - totalBytesWritten);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Write_ReportsBytesWritten,The following statement contains a magic number: Assert.Equal((100L * totalBytesWritten) / expectedLength' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,Write_ReportsBytesWritten,The following statement contains a magic number: Assert.Equal(100' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,WriteByte_ReportsBytesWritten,The following statement contains a magic number: Assert.Equal((100L * totalBytesWritten) / expectedLength' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,WriteByte_ReportsBytesWritten,The following statement contains a magic number: Assert.Equal(100' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndWrite_ReportsBytesWritten,The following statement contains a magic number: bytesWritten = Math.Min(8' (int)expectedLength - totalBytesWritten);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndWrite_ReportsBytesWritten,The following statement contains a magic number: Assert.Equal((100L * totalBytesWritten) / expectedLength' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,BeginEndWrite_ReportsBytesWritten,The following statement contains a magic number: Assert.Equal(100' mockProgressEventHandler.EventArgs.ProgressPercentage);
Magic Number,System.Net.Http.Handlers,ProgressStreamTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressStreamTest.cs,CreateContent,The following statement contains a magic number: count < 100
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_BeginWriteOnInnerStream,The following statement contains a magic number: IAsyncResult result = new ProgressWriteAsyncResult(                  mockInnerStream.Object' progressStream' sampleData' 2' 4' null' null);
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_BeginWriteOnInnerStream,The following statement contains a magic number: IAsyncResult result = new ProgressWriteAsyncResult(                  mockInnerStream.Object' progressStream' sampleData' 2' 4' null' null);
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_BeginWriteOnInnerStream,The following statement contains a magic number: mockInnerStream.Verify(s => s.BeginWrite(sampleData' 2' 4' It.IsAny<AsyncCallback>()' It.IsAny<object>())'                  Times.Once());
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_BeginWriteOnInnerStream,The following statement contains a magic number: mockInnerStream.Verify(s => s.BeginWrite(sampleData' 2' 4' It.IsAny<AsyncCallback>()' It.IsAny<object>())'                  Times.Once());
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_CompletesSynchronouslyIfInnerStreamCompletesSynchronously,The following statement contains a magic number: IAsyncResult result = new ProgressWriteAsyncResult(                  mockInnerStream.Object' progressStream' sampleData' 2' 4' null' userState);
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_CompletesSynchronouslyIfInnerStreamCompletesSynchronously,The following statement contains a magic number: IAsyncResult result = new ProgressWriteAsyncResult(                  mockInnerStream.Object' progressStream' sampleData' 2' 4' null' userState);
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_CompletesWithExceptionIfInnerStreamThrows,The following statement contains a magic number: IAsyncResult result = new ProgressWriteAsyncResult(                  mockInnerStream.Object' progressStream' sampleData' 2' 2' null' null);
Magic Number,System.Net.Http.Handlers,ProgressWriteAsyncResultTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\ProgressWriteAsyncResultTest.cs,Constructor_CompletesWithExceptionIfInnerStreamThrows,The following statement contains a magic number: IAsyncResult result = new ProgressWriteAsyncResult(                  mockInnerStream.Object' progressStream' sampleData' 2' 2' null' null);
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: int progressPercentage = 10;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long bytesTransferred = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long bytesTransferred = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long bytesTransferred = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long bytesTransferred = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long? totalBytes = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long? totalBytes = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long? totalBytes = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Handlers,HttpProgressEventArgsTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Handlers\HttpProgressEventArgsTest.cs,Constructor_Initializes,The following statement contains a magic number: long? totalBytes = 10L * 1024 * 1024 * 1024;
Magic Number,System.Net.Http.Formatting.DataSets.Types,DataContractType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\DataContractType.cs,GetDerivedTypeTestData,The following statement contains a magic number: return new DerivedDataContractType[] {                   new DerivedDataContractType()'                   new DerivedDataContractType(1' "SomeName"' null)'                   new DerivedDataContractType(1' "SomeName"' new WcfPocoType(2' "SomeOtherName"))};
Magic Number,System.Net.Http.Formatting.DataSets.Types,DerivedDataContractType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\DerivedDataContractType.cs,GetTestData,The following statement contains a magic number: return new DerivedDataContractType[] {                   new DerivedDataContractType()'                   new DerivedDataContractType(1' "SomeName"' new WcfPocoType(2' "SomeOtherName")) };
Magic Number,System.Net.Http.Formatting.DataSets.Types,DerivedDataContractType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\DerivedDataContractType.cs,GetKnownTypeTestData,The following statement contains a magic number: return new DerivedDataContractType[] {                   new DerivedDataContractType()'                   new DerivedDataContractType(1' "SomeName"' null)'                   new DerivedDataContractType(1' "SomeName"' new DerivedWcfPocoType(2' "SomeOtherName"' null))};
Magic Number,System.Net.Http.Formatting.DataSets.Types,DerivedXmlSerializableType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\DerivedXmlSerializableType.cs,GetTestData,The following statement contains a magic number: return new DerivedXmlSerializableType[] {                   new DerivedXmlSerializableType()'                   new DerivedXmlSerializableType(1' "SomeName"' new WcfPocoType(2' "SomeOtherName")) };
Magic Number,System.Net.Http.Formatting.DataSets.Types,DerivedXmlSerializableType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\DerivedXmlSerializableType.cs,GetKnownTypeTestData,The following statement contains a magic number: return new DerivedXmlSerializableType[] {                   new DerivedXmlSerializableType()'                   new DerivedXmlSerializableType(1' "SomeName"' null)'                   new DerivedXmlSerializableType(1' "SomeName"' new DerivedWcfPocoType(2' "SomeOtherName"' null))};
Magic Number,System.Net.Http.Formatting.DataSets.Types,WcfPocoType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\WcfPocoType.cs,GetDerivedTypeTestData,The following statement contains a magic number: return new DerivedWcfPocoType[] {                   new DerivedWcfPocoType()'                   new DerivedWcfPocoType(1' "SomeName"' null)'                   new DerivedWcfPocoType(1' "SomeName"' new WcfPocoType(2' "SomeOtherName"))};
Magic Number,System.Net.Http.Formatting.DataSets.Types,XmlSerializableType,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\DataSets\Types\XmlSerializableType.cs,GetDerivedTypeTestData,The following statement contains a magic number: return new DerivedXmlSerializableType[] {                   new DerivedXmlSerializableType()'                   new DerivedXmlSerializableType(1' "SomeName"' null)'                   new DerivedXmlSerializableType(1' "SomeName"' new WcfPocoType(2' "SomeOtherName"))};
Magic Number,System.Net.Formatting.Tests,SerializerConsistencyTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\SerializerConsistencyTests.cs,Dictionary,The following statement contains a magic number: dict["two"] = 2;
Magic Number,System.Net.Formatting.Tests,SerializerConsistencyTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\SerializerConsistencyTests.cs,Linq,The following statement contains a magic number: var l = from i in Enumerable.Range(1' 10) where i > 5 select i * i;
Magic Number,System.Net.Formatting.Tests,SerializerConsistencyTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\SerializerConsistencyTests.cs,Linq,The following statement contains a magic number: var l = from i in Enumerable.Range(1' 10) where i > 5 select i * i;
Magic Number,System.Net.Http.Headers,CookieHeaderValueTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Headers\CookieHeaderValueTest.cs,CookieHeaderValue_Clone,The following statement contains a magic number: expectedValue.MaxAge = TimeSpan.FromDays(10);
Magic Number,System.Net.Http.Headers,CookieHeaderValueTest,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Headers\CookieHeaderValueTest.cs,CookieHeaderValue_GetItem_CreatesEmptyCookieIfNotAlreadyPresent,The following statement contains a magic number: Assert.Equal(2' header.Cookies.Count);
Magic Number,System.Net.Http.Formatting.Parsers,FormUrlEncodedParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\FormUrlEncodedParserTests.cs,ParseBufferThrowsOnNullBuffer,The following statement contains a magic number: FormUrlEncodedParser parser = CreateParser(128' out collection);
Magic Number,System.Net.Http.Formatting.Parsers,HttpRequestHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestHeaderParserTests.cs,RequestHeaderParserAcceptsValidVersion,The following statement contains a magic number: byte[] data = CreateBuffer("GET"' "/"' String.Format("HTTP/{0}"' version.ToString(2))' ParserData.ValidHeaders);
Magic Number,System.Net.Http.Formatting.Parsers,HttpRequestLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestLineParserTests.cs,RequestLineParserRejectsInvalidMethod,The following statement contains a magic number: HttpRequestLineParser parser = new HttpRequestLineParser(requestLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpRequestLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestLineParserTests.cs,RequestLineParserRejectsInvalidUri,The following statement contains a magic number: HttpRequestLineParser parser = new HttpRequestLineParser(requestLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpRequestLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestLineParserTests.cs,RequestLineParserAcceptsValidVersion,The following statement contains a magic number: byte[] data = CreateBuffer("GET"' "/"' String.Format("HTTP/{0}"' version.ToString(2)));
Magic Number,System.Net.Http.Formatting.Parsers,HttpRequestLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestLineParserTests.cs,RequestLineParserAcceptsValidVersion,The following statement contains a magic number: HttpRequestLineParser parser = new HttpRequestLineParser(requestLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpRequestLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpRequestLineParserTests.cs,RequestLineParserRejectsInvalidVersion,The following statement contains a magic number: HttpRequestLineParser parser = new HttpRequestLineParser(requestLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpResponseHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpResponseHeaderParserTests.cs,ResponseHeaderParserAcceptsValidVersion,The following statement contains a magic number: byte[] data = CreateBuffer(String.Format("HTTP/{0}"' version.ToString(2))' "200"' "Reason"' ParserData.ValidHeaders);
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpStatusLineParserTests.cs,StatusLineParserRejectsInvalidStatusCodes,The following statement contains a magic number: HttpStatusLineParser parser = new HttpStatusLineParser(statusLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpStatusLineParserTests.cs,StatusLineParserAcceptsValidReasonPhrase,The following statement contains a magic number: HttpStatusLineParser parser = new HttpStatusLineParser(statusLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpStatusLineParserTests.cs,StatusLineParserAcceptsValidVersion,The following statement contains a magic number: byte[] data = CreateBuffer(String.Format("HTTP/{0}"' version.ToString(2))' "200"' "Reason");
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpStatusLineParserTests.cs,StatusLineParserAcceptsValidVersion,The following statement contains a magic number: HttpStatusLineParser parser = new HttpStatusLineParser(statusLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,HttpStatusLineParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\HttpStatusLineParserTests.cs,StatusLineParserRejectsInvalidVersion,The following statement contains a magic number: HttpStatusLineParser parser = new HttpStatusLineParser(statusLine' 256);
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserNullBuffer,The following statement contains a magic number: InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(128' out headers);
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserMultipleNameHeader,The following statement contains a magic number: Assert.Equal(2' parsedValues.Count());
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserLwsHeader,The following statement contains a magic number: Assert.Equal(3' headers.Count());
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserInvalidHeader,The following statement contains a magic number: Assert.Equal(data.Length - 2' totalBytesConsumed);
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserTestDataTooBigMulti,The following statement contains a magic number: InternetMessageFormatHeaderParser parser = InternetMessageFormatHeaderParserTests.CreateHeaderParser(10' out headers);
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,HeaderParserTestDataTooBigMulti,The following statement contains a magic number: Assert.Equal(10' totalBytesConsumed);
Magic Number,System.Net.Http.Formatting.Parsers,InternetMessageFormatHeaderParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\InternetMessageFormatHeaderParserTests.cs,Rfc5322Sample10Test,The following statement contains a magic number: RunRfc5322SampleTest(Rfc5322Sample10'                  (headers) =>                  {                      Assert.NotNull(headers);                      Assert.True(headers.Contains("received"));                      Assert.Equal(2' headers.GetValues("received").Count());                      Assert.True(headers.Contains("from"));                      Assert.True(headers.Contains("to"));                      Assert.True(headers.Contains("subject"));                      Assert.True(headers.Contains("date"));                      Assert.True(headers.Contains("message-id"));                  });
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MimeMultipartParser_ThrowsOnTooBigBoundary,The following statement contains a magic number: string maxLegalBoundary = new string('a'' 246);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MimeMultipartParser_ThrowsOnTooBigBoundary,The following statement contains a magic number: string minIllegalBoundary = new string('a'' 247);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserNullBuffer,The following statement contains a magic number: MimeMultipartParser parser = CreateMimeMultipartParser(128' "-");
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserEmptyBuffer,The following statement contains a magic number: Assert.Equal(2' bodyParts.Count);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserSingleShortBodyPart,The following statement contains a magic number: Assert.Equal(2' bodyParts.Count);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserSingleLongBodyPart,The following statement contains a magic number: Assert.Equal(2' bodyParts.Count);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserNearMatches,The following statement contains a magic number: Assert.Equal(2' bodyParts.Count);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserNesting,The following statement contains a magic number: Assert.Equal(2' bodyParts.Count);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MultipartParserNesting,The following statement contains a magic number: nesting < 16
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MimeMultipartParserTestMultipartContent,The following statement contains a magic number: Assert.Equal(4' bodyParts.Count);
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MimeMultipartParserTestMultipartContent,The following statement contains a magic number: Assert.True(bodyParts[2].EndsWith("B"));
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,MimeMultipartParserTestMultipartContent,The following statement contains a magic number: Assert.True(bodyParts[3].EndsWith("C"));
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,ParseBufferInSteps,The following statement contains a magic number: byte[] currentBodyPart = new byte[32 * 1024];
Magic Number,System.Net.Http.Formatting.Parsers,MimeMultipartParserTests,C:\research\architectureSmells\repos\mono_aspnetwebstack\test\System.Net.Http.Formatting.Test\Formatting\Parsers\MimeMultipartParserTests.cs,ParseBufferInSteps,The following statement contains a magic number: byte[] currentBodyPart = new byte[32 * 1024];
