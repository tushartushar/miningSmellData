Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestMethodTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestMethodTask.cs,XunitTestMethodTask,The method has 6 parameters. Parameters: parentId' projectId' classTypeName' methodName' explicitly' isDynamic
Long Parameter List,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestTheoryTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestTheoryTask.cs,XunitTestTheoryTask,The method has 5 parameters. Parameters: parentTaskId' projectId' typeName' methodName' theoryName
Long Identifier,XunitContrib.Runner.ReSharper.RemoteRunner,RunContext,C:\repos\xunit_resharper-xunit\resharper\src\runner\RunContext.cs,,The length of the parameter tasksByFullyQualifiedMethodName is 31.
Long Statement,XunitContrib.Runner.ReSharper.RemoteRunner,AbstractionExtensions,C:\repos\xunit_resharper-xunit\resharper\src\runner\AbstractionExtensions.cs,ConvertExceptions,The length of the statement  "            simplifiedMessage = exceptionMessage.StartsWith(safeExceptionType) ? exceptionMessage : exceptionType + exceptionMessage; " is 121.
Long Statement,XunitContrib.Runner.ReSharper.RemoteRunner,RunContext,C:\repos\xunit_resharper-xunit\resharper\src\runner\RunContext.cs,Add,The length of the statement  "                var task = IsTheory(testCase) ? GetTheoryTask(testCase.TestMethod' testCase.DisplayName) : GetMethodTask(testMethod' testMethod.Method.Name); " is 141.
Long Statement,XunitContrib.Runner.ReSharper.RemoteRunner.Logging,MessageLogFormatter,C:\repos\xunit_resharper-xunit\resharper\src\runner\Logging\MessageLogFormatter.cs,GetIdentifier,The length of the statement  "            return message == null ? null : string.Format("test: «{0}» - {1}"' message.Test.DisplayName' message.TestCase.Format()); " is 120.
Long Statement,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitBootstrapTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitBootstrapTask.cs,SaveXml,The length of the statement  "            SetXmlAttribute(element' AttributeNames.DisableAllConcurrency' DisableAllConcurrency.ToString(CultureInfo.InvariantCulture)); " is 125.
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner,RunContext,C:\repos\xunit_resharper-xunit\resharper\src\runner\RunContext.cs,GetNextMethodTask,The following statement contains a magic number: lock (lockObject)              {                  var task = GetMethodTask(testMethod' testMethod.Method.Name);                  for (var i = 2; handledDynamicTasks.Contains(task.RemoteTask); i++)                  {                      var numberedMethodName = string.Format("{0} [{1}]"' testMethod.Method.Name' i);                      task = GetMethodTask(testMethod' numberedMethodName);                  }                    handledDynamicTasks.Add(task.RemoteTask);                  return task;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner,RunContext,C:\repos\xunit_resharper-xunit\resharper\src\runner\RunContext.cs,GetNextTheoryTask,The following statement contains a magic number: lock (lockObject)              {                  // TODO: Add an upper limit?                  // Would need an exception thrown and handling for null tasks                  var task = GetTheoryTask(testMethod' displayName);                  for (var i = 2; handledDynamicTasks.Contains(task.RemoteTask); i++)                  {                      var numberedDisplayName = string.Format("{0} [{1}]"' displayName' i);                      task = GetTheoryTask(testMethod' numberedDisplayName);                  }                    handledDynamicTasks.Add(task.RemoteTask);                  return task;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestClassTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestClassTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var result = (ProjectId != null ? ProjectId.GetHashCode() : 0);                  result = (result * 397) ^ (TypeName != null ? TypeName.GetHashCode() : 0);                  result = (result * 397) ^ Explicitly.GetHashCode();                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestClassTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestClassTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var result = (ProjectId != null ? ProjectId.GetHashCode() : 0);                  result = (result * 397) ^ (TypeName != null ? TypeName.GetHashCode() : 0);                  result = (result * 397) ^ Explicitly.GetHashCode();                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestMethodTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestMethodTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  // Don't call base.GetHashCode so that we don't try to include Id or ParentId'                  // which are different per-instance and we're trying to behave like a value type                  int result = explicitly.GetHashCode();                  result = (result*397) ^ (TypeName != null ? TypeName.GetHashCode() : 0);                  result = (result*397) ^ (MethodName != null ? MethodName.GetHashCode() : 0);                  result = (result*397) ^ (ProjectId != null ? ProjectId.GetHashCode() : 0);                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestMethodTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestMethodTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  // Don't call base.GetHashCode so that we don't try to include Id or ParentId'                  // which are different per-instance and we're trying to behave like a value type                  int result = explicitly.GetHashCode();                  result = (result*397) ^ (TypeName != null ? TypeName.GetHashCode() : 0);                  result = (result*397) ^ (MethodName != null ? MethodName.GetHashCode() : 0);                  result = (result*397) ^ (ProjectId != null ? ProjectId.GetHashCode() : 0);                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestMethodTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestMethodTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  // Don't call base.GetHashCode so that we don't try to include Id or ParentId'                  // which are different per-instance and we're trying to behave like a value type                  int result = explicitly.GetHashCode();                  result = (result*397) ^ (TypeName != null ? TypeName.GetHashCode() : 0);                  result = (result*397) ^ (MethodName != null ? MethodName.GetHashCode() : 0);                  result = (result*397) ^ (ProjectId != null ? ProjectId.GetHashCode() : 0);                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestTheoryTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestTheoryTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  // Don't include base.GetHashCode' as RemoteTask.GetHashCode includes RemoteTask.Id                  // in the calculation' and this is a new guid generated for each new instance.                  // This would mean two instances that return true from Equals (i.e. value objects)                  // would have different hash codes                  var result = ProjectId.GetHashCode();                  result = (result*397) ^ TypeName.GetHashCode();                  result = (result*397) ^ MethodName.GetHashCode();                  result = (result*397) ^ TheoryName.GetHashCode();                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestTheoryTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestTheoryTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  // Don't include base.GetHashCode' as RemoteTask.GetHashCode includes RemoteTask.Id                  // in the calculation' and this is a new guid generated for each new instance.                  // This would mean two instances that return true from Equals (i.e. value objects)                  // would have different hash codes                  var result = ProjectId.GetHashCode();                  result = (result*397) ^ TypeName.GetHashCode();                  result = (result*397) ^ MethodName.GetHashCode();                  result = (result*397) ^ TheoryName.GetHashCode();                  return result;              }
Magic Number,XunitContrib.Runner.ReSharper.RemoteRunner.Tasks,XunitTestTheoryTask,C:\repos\xunit_resharper-xunit\resharper\src\runner\Tasks\XunitTestTheoryTask.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  // Don't include base.GetHashCode' as RemoteTask.GetHashCode includes RemoteTask.Id                  // in the calculation' and this is a new guid generated for each new instance.                  // This would mean two instances that return true from Equals (i.e. value objects)                  // would have different hash codes                  var result = ProjectId.GetHashCode();                  result = (result*397) ^ TypeName.GetHashCode();                  result = (result*397) ^ MethodName.GetHashCode();                  result = (result*397) ^ TheoryName.GetHashCode();                  return result;              }
