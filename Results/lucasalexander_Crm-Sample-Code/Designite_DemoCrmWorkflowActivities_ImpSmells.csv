Implementation smell,Namespace,Class,File,Method,Description
Magic Number,DemoCrmWorkflowActivities,ValidateRegex,C:\repos\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmWorkflowActivities\ValidateRegex.cs,ValPhoneNumer,The following statement contains a magic number: if (phoneParts.Length != 3)              {                  return false;              }              else              {                  //if the sets aren't the correct length' return false                  if ((phoneParts[0].Length != 3) || (phoneParts[1].Length != 3) || (phoneParts[2].Length != 4))                  {                      return false;                  }                  else                  {                      //if any of the sets can't be parsed as an integer' return false                      for (int i = 0; i < 3; i++)                      {                          int parseResult;                          if (!Int32.TryParse(phoneParts[i]' out parseResult))                          {                              return false;                          }                      }                  }                }
Magic Number,DemoCrmWorkflowActivities,ValidateRegex,C:\repos\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmWorkflowActivities\ValidateRegex.cs,ValPhoneNumer,The following statement contains a magic number: if (phoneParts.Length != 3)              {                  return false;              }              else              {                  //if the sets aren't the correct length' return false                  if ((phoneParts[0].Length != 3) || (phoneParts[1].Length != 3) || (phoneParts[2].Length != 4))                  {                      return false;                  }                  else                  {                      //if any of the sets can't be parsed as an integer' return false                      for (int i = 0; i < 3; i++)                      {                          int parseResult;                          if (!Int32.TryParse(phoneParts[i]' out parseResult))                          {                              return false;                          }                      }                  }                }
Magic Number,DemoCrmWorkflowActivities,ValidateRegex,C:\repos\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmWorkflowActivities\ValidateRegex.cs,ValPhoneNumer,The following statement contains a magic number: if (phoneParts.Length != 3)              {                  return false;              }              else              {                  //if the sets aren't the correct length' return false                  if ((phoneParts[0].Length != 3) || (phoneParts[1].Length != 3) || (phoneParts[2].Length != 4))                  {                      return false;                  }                  else                  {                      //if any of the sets can't be parsed as an integer' return false                      for (int i = 0; i < 3; i++)                      {                          int parseResult;                          if (!Int32.TryParse(phoneParts[i]' out parseResult))                          {                              return false;                          }                      }                  }                }
Magic Number,DemoCrmWorkflowActivities,ValidateRegex,C:\repos\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmWorkflowActivities\ValidateRegex.cs,ValPhoneNumer,The following statement contains a magic number: if (phoneParts.Length != 3)              {                  return false;              }              else              {                  //if the sets aren't the correct length' return false                  if ((phoneParts[0].Length != 3) || (phoneParts[1].Length != 3) || (phoneParts[2].Length != 4))                  {                      return false;                  }                  else                  {                      //if any of the sets can't be parsed as an integer' return false                      for (int i = 0; i < 3; i++)                      {                          int parseResult;                          if (!Int32.TryParse(phoneParts[i]' out parseResult))                          {                              return false;                          }                      }                  }                }
Magic Number,DemoCrmWorkflowActivities,ValidateRegex,C:\repos\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmWorkflowActivities\ValidateRegex.cs,ValPhoneNumer,The following statement contains a magic number: if (phoneParts.Length != 3)              {                  return false;              }              else              {                  //if the sets aren't the correct length' return false                  if ((phoneParts[0].Length != 3) || (phoneParts[1].Length != 3) || (phoneParts[2].Length != 4))                  {                      return false;                  }                  else                  {                      //if any of the sets can't be parsed as an integer' return false                      for (int i = 0; i < 3; i++)                      {                          int parseResult;                          if (!Int32.TryParse(phoneParts[i]' out parseResult))                          {                              return false;                          }                      }                  }                }
Magic Number,DemoCrmWorkflowActivities,ValidateRegex,C:\repos\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmWorkflowActivities\ValidateRegex.cs,ValPhoneNumer,The following statement contains a magic number: if (phoneParts.Length != 3)              {                  return false;              }              else              {                  //if the sets aren't the correct length' return false                  if ((phoneParts[0].Length != 3) || (phoneParts[1].Length != 3) || (phoneParts[2].Length != 4))                  {                      return false;                  }                  else                  {                      //if any of the sets can't be parsed as an integer' return false                      for (int i = 0; i < 3; i++)                      {                          int parseResult;                          if (!Int32.TryParse(phoneParts[i]' out parseResult))                          {                              return false;                          }                      }                  }                }
