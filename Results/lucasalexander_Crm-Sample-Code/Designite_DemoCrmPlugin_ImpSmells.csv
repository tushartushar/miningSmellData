Implementation smell,Namespace,Class,File,Method,Description
Long Statement,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The length of the statement  "	IPluginExecutionContext context = (IPluginExecutionContext)serviceProvider.GetService (typeof(IPluginExecutionContext)); " is 120.
Long Statement,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The length of the statement  "			IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService (typeof(IOrganizationServiceFactory)); " is 139.
Magic Number,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The following statement contains a magic number: if (context.InputParameters.Contains ("Target") && context.InputParameters ["Target"] is Entity) {  	// Obtain the target entity from the input parameters.  	Entity entity = (Entity)context.InputParameters ["Target"];  	// Verify that the target entity represents an account.  	// If not' this plug-in was not registered correctly.  	if (entity.LogicalName != "account")  		return;  	try {  		// Create a task activity to follow up with the account customer in 7 days.   		Entity followup = new Entity ("task");  		followup ["subject"] = "Send e-mail to the new customer.";  		followup ["description"] = "Follow up with the customer. Check if there are any new issues that need resolution.";  		followup ["scheduledstart"] = DateTime.Now.AddDays (7);  		followup ["scheduledend"] = DateTime.Now.AddDays (7);  		followup ["category"] = context.PrimaryEntityName;  		// Refer to the account in the task activity.  		if (context.OutputParameters.Contains ("id")) {  			Guid regardingobjectid = new Guid (context.OutputParameters ["id"].ToString ());  			string regardingobjectidType = "account";  			followup ["regardingobjectid"] = new EntityReference (regardingobjectidType' regardingobjectid);  		}  		// Obtain the organization service reference.  		IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService (typeof(IOrganizationServiceFactory));  		IOrganizationService service = serviceFactory.CreateOrganizationService (context.UserId);  		// Create the task in Microsoft Dynamics CRM.  		tracingService.Trace ("FollowupPlugin: Creating the task activity.");  		service.Create (followup);  	} catch (FaultException<OrganizationServiceFault> ex) {  		throw new InvalidPluginExecutionException ("An error occurred in the FollupupPlugin plug-in."' ex);  	} catch (Exception ex) {  		tracingService.Trace ("FollowupPlugin: {0}"' ex.ToString ());  		throw;  	}  }  
Magic Number,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The following statement contains a magic number: if (context.InputParameters.Contains ("Target") && context.InputParameters ["Target"] is Entity) {  	// Obtain the target entity from the input parameters.  	Entity entity = (Entity)context.InputParameters ["Target"];  	// Verify that the target entity represents an account.  	// If not' this plug-in was not registered correctly.  	if (entity.LogicalName != "account")  		return;  	try {  		// Create a task activity to follow up with the account customer in 7 days.   		Entity followup = new Entity ("task");  		followup ["subject"] = "Send e-mail to the new customer.";  		followup ["description"] = "Follow up with the customer. Check if there are any new issues that need resolution.";  		followup ["scheduledstart"] = DateTime.Now.AddDays (7);  		followup ["scheduledend"] = DateTime.Now.AddDays (7);  		followup ["category"] = context.PrimaryEntityName;  		// Refer to the account in the task activity.  		if (context.OutputParameters.Contains ("id")) {  			Guid regardingobjectid = new Guid (context.OutputParameters ["id"].ToString ());  			string regardingobjectidType = "account";  			followup ["regardingobjectid"] = new EntityReference (regardingobjectidType' regardingobjectid);  		}  		// Obtain the organization service reference.  		IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService (typeof(IOrganizationServiceFactory));  		IOrganizationService service = serviceFactory.CreateOrganizationService (context.UserId);  		// Create the task in Microsoft Dynamics CRM.  		tracingService.Trace ("FollowupPlugin: Creating the task activity.");  		service.Create (followup);  	} catch (FaultException<OrganizationServiceFault> ex) {  		throw new InvalidPluginExecutionException ("An error occurred in the FollupupPlugin plug-in."' ex);  	} catch (Exception ex) {  		tracingService.Trace ("FollowupPlugin: {0}"' ex.ToString ());  		throw;  	}  }  
Magic Number,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The following statement contains a magic number: try {  	// Create a task activity to follow up with the account customer in 7 days.   	Entity followup = new Entity ("task");  	followup ["subject"] = "Send e-mail to the new customer.";  	followup ["description"] = "Follow up with the customer. Check if there are any new issues that need resolution.";  	followup ["scheduledstart"] = DateTime.Now.AddDays (7);  	followup ["scheduledend"] = DateTime.Now.AddDays (7);  	followup ["category"] = context.PrimaryEntityName;  	// Refer to the account in the task activity.  	if (context.OutputParameters.Contains ("id")) {  		Guid regardingobjectid = new Guid (context.OutputParameters ["id"].ToString ());  		string regardingobjectidType = "account";  		followup ["regardingobjectid"] = new EntityReference (regardingobjectidType' regardingobjectid);  	}  	// Obtain the organization service reference.  	IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService (typeof(IOrganizationServiceFactory));  	IOrganizationService service = serviceFactory.CreateOrganizationService (context.UserId);  	// Create the task in Microsoft Dynamics CRM.  	tracingService.Trace ("FollowupPlugin: Creating the task activity.");  	service.Create (followup);  } catch (FaultException<OrganizationServiceFault> ex) {  	throw new InvalidPluginExecutionException ("An error occurred in the FollupupPlugin plug-in."' ex);  } catch (Exception ex) {  	tracingService.Trace ("FollowupPlugin: {0}"' ex.ToString ());  	throw;  }  
Magic Number,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The following statement contains a magic number: try {  	// Create a task activity to follow up with the account customer in 7 days.   	Entity followup = new Entity ("task");  	followup ["subject"] = "Send e-mail to the new customer.";  	followup ["description"] = "Follow up with the customer. Check if there are any new issues that need resolution.";  	followup ["scheduledstart"] = DateTime.Now.AddDays (7);  	followup ["scheduledend"] = DateTime.Now.AddDays (7);  	followup ["category"] = context.PrimaryEntityName;  	// Refer to the account in the task activity.  	if (context.OutputParameters.Contains ("id")) {  		Guid regardingobjectid = new Guid (context.OutputParameters ["id"].ToString ());  		string regardingobjectidType = "account";  		followup ["regardingobjectid"] = new EntityReference (regardingobjectidType' regardingobjectid);  	}  	// Obtain the organization service reference.  	IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService (typeof(IOrganizationServiceFactory));  	IOrganizationService service = serviceFactory.CreateOrganizationService (context.UserId);  	// Create the task in Microsoft Dynamics CRM.  	tracingService.Trace ("FollowupPlugin: Creating the task activity.");  	service.Create (followup);  } catch (FaultException<OrganizationServiceFault> ex) {  	throw new InvalidPluginExecutionException ("An error occurred in the FollupupPlugin plug-in."' ex);  } catch (Exception ex) {  	tracingService.Trace ("FollowupPlugin: {0}"' ex.ToString ());  	throw;  }  
Magic Number,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The following statement contains a magic number: followup ["scheduledstart"] = DateTime.Now.AddDays (7);  
Magic Number,DemoCrmPlugin,FollowupPlugin,F:\newReposMay17\lucasalexander_Crm-Sample-Code\CrmUnitTesting\DemoCrmPlugin\FollowupPlugin.cs,Execute,The following statement contains a magic number: followup ["scheduledend"] = DateTime.Now.AddDays (7);  
