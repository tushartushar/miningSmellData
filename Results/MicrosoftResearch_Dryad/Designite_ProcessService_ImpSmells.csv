Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.Dryad.ProcessService,ProcessServer,C:\repos\MicrosoftResearch_Dryad\ProcessService\HttpServer.cs,HandleGetRequest,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Research.Dryad.ProcessService,ValueVersion,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,ValueVersion,The method has 7 parameters. Parameters: ve' ss' va' ec' status' start' stop
Long Parameter List,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,GetValue,The method has 5 parameters. Parameters: s' lastSeenVersion' currentVersion' shortStatus' value
Long Parameter List,Microsoft.Research.Dryad.ProcessService,ProcessService,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,Start,The method has 5 parameters. Parameters: config' groupName' processId' processUri' fileUri
Long Parameter List,Microsoft.Research.Dryad.ProcessService,ProcessService,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,SetValue,The method has 5 parameters. Parameters: processId' key' shortStatus' value' unblock
Long Identifier,Microsoft.Research.Dryad.ProcessService,Constants,C:\repos\MicrosoftResearch_Dryad\ProcessService\Constants.cs,,The length of the parameter DrError_VertexReceivedTermination is 33.
Long Identifier,Microsoft.Research.Dryad.ProcessService,Constants,C:\repos\MicrosoftResearch_Dryad\ProcessService\Constants.cs,,The length of the parameter DrError_VertexHostLostCommunication is 35.
Long Identifier,Microsoft.Research.Dryad.ProcessService,Constants,C:\repos\MicrosoftResearch_Dryad\ProcessService\Constants.cs,,The length of the parameter WinError_ConnectionAlreadyOpen is 30.
Long Statement,Microsoft.Research.Dryad.ProcessService,Service,C:\repos\MicrosoftResearch_Dryad\ProcessService\Program.cs,RendezvousWithParent,The length of the statement  "                logger.Log("Command put failed message " + e.Message + " status " + e.Response.StatusCode + " " + e.Response.StatusDescription); " is 128.
Long Statement,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,SetExited,The length of the statement  "                logger.Log("setting canceling process " + id + " to completed exit code " + exitCode + " real code " + process.ExitCode); " is 121.
Long Statement,Microsoft.Research.Dryad.ProcessService,ProcessService,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,BlockOnStatus,The length of the statement  "                    return new ValueVersion(currentVersion' status' value' process.ExitCode' process.Status' process.StartTime' process.StopTime); " is 126.
Long Statement,Microsoft.Research.Dryad.ProcessService,ProcessService,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,BlockOnStatus,The length of the statement  "                return new ValueVersion(currentVersion' status' value' process.ExitCode' process.Status' process.StartTime' process.StopTime); " is 126.
Complex Conditional,Microsoft.Research.Dryad.ProcessService,Service,C:\repos\MicrosoftResearch_Dryad\ProcessService\Program.cs,GetEnvironmentDetails,The conditional expression  "guidString == null || groupName == null || identifier == null || hostName == null"  is complex.
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessServer,C:\repos\MicrosoftResearch_Dryad\ProcessService\HttpServer.cs,ProcessIdFromURI,The following statement contains a magic number: if (p.StartsWith(prefix))              {                  var processString = p.Substring(prefix.Length);                  int processId;                  if (!int.TryParse(processString' out processId))                  {                      if (processString == "shutdown")                      {                          return -2;                      }                      else                      {                          return -1;                      }                  }                  return processId;              }              else              {                  // This shouldn't happen because the HttpListener was configured to                  // only accept the prefix' so we shouldn't need to handle the exception                  throw new NotImplementedException("Unknown URI " + p);              }
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessServer,C:\repos\MicrosoftResearch_Dryad\ProcessService\HttpServer.cs,HandlePutRequest,The following statement contains a magic number: if (processId < 0)              {                  if (processId == -2)                  {                      await server.ReportSuccess(context' true);                      logger.Log("shutting down");                      var dontBlock = Task.Run(() => parent.ShutDown());                      return;                  }                  else                  {                      logger.Log("bad process id");                      await server.ReportError(context' HttpStatusCode.BadRequest' "Malformed process ID URI");                      return;                  }              }
Magic Number,Microsoft.Research.Dryad.ProcessService,FileServer,C:\repos\MicrosoftResearch_Dryad\ProcessService\HttpServer.cs,GetFile,The following statement contains a magic number: using (var fs = new FileStream(name' FileMode.Open' FileAccess.Read))              {                  long totalLength = fs.Length;                  if (offset > totalLength)                  {                      throw new ApplicationException("Offset too large: " + offset + ">" + totalLength);                  }                  context.Response.Headers["X-Dryad-StreamTotalLength"] = totalLength.ToString();                    if (totalLength - offset <= (long)length)                  {                      length = (int)(totalLength - offset);                      context.Response.Headers["X-Dryad-StreamEof"] = "true";                  }                    fs.Seek(offset' SeekOrigin.Begin);                    int blockSize = Math.Min(2 * 1024 * 1024' length);                  var buffer = new byte[blockSize];                    await server.ReportSuccess(context' false);                    while (length > 0)                  {                      int blockLength = (length < blockSize) ? length : blockSize;                      int nRead = await fs.ReadAsync(buffer' 0' blockLength);                      if (nRead == 0)                      {                          throw new ApplicationException("Read returned 0 bytes");                      }                      await context.Response.OutputStream.WriteAsync(buffer' 0' nRead);                        length -= nRead;                  }                    logger.Log("Finished GET request copy " + name);                    await context.Response.CloseAsync();                    logger.Log("Closed GET request " + name);              }
Magic Number,Microsoft.Research.Dryad.ProcessService,FileServer,C:\repos\MicrosoftResearch_Dryad\ProcessService\HttpServer.cs,GetFile,The following statement contains a magic number: using (var fs = new FileStream(name' FileMode.Open' FileAccess.Read))              {                  long totalLength = fs.Length;                  if (offset > totalLength)                  {                      throw new ApplicationException("Offset too large: " + offset + ">" + totalLength);                  }                  context.Response.Headers["X-Dryad-StreamTotalLength"] = totalLength.ToString();                    if (totalLength - offset <= (long)length)                  {                      length = (int)(totalLength - offset);                      context.Response.Headers["X-Dryad-StreamEof"] = "true";                  }                    fs.Seek(offset' SeekOrigin.Begin);                    int blockSize = Math.Min(2 * 1024 * 1024' length);                  var buffer = new byte[blockSize];                    await server.ReportSuccess(context' false);                    while (length > 0)                  {                      int blockLength = (length < blockSize) ? length : blockSize;                      int nRead = await fs.ReadAsync(buffer' 0' blockLength);                      if (nRead == 0)                      {                          throw new ApplicationException("Read returned 0 bytes");                      }                      await context.Response.OutputStream.WriteAsync(buffer' 0' nRead);                        length -= nRead;                  }                    logger.Log("Finished GET request copy " + name);                    await context.Response.CloseAsync();                    logger.Log("Closed GET request " + name);              }
Magic Number,Microsoft.Research.Dryad.ProcessService,FileServer,C:\repos\MicrosoftResearch_Dryad\ProcessService\HttpServer.cs,GetFile,The following statement contains a magic number: using (var fs = new FileStream(name' FileMode.Open' FileAccess.Read))              {                  long totalLength = fs.Length;                  if (offset > totalLength)                  {                      throw new ApplicationException("Offset too large: " + offset + ">" + totalLength);                  }                  context.Response.Headers["X-Dryad-StreamTotalLength"] = totalLength.ToString();                    if (totalLength - offset <= (long)length)                  {                      length = (int)(totalLength - offset);                      context.Response.Headers["X-Dryad-StreamEof"] = "true";                  }                    fs.Seek(offset' SeekOrigin.Begin);                    int blockSize = Math.Min(2 * 1024 * 1024' length);                  var buffer = new byte[blockSize];                    await server.ReportSuccess(context' false);                    while (length > 0)                  {                      int blockLength = (length < blockSize) ? length : blockSize;                      int nRead = await fs.ReadAsync(buffer' 0' blockLength);                      if (nRead == 0)                      {                          throw new ApplicationException("Read returned 0 bytes");                      }                      await context.Response.OutputStream.WriteAsync(buffer' 0' nRead);                        length -= nRead;                  }                    logger.Log("Finished GET request copy " + name);                    await context.Response.CloseAsync();                    logger.Log("Closed GET request " + name);              }
Magic Number,Microsoft.Research.Dryad.ProcessService,Service,C:\repos\MicrosoftResearch_Dryad\ProcessService\Program.cs,RendezvousWithParent,The following statement contains a magic number: NotHttpClient httpClient = new NotHttpClient(false' 1' 10000' logger);
Magic Number,Microsoft.Research.Dryad.ProcessService,Service,C:\repos\MicrosoftResearch_Dryad\ProcessService\Program.cs,RendezvousWithParent,The following statement contains a magic number: request.Timeout = 30 * 1000;
Magic Number,Microsoft.Research.Dryad.ProcessService,Service,C:\repos\MicrosoftResearch_Dryad\ProcessService\Program.cs,RendezvousWithParent,The following statement contains a magic number: request.Timeout = 30 * 1000;
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,SetCompletedStatus,The following statement contains a magic number: Task.Delay(30 * 1000).ContinueWith((t) => collector());
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,SetCompletedStatus,The following statement contains a magic number: Task.Delay(30 * 1000).ContinueWith((t) => collector());
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,CopyStreamWithCatch,The following statement contains a magic number: try              {                  using (Stream dst = new FileStream(dstPath' FileMode.CreateNew' FileAccess.Write' FileShare.Read))                  {                      TaskCompletionSource<bool> stopFlushing = new TaskCompletionSource<bool>();                      Task flushTask = Task.Run(() => FlushRegularly(dst' 1000' stopFlushing.Task));                      int nRead;                      byte[] buffer = new byte[4 * 1024];                      do                      {                          nRead = await src.BaseStream.ReadAsync(buffer' 0' buffer.Length);                          if (nRead > 0)                          {                              await dst.WriteAsync(buffer' 0' nRead);                          }                      } while (nRead > 0);                      stopFlushing.SetResult(true);                      await flushTask;                  }              }              catch (Exception e)              {                  logger.Log("Copying stream to " + dstPath + " caught exception " + e.ToString());              }
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,CopyStreamWithCatch,The following statement contains a magic number: try              {                  using (Stream dst = new FileStream(dstPath' FileMode.CreateNew' FileAccess.Write' FileShare.Read))                  {                      TaskCompletionSource<bool> stopFlushing = new TaskCompletionSource<bool>();                      Task flushTask = Task.Run(() => FlushRegularly(dst' 1000' stopFlushing.Task));                      int nRead;                      byte[] buffer = new byte[4 * 1024];                      do                      {                          nRead = await src.BaseStream.ReadAsync(buffer' 0' buffer.Length);                          if (nRead > 0)                          {                              await dst.WriteAsync(buffer' 0' nRead);                          }                      } while (nRead > 0);                      stopFlushing.SetResult(true);                      await flushTask;                  }              }              catch (Exception e)              {                  logger.Log("Copying stream to " + dstPath + " caught exception " + e.ToString());              }
Magic Number,Microsoft.Research.Dryad.ProcessService,ProcessRecord,C:\repos\MicrosoftResearch_Dryad\ProcessService\ProcessService.cs,CopyStreamWithCatch,The following statement contains a magic number: try              {                  using (Stream dst = new FileStream(dstPath' FileMode.CreateNew' FileAccess.Write' FileShare.Read))                  {                      TaskCompletionSource<bool> stopFlushing = new TaskCompletionSource<bool>();                      Task flushTask = Task.Run(() => FlushRegularly(dst' 1000' stopFlushing.Task));                      int nRead;                      byte[] buffer = new byte[4 * 1024];                      do                      {                          nRead = await src.BaseStream.ReadAsync(buffer' 0' buffer.Length);                          if (nRead > 0)                          {                              await dst.WriteAsync(buffer' 0' nRead);                          }                      } while (nRead > 0);                      stopFlushing.SetResult(true);                      await flushTask;                  }              }              catch (Exception e)              {                  logger.Log("Copying stream to " + dstPath + " caught exception " + e.ToString());              }
