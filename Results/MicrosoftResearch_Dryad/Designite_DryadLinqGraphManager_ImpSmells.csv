Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The method has 174 lines of code.
Long Method,Microsoft.Research.Dryad.GraphManager,LinqToDryadJM,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\LinqToDryadJM.cs,ExecLinqToDryad,The method has 131 lines of code.
Long Method,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,ParseQueryXmlLinqToDryad,The method has 216 lines of code.
Complex Method,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.Dryad.GraphManager,LinqToDryadJM,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\LinqToDryadJM.cs,ExecLinqToDryad,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,GetIoType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,GetVertexType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,GetDynamicManagerType,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,ParseQueryXmlLinqToDryad,Cyclomatic complexity of the method is 17
Long Parameter List,Microsoft.Research.Dryad.GraphManager,OptionDescription,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,OptionDescription,The method has 6 parameters. Parameters: optionCatagory' index' shortName' longName' args' desc
Long Statement,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,PrintUsage,The length of the statement  "            Console.WriteLine("usage: {0} [--debugbreak] [--popup] <options> <appSpecificArguments>\n<options> fall into the following categories:"' leafName); " is 147.
Long Statement,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,ParseCommandLineFlags,The length of the statement  "                                DryadLogger.LogCritical(String.Format("The argument '{0}' for option '{1}' could not be parsed as an integer.\n"' args[index + 1]' args[index])); " is 145.
Long Statement,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,ParseCommandLineFlags,The length of the statement  "                                DryadLogger.LogCritical(String.Format("The argument '{0}' for option '{1}' could not be parsed as an integer.\n"' args[index + 1]' args[index])); " is 145.
Long Statement,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,ParseCommandLineFlags,The length of the statement  "                                DryadLogger.LogCritical(String.Format("The argument '{0}' for option '{1}' could not be parsed as a UIN64.\n"' args[index + 1]' args[index])); " is 142.
Long Statement,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,CreateVertexSet,The length of the statement  "                    DrActiveVertex activeVertex = new DrActiveVertex(newManager' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate); " is 134.
Long Statement,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,ConnectPointwise,The length of the statement  "                throw new LinqToDryadException(String.Format("Source and destination do not match in pointwise connection. Source = {0}' destination = {1}"' numberOfSrc' numberOfDst)); " is 168.
Long Statement,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The length of the statement  "                            DrActiveVertex mergeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate); " is 131.
Long Statement,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The length of the statement  "                            DrActiveVertex distributeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate); " is 136.
Long Statement,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The length of the statement  "                            newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicHashDistribute);						    " is 123.
Long Statement,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The length of the statement  "                        DrDynamicRangeDistributionManager drdm = new DrDynamicRangeDistributionManager(splitManager' v.dynamicManager.sampleRate); " is 122.
Long Statement,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,ParseQueryXmlLinqToDryad,The length of the statement  "                            throw new LinqToDryadException(String.Format("Invalid value for OutputCompressionScheme: {0}"' outputCompressionScheme.InnerXml)); " is 130.
Long Statement,Microsoft.Research.Dryad.GraphManager,QueryPlanParser,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\QueryParser.cs,ParseQueryXml,The length of the statement  "                DryadLogger.LogCritical(String.Format("Failed to select node DryadLinqVersion from query plan: {0}: {1}"' queryPlanFileName' e.ToString())); " is 140.
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,DryadLINQApp,The following statement contains a magic number: m_maxAggregateInputs = 150;
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,DryadLINQApp,The following statement contains a magic number: m_maxAggregateFilterInputs = 32;
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,DryadLINQApp,The following statement contains a magic number: m_aggregateThreshold = 1024*1024*1024;
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,DryadLINQApp,The following statement contains a magic number: m_aggregateThreshold = 1024*1024*1024;
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,DryadLINQApp,The following statement contains a magic number: m_aggregateThreshold = 1024*1024*1024;
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,SetXmlFileName,The following statement contains a magic number: if (xml.Length >= 3)              {                  string dup = xml.Substring(0' xml.Length-3);                  dup += "map";                  m_identityMapFile = File.Open(dup' FileMode.Create);              }
Magic Number,Microsoft.Research.Dryad.GraphManager,DryadLINQApp,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\DryadLinqApplication.cs,SetXmlFileName,The following statement contains a magic number: if (xml.Length >= 3)              {                  string dup = xml.Substring(0' xml.Length-3);                  dup += "map";                  m_identityMapFile = File.Open(dup' FileMode.Create);              }
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: int lowThreshold = 16;
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: UInt64 lowDataThreshold = (3*highDataThreshold)/4;
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: UInt64 lowDataThreshold = (3*highDataThreshold)/4;
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: UInt64 maxSingleDataThreshold = highDataThreshold/2;
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: foreach (KeyValuePair<int' GraphStageInfo> kvp in graphStageMap)              {                  Vertex v = kvp.Value.vertex;                    //                  //There are no dynamic managers                  //                  if (v.dynamicManager == null)                  {                      continue;                  }                    DrStageManager newManager = kvp.Value.stageManager;	   // newManager                                    DrGraphParameters parameters = app.GetGraph().GetParameters();                    string stdVertexName = "MW";                  string cpyVertexName = "CP";                                    if (v.type != Vertex.Type.INPUTTABLE && v.type != Vertex.Type.CONCAT)                  {                      if (v.dynamicManager.type == DynamicManager.Type.SPLITTER)                      {                          if (v.info.predecessors.Length == 1)                          {                              DrPipelineSplitManager splitter = new DrPipelineSplitManager();                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' splitter);                          }                          else                          {                              DrSemiPipelineSplitManager splitter = new DrSemiPipelineSplitManager();                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' splitter);                          }                      }                      else if (v.dynamicManager.type == DynamicManager.Type.PARTIALAGGR)                      {                          DrDynamicAggregateManager dynamicMerge = new DrDynamicAggregateManager();                                                    dynamicMerge.SetGroupingSettings(0' 0);                          dynamicMerge.SetMachineGroupingSettings(2' aggFilterThreshold);                          dynamicMerge.SetDataGroupingSettings(lowDataThreshold' highDataThreshold' maxSingleDataThreshold);                          dynamicMerge.SetSplitAfterGrouping(true);                            foreach (Predecessor p in v.info.predecessors)                          {                              newManager.AddDynamicConnectionManager(graphStageMap[p.uniqueId].stageManager' dynamicMerge);                          }                      }                      else if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR ||                               v.dynamicManager.type == DynamicManager.Type.HASHDISTRIBUTOR)                      {                          int idx = 0;                          int sz = v.dynamicManager.assemblyNames == null ? 0 : v.dynamicManager.assemblyNames.Length;                          DrDynamicAggregateManager dynamicMerge = new DrDynamicAggregateManager();                                                    if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR || sz > 1)                          {                              dynamicMerge = new DrDynamicAggregateManager();                                                            string name = v.dynamicManager.methodNames[idx];                              DrManagerBase newStage = new DrManagerBase(app.GetGraph()' name);                                                            DrActiveVertex mergeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate);                              mergeVertex.AddArgument(stdVertexName);                                                            mergeVertex.AddArgument(v.dynamicManager.assemblyNames[idx]);                              mergeVertex.AddArgument(v.dynamicManager.classNames[idx]);                              mergeVertex.AddArgument(v.dynamicManager.methodNames[idx]);                                                            idx++;						                                dynamicMerge.SetInternalVertex(mergeVertex);                                                            dynamicMerge.SetGroupingSettings(0' 0);                              dynamicMerge.SetPodGroupingSettings(lowThreshold' highThreshold);                              dynamicMerge.SetDataGroupingSettings(lowDataThreshold'                                  highDataThreshold'                                  maxSingleDataThreshold);                              dynamicMerge.SetMaxAggregationLevel(v.dynamicManager.aggregationLevels);						                           }                                                    if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR)                          {                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicMerge);                          }                          else                          {                              string name = v.dynamicManager.methodNames[idx];                              DrManagerBase newStage = new DrManagerBase(app.GetGraph()' name);                                                            DrActiveVertex distributeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate);                              distributeVertex.AddArgument(stdVertexName);                                                            distributeVertex.AddArgument(v.dynamicManager.assemblyNames[idx]);                              distributeVertex.AddArgument(v.dynamicManager.classNames[idx]);                              distributeVertex.AddArgument(v.dynamicManager.methodNames[idx]);                                                            idx++;                                                            DrDynamicDistributionManager dynamicHashDistribute =                                  new DrDynamicDistributionManager(distributeVertex' dynamicMerge);                              dynamicHashDistribute.SetDataPerVertex(highDataThreshold*2);  // 2GB                                                            newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicHashDistribute);						                             }						                       }                      else if (v.dynamicManager.type == DynamicManager.Type.RANGEDISTRIBUTOR)                      {                          DrStageManager splitManager = graphStageMap[v.dynamicManager.splitVertexId].stageManager;                                                  DrDynamicRangeDistributionManager drdm = new DrDynamicRangeDistributionManager(splitManager' v.dynamicManager.sampleRate);                          drdm.SetDataPerVertex(highDataThreshold*2);   // 2GB                          newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager'drdm);                      }                      else if (v.dynamicManager.type == DynamicManager.Type.BROADCAST)                      {                          // the copy vertex                          int bcastNumber = 0;                          string nameString = String.Format("CP__{0}"' bcastNumber++);                                                  DrManagerBase newStage = new DrManagerBase(app.GetGraph()' nameString);                                                    DrActiveVertex copyVertex =                              new DrActiveVertex(newStage'                                                 parameters.m_defaultProcessTemplate'                                                 parameters.m_defaultVertexTemplate);                          copyVertex.AddArgument(cpyVertexName);                                                    DrDynamicBroadcastManager bcast = new DrDynamicBroadcastManager(copyVertex);                          newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' bcast);                      }                      else if (v.dynamicManager.type != DynamicManager.Type.NONE)                      {                          DryadLogger.LogWarning(String.Format("Dynamic manager type {0} not supported yet"' v.dynamicManager.type));                      }                  }              }
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: foreach (KeyValuePair<int' GraphStageInfo> kvp in graphStageMap)              {                  Vertex v = kvp.Value.vertex;                    //                  //There are no dynamic managers                  //                  if (v.dynamicManager == null)                  {                      continue;                  }                    DrStageManager newManager = kvp.Value.stageManager;	   // newManager                                    DrGraphParameters parameters = app.GetGraph().GetParameters();                    string stdVertexName = "MW";                  string cpyVertexName = "CP";                                    if (v.type != Vertex.Type.INPUTTABLE && v.type != Vertex.Type.CONCAT)                  {                      if (v.dynamicManager.type == DynamicManager.Type.SPLITTER)                      {                          if (v.info.predecessors.Length == 1)                          {                              DrPipelineSplitManager splitter = new DrPipelineSplitManager();                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' splitter);                          }                          else                          {                              DrSemiPipelineSplitManager splitter = new DrSemiPipelineSplitManager();                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' splitter);                          }                      }                      else if (v.dynamicManager.type == DynamicManager.Type.PARTIALAGGR)                      {                          DrDynamicAggregateManager dynamicMerge = new DrDynamicAggregateManager();                                                    dynamicMerge.SetGroupingSettings(0' 0);                          dynamicMerge.SetMachineGroupingSettings(2' aggFilterThreshold);                          dynamicMerge.SetDataGroupingSettings(lowDataThreshold' highDataThreshold' maxSingleDataThreshold);                          dynamicMerge.SetSplitAfterGrouping(true);                            foreach (Predecessor p in v.info.predecessors)                          {                              newManager.AddDynamicConnectionManager(graphStageMap[p.uniqueId].stageManager' dynamicMerge);                          }                      }                      else if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR ||                               v.dynamicManager.type == DynamicManager.Type.HASHDISTRIBUTOR)                      {                          int idx = 0;                          int sz = v.dynamicManager.assemblyNames == null ? 0 : v.dynamicManager.assemblyNames.Length;                          DrDynamicAggregateManager dynamicMerge = new DrDynamicAggregateManager();                                                    if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR || sz > 1)                          {                              dynamicMerge = new DrDynamicAggregateManager();                                                            string name = v.dynamicManager.methodNames[idx];                              DrManagerBase newStage = new DrManagerBase(app.GetGraph()' name);                                                            DrActiveVertex mergeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate);                              mergeVertex.AddArgument(stdVertexName);                                                            mergeVertex.AddArgument(v.dynamicManager.assemblyNames[idx]);                              mergeVertex.AddArgument(v.dynamicManager.classNames[idx]);                              mergeVertex.AddArgument(v.dynamicManager.methodNames[idx]);                                                            idx++;						                                dynamicMerge.SetInternalVertex(mergeVertex);                                                            dynamicMerge.SetGroupingSettings(0' 0);                              dynamicMerge.SetPodGroupingSettings(lowThreshold' highThreshold);                              dynamicMerge.SetDataGroupingSettings(lowDataThreshold'                                  highDataThreshold'                                  maxSingleDataThreshold);                              dynamicMerge.SetMaxAggregationLevel(v.dynamicManager.aggregationLevels);						                           }                                                    if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR)                          {                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicMerge);                          }                          else                          {                              string name = v.dynamicManager.methodNames[idx];                              DrManagerBase newStage = new DrManagerBase(app.GetGraph()' name);                                                            DrActiveVertex distributeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate);                              distributeVertex.AddArgument(stdVertexName);                                                            distributeVertex.AddArgument(v.dynamicManager.assemblyNames[idx]);                              distributeVertex.AddArgument(v.dynamicManager.classNames[idx]);                              distributeVertex.AddArgument(v.dynamicManager.methodNames[idx]);                                                            idx++;                                                            DrDynamicDistributionManager dynamicHashDistribute =                                  new DrDynamicDistributionManager(distributeVertex' dynamicMerge);                              dynamicHashDistribute.SetDataPerVertex(highDataThreshold*2);  // 2GB                                                            newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicHashDistribute);						                             }						                       }                      else if (v.dynamicManager.type == DynamicManager.Type.RANGEDISTRIBUTOR)                      {                          DrStageManager splitManager = graphStageMap[v.dynamicManager.splitVertexId].stageManager;                                                  DrDynamicRangeDistributionManager drdm = new DrDynamicRangeDistributionManager(splitManager' v.dynamicManager.sampleRate);                          drdm.SetDataPerVertex(highDataThreshold*2);   // 2GB                          newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager'drdm);                      }                      else if (v.dynamicManager.type == DynamicManager.Type.BROADCAST)                      {                          // the copy vertex                          int bcastNumber = 0;                          string nameString = String.Format("CP__{0}"' bcastNumber++);                                                  DrManagerBase newStage = new DrManagerBase(app.GetGraph()' nameString);                                                    DrActiveVertex copyVertex =                              new DrActiveVertex(newStage'                                                 parameters.m_defaultProcessTemplate'                                                 parameters.m_defaultVertexTemplate);                          copyVertex.AddArgument(cpyVertexName);                                                    DrDynamicBroadcastManager bcast = new DrDynamicBroadcastManager(copyVertex);                          newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' bcast);                      }                      else if (v.dynamicManager.type != DynamicManager.Type.NONE)                      {                          DryadLogger.LogWarning(String.Format("Dynamic manager type {0} not supported yet"' v.dynamicManager.type));                      }                  }              }
Magic Number,Microsoft.Research.Dryad.GraphManager,GraphBuilder,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\GraphBuilder.cs,BuildGraphFromQuery,The following statement contains a magic number: foreach (KeyValuePair<int' GraphStageInfo> kvp in graphStageMap)              {                  Vertex v = kvp.Value.vertex;                    //                  //There are no dynamic managers                  //                  if (v.dynamicManager == null)                  {                      continue;                  }                    DrStageManager newManager = kvp.Value.stageManager;	   // newManager                                    DrGraphParameters parameters = app.GetGraph().GetParameters();                    string stdVertexName = "MW";                  string cpyVertexName = "CP";                                    if (v.type != Vertex.Type.INPUTTABLE && v.type != Vertex.Type.CONCAT)                  {                      if (v.dynamicManager.type == DynamicManager.Type.SPLITTER)                      {                          if (v.info.predecessors.Length == 1)                          {                              DrPipelineSplitManager splitter = new DrPipelineSplitManager();                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' splitter);                          }                          else                          {                              DrSemiPipelineSplitManager splitter = new DrSemiPipelineSplitManager();                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' splitter);                          }                      }                      else if (v.dynamicManager.type == DynamicManager.Type.PARTIALAGGR)                      {                          DrDynamicAggregateManager dynamicMerge = new DrDynamicAggregateManager();                                                    dynamicMerge.SetGroupingSettings(0' 0);                          dynamicMerge.SetMachineGroupingSettings(2' aggFilterThreshold);                          dynamicMerge.SetDataGroupingSettings(lowDataThreshold' highDataThreshold' maxSingleDataThreshold);                          dynamicMerge.SetSplitAfterGrouping(true);                            foreach (Predecessor p in v.info.predecessors)                          {                              newManager.AddDynamicConnectionManager(graphStageMap[p.uniqueId].stageManager' dynamicMerge);                          }                      }                      else if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR ||                               v.dynamicManager.type == DynamicManager.Type.HASHDISTRIBUTOR)                      {                          int idx = 0;                          int sz = v.dynamicManager.assemblyNames == null ? 0 : v.dynamicManager.assemblyNames.Length;                          DrDynamicAggregateManager dynamicMerge = new DrDynamicAggregateManager();                                                    if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR || sz > 1)                          {                              dynamicMerge = new DrDynamicAggregateManager();                                                            string name = v.dynamicManager.methodNames[idx];                              DrManagerBase newStage = new DrManagerBase(app.GetGraph()' name);                                                            DrActiveVertex mergeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate);                              mergeVertex.AddArgument(stdVertexName);                                                            mergeVertex.AddArgument(v.dynamicManager.assemblyNames[idx]);                              mergeVertex.AddArgument(v.dynamicManager.classNames[idx]);                              mergeVertex.AddArgument(v.dynamicManager.methodNames[idx]);                                                            idx++;						                                dynamicMerge.SetInternalVertex(mergeVertex);                                                            dynamicMerge.SetGroupingSettings(0' 0);                              dynamicMerge.SetPodGroupingSettings(lowThreshold' highThreshold);                              dynamicMerge.SetDataGroupingSettings(lowDataThreshold'                                  highDataThreshold'                                  maxSingleDataThreshold);                              dynamicMerge.SetMaxAggregationLevel(v.dynamicManager.aggregationLevels);						                           }                                                    if (v.dynamicManager.type == DynamicManager.Type.FULLAGGR)                          {                              newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicMerge);                          }                          else                          {                              string name = v.dynamicManager.methodNames[idx];                              DrManagerBase newStage = new DrManagerBase(app.GetGraph()' name);                                                            DrActiveVertex distributeVertex = new DrActiveVertex(newStage' parameters.m_defaultProcessTemplate' parameters.m_defaultVertexTemplate);                              distributeVertex.AddArgument(stdVertexName);                                                            distributeVertex.AddArgument(v.dynamicManager.assemblyNames[idx]);                              distributeVertex.AddArgument(v.dynamicManager.classNames[idx]);                              distributeVertex.AddArgument(v.dynamicManager.methodNames[idx]);                                                            idx++;                                                            DrDynamicDistributionManager dynamicHashDistribute =                                  new DrDynamicDistributionManager(distributeVertex' dynamicMerge);                              dynamicHashDistribute.SetDataPerVertex(highDataThreshold*2);  // 2GB                                                            newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' dynamicHashDistribute);						                             }						                       }                      else if (v.dynamicManager.type == DynamicManager.Type.RANGEDISTRIBUTOR)                      {                          DrStageManager splitManager = graphStageMap[v.dynamicManager.splitVertexId].stageManager;                                                  DrDynamicRangeDistributionManager drdm = new DrDynamicRangeDistributionManager(splitManager' v.dynamicManager.sampleRate);                          drdm.SetDataPerVertex(highDataThreshold*2);   // 2GB                          newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager'drdm);                      }                      else if (v.dynamicManager.type == DynamicManager.Type.BROADCAST)                      {                          // the copy vertex                          int bcastNumber = 0;                          string nameString = String.Format("CP__{0}"' bcastNumber++);                                                  DrManagerBase newStage = new DrManagerBase(app.GetGraph()' nameString);                                                    DrActiveVertex copyVertex =                              new DrActiveVertex(newStage'                                                 parameters.m_defaultProcessTemplate'                                                 parameters.m_defaultVertexTemplate);                          copyVertex.AddArgument(cpyVertexName);                                                    DrDynamicBroadcastManager bcast = new DrDynamicBroadcastManager(copyVertex);                          newManager.AddDynamicConnectionManager(graphStageMap[v.info.predecessors[0].uniqueId].stageManager' bcast);                      }                      else if (v.dynamicManager.type != DynamicManager.Type.NONE)                      {                          DryadLogger.LogWarning(String.Format("Dynamic manager type {0} not supported yet"' v.dynamicManager.type));                      }                  }              }
Magic Number,Microsoft.Research.Dryad.GraphManager,DebugHelper,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\LinqToDryadJM.cs,WaitForDebugger,The following statement contains a magic number: if (!brokeInDebugger)              {                  Console.Out.WriteLine("Waiting for debugger...");                  while (!Debugger.IsAttached)                  {                      Thread.Sleep(1000);                  }                  Debugger.Break();                  brokeInDebugger = true;              }
Magic Number,Microsoft.Research.Dryad.GraphManager,LinqToDryadJM,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\LinqToDryadJM.cs,ExecLinqToDryad,The following statement contains a magic number: if (args.Length < 2)              {                  errorString = "Must provide at least query XML file name and VertexHost executable.";                  DryadLogger.LogCritical(errorString);                  return -1;              }
Magic Number,Microsoft.Research.Dryad.GraphManager,LinqToDryadJM,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\LinqToDryadJM.cs,ExecLinqToDryad,The following statement contains a magic number: int externalArgc = args.Length - 2;
Magic Number,Microsoft.Research.Dryad.GraphManager,LinqToDryadJM,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\LinqToDryadJM.cs,ExecLinqToDryad,The following statement contains a magic number: for (int i = 0; i<externalArgc; i++)              {                  combinedArgv[i+internalArgc] = args[i+2]; // don't include argv[0] and argv[1]                    msg += String.Format("{0} "' combinedArgv[i+internalArgc]);              }
Magic Number,Microsoft.Research.Dryad.GraphManager,Program,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\Program.cs,ExceptionHandler,The following statement contains a magic number: if (e != null)              {                  result = System.Runtime.InteropServices.Marshal.GetHRForException(e);                  errorString = e.ToString();                  DryadLogger.LogCritical(errorString);                  System.Threading.Thread.Sleep(10 * 1000);              }
Magic Number,Microsoft.Research.Dryad.GraphManager,Program,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\Program.cs,ExceptionHandler,The following statement contains a magic number: if (e != null)              {                  result = System.Runtime.InteropServices.Marshal.GetHRForException(e);                  errorString = e.ToString();                  DryadLogger.LogCritical(errorString);                  System.Threading.Thread.Sleep(10 * 1000);              }
Magic Number,Microsoft.Research.Dryad.GraphManager,Program,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\Program.cs,Main,The following statement contains a magic number: try              {                  LinqToDryadJM jm = new LinqToDryadJM();                  retCode = jm.Run(dfsDirectory' args' out errorString);              }              catch (Exception e)              {                  retCode = System.Runtime.InteropServices.Marshal.GetHRForException(e);                  if (retCode == 0)                  {                      errorString = e.ToString();                      DryadLogger.LogCritical(errorString);                      retCode = unchecked((int)LinqToDryadException.E_FAIL);                  }                  else                  {                      errorString = String.Format("{0}: {1}"' retCode' e);                      DryadLogger.LogCritical(errorString);                  }                  System.Threading.Thread.Sleep(10 * 1000);              }
Magic Number,Microsoft.Research.Dryad.GraphManager,Program,C:\repos\MicrosoftResearch_Dryad\DryadLinqGraphManager\Program.cs,Main,The following statement contains a magic number: try              {                  LinqToDryadJM jm = new LinqToDryadJM();                  retCode = jm.Run(dfsDirectory' args' out errorString);              }              catch (Exception e)              {                  retCode = System.Runtime.InteropServices.Marshal.GetHRForException(e);                  if (retCode == 0)                  {                      errorString = e.ToString();                      DryadLogger.LogCritical(errorString);                      retCode = unchecked((int)LinqToDryadException.E_FAIL);                  }                  else                  {                      errorString = String.Format("{0}: {1}"' retCode' e);                      DryadLogger.LogCritical(errorString);                  }                  System.Threading.Thread.Sleep(10 * 1000);              }
