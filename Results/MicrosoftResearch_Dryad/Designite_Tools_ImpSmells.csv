Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,RunProcess,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Research.Tools,CSVFileStreamer,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ReadLineInternal,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawLine,The method has 6 parameters. Parameters: c' left' right' lineWidth' arrow' onscreen
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawTextAbsoluteCoordinates,The method has 5 parameters. Parameters: c' font' text' x' y
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRotatedTextAbsoluteCoordinates,The method has 5 parameters. Parameters: c' text' font' x' y
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRotatedRightJustifiedTextAbsoluteCoordinates,The method has 6 parameters. Parameters: text' font' brush' x' y' angleDegrees
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRightJustifiedTextAbsoluteCoordinates,The method has 5 parameters. Parameters: text' font' brush' x' y
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRightJustifiedText,The method has 5 parameters. Parameters: text' font' brush' x' y
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawPointAbsoluteCoordinates,The method has 5 parameters. Parameters: brush' x' y' dotSize' onscreen
Long Parameter List,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawPoint,The method has 5 parameters. Parameters: brush' x' y' dotSize' onscreen
Long Parameter List,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,RunProcess,The method has 7 parameters. Parameters: process' workDirectory' quote' wait' useshell' runAsAdmin' arguments
Long Parameter List,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The method has 6 parameters. Parameters: h' s' v' r' g' b
Long Parameter List,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,SimpleStreamReader,The method has 5 parameters. Parameters: stream' keepEndOfLine' encoding' detectEncoding' bufferSize
Long Statement,Microsoft.Research.Tools,Rectangle2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ExpandToIntegerCoordinates,The length of the statement  "            return new Rectangle2D(Math.Floor(norm.one.X)' Math.Floor(norm.one.Y)' Math.Ceiling(norm.two.X)' Math.Ceiling(norm.two.Y)); " is 123.
Long Statement,Microsoft.Research.Tools,KVPFileStreamer,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,Error,The length of the statement  "            this.statusReporter("KVP file `" + this.filename + "' format error on line " + this.currentLine + ": " + message' StatusKind.Error); " is 132.
Long Statement,Microsoft.Research.Tools,CSVFileStreamer,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,Error,The length of the statement  "            this.statusReporter("CSV file `" + Path.GetFileName(this.filename) + "' format error on line " + this.currentLine + ": " + message' StatusKind.Error); " is 150.
Long Statement,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ReadAndConvert,The length of the statement  "                    int len = stream.Read(this.byteBuffer.Data' this.byteBuffer.CurrentPosition' this.byteBuffer.Size - this.byteBuffer.CurrentPosition); " is 133.
Long Statement,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ReadAndConvert,The length of the statement  "                            this.charBuffer.EndOfData += this.dataDecoder.GetChars(this.byteBuffer.Data' 0' this.byteBuffer.EndOfData' this.charBuffer.Data' this.charBuffer.EndOfData); " is 156.
Long Statement,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ReadAndConvert,The length of the statement  "                this.charBuffer.EndOfData += this.dataDecoder.GetChars(this.byteBuffer.Data' 0' this.byteBuffer.EndOfData' this.charBuffer.Data' this.charBuffer.EndOfData); " is 156.
Complex Conditional,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The conditional expression  "len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF"  is complex.
Complex Conditional,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The conditional expression  "len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF"  is complex.
Virtual Method Call from Constructor,Microsoft.Research.Tools,BaseFileStreamer,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,BaseFileStreamer,The constructor "BaseFileStreamer" calls a virtual method "Reset".
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRotatedTextAbsoluteCoordinates,The following statement contains a magic number: this.grph.RotateTransform(-90);
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRotatedRightJustifiedTextAbsoluteCoordinates,The following statement contains a magic number: Rectangle box = new Rectangle(x - textsize.Width' y' textsize.Width + 2' textsize.Height);
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRightJustifiedTextAbsoluteCoordinates,The following statement contains a magic number: Rectangle box = new Rectangle(x - textsize.Width' y - textsize.Height / 2' textsize.Width + 2' textsize.Height);
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRightJustifiedTextAbsoluteCoordinates,The following statement contains a magic number: Rectangle box = new Rectangle(x - textsize.Width' y - textsize.Height / 2' textsize.Width + 2' textsize.Height);
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,ChooseFont,The following statement contains a magic number: if (newSize < 2)                  // too small                  return null;
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawTextInRectangle,The following statement contains a magic number: if (font == null || font.Size < 3)                  // too small anyway                  return;
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawTextInRectangle,The following statement contains a magic number: int adjustX = (int)(dest.Width - actualSize.Width) / 2;
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawTextInRectangle,The following statement contains a magic number: int adjustY = dest.Height / 2;
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawRightJustifiedText,The following statement contains a magic number: Rectangle box = new Rectangle(xo - textsize.Width' yo' textsize.Width + 2' textsize.Height);
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawPointAbsoluteCoordinates,The following statement contains a magic number: g.FillEllipse(brush' x - dotSize / 2' y - dotSize / 2' dotSize' dotSize);
Magic Number,Microsoft.Research.Tools,DrawingSurface2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\DrawingSurface.cs,DrawPointAbsoluteCoordinates,The following statement contains a magic number: g.FillEllipse(brush' x - dotSize / 2' y - dotSize / 2' dotSize' dotSize);
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: if (this.Position.Width > 0)                  {                      // Fill colors in bands from left to right                      double offset = 0;                      foreach (Tuple<double' Color> band in this.FillColors)                      {                          if (band.Item1 <= 0)                              continue;                            Color c = band.Item2;                          var brush = new SolidBrush(c);                            Point2D left = new Point2D(this.Position.Corner1.X + offset * this.Position.Width' this.Position.Corner1.Y);                          offset += band.Item1;                          Point2D right = new Point2D(this.Position.Corner1.X + offset * this.Position.Width' this.Position.Corner2.Y);                          surface.FillRectangle(brush' new Rectangle2D(left' right));                      }                        Font font = new Font("Arial"' 12' FontStyle.Regular);                      // let's shrink the position for the text to leave some border                        if (this.Label != null)                      {                          const double borderFraction = 8; // reserve 1/8 of the rectangle for border                          Rectangle2D box = new Rectangle2D(                              this.Position.Corner1.Translate(this.Position.Width / borderFraction' this.Position.Height / borderFraction)'                              this.Position.Corner2.Translate(-this.Position.Width / borderFraction' -this.Position.Height / borderFraction));                          surface.DrawTextInRectangle(this.Label' Brushes.Black' font' box);                      }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: if (this.Position.Width > 0)                  {                      // Fill colors in bands from left to right                      double offset = 0;                      foreach (Tuple<double' Color> band in this.FillColors)                      {                          if (band.Item1 <= 0)                              continue;                            Color c = band.Item2;                          var brush = new SolidBrush(c);                            Point2D left = new Point2D(this.Position.Corner1.X + offset * this.Position.Width' this.Position.Corner1.Y);                          offset += band.Item1;                          Point2D right = new Point2D(this.Position.Corner1.X + offset * this.Position.Width' this.Position.Corner2.Y);                          surface.FillRectangle(brush' new Rectangle2D(left' right));                      }                        Font font = new Font("Arial"' 12' FontStyle.Regular);                      // let's shrink the position for the text to leave some border                        if (this.Label != null)                      {                          const double borderFraction = 8; // reserve 1/8 of the rectangle for border                          Rectangle2D box = new Rectangle2D(                              this.Position.Corner1.Translate(this.Position.Width / borderFraction' this.Position.Height / borderFraction)'                              this.Position.Corner2.Translate(-this.Position.Width / borderFraction' -this.Position.Height / borderFraction));                          surface.DrawTextInRectangle(this.Label' Brushes.Black' font' box);                      }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphNode,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: switch (this.Shape)                  {                      default:                      case NodeShape.Box:                          surface.DrawRectangle(this.Position' pen);                          break;                      case NodeShape.Ellipse:                          surface.DrawEllipse(this.LineColor' this.Position' pen' false);                          break;                      case NodeShape.Invhouse:                          {                              Point2D[] points = new Point2D[5];                              points[0] = new Point2D(this.Position.Corner1.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[1] = new Point2D(this.Position.Corner1.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[2] = new Point2D(this.Position.Corner2.X' this.Position.Corner2.Y - this.Position.Height / 8);                              points[3] = new Point2D(this.Position.Corner2.X' this.Position.Corner1.Y + this.Position.Height / 3);                              points[4] = new Point2D(this.Position.Corner1.X + this.Position.Width / 2' this.Position.Corner1.Y);                              surface.DrawPolygon(this.LineColor' points' pen' false);                              break;                          }                  }
Magic Number,Microsoft.Research.Tools,GraphEdge,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: int width = this.Style == Style.Bold ? 3 : 1;
Magic Number,Microsoft.Research.Tools,GraphEdge,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: for (int i = 1; i < Spline.Count; i++)                  {                      Point2D point = Spline[i];                      if (i == Spline.Count - 1)                      {                          // adjust for arrow size at the end of the edge.                          const double absoluteArrowSize = 0.15;                          double dx = point.X - previous.X;                          double dy = point.Y - previous.Y;                          double len = Math.Sqrt(dx * dx + dy * dy);                          double adx = absoluteArrowSize * dx / len;                          double ady = absoluteArrowSize * dy / len;                            point = new Point2D(point.X + adx' point.Y + ady);                          //pen.EndCap = LineCap.ArrowAnchor;                          AdjustableArrowCap cap = new AdjustableArrowCap(4' 6);                          pen.CustomEndCap = cap;                      }                      surface.DrawLine(pen' previous' point' false);                      previous = point;                  }
Magic Number,Microsoft.Research.Tools,GraphEdge,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: for (int i = 1; i < Spline.Count; i++)                  {                      Point2D point = Spline[i];                      if (i == Spline.Count - 1)                      {                          // adjust for arrow size at the end of the edge.                          const double absoluteArrowSize = 0.15;                          double dx = point.X - previous.X;                          double dy = point.Y - previous.Y;                          double len = Math.Sqrt(dx * dx + dy * dy);                          double adx = absoluteArrowSize * dx / len;                          double ady = absoluteArrowSize * dy / len;                            point = new Point2D(point.X + adx' point.Y + ady);                          //pen.EndCap = LineCap.ArrowAnchor;                          AdjustableArrowCap cap = new AdjustableArrowCap(4' 6);                          pen.CustomEndCap = cap;                      }                      surface.DrawLine(pen' previous' point' false);                      previous = point;                  }
Magic Number,Microsoft.Research.Tools,GraphEdge,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\graphlayout.cs,Draw,The following statement contains a magic number: for (int i = 1; i < Spline.Count; i++)                  {                      Point2D point = Spline[i];                      if (i == Spline.Count - 1)                      {                          // adjust for arrow size at the end of the edge.                          const double absoluteArrowSize = 0.15;                          double dx = point.X - previous.X;                          double dy = point.Y - previous.Y;                          double len = Math.Sqrt(dx * dx + dy * dy);                          double adx = absoluteArrowSize * dx / len;                          double ady = absoluteArrowSize * dy / len;                            point = new Point2D(point.X + adx' point.Y + ady);                          //pen.EndCap = LineCap.ArrowAnchor;                          AdjustableArrowCap cap = new AdjustableArrowCap(4' 6);                          pen.CustomEndCap = cap;                      }                      surface.DrawLine(pen' previous' point' false);                      previous = point;                  }
Magic Number,Microsoft.Research.Tools,Partition,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\partitionedTables.cs,Partition,The following statement contains a magic number: if (parts.Length < 3)                      throw new PartitionedFileException("Cannot parse metadata line " + metadataline);
Magic Number,Microsoft.Research.Tools,Partition,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\partitionedTables.cs,Partition,The following statement contains a magic number: replicas = new List<UNCPathname>(parts.Length - 2);
Magic Number,Microsoft.Research.Tools,Partition,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\partitionedTables.cs,Partition,The following statement contains a magic number: for (int i = 2; i < parts.Length; i++)                  {                      string[] md = parts[i].Split(':');                      string machine = md[0];                      string path;                      if (md.Length == 2)                          path = md[1];                      else                          path = string.Format("{0}.{1:X8}"' defaultprefix' partitionNumber);                      if (md.Length > 2)                          throw new PartitionedFileException("Cannot understand pathname to file partition in " + metadataline);                      this.AddReplica(new UNCPathname(machine' path));                  }
Magic Number,Microsoft.Research.Tools,Partition,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\partitionedTables.cs,Partition,The following statement contains a magic number: for (int i = 2; i < parts.Length; i++)                  {                      string[] md = parts[i].Split(':');                      string machine = md[0];                      string path;                      if (md.Length == 2)                          path = md[1];                      else                          path = string.Format("{0}.{1:X8}"' defaultprefix' partitionNumber);                      if (md.Length > 2)                          throw new PartitionedFileException("Cannot understand pathname to file partition in " + metadataline);                      this.AddReplica(new UNCPathname(machine' path));                  }
Magic Number,Microsoft.Research.Tools,Partition,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\partitionedTables.cs,Partition,The following statement contains a magic number: for (int i = 2; i < parts.Length; i++)                  {                      string[] md = parts[i].Split(':');                      string machine = md[0];                      string path;                      if (md.Length == 2)                          path = md[1];                      else                          path = string.Format("{0}.{1:X8}"' defaultprefix' partitionNumber);                      if (md.Length > 2)                          throw new PartitionedFileException("Cannot understand pathname to file partition in " + metadataline);                      this.AddReplica(new UNCPathname(machine' path));                  }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ParseQuotedWord,The following statement contains a magic number: while (true)              {                  endIndex = line.IndexOf('\"'' endIndex);                  if (endIndex == -1)                  {                      word = "";                      return -1;                  }                  if (endIndex == line.Length - 1)                  {                      // last word on line                      break;                  }                  else if (line[endIndex + 1] == '\"')                  {                      // quoted quote' continue                      endIndex += 2;                      continue;                  }                  else                  {                      // end of quoted word                      break;                  }              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ParseCommaSeparatedKeyValuePair,The following statement contains a magic number: foreach (string piece in pieces)              {                  if (piece.Length == 0) continue;                  string[] parts = piece.Split('=');                  if (parts.Length != 2)                      throw new ArgumentException("Element `" + piece + "' not in k=v form");                  result.Add(parts[0].Trim()' parts[1].Trim());              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,EnsureDirectoryExistsForFile,The following statement contains a magic number: while (!ok && count < 5)              {                  try                  {                      if (dir != null && !Directory.Exists(dir))                          Directory.CreateDirectory(dir);                      ok = true;                  }                  catch (IOException)                  {                      Thread.Sleep(200);                  }                  count++;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,EnsureDirectoryExistsForFile,The following statement contains a magic number: while (!ok && count < 5)              {                  try                  {                      if (dir != null && !Directory.Exists(dir))                          Directory.CreateDirectory(dir);                      ok = true;                  }                  catch (IOException)                  {                      Thread.Sleep(200);                  }                  count++;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,Jitter,The following statement contains a magic number: double rand = 100 * jitterRandom.NextDouble() - 50;
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,Jitter,The following statement contains a magic number: double rand = 100 * jitterRandom.NextDouble() - 50;
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,Jitter,The following statement contains a magic number: return rand * max / 50;
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,InstantiateExecutableFromRes,The following statement contains a magic number: foreach (string resourceName in arrResources)              {                  if (resourceName.EndsWith(filename))                  { //or other extension desired                      //Name of the file saved on disk                      string saveAsName = filename;                      //just save in the current directory                      FileInfo fileInfoOutputFile = new FileInfo(saveAsName);                      if (fileInfoOutputFile.Exists)                      {                          //overwrite if desired  (depending on your needs)                          fileInfoOutputFile.Delete();                      }                      FileStream streamToOutputFile = fileInfoOutputFile.OpenWrite();                      Stream streamToResourceFile = currentAssembly.GetManifestResourceStream(resourceName);                        const int size = 4096;                      byte[] bytes = new byte[4096];                      int numBytes;                      while ((numBytes = streamToResourceFile.Read(bytes' 0' size)) > 0)                      {                          streamToOutputFile.Write(bytes' 0' numBytes);                      }                        streamToOutputFile.Close();                      streamToResourceFile.Close();                      return fileInfoOutputFile.FullName;                  }              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,InstantiateExecutableFromRes,The following statement contains a magic number: foreach (string resourceName in arrResources)              {                  if (resourceName.EndsWith(filename))                  { //or other extension desired                      //Name of the file saved on disk                      string saveAsName = filename;                      //just save in the current directory                      FileInfo fileInfoOutputFile = new FileInfo(saveAsName);                      if (fileInfoOutputFile.Exists)                      {                          //overwrite if desired  (depending on your needs)                          fileInfoOutputFile.Delete();                      }                      FileStream streamToOutputFile = fileInfoOutputFile.OpenWrite();                      Stream streamToResourceFile = currentAssembly.GetManifestResourceStream(resourceName);                        const int size = 4096;                      byte[] bytes = new byte[4096];                      int numBytes;                      while ((numBytes = streamToResourceFile.Read(bytes' 0' size)) > 0)                      {                          streamToOutputFile.Write(bytes' 0' numBytes);                      }                        streamToOutputFile.Close();                      streamToResourceFile.Close();                      return fileInfoOutputFile.FullName;                  }              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,Convert64time,The following statement contains a magic number: DateTime time = new DateTime(Convert.ToInt64(cosmosTime)' DateTimeKind.Unspecified).AddYears(1600);
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following statement contains a magic number: h *= 6;
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following statement contains a magic number: switch (i)              {                  case 6: throw new ArgumentOutOfRangeException("h");                  case 0: r = v; g = n; b = m; break;                  case 1: r = n; g = v; b = m; break;                  case 2: r = m; g = v; b = n; break;                  case 3: r = m; g = n; b = v; break;                  case 4: r = n; g = m; b = v; break;                  case 5: r = v; g = m; b = n; break;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following statement contains a magic number: switch (i)              {                  case 6: throw new ArgumentOutOfRangeException("h");                  case 0: r = v; g = n; b = m; break;                  case 1: r = n; g = v; b = m; break;                  case 2: r = m; g = v; b = n; break;                  case 3: r = m; g = n; b = v; break;                  case 4: r = n; g = m; b = v; break;                  case 5: r = v; g = m; b = n; break;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following statement contains a magic number: switch (i)              {                  case 6: throw new ArgumentOutOfRangeException("h");                  case 0: r = v; g = n; b = m; break;                  case 1: r = n; g = v; b = m; break;                  case 2: r = m; g = v; b = n; break;                  case 3: r = m; g = n; b = v; break;                  case 4: r = n; g = m; b = v; break;                  case 5: r = v; g = m; b = n; break;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following statement contains a magic number: switch (i)              {                  case 6: throw new ArgumentOutOfRangeException("h");                  case 0: r = v; g = n; b = m; break;                  case 1: r = n; g = v; b = m; break;                  case 2: r = m; g = v; b = n; break;                  case 3: r = m; g = n; b = v; break;                  case 4: r = n; g = m; b = v; break;                  case 5: r = v; g = m; b = n; break;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following statement contains a magic number: switch (i)              {                  case 6: throw new ArgumentOutOfRangeException("h");                  case 0: r = v; g = n; b = m; break;                  case 1: r = n; g = v; b = m; break;                  case 2: r = m; g = v; b = n; break;                  case 3: r = m; g = n; b = v; break;                  case 4: r = n; g = m; b = v; break;                  case 5: r = v; g = m; b = n; break;              }
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,VisibleColor,The following statement contains a magic number: if (color.GetBrightness() < 0.5)                  return Color.White;              else                  return Color.Black;
Magic Number,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,CopyFile,The following statement contains a magic number: byte[] buf = new byte[1 << 13];
Magic Number,Microsoft.Research.Tools,Rectangle2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,FixDegeneracy,The following statement contains a magic number: const double epsilon = 0.1;
Magic Number,Microsoft.Research.Tools,Rectangle2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,FixDegeneracy,The following statement contains a magic number: if (norm.Degenerate())              {                  double xmin = norm.Corner1.X;                  double xmax = norm.Corner2.X;                  double ymin = norm.Corner1.Y;                  double ymax = norm.Corner2.Y;                    if (xmax <= xmin)                      xmin -= xmax * 0.1 + epsilon;                  if (ymax <= ymin)                      ymin -= ymax * 0.1 + epsilon;                  norm = new Rectangle2D(xmin' ymin' xmax' ymax);              }
Magic Number,Microsoft.Research.Tools,Rectangle2D,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,FixDegeneracy,The following statement contains a magic number: if (norm.Degenerate())              {                  double xmin = norm.Corner1.X;                  double xmax = norm.Corner2.X;                  double ymin = norm.Corner1.Y;                  double ymax = norm.Corner2.Y;                    if (xmax <= xmin)                      xmin -= xmax * 0.1 + epsilon;                  if (ymax <= ymin)                      ymin -= ymax * 0.1 + epsilon;                  norm = new Rectangle2D(xmin' ymin' xmax' ymax);              }
Magic Number,Microsoft.Research.Tools,UNCPathname,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,UNCPathname,The following statement contains a magic number: if (path.StartsWith(@"\\") ||                  path.StartsWith(@"//"))              {                  int slash = path.IndexOf("/"' 2);                  int bkslash = path.IndexOf("\\"' 2);                  if (bkslash < slash || slash < 0)                      slash = bkslash;                  if (slash >= 0)                  {                      this.Machine = path.Substring(2' slash - 2); // length - 2                      path = path.Substring(slash + 1);                  }                  else                  {                      // there is just a machine                      this.Machine = path.Substring(2);                      path = "";                  }              }              else                  this.Machine = null;
Magic Number,Microsoft.Research.Tools,UNCPathname,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,UNCPathname,The following statement contains a magic number: if (path.StartsWith(@"\\") ||                  path.StartsWith(@"//"))              {                  int slash = path.IndexOf("/"' 2);                  int bkslash = path.IndexOf("\\"' 2);                  if (bkslash < slash || slash < 0)                      slash = bkslash;                  if (slash >= 0)                  {                      this.Machine = path.Substring(2' slash - 2); // length - 2                      path = path.Substring(slash + 1);                  }                  else                  {                      // there is just a machine                      this.Machine = path.Substring(2);                      path = "";                  }              }              else                  this.Machine = null;
Magic Number,Microsoft.Research.Tools,UNCPathname,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,UNCPathname,The following statement contains a magic number: if (path.StartsWith(@"\\") ||                  path.StartsWith(@"//"))              {                  int slash = path.IndexOf("/"' 2);                  int bkslash = path.IndexOf("\\"' 2);                  if (bkslash < slash || slash < 0)                      slash = bkslash;                  if (slash >= 0)                  {                      this.Machine = path.Substring(2' slash - 2); // length - 2                      path = path.Substring(slash + 1);                  }                  else                  {                      // there is just a machine                      this.Machine = path.Substring(2);                      path = "";                  }              }              else                  this.Machine = null;
Magic Number,Microsoft.Research.Tools,UNCPathname,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,UNCPathname,The following statement contains a magic number: if (path.StartsWith(@"\\") ||                  path.StartsWith(@"//"))              {                  int slash = path.IndexOf("/"' 2);                  int bkslash = path.IndexOf("\\"' 2);                  if (bkslash < slash || slash < 0)                      slash = bkslash;                  if (slash >= 0)                  {                      this.Machine = path.Substring(2' slash - 2); // length - 2                      path = path.Substring(slash + 1);                  }                  else                  {                      // there is just a machine                      this.Machine = path.Substring(2);                      path = "";                  }              }              else                  this.Machine = null;
Magic Number,Microsoft.Research.Tools,UNCPathname,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,UNCPathname,The following statement contains a magic number: if (path.StartsWith(@"\\") ||                  path.StartsWith(@"//"))              {                  int slash = path.IndexOf("/"' 2);                  int bkslash = path.IndexOf("\\"' 2);                  if (bkslash < slash || slash < 0)                      slash = bkslash;                  if (slash >= 0)                  {                      this.Machine = path.Substring(2' slash - 2); // length - 2                      path = path.Substring(slash + 1);                  }                  else                  {                      // there is just a machine                      this.Machine = path.Substring(2);                      path = "";                  }              }              else                  this.Machine = null;
Magic Number,Microsoft.Research.Tools,ColorMap<T>,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,CS,The following statement contains a magic number: return (int)(c * 255);
Magic Number,Microsoft.Research.Tools,HSVColorMap<T>,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,OneCircleColor,The following statement contains a magic number: const double fractionOfCircle = 0.8;
Magic Number,Microsoft.Research.Tools,CSVFileStreamer,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ParseQuotedWord,The following statement contains a magic number: while (true)              {                  endIndex = line.IndexOf('\"'' endIndex);                  if (endIndex == -1)                  {                      this.Error("Newline in quoted string");                      word = "";                      return -1;                  }                  if (endIndex == line.Length - 1)                  {                      // last word on line                      break;                  }                  else if (line[endIndex + 1] == '\"')                  {                      // quoted quote' continue                      endIndex += 2;                      continue;                  }                  else                  {                      // end of quoted word                      break;                  }              }
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,ReadAndConvert,The following statement contains a magic number: do              {                  if (this.checkPreamble)                  {                      int len = stream.Read(this.byteBuffer.Data' this.byteBuffer.CurrentPosition' this.byteBuffer.Size - this.byteBuffer.CurrentPosition);                      if (len == 0)                      {                          if (this.byteBuffer.EndOfData > 0)                          {                              this.charBuffer.EndOfData += this.dataDecoder.GetChars(this.byteBuffer.Data' 0' this.byteBuffer.EndOfData' this.charBuffer.Data' this.charBuffer.EndOfData);                              this.byteBuffer.CurrentPosition = this.byteBuffer.EndOfData = 0;                          }                          return this.charBuffer.EndOfData;                      }                        this.byteBuffer.EndOfData += len;                  }                  else                  {                      this.byteBuffer.EndOfData = stream.Read(this.byteBuffer.Data' 0' this.byteBuffer.Size);                        if (this.byteBuffer.EndOfData == 0) //  EOF                          return this.charBuffer.EndOfData;                  }                    if (this.CheckForPreamble())                      continue;                    if (this.encodingUnknown && this.byteBuffer.EndOfData >= 2)                      this.DetectEncoding();                    this.charBuffer.EndOfData += this.dataDecoder.GetChars(this.byteBuffer.Data' 0' this.byteBuffer.EndOfData' this.charBuffer.Data' this.charBuffer.EndOfData);              } while (this.charBuffer.EndOfData == 0);
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (len < 2)                  return;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Magic Number,Microsoft.Research.Tools,SimpleStreamReader,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,DetectEncoding,The following statement contains a magic number: if (this.byteBuffer[0] == 0xFE && this.byteBuffer[1] == 0xFF)              {                  // Big Endian Unicode                  this.dataEncoding = new UnicodeEncoding(true' true);                  this.byteBuffer.DeletePreamble(2);                  changed = true;              }              else if (this.byteBuffer[0] == 0xFF && this.byteBuffer[1] == 0xFE)              {                  if (len < 4 || this.byteBuffer[2] != 0 || this.byteBuffer[3] != 0)                  {                      this.dataEncoding = new UnicodeEncoding(false' true);                      this.byteBuffer.DeletePreamble(2);                      changed = true;                  }                  else                  {                      this.dataEncoding = new UTF32Encoding(false' true);                      this.byteBuffer.DeletePreamble(4);                      changed = true;                  }              }              else if (len >= 3 && this.byteBuffer[0] == 0xEF && this.byteBuffer[1] == 0xBB && this.byteBuffer[2] == 0xBF)              {                  this.dataEncoding = Encoding.UTF8;                  this.byteBuffer.DeletePreamble(3);                  changed = true;              }              else if (len >= 4 && this.byteBuffer[0] == 0 && this.byteBuffer[1] == 0 &&                       this.byteBuffer[2] == 0xFE && this.byteBuffer[3] == 0xFF)              {                  this.dataEncoding = new UTF32Encoding(true' true);                  this.byteBuffer.DeletePreamble(4);                  changed = true;              }              else if (len == 2)                  this.encodingUnknown = true;
Missing Default,Microsoft.Research.Tools,Utilities,C:\repos\MicrosoftResearch_Dryad\JobBrowser\Tools\tools.cs,HSVtoRGB,The following switch statement is missing a default case: switch (i)              {                  case 6: throw new ArgumentOutOfRangeException("h");                  case 0: r = v; g = n; b = m; break;                  case 1: r = n; g = v; b = m; break;                  case 2: r = m; g = v; b = n; break;                  case 3: r = m; g = n; b = v; break;                  case 4: r = n; g = m; b = v; break;                  case 5: r = v; g = m; b = n; break;              }
