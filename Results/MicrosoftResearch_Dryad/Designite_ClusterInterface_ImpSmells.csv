Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,Process,The method has 5 parameters. Parameters: p' w' cmd' cmdLineArgs' l
Long Statement,Microsoft.Research.Dryad.ClusterInterface,HttpCluster,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\HttpScheduler.cs,GetRemoteFilePath,The length of the statement  "                logger.Log("No currently known computer running at host " + computer.Host + " to read file " + directory + "/" + fileName); " is 123.
Long Statement,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,PostRequest,The length of the statement  "                string error = "Post " + uri + " failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription; " is 137.
Long Statement,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,Schedule,The length of the statement  "            logger.Log("Process " + Id + " scheduling itself as " + directory + " on computer " + computer.Name + " at " + computer.Host); " is 126.
Long Statement,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetStatus,The length of the statement  "                string error = "Status fetch failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription; " is 133.
Long Statement,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetStatus,The length of the statement  "                    string error = "Status fetch failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription; " is 133.
Long Statement,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetKeyStatus,The length of the statement  "                string error = "Status fetch failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription; " is 133.
Long Statement,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetKeyStatus,The length of the statement  "                    string error = "Status fetch failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription; " is 133.
Magic Number,Microsoft.Research.Dryad.ClusterInterface,HttpClient,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Interfaces.cs,Initialize,The following statement contains a magic number: lock (dummy)              {                  if (client == null)                  {                      client = new NotHttpClient(true' 1' 30000' new PLogger(logger));                  }              }
Magic Number,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,PostRequest,The following statement contains a magic number: request.Timeout = 30 * 1000;
Magic Number,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,PostRequest,The following statement contains a magic number: request.Timeout = 30 * 1000;
Magic Number,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetStatus,The following statement contains a magic number: int timeout = 120000;
Magic Number,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetStatus,The following statement contains a magic number: try              {                  IHttpRequest request = HttpClient.Create(computer.ProcessServer + sb.ToString());                  request.Timeout = timeout + 30000;                    Task<IHttpResponse> bail = interrupt.ContinueWith((t) => null as IHttpResponse);                  completed = await Task.WhenAny(bail' request.GetResponseAsync());                    if (completed == bail)                  {                      logger.Log("Process " + Id + " abandoned status due to finishWaiter");                      ToExited(ProcessExitState.StatusFailed' DateTime.Now.ToFileTimeUtc()' 1' "Service stopped while waiting for status");                      return true;                  }              }              catch (NotHttpException e)              {                  string error = "Status fetch failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription;                  logger.Log("Process " + Id + " got remote process status failure " + error);                  ToExited(ProcessExitState.StatusFailed' DateTime.Now.ToFileTimeUtc()' 1' error);                  return true;              }              catch (Exception e)              {                  string error = "Status fetch failed message " + e.Message;                  logger.Log("Process " + Id + " got remote process status failure " + error);                  ToExited(ProcessExitState.StatusFailed' DateTime.Now.ToFileTimeUtc()' 1' error);                  return true;              }
Magic Number,Microsoft.Research.Dryad.ClusterInterface,Process,C:\repos\MicrosoftResearch_Dryad\ClusterInterface\Process.cs,GetKeyStatus,The following statement contains a magic number: try              {                  IHttpRequest request = HttpClient.Create(remote.ProcessServer + sb.ToString());                  request.Timeout = status.GetTimeout() + 30000;                    Task<IHttpResponse> bail = interrupt.ContinueWith((t) => null as IHttpResponse);                  completed = await Task.WhenAny(bail' request.GetResponseAsync());                    if (completed == bail)                  {                      logger.Log("Process " + Id + " abandoned property fetch due to interrupt");                      return;                  }              }              catch (NotHttpException e)              {                  string error = "Status fetch failed message " + e.Message + " status " + e.Response.StatusCode + ": " + e.Response.StatusDescription;                  logger.Log("Process " + Id + " got remote property fetch failure from " + remote.Name +                      " at " + remote.Host + ": " + error);                  status.OnCompleted(0' null' 1' error);                  return;              }              catch (Exception e)              {                  string error = "Status fetch failed message " + e.ToString();                  logger.Log("Process " + Id + " got remote property fetch failure from " + remote.Name +                      " at " + remote.Host + ": " + error);                  status.OnCompleted(0' null' 1' error);                  return;              }
