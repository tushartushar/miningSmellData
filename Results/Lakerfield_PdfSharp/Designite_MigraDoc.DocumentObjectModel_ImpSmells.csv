Implementation smell,Namespace,Class,File,Method,Description
Long Method,MigraDoc.DocumentObjectModel.IO,KeyWords,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\Symbols.cs,KeyWords,The method has 158 lines of code.
Long Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitTable,The method has 129 lines of code.
Long Method,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The method has 103 lines of code.
Long Method,MigraDoc.DocumentObjectModel,Styles,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Styles.cs,SetupStyles,The method has 107 lines of code.
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseDocumentObject,Cyclomatic complexity of the method is 27
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseStyleDefinition,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseHeaderFooter,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,IsParagraphContent,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseDocumentElements,Cyclomatic complexity of the method is 25
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseFormattedText,Cyclomatic complexity of the method is 87
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseField,Cyclomatic complexity of the method is 25
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseColumns,Cyclomatic complexity of the method is 15
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRows,Cyclomatic complexity of the method is 15
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRow,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseChart,Cyclomatic complexity of the method is 49
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseArea,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseArea,Cyclomatic complexity of the method is 27
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseSeries,Cyclomatic complexity of the method is 30
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseSeries,Cyclomatic complexity of the method is 27
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseAttributeStatement,Cyclomatic complexity of the method is 33
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseAssign,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseColor,Cyclomatic complexity of the method is 20
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,IsSymbolType,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,AdjustToNextBlock,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,AdjustToNextStatement,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadCode,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,PeekPunctuator,Cyclomatic complexity of the method is 74
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadText,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadPlainText,Cyclomatic complexity of the method is 31
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,MoveToNextParagraphContentLine,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,MoveToNonWhiteSpace,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanNextChar,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,IsSectionElement,Cyclomatic complexity of the method is 15
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,IsParagraphElement,Cyclomatic complexity of the method is 18
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanPunctuator,Cyclomatic complexity of the method is 73
Complex Method,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,Cyclomatic complexity of the method is 40
Complex Method,MigraDoc.DocumentObjectModel.Shapes.Charts,Axis,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes.Charts\Axis.cs,Serialize,Cyclomatic complexity of the method is 14
Complex Method,MigraDoc.DocumentObjectModel.Shapes.Charts,Chart,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes.Charts\Chart.cs,DeepCopy,Cyclomatic complexity of the method is 15
Complex Method,MigraDoc.DocumentObjectModel.Shapes.Charts,Chart,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes.Charts\Chart.cs,Serialize,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.DocumentObjectModel.Shapes.Charts,Chart,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes.Charts\Chart.cs,AcceptVisitor,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel.Shapes.Charts,Series,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes.Charts\Series.cs,Serialize,Cyclomatic complexity of the method is 11
Complex Method,MigraDoc.DocumentObjectModel.Shapes.Charts,TextArea,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes.Charts\TextArea.cs,Serialize,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.DocumentObjectModel.Shapes,Barcode,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes\Barcode.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.Shapes,Shape,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes\Shape.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel.Tables,Cell,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Cell.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.Tables,Column,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Column.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel.Tables,Row,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Row.cs,Serialize,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.DocumentObjectModel.Tables,Rows,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Rows.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.Tables,Table,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Table.cs,SetShading,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel.Tables,Table,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Table.cs,SetEdge,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.DocumentObjectModel.Tables,Table,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Table.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetEffectiveBorders,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetNeighbor,Cyclomatic complexity of the method is 12
Complex Method,MigraDoc.DocumentObjectModel.Visitors,PdfFlattenVisitor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\PdfFlattenVisitor.cs,VisitDocumentObjectCollection,Cyclomatic complexity of the method is 31
Complex Method,MigraDoc.DocumentObjectModel.Visitors,PdfFlattenVisitor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\PdfFlattenVisitor.cs,VisitFormattedText,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,FlattenParagraphFormat,Cyclomatic complexity of the method is 24
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,FlattenFont,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,FlattenBorders,Cyclomatic complexity of the method is 13
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,FlattenPageSetup,Cyclomatic complexity of the method is 19
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitParagraph,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitSection,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitTable,Cyclomatic complexity of the method is 39
Complex Method,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,Serialize,Cyclomatic complexity of the method is 16
Complex Method,MigraDoc.DocumentObjectModel,Character,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Character.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel,DdlEncoder,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\DdlEncoder.cs,StringToText,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.DocumentObjectModel,DdlEncoder,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\DdlEncoder.cs,StringToLiteral,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel,Document,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Document.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,ApplyFont,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,ApplyFont,Cyclomatic complexity of the method is 10
Complex Method,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,CheckWhatIsNotNull,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,Cyclomatic complexity of the method is 25
Complex Method,MigraDoc.DocumentObjectModel,ImageHelper,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\ImageHelper.cs,ExtractPageNumber,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,Cyclomatic complexity of the method is 50
Complex Method,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,Serialize,Cyclomatic complexity of the method is 17
Complex Method,MigraDoc.DocumentObjectModel,ParagraphFormat,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\ParagraphFormat.cs,Serialize,Cyclomatic complexity of the method is 20
Complex Method,MigraDoc.DocumentObjectModel,Serializer,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Serializer.cs,WriteSimpleAttribute,Cyclomatic complexity of the method is 9
Complex Method,MigraDoc.DocumentObjectModel,Style,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Style.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel,Styles,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Styles.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,Cyclomatic complexity of the method is 23
Complex Method,MigraDoc.DocumentObjectModel,Unit,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Unit.cs,ConvertType,Cyclomatic complexity of the method is 24
Long Parameter List,MigraDoc.DocumentObjectModel.Internals,ValueDescriptor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Internals\ValueDescriptor.cs,ValueDescriptor,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Internals,NullableDescriptor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Internals\ValueDescriptor.cs,NullableDescriptor,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Internals,ValueTypeDescriptor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Internals\ValueDescriptor.cs,ValueTypeDescriptor,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Internals,DocumentObjectDescriptor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Internals\ValueDescriptor.cs,DocumentObjectDescriptor,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Internals,DocumentObjectCollectionDescriptor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Internals\ValueDescriptor.cs,DocumentObjectCollectionDescriptor,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.IO,DdlReaderError,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlReaderError.cs,DdlReaderError,The method has 6 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Tables,Table,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Table.cs,SetShading,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Tables,Table,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Table.cs,SetEdge,The method has 8 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel.Tables,Table,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Tables\Table.cs,SetEdge,The method has 7 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,FromCmyk,The method has 5 parameters.
Long Parameter List,MigraDoc.DocumentObjectModel,Styles,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Styles.cs,SerializeStyle,The method has 5 parameters.
Long Statement,MigraDoc.DocumentObjectModel.Internals,ValueDescriptor,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Internals\ValueDescriptor.cs,CreateValue,The length of the statement  "	ConstructorInfo constructorInfoObj = this.ValueType.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null); " is 167.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,IsHeaderFooter,The length of the statement  "	return (sym == Symbol.Header || sym == Symbol.Footer || sym == Symbol.PrimaryHeader || sym == Symbol.PrimaryFooter || sym == Symbol.EvenPageHeader || sym == Symbol.EvenPageFooter || sym == Symbol.FirstPageHeader || sym == Symbol.FirstPageFooter); " is 246.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseHeaderFooter,The length of the statement  "		bool isHeader = hdrFtrSym == Symbol.Header || hdrFtrSym == Symbol.PrimaryHeader || hdrFtrSym == Symbol.FirstPageHeader || hdrFtrSym == Symbol.EvenPageHeader; " is 157.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseIntegerAssignment,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.HexIntegerLiteral || Symbol == Symbol.StringLiteral' DomMsgID.IntegerExpected' Token); " is 155.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRealAssignment,The length of the statement  "	AssertCondition (Symbol == Symbol.RealLiteral || Symbol == Symbol.IntegerLiteral || Symbol == Symbol.StringLiteral' DomMsgID.RealExpected' scanner.Token); " is 154.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseUnitAssignment,The length of the statement  "	AssertCondition (Symbol == Symbol.RealLiteral || Symbol == Symbol.IntegerLiteral || Symbol == Symbol.StringLiteral' DomMsgID.RealExpected' scanner.Token); " is 154.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.HexIntegerLiteral' DomMsgID.IntegerExpected' this.scanner.Token); " is 134.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.HexIntegerLiteral' DomMsgID.IntegerExpected' this.scanner.Token); " is 134.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.HexIntegerLiteral' DomMsgID.IntegerExpected' this.scanner.Token); " is 134.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.RealLiteral' DomMsgID.NumberExpected' this.scanner.Token); " is 127.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.RealLiteral' DomMsgID.NumberExpected' this.scanner.Token); " is 127.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.RealLiteral' DomMsgID.NumberExpected' this.scanner.Token); " is 127.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.RealLiteral' DomMsgID.NumberExpected' this.scanner.Token); " is 127.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The length of the statement  "		AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.RealLiteral' DomMsgID.NumberExpected' this.scanner.Token); " is 127.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseGray,The length of the statement  "	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.HexIntegerLiteral' DomMsgID.IntegerExpected' this.scanner.Token); " is 134.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ReportParserInfo,The length of the statement  "	DdlReaderError error = new DdlReaderError (level' message' (int)errorCode' this.scanner.DocumentFileName' this.scanner.CurrentLine' this.scanner.CurrentLinePos); " is 161.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ReportParserException,The length of the statement  "	DdlReaderError error = new DdlReaderError (DdlErrorLevel.Error' message' (int)errorCode' this.scanner.DocumentFileName' this.scanner.CurrentLine' this.scanner.CurrentLinePos); " is 175.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ThrowParserException,The length of the statement  "	DdlReaderError error = new DdlReaderError (DdlErrorLevel.Error' message' (int)errorCode' this.scanner.DocumentFileName' this.scanner.CurrentLine' this.scanner.CurrentLinePos); " is 175.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlReaderError,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlReaderError.cs,ToString,The length of the statement  "	return String.Format ("[{0}({1}'{2}):] {3} DDL{4}: {5}"' SourceFile' SourceLine' SourceColumn' "xxx"' ErrorNumber' ErrorMessage); " is 129.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The length of the statement  "						throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed); " is 139.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The length of the statement  "				throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed); " is 139.
Long Statement,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The length of the statement  "			throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.NewlineInString)' DomMsgID.NewlineInString); " is 121.
Long Statement,MigraDoc.DocumentObjectModel.Shapes,LeftPosition,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes\LeftPosition.cs,IsValid,The length of the statement  "	return shapePosition == ShapePosition.Left || shapePosition == ShapePosition.Center || shapePosition == ShapePosition.Right || shapePosition == ShapePosition.Inside || shapePosition == ShapePosition.Outside; " is 207.
Long Statement,MigraDoc.DocumentObjectModel.Shapes,TopPosition,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Shapes\TopPosition.cs,IsValid,The length of the statement  "	return shapePosition == ShapePosition.Bottom || shapePosition == ShapePosition.Top || shapePosition == ShapePosition.Center; " is 124.
Long Statement,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetEffectiveBorders,The length of the statement  "			if (nbrBrdrs != null && GetEffectiveBorderWidth (nbrBrdrs' BorderType.Right) >= GetEffectiveBorderWidth (borders' BorderType.Left)) " is 131.
Long Statement,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetEffectiveBorders,The length of the statement  "			if (nbrBrdrs != null && GetEffectiveBorderWidth (nbrBrdrs' BorderType.Left) > GetEffectiveBorderWidth (borders' BorderType.Right)) " is 130.
Long Statement,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetEffectiveBorders,The length of the statement  "			if (nbrBrdrs != null && GetEffectiveBorderWidth (nbrBrdrs' BorderType.Bottom) >= GetEffectiveBorderWidth (borders' BorderType.Top)) " is 131.
Long Statement,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetEffectiveBorders,The length of the statement  "			if (nbrBrdrs != null && GetEffectiveBorderWidth (nbrBrdrs' BorderType.Top) > GetEffectiveBorderWidth (borders' BorderType.Bottom)) " is 130.
Long Statement,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,CalcLastConnectedRow,The length of the statement  "			downConnection = Math.Max (downConnection' cellInfo.BlockRow + Math.Max (cellInfo.Cell.Row.KeepWith' cellInfo.Cell.MergeDown)); " is 127.
Long Statement,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,CalcLastConnectedColumn,The length of the statement  "			rightConnection = Math.Max (rightConnection' cellInfo.BlockCol + Math.Max (cellInfo.Cell.Column.KeepWith' cellInfo.Cell.MergeRight)); " is 133.
Long Statement,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,Serialize,The length of the statement  "	if (!this.distanceFromTop.IsNull && (refBorders == null || (this.DistanceFromTop.Point != refBorders.DistanceFromTop.Point))) " is 125.
Long Statement,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,Serialize,The length of the statement  "	if (!this.distanceFromBottom.IsNull && (refBorders == null || (this.DistanceFromBottom.Point != refBorders.DistanceFromBottom.Point))) " is 134.
Long Statement,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,Serialize,The length of the statement  "	if (!this.distanceFromLeft.IsNull && (refBorders == null || (this.DistanceFromLeft.Point != refBorders.DistanceFromLeft.Point))) " is 128.
Long Statement,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,Serialize,The length of the statement  "	if (!this.distanceFromRight.IsNull && (refBorders == null || (this.DistanceFromRight.Point != refBorders.DistanceFromRight.Point))) " is 131.
Long Statement,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetHashCode,The length of the statement  "	return (int)this.argb ^ this.a.GetHashCode () ^ this.c.GetHashCode () ^ this.m.GetHashCode () ^ this.y.GetHashCode () ^ this.k.GetHashCode (); " is 142.
Long Statement,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The length of the statement  "			s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##}'{4:0.##})"' Alpha' C' M' Y' K); " is 122.
Long Statement,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The length of the statement  "				return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")"; " is 242.
Long Statement,MigraDoc.DocumentObjectModel,Document,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Document.cs,BindToRenderer,The length of the statement  "		throw new InvalidOperationException ("The document is already bound to another renderer. " + "A MigraDoc document can be rendered by only one renderer' because the rendering process " + "modifies its internal structure. If you want to render a MigraDoc document  on different renderers' " + "you must create a copy of it using the Clone function."); " is 349.
Long Statement,MigraDoc.DocumentObjectModel,DomSR,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\DomSR.cs,ParentAlreadySet,The length of the statement  "	return String.Format ("Value of type '{0}' must be cloned before set into '{1}'."' value.GetType ().ToString ()' docObject.GetType ().ToString ()); " is 147.
Long Statement,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The length of the statement  "		if ((!name.IsNull && Name != String.Empty && font == null) || (font != null && !name.IsNull && Name != String.Empty && Name != font.Name)) " is 138.
Long Statement,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The length of the statement  "        if (!this.color.IsNull && (font == null || this.Color.Argb != font.Color.Argb))// && this.Color.RGB != Color.Transparent.RGB)" is 125.
Long Statement,MigraDoc.DocumentObjectModel,Serializer,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Serializer.cs,DoWordWrap,The length of the statement  "		splitIndex = System.Math.Min (str.IndexOf (" "' this.lineBreakBeyond - this.writeIndent + 1)' str.IndexOf ("\x0D\x0A"' this.lineBreakBeyond - this.writeIndent + 1)); " is 165.
Long Statement,MigraDoc.DocumentObjectModel,Style,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Style.cs,GetBaseStyle,The length of the statement  "	//REVIEW KlPo4StLa Spezialbehandlung f�r den DefaultParagraphFont kr�ppelig(DefaultParagraphFont wird bei zugrif �ber styles["name"] nicht zur�ckgeliefert). " is 156.
Long Statement,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The length of the statement  "	SizeF size = graphics.MeasureString (text' this.gdiFont' new PointF (0' 0)' System.Drawing.StringFormat.GenericTypographic); " is 124.
Complex Conditional,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadCode,The conditional expression  "IsDigit (currChar) || currChar == '-' && IsDigit (nextChar) || currChar == '+' && IsDigit (nextChar)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanNumber,The conditional expression  "!mantissa && ch == '0' && (currChar == 'x' || currChar == 'X')"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,Serialize,The conditional expression  "!this.visible.IsNull && (refBorders == null || refBorders.visible.IsNull || (this.Visible != refBorders.Visible))"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,ApplyFont,The conditional expression  "(!font.name.IsNull && font.name.Value != "") && (refFont == null || font.Name != refFont.Name)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The conditional expression  "(!name.IsNull && Name != String.Empty && font == null) || (font != null && !name.IsNull && Name != String.Empty && Name != font.Name)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The conditional expression  "!bold.IsNull && (font == null || Bold != font.Bold || font.bold.IsNull)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The conditional expression  "!italic.IsNull && (font == null || Italic != font.Italic || font.italic.IsNull)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The conditional expression  "!underline.IsNull && (font == null || Underline != font.Underline || font.underline.IsNull)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The conditional expression  "!superscript.IsNull && (font == null || Superscript != font.Superscript || font.superscript.IsNull)"  is complex.
Complex Conditional,MigraDoc.DocumentObjectModel,Font,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Font.cs,Serialize,The conditional expression  "!subscript.IsNull && (font == null || Subscript != font.Subscript || font.subscript.IsNull)"  is complex.
Empty Catch Block,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Parse,The method has an empty catch block.
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseChr,The following statement contains a magic number: if (TokenType == TokenType.IntegerLiteral) {  	int val = this.scanner.GetTokenValueAsInt ();  	if (val >= 1 && val < 256)  		ch = (char)val;  	else  		ThrowParserException (DomMsgID.OutOfRange' "1 - 255");  }  else {  	ThrowParserException (DomMsgID.UnexpectedSymbol' Token);  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseChr,The following statement contains a magic number: if (val >= 1 && val < 256)  	ch = (char)val;  else  	ThrowParserException (DomMsgID.OutOfRange' "1 - 255");  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The following statement contains a magic number: AssertCondition (r >= 0 && r <= 255' DomMsgID.InvalidRange' "0 - 255");  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The following statement contains a magic number: AssertCondition (g >= 0 && g <= 255' DomMsgID.InvalidRange' "0 - 255");  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The following statement contains a magic number: AssertCondition (b >= 0 && b <= 255' DomMsgID.InvalidRange' "0 - 255");  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The following statement contains a magic number: return new Color ((uint)(0xFF000000 | (r << 16) | (g << 8) | b));  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseRGB,The following statement contains a magic number: return new Color ((uint)(0xFF000000 | (r << 16) | (g << 8) | b));  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The following statement contains a magic number: AssertCondition (v4 >= 0.0f && v4 <= 100.0' DomMsgID.InvalidRange' "0.0 - 100.0");  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The following statement contains a magic number: if (Symbol == Symbol.Comma) {  	hasAlpha = true;  	ReadCode ();  	// read v5 value  	AssertCondition (Symbol == Symbol.IntegerLiteral || Symbol == Symbol.RealLiteral' DomMsgID.NumberExpected' this.scanner.Token);  	v5 = this.scanner.GetTokenValueAsReal ();  	AssertCondition (v5 >= 0.0f && v5 <= 100.0' DomMsgID.InvalidRange' "0.0 - 100.0");  	ReadCode ();  	// read ')'  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The following statement contains a magic number: AssertCondition (v5 >= 0.0f && v5 <= 100.0' DomMsgID.InvalidRange' "0.0 - 100.0");  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The following statement contains a magic number: if (hasAlpha) {  	a = v1;  	c = v2;  	m = v3;  	y = v4;  	k = v5;  }  else {  	a = 100.0;  	c = v1;  	m = v2;  	y = v3;  	k = v4;  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseCMYK,The following statement contains a magic number: a = 100.0;  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseGray,The following statement contains a magic number: return new Color (0xff000000 + (g << 16) + (g << 8) + g);  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseGray,The following statement contains a magic number: return new Color (0xff000000 + (g << 16) + (g << 8) + g);  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,GetTokenValueAsInt,The following statement contains a magic number: if (symbol == Symbol.IntegerLiteral) {  	return Int32.Parse (token' CultureInfo.InvariantCulture);  }  else if (symbol == Symbol.HexIntegerLiteral) {  	string number = token.Substring (2);  	return Int32.Parse (number' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture);  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,GetTokenValueAsInt,The following statement contains a magic number: if (symbol == Symbol.HexIntegerLiteral) {  	string number = token.Substring (2);  	return Int32.Parse (number' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture);  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,GetTokenValueAsUInt,The following statement contains a magic number: if (symbol == Symbol.IntegerLiteral) {  	return UInt32.Parse (token' CultureInfo.InvariantCulture);  }  else if (symbol == Symbol.HexIntegerLiteral) {  	string number = token.Substring (2);  	return UInt32.Parse (number' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture);  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,GetTokenValueAsUInt,The following statement contains a magic number: if (symbol == Symbol.HexIntegerLiteral) {  	string number = token.Substring (2);  	return UInt32.Parse (number' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture);  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The following statement contains a magic number: while (currChar != Chars.QuoteDbl && !IsEof (currChar)) {  	if (currChar == '\\') {  		ScanNextChar ();  		// read escaped characters  		switch (currChar) {  		case 'a':  			str += '\a';  			break;  		case 'b':  			str += '\b';  			break;  		case 'f':  			str += '\f';  			break;  		case 'n':  			str += '\n';  			break;  		case 'r':  			str += '\r';  			break;  		case 't':  			str += '\t';  			break;  		case 'v':  			str += '\v';  			break;  		case '\'':  			str += '\'';  			break;  		case '\"':  			str += '\"';  			break;  		case '\\':  			str += '\\';  			break;  		case 'x':  			{  				ScanNextChar ();  				int hexNrCount = 0;  				string hexString = "0x";  				while (IsHexDigit (currChar)) {  					++hexNrCount;  					hexString += currChar;  					ScanNextChar ();  				}  				if (hexNrCount <= 2)  					str += "?????";  				//(char)AscULongFromHexString(hexString);  				else  					throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  			}  			break;  		//NYI: octal numbers  		//case '0':  		//{  		//  ScanNextChar();  		//  int hexNrCount = 0;  		//  string hexString = "0x";  		//  while (IsOctDigit(currChar))  		//  {  		//    ++hexNrCount;  		//    hexString += currChar;  		//    ScanNextChar();  		//  }  		//  if (hexNrCount <=2)  		//    str += "?????"; //(char)AscULongFromHexString(hexString);  		//  else  		//    throw new DdlParserException(DdlErrorLevel.Error' "DdlScanner"'DomMsgID.EscapeSequenceNotAllowed' null);  		//}  		//  break;  		default:  			throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  		}  	}  	else if (currChar == Chars.Null || currChar == Chars.CR || currChar == Chars.LF)  		throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.NewlineInString)' DomMsgID.NewlineInString);  	else  		str += currChar;  	ScanNextChar ();  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The following statement contains a magic number: if (currChar == '\\') {  	ScanNextChar ();  	// read escaped characters  	switch (currChar) {  	case 'a':  		str += '\a';  		break;  	case 'b':  		str += '\b';  		break;  	case 'f':  		str += '\f';  		break;  	case 'n':  		str += '\n';  		break;  	case 'r':  		str += '\r';  		break;  	case 't':  		str += '\t';  		break;  	case 'v':  		str += '\v';  		break;  	case '\'':  		str += '\'';  		break;  	case '\"':  		str += '\"';  		break;  	case '\\':  		str += '\\';  		break;  	case 'x':  		{  			ScanNextChar ();  			int hexNrCount = 0;  			string hexString = "0x";  			while (IsHexDigit (currChar)) {  				++hexNrCount;  				hexString += currChar;  				ScanNextChar ();  			}  			if (hexNrCount <= 2)  				str += "?????";  			//(char)AscULongFromHexString(hexString);  			else  				throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  		}  		break;  	//NYI: octal numbers  	//case '0':  	//{  	//  ScanNextChar();  	//  int hexNrCount = 0;  	//  string hexString = "0x";  	//  while (IsOctDigit(currChar))  	//  {  	//    ++hexNrCount;  	//    hexString += currChar;  	//    ScanNextChar();  	//  }  	//  if (hexNrCount <=2)  	//    str += "?????"; //(char)AscULongFromHexString(hexString);  	//  else  	//    throw new DdlParserException(DdlErrorLevel.Error' "DdlScanner"'DomMsgID.EscapeSequenceNotAllowed' null);  	//}  	//  break;  	default:  		throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  	}  }  else if (currChar == Chars.Null || currChar == Chars.CR || currChar == Chars.LF)  	throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.NewlineInString)' DomMsgID.NewlineInString);  else  	str += currChar;  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The following statement contains a magic number: switch (currChar) {  case 'a':  	str += '\a';  	break;  case 'b':  	str += '\b';  	break;  case 'f':  	str += '\f';  	break;  case 'n':  	str += '\n';  	break;  case 'r':  	str += '\r';  	break;  case 't':  	str += '\t';  	break;  case 'v':  	str += '\v';  	break;  case '\'':  	str += '\'';  	break;  case '\"':  	str += '\"';  	break;  case '\\':  	str += '\\';  	break;  case 'x':  	{  		ScanNextChar ();  		int hexNrCount = 0;  		string hexString = "0x";  		while (IsHexDigit (currChar)) {  			++hexNrCount;  			hexString += currChar;  			ScanNextChar ();  		}  		if (hexNrCount <= 2)  			str += "?????";  		//(char)AscULongFromHexString(hexString);  		else  			throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  	}  	break;  //NYI: octal numbers  //case '0':  //{  //  ScanNextChar();  //  int hexNrCount = 0;  //  string hexString = "0x";  //  while (IsOctDigit(currChar))  //  {  //    ++hexNrCount;  //    hexString += currChar;  //    ScanNextChar();  //  }  //  if (hexNrCount <=2)  //    str += "?????"; //(char)AscULongFromHexString(hexString);  //  else  //    throw new DdlParserException(DdlErrorLevel.Error' "DdlScanner"'DomMsgID.EscapeSequenceNotAllowed' null);  //}  //  break;  default:  	throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  }  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanStringLiteral,The following statement contains a magic number: if (hexNrCount <= 2)  	str += "?????";  //(char)AscULongFromHexString(hexString);  else  	throw new DdlParserException (DdlErrorLevel.Error' DomSR.GetString (DomMsgID.EscapeSequenceNotAllowed)' DomMsgID.EscapeSequenceNotAllowed);  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlWriter,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlWriter.cs,WriteToString,The following statement contains a magic number: return WriteToString (docObject' 2' 0);  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlWriter,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlWriter.cs,WriteToString,The following statement contains a magic number: return WriteToString (docObjectContainer' 2' 0);  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlWriter,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlWriter.cs,WriteToFile,The following statement contains a magic number: WriteToFile (docObject' filename' 2' 0);  
Magic Number,MigraDoc.DocumentObjectModel.IO,DdlWriter,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlWriter.cs,WriteToFile,The following statement contains a magic number: WriteToFile (docObjectContainer' filename' 2' 0);  
Magic Number,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,FlattenAxis,The following statement contains a magic number: refLineFormat.width = 0.15;  
Magic Number,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,FlattenAxis,The following statement contains a magic number: refLineFormat.width = 0.4;  
Magic Number,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitTable,The following statement contains a magic number: if (table.leftPadding.IsNull)  	table.leftPadding = Unit.FromMillimeter (1.2);  
Magic Number,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitTable,The following statement contains a magic number: table.leftPadding = Unit.FromMillimeter (1.2);  
Magic Number,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitTable,The following statement contains a magic number: if (table.rightPadding.IsNull)  	table.rightPadding = Unit.FromMillimeter (1.2);  
Magic Number,MigraDoc.DocumentObjectModel.Visitors,VisitorBase,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\VisitorBase.cs,VisitTable,The following statement contains a magic number: table.rightPadding = Unit.FromMillimeter (1.2);  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: if (border != null) {  	if (!border.visible.IsNull && !border.Visible)  		return 0;  	if (border != null && !border.width.IsNull)  		return border.Width.Point;  	if (!border.color.IsNull || !border.style.IsNull || border.Visible) {  		if (!this.width.IsNull)  			return this.Width.Point;  		return 0.5;  	}  }  else if (!(type == BorderType.DiagonalDown || type == BorderType.DiagonalUp)) {  	if (!this.visible.IsNull && !this.Visible)  		return 0;  	if (!this.width.IsNull)  		return this.Width.Point;  	if (!this.color.IsNull || !this.style.IsNull || this.Visible)  		return 0.5;  }  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: if (border != null) {  	if (!border.visible.IsNull && !border.Visible)  		return 0;  	if (border != null && !border.width.IsNull)  		return border.Width.Point;  	if (!border.color.IsNull || !border.style.IsNull || border.Visible) {  		if (!this.width.IsNull)  			return this.Width.Point;  		return 0.5;  	}  }  else if (!(type == BorderType.DiagonalDown || type == BorderType.DiagonalUp)) {  	if (!this.visible.IsNull && !this.Visible)  		return 0;  	if (!this.width.IsNull)  		return this.Width.Point;  	if (!this.color.IsNull || !this.style.IsNull || this.Visible)  		return 0.5;  }  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: if (!border.color.IsNull || !border.style.IsNull || border.Visible) {  	if (!this.width.IsNull)  		return this.Width.Point;  	return 0.5;  }  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: return 0.5;  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: if (!(type == BorderType.DiagonalDown || type == BorderType.DiagonalUp)) {  	if (!this.visible.IsNull && !this.Visible)  		return 0;  	if (!this.width.IsNull)  		return this.Width.Point;  	if (!this.color.IsNull || !this.style.IsNull || this.Visible)  		return 0.5;  }  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: if (!this.color.IsNull || !this.style.IsNull || this.Visible)  	return 0.5;  
Magic Number,MigraDoc.DocumentObjectModel,Borders,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Borders.cs,GetEffectiveWidth,The following statement contains a magic number: return 0.5;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.argb = 0xFF000000 | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.argb = 0xFF000000 | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.argb = ((uint)a << 24) | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.argb = ((uint)a << 24) | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.argb = ((uint)a << 24) | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.a = (float)(alpha > 100 ? 100 : (alpha < 0 ? 0 : alpha));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.a = (float)(alpha > 100 ? 100 : (alpha < 0 ? 0 : alpha));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.c = (float)(cyan > 100 ? 100 : (cyan < 0 ? 0 : cyan));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.c = (float)(cyan > 100 ? 100 : (cyan < 0 ? 0 : cyan));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.m = (float)(magenta > 100 ? 100 : (magenta < 0 ? 0 : magenta));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.m = (float)(magenta > 100 ? 100 : (magenta < 0 ? 0 : magenta));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.y = (float)(yellow > 100 ? 100 : (yellow < 0 ? 0 : yellow));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.y = (float)(yellow > 100 ? 100 : (yellow < 0 ? 0 : yellow));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.k = (float)(black > 100 ? 100 : (black < 0 ? 0 : black));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Color,The following statement contains a magic number: this.k = (float)(black > 100 ? 100 : (black < 0 ? 0 : black));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,InitCmykFromRgb,The following statement contains a magic number: if (k == 255)  	this.c = this.m = this.y = 0;  else {  	float black = 255f - k;  	this.c = 100f * (c - k) / black;  	this.m = 100f * (m - k) / black;  	this.y = 100f * (y - k) / black;  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,InitRgbFromCmyk,The following statement contains a magic number: this.argb = ((uint)a << 24) | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,InitRgbFromCmyk,The following statement contains a magic number: this.argb = ((uint)a << 24) | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,InitRgbFromCmyk,The following statement contains a magic number: this.argb = ((uint)a << 24) | ((uint)r << 16) | ((uint)g << 8) | (uint)b;  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Parse,The following statement contains a magic number: try {  	uint clr = 0;  	// Must use Enum.Parse because Enum.IsDefined is case sensitive  	try {  		object obj = Enum.Parse (typeof(ColorName)' color' true);  		clr = (uint)obj;  		return new Color (clr);  	}  	catch {  		//ignore exception cause it's not a ColorName.  	}  	System.Globalization.NumberStyles numberStyle = System.Globalization.NumberStyles.Integer;  	string number = color.ToLower ();  	if (number.StartsWith ("0x")) {  		numberStyle = System.Globalization.NumberStyles.HexNumber;  		number = color.Substring (2);  	}  	clr = uint.Parse (number' numberStyle);  	return new Color (clr);  }  catch (FormatException ex) {  	throw new ArgumentException (DomSR.InvalidColorString (color)' ex);  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Parse,The following statement contains a magic number: if (number.StartsWith ("0x")) {  	numberStyle = System.Globalization.NumberStyles.HexNumber;  	number = color.Substring (2);  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,Parse,The following statement contains a magic number: number = color.Substring (2);  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetMixedTransparencyColor,The following statement contains a magic number: red = (int)(red + (255 - red) * whiteFactor);  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetMixedTransparencyColor,The following statement contains a magic number: green = (int)(green + (255 - green) * whiteFactor);  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetMixedTransparencyColor,The following statement contains a magic number: blue = (int)(blue + (255 - blue) * whiteFactor);  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetMixedTransparencyColor,The following statement contains a magic number: return new Color ((uint)(0xFF << 24 | (red << 16) | (green << 8) | blue));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetMixedTransparencyColor,The following statement contains a magic number: return new Color ((uint)(0xFF << 24 | (red << 16) | (green << 8) | blue));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,GetMixedTransparencyColor,The following statement contains a magic number: return new Color ((uint)(0xFF << 24 | (red << 16) | (green << 8) | blue));  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if (this.isCmyk) {  	string s;  	if (Alpha == 100.0)  		s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##})"' C' M' Y' K);  	else  		s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##}'{4:0.##})"' Alpha' C' M' Y' K);  	return s;  }  else {  	if (stdColors.ContainsKey (argb))  		return (string)stdColors [argb];  	else {  		if ((this.argb & 0xFF000000) == 0xFF000000)  			return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  		else  			return "0x" + argb.ToString ("X");  	}  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if (this.isCmyk) {  	string s;  	if (Alpha == 100.0)  		s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##})"' C' M' Y' K);  	else  		s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##}'{4:0.##})"' Alpha' C' M' Y' K);  	return s;  }  else {  	if (stdColors.ContainsKey (argb))  		return (string)stdColors [argb];  	else {  		if ((this.argb & 0xFF000000) == 0xFF000000)  			return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  		else  			return "0x" + argb.ToString ("X");  	}  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if (this.isCmyk) {  	string s;  	if (Alpha == 100.0)  		s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##})"' C' M' Y' K);  	else  		s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##}'{4:0.##})"' Alpha' C' M' Y' K);  	return s;  }  else {  	if (stdColors.ContainsKey (argb))  		return (string)stdColors [argb];  	else {  		if ((this.argb & 0xFF000000) == 0xFF000000)  			return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  		else  			return "0x" + argb.ToString ("X");  	}  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if (Alpha == 100.0)  	s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##})"' C' M' Y' K);  else  	s = String.Format (CultureInfo.InvariantCulture' "CMYK({0:0.##}'{1:0.##}'{2:0.##}'{3:0.##}'{4:0.##})"' Alpha' C' M' Y' K);  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if (stdColors.ContainsKey (argb))  	return (string)stdColors [argb];  else {  	if ((this.argb & 0xFF000000) == 0xFF000000)  		return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  	else  		return "0x" + argb.ToString ("X");  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if (stdColors.ContainsKey (argb))  	return (string)stdColors [argb];  else {  	if ((this.argb & 0xFF000000) == 0xFF000000)  		return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  	else  		return "0x" + argb.ToString ("X");  }  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if ((this.argb & 0xFF000000) == 0xFF000000)  	return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  else  	return "0x" + argb.ToString ("X");  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: if ((this.argb & 0xFF000000) == 0xFF000000)  	return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  else  	return "0x" + argb.ToString ("X");  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,MigraDoc.DocumentObjectModel,Color,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Color.cs,ToString,The following statement contains a magic number: return "RGB(" + ((this.argb & 0xFF0000) >> 16).ToString (CultureInfo.InvariantCulture) + "'" + ((this.argb & 0x00FF00) >> 8).ToString (CultureInfo.InvariantCulture) + "'" + (this.argb & 0x0000FF).ToString (CultureInfo.InvariantCulture) + ")";  
Magic Number,MigraDoc.DocumentObjectModel,DdlEncoder,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\DdlEncoder.cs,IsDdeIdentifier,The following statement contains a magic number: if (len > 64)  	return false;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = A0Height / 2;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: height = A0Height / 2;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = A0Width / 2;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: height = A0Width / 2;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = A0Height / 4;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: height = A0Height / 4;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = A0Width / 4;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: height = A0Width / 4;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = A0Height / 8;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: height = A0Height / 8;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = A0Width / 8;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: height = 257;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: width = 182;  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageWidth = Unit.FromPoint (612);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageHeight = Unit.FromPoint (792);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageWidth = Unit.FromPoint (612);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageHeight = Unit.FromPoint (1008);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageWidth = Unit.FromPoint (1224);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageHeight = Unit.FromPoint (792);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageWidth = Unit.FromPoint (792);  
Magic Number,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following statement contains a magic number: pageHeight = Unit.FromPoint (1224);  
Magic Number,MigraDoc.DocumentObjectModel,Serializer,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Serializer.cs,WriteComment,The following statement contains a magic number: if (crlf != -1) {  	WriteComment (comment.Substring (0' crlf));  	WriteComment (comment.Substring (crlf + 2));  	return;  }  
Magic Number,MigraDoc.DocumentObjectModel,Serializer,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Serializer.cs,WriteComment,The following statement contains a magic number: WriteComment (comment.Substring (crlf + 2));  
Magic Number,MigraDoc.DocumentObjectModel,Serializer,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Serializer.cs,WriteToStream,The following statement contains a magic number: if (crlf != -1) {  	WriteToStream (text.Substring (0' crlf)' true' fAutoIndent);  	WriteToStream (text.Substring (crlf + 2)' fLineBreak' fAutoIndent);  	return;  }  
Magic Number,MigraDoc.DocumentObjectModel,Serializer,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Serializer.cs,WriteToStream,The following statement contains a magic number: WriteToStream (text.Substring (crlf + 2)' fLineBreak' fAutoIndent);  
Magic Number,MigraDoc.DocumentObjectModel,Styles,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Styles.cs,SetupStyles,The following statement contains a magic number: style.Font.Size = 10;  
Magic Number,MigraDoc.DocumentObjectModel,Styles,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Styles.cs,SetupStyles,The following statement contains a magic number: style.ParagraphFormat.LineSpacing = 10;  
Magic Number,MigraDoc.DocumentObjectModel,Text,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\Text.cs,Serialize,The following statement contains a magic number: text = text.Replace (new string ((char)173' 1)' "\\-");  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: switch (unitType) {  case UnitType.Point:  	break;  case UnitType.Centimeter:  	size.Width = (float)(size.Width * 2.54 / 72);  	size.Height = (float)(size.Height * 2.54 / 72);  	break;  case UnitType.Inch:  	size.Width = size.Width / 72;  	size.Height = size.Height / 72;  	break;  case UnitType.Millimeter:  	size.Width = (float)(size.Width * 25.4 / 72);  	size.Height = (float)(size.Height * 25.4 / 72);  	break;  case UnitType.Pica:  	size.Width = size.Width / 12;  	size.Height = size.Height / 12;  	break;  default:  	Debug.Assert (false' "Missing unit type");  	break;  }  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Width = (float)(size.Width * 2.54 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Width = (float)(size.Width * 2.54 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Height = (float)(size.Height * 2.54 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Height = (float)(size.Height * 2.54 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Width = size.Width / 72;  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Height = size.Height / 72;  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Width = (float)(size.Width * 25.4 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Width = (float)(size.Width * 25.4 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Height = (float)(size.Height * 25.4 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Height = (float)(size.Height * 25.4 / 72);  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Width = size.Width / 12;  
Magic Number,MigraDoc.DocumentObjectModel,TextMeasurement,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\TextMeasurement.cs,MeasureString,The following statement contains a magic number: size.Height = size.Height / 12;  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseHeaderFooter,The following switch statement is missing a default case: switch (hdrFtrSym) {  case Symbol.PrimaryHeader:  case Symbol.PrimaryFooter:  	headersFooters.Primary = headerFooter;  	break;  case Symbol.EvenPageHeader:  case Symbol.EvenPageFooter:  	headersFooters.EvenPage = headerFooter;  	break;  case Symbol.FirstPageHeader:  case Symbol.FirstPageFooter:  	headersFooters.FirstPage = headerFooter;  	break;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,IsParagraphContent,The following switch statement is missing a default case: switch (symbol) {  case Symbol.Bold:  case Symbol.Italic:  case Symbol.Underline:  case Symbol.Field:  case Symbol.Font:  case Symbol.FontColor:  case Symbol.FontSize:  case Symbol.Footnote:  case Symbol.Hyperlink:  case Symbol.Symbol:  case Symbol.Chr:  case Symbol.Tab:  case Symbol.LineBreak:  case Symbol.Space:  case Symbol.SoftHyphen:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,ParseField,The following switch statement is missing a default case: switch (fieldType) {  case "date":  	field = elements.AddDateField ();  	break;  case "page":  	field = elements.AddPageField ();  	break;  case "numpages":  	field = elements.AddNumPagesField ();  	break;  case "info":  	field = elements.AddInfoField ((InfoFieldType)0);  	break;  case "sectionpages":  	field = elements.AddSectionPagesField ();  	break;  case "section":  	field = elements.AddSectionField ();  	break;  case "bookmark":  	field = elements.AddBookmark ("");  	break;  case "pageref":  	field = elements.AddPageRefField ("");  	break;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,IsSpaceType,The following switch statement is missing a default case: switch (symbolName) {  case SymbolName.Blank:  case SymbolName.Em:  //case SymbolName.Em4: // same as SymbolName.EmQuarter  case SymbolName.EmQuarter:  case SymbolName.En:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlParser,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlParser.cs,IsSymbolType,The following switch statement is missing a default case: switch (symbolName) {  case SymbolName.Euro:  case SymbolName.Copyright:  case SymbolName.Trademark:  case SymbolName.RegisteredTrademark:  case SymbolName.Bullet:  case SymbolName.Not:  case SymbolName.EmDash:  case SymbolName.EnDash:  case SymbolName.NonBreakableBlank:  	//case SymbolName.HardBlank: //same as SymbolName.NonBreakableBlank:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,PeekKeyword,The following switch statement is missing a default case: switch (m_strDocument [index]) {  case '{':  case '}':  case '\\':  case '-':  case '(':  	return Symbol.Character;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,PeekPunctuator,The following switch statement is missing a default case: switch (ch) {  case '{':  	sym = Symbol.BraceLeft;  	break;  case '}':  	sym = Symbol.BraceRight;  	break;  case '[':  	sym = Symbol.BracketLeft;  	break;  case ']':  	sym = Symbol.BracketRight;  	break;  case '(':  	sym = Symbol.ParenLeft;  	break;  case ')':  	sym = Symbol.ParenRight;  	break;  case ':':  	sym = Symbol.Colon;  	break;  case ';':  	sym = Symbol.Semicolon;  	break;  case '.':  	sym = Symbol.Dot;  	break;  case ''':  	sym = Symbol.Comma;  	break;  case '%':  	sym = Symbol.Percent;  	break;  case '$':  	sym = Symbol.Dollar;  	break;  case '@':  	sym = Symbol.At;  	break;  case '#':  	sym = Symbol.Hash;  	break;  //case '?':  //  sym = Symbol.Question;  //  break;  case '�':  	sym = Symbol.Currency;  	//??? used in DDL?  	break;  //case '|':  //  sym = Symbol.Bar;  //  break;  case '=':  	sym = Symbol.Assign;  	break;  case '/':  	sym = Symbol.Slash;  	break;  case '\\':  	sym = Symbol.BackSlash;  	break;  case '+':  	if (this.ddlLength >= index + 1 && m_strDocument [index + 1] == '=')  		sym = Symbol.PlusAssign;  	else  		sym = Symbol.Plus;  	break;  case '-':  	if (this.ddlLength >= index + 1 && m_strDocument [index + 1] == '=')  		sym = Symbol.MinusAssign;  	else  		sym = Symbol.Minus;  	break;  case Chars.CR:  	sym = Symbol.CR;  	break;  case Chars.LF:  	sym = Symbol.LF;  	break;  case Chars.Space:  	sym = Symbol.Blank;  	break;  case Chars.Null:  	sym = Symbol.Eof;  	break;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadText,The following switch statement is missing a default case: switch (this.nextChar) {  case '\\':  case '{':  case '}':  case '/':  case '-':  	return ReadPlainText (rootLevel);  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadText,The following switch statement is missing a default case: switch (this.currChar) {  case '{':  	AppendAndScanNextChar ();  	this.symbol = Symbol.BraceLeft;  	this.tokenType = TokenType.OperatorOrPunctuator;  	return Symbol.BraceLeft;  // Syntax error in any case.  case '}':  	AppendAndScanNextChar ();  	this.symbol = Symbol.BraceRight;  	this.tokenType = TokenType.OperatorOrPunctuator;  	return Symbol.BraceRight;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,IgnoreLineBreak,The following switch statement is missing a default case: switch (this.prevSymbol) {  case Symbol.LineBreak:  case Symbol.Space:  case Symbol.Tab:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ReadPlainText,The following switch statement is missing a default case: switch (this.currChar) {  case '{':  	// Syntax error any way  	loop = false;  	continue;  case '}':  	// Block end  	loop = false;  	continue;  case '/':  	if (this.nextChar != '/')  		goto ValidCharacter;  	ScanToEol ();  	break;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanNextChar,The following switch statement is missing a default case: switch (currChar) {  case Chars.Null:  	//???  	++m_idxLine;  	m_idxLinePos = 0;  	break;  // ignore CR  case Chars.CR:  	if (nextChar == Chars.LF) {  		goto SkipChar;  	}  	else {  		//TODO NiSc  		//NYI: MacOS uses CR only  		//Check.NotImplemented();  	}  	break;  case Chars.LF:  	//NYI: Unix uses LF only  	this.m_idxLine++;  	this.m_idxLinePos = 0;  	break;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,IsDocumentElement,The following switch statement is missing a default case: switch (symbol) {  case Symbol.Paragraph:  case Symbol.Table:  case Symbol.Image:  case Symbol.TextFrame:  case Symbol.Chart:  case Symbol.PageBreak:  case Symbol.Barcode:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,IsSectionElement,The following switch statement is missing a default case: switch (symbol) {  case Symbol.Paragraph:  case Symbol.Table:  case Symbol.Image:  case Symbol.TextFrame:  case Symbol.Chart:  case Symbol.PageBreak:  case Symbol.Barcode:  case Symbol.Header:  case Symbol.PrimaryHeader:  case Symbol.FirstPageHeader:  case Symbol.EvenPageHeader:  case Symbol.Footer:  case Symbol.PrimaryFooter:  case Symbol.FirstPageFooter:  case Symbol.EvenPageFooter:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,IsParagraphElement,The following switch statement is missing a default case: switch (symbol) {  case Symbol.Blank:  case Symbol.Bold:  case Symbol.Italic:  case Symbol.Underline:  case Symbol.Font:  case Symbol.FontColor:  case Symbol.FontSize:  case Symbol.Field:  case Symbol.Hyperlink:  case Symbol.Footnote:  case Symbol.Image:  case Symbol.Tab:  case Symbol.SoftHyphen:  case Symbol.Space:  case Symbol.Symbol:  case Symbol.Chr:  case Symbol.LineBreak:  case Symbol.Text:  	return true;  }  
Missing Default,MigraDoc.DocumentObjectModel.IO,DdlScanner,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.IO\DdlScanner.cs,ScanPunctuator,The following switch statement is missing a default case: switch (currChar) {  case '{':  	sym = Symbol.BraceLeft;  	break;  case '}':  	sym = Symbol.BraceRight;  	break;  case '[':  	sym = Symbol.BracketLeft;  	break;  case ']':  	sym = Symbol.BracketRight;  	break;  case '(':  	sym = Symbol.ParenLeft;  	break;  case ')':  	sym = Symbol.ParenRight;  	break;  case ':':  	sym = Symbol.Colon;  	break;  case ';':  	sym = Symbol.Semicolon;  	break;  case '.':  	sym = Symbol.Dot;  	break;  case ''':  	sym = Symbol.Comma;  	break;  case '%':  	sym = Symbol.Percent;  	break;  case '$':  	sym = Symbol.Dollar;  	break;  case '@':  	sym = Symbol.At;  	break;  case '#':  	sym = Symbol.Hash;  	break;  //case '?':  //  sym = Symbol.Question;  //  break;  case '�':  	sym = Symbol.Currency;  	//??? used in DDL?  	break;  //case '|':  //  sym = Symbol.Bar;  //  break;  case '=':  	sym = Symbol.Assign;  	break;  case '/':  	sym = Symbol.Slash;  	break;  case '\\':  	sym = Symbol.BackSlash;  	break;  case '+':  	if (nextChar == '=') {  		token += currChar;  		ScanNextChar ();  		sym = Symbol.PlusAssign;  	}  	else  		sym = Symbol.Plus;  	break;  case '-':  	if (nextChar == '=') {  		token += currChar;  		ScanNextChar ();  		sym = Symbol.MinusAssign;  	}  	else  		sym = Symbol.Minus;  	break;  case Chars.CR:  	sym = Symbol.CR;  	break;  case Chars.LF:  	sym = Symbol.LF;  	break;  case Chars.Space:  	sym = Symbol.Blank;  	break;  case Chars.Null:  	sym = Symbol.Eof;  	return sym;  }  
Missing Default,MigraDoc.DocumentObjectModel.Visitors,MergedCellList,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel.Visitors\MergedCellList.cs,GetNeighbor,The following switch statement is missing a default case: switch (position) {  case NeighborPosition.Left:  	if (cellInfo.BlockCol > 0)  		return CellInfos [cellInfo.BlockRow' cellInfo.BlockCol - 1].Cell;  	break;  case NeighborPosition.Right:  	if (cellInfo.BlockCol + cell.MergeRight < ColCount - 1)  		return CellInfos [cellInfo.BlockRow' cellInfo.BlockCol + cell.MergeRight + 1].Cell;  	break;  case NeighborPosition.Top:  	if (cellInfo.BlockRow > 0)  		return CellInfos [cellInfo.BlockRow - 1' cellInfo.BlockCol].Cell;  	break;  case NeighborPosition.Bottom:  	if (cellInfo.BlockRow + cell.MergeDown < RowCount - 1)  		return CellInfos [cellInfo.BlockRow + cell.MergeDown + 1' cellInfo.BlockCol].Cell;  	break;  }  
Missing Default,MigraDoc.DocumentObjectModel,PageSetup,C:\repos\Lakerfield_PdfSharp\MigraDoc\code\MigraDoc.DocumentObjectModel\MigraDoc.DocumentObjectModel\PageSetup.cs,GetPageSize,The following switch statement is missing a default case: switch (pageFormat) {  case PageFormat.A0:  	height = A0Height;  	width = A0Width;  	break;  case PageFormat.A1:  	height = A0Width;  	width = A0Height / 2;  	break;  case PageFormat.A2:  	height = A0Height / 2;  	width = A0Width / 2;  	break;  case PageFormat.A3:  	height = A0Width / 2;  	width = A0Height / 4;  	break;  case PageFormat.A4:  	height = A0Height / 4;  	width = A0Width / 4;  	break;  case PageFormat.A5:  	height = A0Width / 4;  	width = A0Height / 8;  	break;  case PageFormat.A6:  	height = A0Height / 8;  	width = A0Width / 8;  	break;  case PageFormat.B5:  	height = 257;  	width = 182;  	break;  case PageFormat.Letter:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.Legal:  	pageWidth = Unit.FromPoint (612);  	pageHeight = Unit.FromPoint (1008);  	break;  case PageFormat.Ledger:  	pageWidth = Unit.FromPoint (1224);  	pageHeight = Unit.FromPoint (792);  	break;  case PageFormat.P11x17:  	pageWidth = Unit.FromPoint (792);  	pageHeight = Unit.FromPoint (1224);  	break;  }  
