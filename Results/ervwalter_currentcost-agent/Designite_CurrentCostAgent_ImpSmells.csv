Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,Cyclomatic complexity of the method is 12
Long Statement,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,PostToCosm,The length of the statement  "		string cosmUrl = string.Format ("http://api.cosm.com/v2/feeds/{0}/datastreams/{1}/datapoints?key={2}"' _cosmFeedId' subFeedId' _cosmKey); " is 137.
Empty Catch Block,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The method has an empty catch block.
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,QueueUploader,The following statement contains a magic number: while (true) {  	try {  		Thread.Sleep (1000);  		if (_exit) {  			return;  		}  		if (DateTime.Now < nextUpload) {  			continue;  		}  		nextUpload = DateTime.Now.AddSeconds (UploadFrequency);  		List<SensorReading> newReadings = new List<SensorReading> ();  		SensorReading newReading;  		while (readings.TryDequeue (out newReading)) {  			newReadings.Add (newReading);  		}  		if (newReadings.Count == 0) {  			continue;  		}  		PostToPlotWatt (newReadings);  		PostToCosm (newReadings);  		_statusForm.Invoke (new NotifyUploadHandler (_statusForm.NotifyUpload));  	}  	catch {  		//catch and absorb and never die  		Thread.Sleep (10000);  	}  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,QueueUploader,The following statement contains a magic number: while (true) {  	try {  		Thread.Sleep (1000);  		if (_exit) {  			return;  		}  		if (DateTime.Now < nextUpload) {  			continue;  		}  		nextUpload = DateTime.Now.AddSeconds (UploadFrequency);  		List<SensorReading> newReadings = new List<SensorReading> ();  		SensorReading newReading;  		while (readings.TryDequeue (out newReading)) {  			newReadings.Add (newReading);  		}  		if (newReadings.Count == 0) {  			continue;  		}  		PostToPlotWatt (newReadings);  		PostToCosm (newReadings);  		_statusForm.Invoke (new NotifyUploadHandler (_statusForm.NotifyUpload));  	}  	catch {  		//catch and absorb and never die  		Thread.Sleep (10000);  	}  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,QueueUploader,The following statement contains a magic number: try {  	Thread.Sleep (1000);  	if (_exit) {  		return;  	}  	if (DateTime.Now < nextUpload) {  		continue;  	}  	nextUpload = DateTime.Now.AddSeconds (UploadFrequency);  	List<SensorReading> newReadings = new List<SensorReading> ();  	SensorReading newReading;  	while (readings.TryDequeue (out newReading)) {  		newReadings.Add (newReading);  	}  	if (newReadings.Count == 0) {  		continue;  	}  	PostToPlotWatt (newReadings);  	PostToCosm (newReadings);  	_statusForm.Invoke (new NotifyUploadHandler (_statusForm.NotifyUpload));  }  catch {  	//catch and absorb and never die  	Thread.Sleep (10000);  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,QueueUploader,The following statement contains a magic number: try {  	Thread.Sleep (1000);  	if (_exit) {  		return;  	}  	if (DateTime.Now < nextUpload) {  		continue;  	}  	nextUpload = DateTime.Now.AddSeconds (UploadFrequency);  	List<SensorReading> newReadings = new List<SensorReading> ();  	SensorReading newReading;  	while (readings.TryDequeue (out newReading)) {  		newReadings.Add (newReading);  	}  	if (newReadings.Count == 0) {  		continue;  	}  	PostToPlotWatt (newReadings);  	PostToCosm (newReadings);  	_statusForm.Invoke (new NotifyUploadHandler (_statusForm.NotifyUpload));  }  catch {  	//catch and absorb and never die  	Thread.Sleep (10000);  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,QueueUploader,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,QueueUploader,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,PostToPlotWatt,The following statement contains a magic number: foreach (var reading in newReadings) {  	readingsToPost.Add (string.Format ("{0}'{1}'{2}"' meters [reading.Sensor]' reading.Watts / 1000.0' reading.Timestamp));  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,PostToPlotWatt,The following statement contains a magic number: readingsToPost.Add (string.Format ("{0}'{1}'{2}"' meters [reading.Sensor]' reading.Watts / 1000.0' reading.Timestamp));  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: while (true) {  	try {  		using (SerialPort port = new SerialPort ()) {  			port.PortName = _comPort;  			port.BaudRate = _baudRate;  			port.DtrEnable = true;  			port.ReadTimeout = 5000;  			port.Open ();  			while (true) {  				try {  					if (_exit) {  						return;  					}  					string line = port.ReadLine ();  					//Debug.WriteLine(line);  					XDocument doc = XDocument.Parse (line' LoadOptions.None);  					var msg = doc.Element ("msg");  					if (msg != null) {  						SensorReading reading = new SensorReading ();  						var ch1 = msg.Element ("ch1");  						if (ch1 != null) {  							reading.Timestamp = (int)(DateTime.UtcNow - epochStart).TotalSeconds;  							reading.Sensor = int.Parse (msg.Element ("sensor").Value);  							reading.Watts = int.Parse (ch1.Element ("watts").Value);  							var ch2 = msg.Element ("ch2");  							if (ch2 != null) {  								reading.Watts += int.Parse (ch2.Element ("watts").Value);  							}  							var ch3 = msg.Element ("ch3");  							if (ch3 != null) {  								reading.Watts += int.Parse (ch3.Element ("watts").Value);  							}  							readings.Enqueue (reading);  							Debug.WriteLine ("time={0}' sensor={1}' watts={2}"' reading.Timestamp' reading.Sensor' reading.Watts);  							_statusForm.Invoke (new NewReadingHandler (_statusForm.NewReading)' reading);  						}  					}  				}  				catch (TimeoutException timeout) {  					//absorb timeouts and try again  				}  			}  		}  	}  	catch {  		//absorb and never die' but at least pause  		Thread.Sleep (3000);  	}  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: while (true) {  	try {  		using (SerialPort port = new SerialPort ()) {  			port.PortName = _comPort;  			port.BaudRate = _baudRate;  			port.DtrEnable = true;  			port.ReadTimeout = 5000;  			port.Open ();  			while (true) {  				try {  					if (_exit) {  						return;  					}  					string line = port.ReadLine ();  					//Debug.WriteLine(line);  					XDocument doc = XDocument.Parse (line' LoadOptions.None);  					var msg = doc.Element ("msg");  					if (msg != null) {  						SensorReading reading = new SensorReading ();  						var ch1 = msg.Element ("ch1");  						if (ch1 != null) {  							reading.Timestamp = (int)(DateTime.UtcNow - epochStart).TotalSeconds;  							reading.Sensor = int.Parse (msg.Element ("sensor").Value);  							reading.Watts = int.Parse (ch1.Element ("watts").Value);  							var ch2 = msg.Element ("ch2");  							if (ch2 != null) {  								reading.Watts += int.Parse (ch2.Element ("watts").Value);  							}  							var ch3 = msg.Element ("ch3");  							if (ch3 != null) {  								reading.Watts += int.Parse (ch3.Element ("watts").Value);  							}  							readings.Enqueue (reading);  							Debug.WriteLine ("time={0}' sensor={1}' watts={2}"' reading.Timestamp' reading.Sensor' reading.Watts);  							_statusForm.Invoke (new NewReadingHandler (_statusForm.NewReading)' reading);  						}  					}  				}  				catch (TimeoutException timeout) {  					//absorb timeouts and try again  				}  			}  		}  	}  	catch {  		//absorb and never die' but at least pause  		Thread.Sleep (3000);  	}  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: try {  	using (SerialPort port = new SerialPort ()) {  		port.PortName = _comPort;  		port.BaudRate = _baudRate;  		port.DtrEnable = true;  		port.ReadTimeout = 5000;  		port.Open ();  		while (true) {  			try {  				if (_exit) {  					return;  				}  				string line = port.ReadLine ();  				//Debug.WriteLine(line);  				XDocument doc = XDocument.Parse (line' LoadOptions.None);  				var msg = doc.Element ("msg");  				if (msg != null) {  					SensorReading reading = new SensorReading ();  					var ch1 = msg.Element ("ch1");  					if (ch1 != null) {  						reading.Timestamp = (int)(DateTime.UtcNow - epochStart).TotalSeconds;  						reading.Sensor = int.Parse (msg.Element ("sensor").Value);  						reading.Watts = int.Parse (ch1.Element ("watts").Value);  						var ch2 = msg.Element ("ch2");  						if (ch2 != null) {  							reading.Watts += int.Parse (ch2.Element ("watts").Value);  						}  						var ch3 = msg.Element ("ch3");  						if (ch3 != null) {  							reading.Watts += int.Parse (ch3.Element ("watts").Value);  						}  						readings.Enqueue (reading);  						Debug.WriteLine ("time={0}' sensor={1}' watts={2}"' reading.Timestamp' reading.Sensor' reading.Watts);  						_statusForm.Invoke (new NewReadingHandler (_statusForm.NewReading)' reading);  					}  				}  			}  			catch (TimeoutException timeout) {  				//absorb timeouts and try again  			}  		}  	}  }  catch {  	//absorb and never die' but at least pause  	Thread.Sleep (3000);  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: try {  	using (SerialPort port = new SerialPort ()) {  		port.PortName = _comPort;  		port.BaudRate = _baudRate;  		port.DtrEnable = true;  		port.ReadTimeout = 5000;  		port.Open ();  		while (true) {  			try {  				if (_exit) {  					return;  				}  				string line = port.ReadLine ();  				//Debug.WriteLine(line);  				XDocument doc = XDocument.Parse (line' LoadOptions.None);  				var msg = doc.Element ("msg");  				if (msg != null) {  					SensorReading reading = new SensorReading ();  					var ch1 = msg.Element ("ch1");  					if (ch1 != null) {  						reading.Timestamp = (int)(DateTime.UtcNow - epochStart).TotalSeconds;  						reading.Sensor = int.Parse (msg.Element ("sensor").Value);  						reading.Watts = int.Parse (ch1.Element ("watts").Value);  						var ch2 = msg.Element ("ch2");  						if (ch2 != null) {  							reading.Watts += int.Parse (ch2.Element ("watts").Value);  						}  						var ch3 = msg.Element ("ch3");  						if (ch3 != null) {  							reading.Watts += int.Parse (ch3.Element ("watts").Value);  						}  						readings.Enqueue (reading);  						Debug.WriteLine ("time={0}' sensor={1}' watts={2}"' reading.Timestamp' reading.Sensor' reading.Watts);  						_statusForm.Invoke (new NewReadingHandler (_statusForm.NewReading)' reading);  					}  				}  			}  			catch (TimeoutException timeout) {  				//absorb timeouts and try again  			}  		}  	}  }  catch {  	//absorb and never die' but at least pause  	Thread.Sleep (3000);  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: using (SerialPort port = new SerialPort ()) {  	port.PortName = _comPort;  	port.BaudRate = _baudRate;  	port.DtrEnable = true;  	port.ReadTimeout = 5000;  	port.Open ();  	while (true) {  		try {  			if (_exit) {  				return;  			}  			string line = port.ReadLine ();  			//Debug.WriteLine(line);  			XDocument doc = XDocument.Parse (line' LoadOptions.None);  			var msg = doc.Element ("msg");  			if (msg != null) {  				SensorReading reading = new SensorReading ();  				var ch1 = msg.Element ("ch1");  				if (ch1 != null) {  					reading.Timestamp = (int)(DateTime.UtcNow - epochStart).TotalSeconds;  					reading.Sensor = int.Parse (msg.Element ("sensor").Value);  					reading.Watts = int.Parse (ch1.Element ("watts").Value);  					var ch2 = msg.Element ("ch2");  					if (ch2 != null) {  						reading.Watts += int.Parse (ch2.Element ("watts").Value);  					}  					var ch3 = msg.Element ("ch3");  					if (ch3 != null) {  						reading.Watts += int.Parse (ch3.Element ("watts").Value);  					}  					readings.Enqueue (reading);  					Debug.WriteLine ("time={0}' sensor={1}' watts={2}"' reading.Timestamp' reading.Sensor' reading.Watts);  					_statusForm.Invoke (new NewReadingHandler (_statusForm.NewReading)' reading);  				}  			}  		}  		catch (TimeoutException timeout) {  			//absorb timeouts and try again  		}  	}  }  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: port.ReadTimeout = 5000;  
Magic Number,CurrentCostAgent,MainApplication,C:\repos\ervwalter_currentcost-agent\CurrentCostAgent\MainApplication.cs,SerialReader,The following statement contains a magic number: Thread.Sleep (3000);  
