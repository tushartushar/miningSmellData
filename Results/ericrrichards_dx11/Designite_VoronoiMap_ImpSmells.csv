Implementation smell,Namespace,Class,File,Method,Description
Long Method,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The method has 100 lines of code.
Long Method,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The method has 377 lines of code.
Long Method,VoronoiMap,Voronoi,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Voronoi.cs,StepVoronoi,The method has 107 lines of code.
Long Method,VoronoiMap,VoronoiGraph,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\VoronoiGraph.cs,ComputeVoronoiGraph,The method has 110 lines of code.
Complex Method,VoronoiMap,Edge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Edge.cs,GetClippedEnds,Cyclomatic complexity of the method is 10
Complex Method,VoronoiMap,EdgeReorderer,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\EdgeReorderer.cs,ReorderEdges,Cyclomatic complexity of the method is 10
Complex Method,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,Cyclomatic complexity of the method is 8
Complex Method,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,Cyclomatic complexity of the method is 21
Complex Method,VoronoiMap,Voronoi,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Voronoi.cs,StepVoronoi,Cyclomatic complexity of the method is 10
Complex Method,VoronoiMap,VoronoiGraph,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\VoronoiGraph.cs,ComputeVoronoiGraph,Cyclomatic complexity of the method is 11
Long Statement,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The length of the statement  "                g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine); " is 139.
Long Statement,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 50F)); " is 122.
Long Statement,VoronoiMap,Site,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Site.cs,Connect,The length of the statement  "                if (Math.Abs(rightPoint.X - newPoint.X) > Geometry.Tolerance && Math.Abs(rightPoint.Y - newPoint.Y) > Geometry.Tolerance) { " is 123.
Long Statement,VoronoiMap,Voronoi,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Voronoi.cs,StepVoronoi,The length of the statement  "                if (_newSite != null && (_eventQueue.IsEmpty || /*Geometry.CompareByYThenX(_newSite' _newIntStar)*/ _newSite.CompareTo(_newIntStar) < 0 )) { " is 140.
Complex Conditional,VoronoiMap,Edge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Edge.cs,GetClippedEnds,The conditional expression  "(x0 > xmax && x1 > xmax) || (x0 < xmin && x1 < xmin)"  is complex.
Complex Conditional,VoronoiMap,Edge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Edge.cs,GetClippedEnds,The conditional expression  "(y0 > ymax && y1 > ymax) || (y0 < ymin && y1 < ymin)"  is complex.
Complex Conditional,VoronoiMap,HalfEdge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\HalfEdge.cs,RightOf,The conditional expression  "(!rightOfSite && (e.B < 0)) || (rightOfSite && (e.B >= 0))"  is complex.
Complex Conditional,VoronoiMap,Site,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Site.cs,CreateIntersectingSite,The conditional expression  "(rightOfSite && (el.Side == Side.Left)) || (!rightOfSite && (el.Side == Side.Right))"  is complex.
Magic Number,VoronoiMap,Edge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Edge.cs,Edge,The following statement contains a magic number: Region = new Site[2];
Magic Number,VoronoiMap,Edge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Edge.cs,Edge,The following statement contains a magic number: Endpoint = new Site[2];
Magic Number,VoronoiMap,Edge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Edge.cs,Edge,The following statement contains a magic number: ClippedEndpoints = new Site[2];
Magic Number,VoronoiMap,Circle,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Geometry.cs,Circle,The following statement contains a magic number: var bc = (p1.X * p1.X + p1.Y * p1.Y - offset) / 2;
Magic Number,VoronoiMap,Circle,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Geometry.cs,Circle,The following statement contains a magic number: var cd = (offset - p3.X * p3.X - p3.Y * p3.Y) / 2;
Magic Number,VoronoiMap,Circle,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Geometry.cs,GetRect,The following statement contains a magic number: var rectf = new RectangleF(Center.X - Radius' Center.Y - Radius' Radius * 2' Radius * 2);
Magic Number,VoronoiMap,Circle,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Geometry.cs,GetRect,The following statement contains a magic number: var rectf = new RectangleF(Center.X - Radius' Center.Y - Radius' Radius * 2' Radius * 2);
Magic Number,VoronoiMap,HalfEdge,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\HalfEdge.cs,RightOf,The following statement contains a magic number: if (Math.Abs(e.A - 1) < Geometry.Tolerance) {                  var dyp = p.Y - topSite.Y;                  var dxp = p.X - topSite.X;                  var fast = false;                                      if ((!rightOfSite && (e.B < 0)) || (rightOfSite && (e.B >= 0))) {                      above = fast = (dyp >= e.B*dxp);                  } else {                      above = ((p.X + p.Y*e.B) > e.C);                      if (e.B < 0) {                          above = !above;                      }                      if (!above) {                          fast = true;                      }                  }                  if (!fast) {                      var dxs = topSite.X - e.Region[Side.Left].X;                      above = (e.B*(dxp*dxp - dyp*dyp)) < (dxs*dyp*(1 + 2*dxp/dxs + e.B*e.B));                        if (e.B < 0) {                          above = !above;                      }                  }              } else { // e.b == 1                  var y1 = e.C - e.A*p.X;                  var t1 = p.Y - y1;                  var t2 = p.X - topSite.X;                  var t3 = y1 - topSite.Y;                    above = (t1*t1) > (t2*t2 + t3*t3);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,MainForm,The following statement contains a magic number: _newCirclePen = new Pen(Color.Gold) { Width = 2 };
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,MainForm,The following statement contains a magic number: _newEdgePen = new Pen(Color.White) { Width = 2 };
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,The following statement contains a magic number: if (_graph != null) {                  g.Clear(BackColor);                    var item = cbCircles.SelectedIndex;                    var gp = new GraphicsPath();                  var gp2 = new GraphicsPath();                  var gp3 = new GraphicsPath();                  foreach (var point in _graph.Sites) {                      var r = new RectangleF(point.X - 2' point.Y - 2' 4' 4);                      if (chkShowSites.Checked) {                          gp.AddEllipse(r);                      }                        foreach (var edge in point.Edges) {                          var start = edge.RightSite;                          var end = edge.LeftSite;                          if (item == 2) {                              gp2.AddLine(start' end);                              gp2.CloseFigure();                          }                          }                      if (chkShowEdges.Checked) {                          var visibleClipBounds = g.VisibleClipBounds;                            var region = point.Region(visibleClipBounds).Where(p => p != null).Select(p => (PointF)p).ToArray();                          if (region.Count() >= 3)                              gp3.AddPolygon(region);                      }                  }                  g.DrawPath(_circlePen' gp2);                  g.DrawPath(_edgePen' gp3);                  g.FillPath(_siteBrush' gp);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,The following statement contains a magic number: if (_graph != null) {                  g.Clear(BackColor);                    var item = cbCircles.SelectedIndex;                    var gp = new GraphicsPath();                  var gp2 = new GraphicsPath();                  var gp3 = new GraphicsPath();                  foreach (var point in _graph.Sites) {                      var r = new RectangleF(point.X - 2' point.Y - 2' 4' 4);                      if (chkShowSites.Checked) {                          gp.AddEllipse(r);                      }                        foreach (var edge in point.Edges) {                          var start = edge.RightSite;                          var end = edge.LeftSite;                          if (item == 2) {                              gp2.AddLine(start' end);                              gp2.CloseFigure();                          }                          }                      if (chkShowEdges.Checked) {                          var visibleClipBounds = g.VisibleClipBounds;                            var region = point.Region(visibleClipBounds).Where(p => p != null).Select(p => (PointF)p).ToArray();                          if (region.Count() >= 3)                              gp3.AddPolygon(region);                      }                  }                  g.DrawPath(_circlePen' gp2);                  g.DrawPath(_edgePen' gp3);                  g.FillPath(_siteBrush' gp);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,The following statement contains a magic number: if (_graph != null) {                  g.Clear(BackColor);                    var item = cbCircles.SelectedIndex;                    var gp = new GraphicsPath();                  var gp2 = new GraphicsPath();                  var gp3 = new GraphicsPath();                  foreach (var point in _graph.Sites) {                      var r = new RectangleF(point.X - 2' point.Y - 2' 4' 4);                      if (chkShowSites.Checked) {                          gp.AddEllipse(r);                      }                        foreach (var edge in point.Edges) {                          var start = edge.RightSite;                          var end = edge.LeftSite;                          if (item == 2) {                              gp2.AddLine(start' end);                              gp2.CloseFigure();                          }                          }                      if (chkShowEdges.Checked) {                          var visibleClipBounds = g.VisibleClipBounds;                            var region = point.Region(visibleClipBounds).Where(p => p != null).Select(p => (PointF)p).ToArray();                          if (region.Count() >= 3)                              gp3.AddPolygon(region);                      }                  }                  g.DrawPath(_circlePen' gp2);                  g.DrawPath(_edgePen' gp3);                  g.FillPath(_siteBrush' gp);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,The following statement contains a magic number: if (_graph != null) {                  g.Clear(BackColor);                    var item = cbCircles.SelectedIndex;                    var gp = new GraphicsPath();                  var gp2 = new GraphicsPath();                  var gp3 = new GraphicsPath();                  foreach (var point in _graph.Sites) {                      var r = new RectangleF(point.X - 2' point.Y - 2' 4' 4);                      if (chkShowSites.Checked) {                          gp.AddEllipse(r);                      }                        foreach (var edge in point.Edges) {                          var start = edge.RightSite;                          var end = edge.LeftSite;                          if (item == 2) {                              gp2.AddLine(start' end);                              gp2.CloseFigure();                          }                          }                      if (chkShowEdges.Checked) {                          var visibleClipBounds = g.VisibleClipBounds;                            var region = point.Region(visibleClipBounds).Where(p => p != null).Select(p => (PointF)p).ToArray();                          if (region.Count() >= 3)                              gp3.AddPolygon(region);                      }                  }                  g.DrawPath(_circlePen' gp2);                  g.DrawPath(_edgePen' gp3);                  g.FillPath(_siteBrush' gp);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,The following statement contains a magic number: if (_graph != null) {                  g.Clear(BackColor);                    var item = cbCircles.SelectedIndex;                    var gp = new GraphicsPath();                  var gp2 = new GraphicsPath();                  var gp3 = new GraphicsPath();                  foreach (var point in _graph.Sites) {                      var r = new RectangleF(point.X - 2' point.Y - 2' 4' 4);                      if (chkShowSites.Checked) {                          gp.AddEllipse(r);                      }                        foreach (var edge in point.Edges) {                          var start = edge.RightSite;                          var end = edge.LeftSite;                          if (item == 2) {                              gp2.AddLine(start' end);                              gp2.CloseFigure();                          }                          }                      if (chkShowEdges.Checked) {                          var visibleClipBounds = g.VisibleClipBounds;                            var region = point.Region(visibleClipBounds).Where(p => p != null).Select(p => (PointF)p).ToArray();                          if (region.Count() >= 3)                              gp3.AddPolygon(region);                      }                  }                  g.DrawPath(_circlePen' gp2);                  g.DrawPath(_edgePen' gp3);                  g.FillPath(_siteBrush' gp);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramFull,The following statement contains a magic number: if (_graph != null) {                  g.Clear(BackColor);                    var item = cbCircles.SelectedIndex;                    var gp = new GraphicsPath();                  var gp2 = new GraphicsPath();                  var gp3 = new GraphicsPath();                  foreach (var point in _graph.Sites) {                      var r = new RectangleF(point.X - 2' point.Y - 2' 4' 4);                      if (chkShowSites.Checked) {                          gp.AddEllipse(r);                      }                        foreach (var edge in point.Edges) {                          var start = edge.RightSite;                          var end = edge.LeftSite;                          if (item == 2) {                              gp2.AddLine(start' end);                              gp2.CloseFigure();                          }                          }                      if (chkShowEdges.Checked) {                          var visibleClipBounds = g.VisibleClipBounds;                            var region = point.Region(visibleClipBounds).Where(p => p != null).Select(p => (PointF)p).ToArray();                          if (region.Count() >= 3)                              gp3.AddPolygon(region);                      }                  }                  g.DrawPath(_circlePen' gp2);                  g.DrawPath(_edgePen' gp3);                  g.FillPath(_siteBrush' gp);              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,PaintDiagramIncremental,The following statement contains a magic number: if (_graph != null) {                    g.Clear(BackColor);                    g.DrawLine(_sweepPen' splitPanel.Panel2.ClientRectangle.Left' _graph.SweepLine' splitPanel.Panel2.ClientRectangle.Right' _graph.SweepLine);                    var item = cbCircles.SelectedIndex;                    if (item == 1) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          var circle = new Circle(triangle.V1' triangle.V2' triangle.V3);                          if (triangle.New) {                              g.DrawEllipse(_newCirclePen' circle.GetRect());                          } else {                              gp.AddEllipse(circle.GetRect());                          }                      }                      g.DrawPath(_circlePen' gp);                  } else if (item == 2) {                      var gp = new GraphicsPath();                      foreach (var triangle in _graph.Triangles) {                          if (triangle.New) {                              g.DrawPolygon(_newCirclePen' new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          } else {                              gp.AddPolygon(new[] { (PointF)triangle.V1' triangle.V2' triangle.V3 });                          }                      }                      g.DrawPath(_circlePen' gp);                  }                    if (chkShowEdges.Checked) {                      var gp = new GraphicsPath();                        foreach (var segment in _graph.Segments) {                          var start = segment.P1;                          var end = segment.P2;                          if (segment.New) {                              g.DrawLine(_newEdgePen' start' end);                          } else {                              gp.AddLine(start' end);                              gp.CloseFigure();                          }                      }                      g.DrawPath(_edgePen' gp);                  }                    if (chkBeachline.Checked) {                                            var gp = new GraphicsPath();                      var beachLine = new Dictionary<int' float>();                        foreach (var point in _graph.Sites.Except(_sitesToIgnore.ToList())) {                          var drop = true;                          for (int x = 0; x < g.VisibleClipBounds.Width; x++) {                              var y = ParabolaY(point' _graph.SweepLine' x);                              if (y > g.ClipBounds.Height) {                                  drop = false;                                  continue;                                }                              if (!beachLine.ContainsKey(x)) {                                  beachLine[x] = y;                                  drop = false;                              } else if (beachLine[x] < y) {                                  beachLine[x] = y;                                  drop = false;                              }                          }                          if (drop) {                              _sitesToIgnore.Add(point);                          }                      }                        for (int x = 0; x < beachLine.Count - 1; x++) {                          gp.AddLine(x' beachLine[x]' x + 1' beachLine[x + 1]);                      }                        g.DrawPath(_beachPen' gp);                  }                      if (chkShowVertices.Checked) {                      var gp = new GraphicsPath();                      foreach (var vertex in _graph.Vertices) {                          var r = vertex.New ?                              new RectangleF(vertex.X - 4' vertex.Y - 4' 8' 8)                              : new RectangleF(vertex.X - 2' vertex.Y - 2' 4' 4)                              ;                          if (vertex.New) {                              g.FillEllipse(_newVertBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.DrawPath(new Pen(Color.Red)' gp);                  }                  if (chkShowSites.Checked) {                      var gp = new GraphicsPath();                      foreach (var point in _graph.Sites) {                          var r = point.New ? new RectangleF(point.X - 4' point.Y - 4' 8' 8) : new RectangleF(point.X - 2' point.Y - 2' 4' 4);                          if (point.New) {                              g.FillEllipse(_newSiteBrush' r);                          } else {                              gp.AddEllipse(r);                          }                      }                      g.FillPath(_siteBrush' gp);                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,ParabolaY,The following statement contains a magic number: try {                  var a = site.X;                  var b = site.Y;                  var c = sweepLineY;                    var y = ((x - a) * (x - a) + b * b - c * c) / (2 * (b - c + 1e-10f));                  return y;              } catch (Exception ex) {                  return -1;              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,Animate,The following statement contains a magic number: using (var graphics = splitPanel.Panel2.CreateGraphics()) {                  while (_voronoi.StepNumber < toStep) {                      _voronoi.StepVoronoi();                        PaintDiagram(graphics' false);                        Thread.Sleep(10);                      Application.DoEvents();                      if (lastStep == _voronoi.StepNumber) {                          break;                      }                      lastStep = _voronoi.StepNumber;                      nudStepTo.Value = _voronoi.StepNumber;                  }              }
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitPanel.Panel1MinSize = 250;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitPanel.Size = new System.Drawing.Size(842' 600);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitPanel.Size = new System.Drawing.Size(842' 600);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.splitPanel.SplitterDistance = 250;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.btnAnimate' 1' 13);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.btnStepVoronoi' 0' 12);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.btnStepTo' 1' 12);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.nudStepTo' 1' 11);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.nudRelax' 1' 2);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.btnInitialize' 1' 10);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.chDebug' 1' 7);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.btnRegen' 1' 8);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label4' 0' 2);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.chkShowSites' 1' 3);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.chkShowVertices' 1' 4);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.chkShowEdges' 1' 5);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.cbCircles' 1' 6);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label5' 0' 6);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label3' 0' 11);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.chkBeachline' 0' 10);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 14;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(250' 600);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(250' 600);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 19;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 0);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 13;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnAnimate.Location = new System.Drawing.Point(128' 333);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnAnimate.Location = new System.Drawing.Point(128' 333);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnAnimate.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnAnimate.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnAnimate.TabIndex = 14;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepVoronoi.Location = new System.Drawing.Point(3' 304);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepVoronoi.Location = new System.Drawing.Point(3' 304);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepVoronoi.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepVoronoi.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepVoronoi.TabIndex = 7;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepTo.Location = new System.Drawing.Point(128' 304);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepTo.Location = new System.Drawing.Point(128' 304);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepTo.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepTo.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnStepTo.TabIndex = 11;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudStepTo.Location = new System.Drawing.Point(128' 278);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudStepTo.Location = new System.Drawing.Point(128' 278);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudStepTo.Maximum = new decimal(new int[] {              10000'              0'              0'              0});
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudStepTo.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudStepTo.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudStepTo.TabIndex = 10;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRelax.Location = new System.Drawing.Point(128' 55);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRelax.Location = new System.Drawing.Point(128' 55);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRelax.Maximum = new decimal(new int[] {              1000000'              0'              0'              0});
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRelax.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRelax.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudRelax.TabIndex = 18;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnInitialize.Location = new System.Drawing.Point(128' 249);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnInitialize.Location = new System.Drawing.Point(128' 249);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnInitialize.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnInitialize.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnInitialize.TabIndex = 8;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSeed.Location = new System.Drawing.Point(128' 3);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSeed.Location = new System.Drawing.Point(128' 3);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSeed.Maximum = new decimal(new int[] {              1000000'              0'              0'              0});
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSeed.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSeed.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSeed.TabIndex = 6;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 2;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudNumRegions.Location = new System.Drawing.Point(128' 29);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudNumRegions.Location = new System.Drawing.Point(128' 29);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudNumRegions.Maximum = new decimal(new int[] {              10000'              0'              0'              0});
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudNumRegions.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudNumRegions.Size = new System.Drawing.Size(119' 20);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudNumRegions.Value = new decimal(new int[] {              50'              0'              0'              0});
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chDebug.Location = new System.Drawing.Point(128' 177);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chDebug.Location = new System.Drawing.Point(128' 177);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chDebug.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chDebug.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chDebug.TabIndex = 12;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegen.Location = new System.Drawing.Point(128' 200);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegen.Location = new System.Drawing.Point(128' 200);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegen.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnRegen.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 52);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 52);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 17;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowSites.Location = new System.Drawing.Point(128' 81);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowSites.Location = new System.Drawing.Point(128' 81);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowSites.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowSites.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowSites.TabIndex = 3;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowVertices.Location = new System.Drawing.Point(128' 104);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowVertices.Location = new System.Drawing.Point(128' 104);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowVertices.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowVertices.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowVertices.TabIndex = 4;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowEdges.Location = new System.Drawing.Point(128' 127);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowEdges.Location = new System.Drawing.Point(128' 127);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowEdges.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowEdges.Size = new System.Drawing.Size(119' 17);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkShowEdges.TabIndex = 5;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCircles.Location = new System.Drawing.Point(128' 150);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCircles.Location = new System.Drawing.Point(128' 150);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCircles.Size = new System.Drawing.Size(119' 21);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCircles.Size = new System.Drawing.Size(119' 21);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCircles.TabIndex = 15;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(3' 147);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(3' 147);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(119' 27);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(119' 27);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 19;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 275);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(3' 275);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(119' 26);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 16;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBeachline.Location = new System.Drawing.Point(3' 249);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBeachline.Location = new System.Drawing.Point(3' 249);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBeachline.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBeachline.Size = new System.Drawing.Size(119' 23);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.chkBeachline.TabIndex = 20;
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(842' 600);
Magic Number,VoronoiMap,MainForm,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(842' 600);
Magic Number,VoronoiMap,Site,C:\repos\ericrrichards_dx11\DX11\VoronoiMap\Site.cs,GetHashCode,The following statement contains a magic number: unchecked {                  return (X.GetHashCode()*397) ^ Y.GetHashCode();              }
