Implementation smell,Namespace,Class,File,Method,Description
Long Method,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The method has 197 lines of code.
Complex Method,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,Cyclomatic complexity of the method is 11
Long Statement,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The length of the statement  "            ImmediateContext.ClearDepthStencilView(DepthStencilView' DepthStencilClearFlags.Depth|DepthStencilClearFlags.Stencil' 1.0f' 0 ); " is 128.
Long Statement,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The length of the statement  "            var vbd = new BufferDescription(PosNormalTexTan.Stride * totalVertexCount' ResourceUsage.Immutable' BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0); " is 174.
Long Statement,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The length of the statement  "            var ibd = new BufferDescription(sizeof(int) * totalIndexCount' ResourceUsage.Immutable' BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0); " is 161.
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: _camera = new FpsCamera { Position = new Vector3(0' 2' -15) };
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: _camera = new FpsCamera { Position = new Vector3(0' 2' -15) };
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,NormalDisplacementMapsDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var world = _gridWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }                  var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  wit = MathF.InverseTranspose(world);                  wvp = world * viewProj;                    switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      wit = MathF.InverseTranspose(world);                      wvp = world * viewProj;                        switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                                }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var sphere = GeometryGenerator.CreateSphere(0.5f' 20' 20);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var sphere = GeometryGenerator.CreateSphere(0.5f' 20' 20);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var cylinder = GeometryGenerator.CreateCylinder(0.5f' 0.3f' 3.0f' 20' 20);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var cylinder = GeometryGenerator.CreateCylinder(0.5f' 0.3f' 3.0f' 20' 20);
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Missing Default,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,SwitchMode,The following switch statement is missing a default case: switch (e.KeyCode) {                  case Keys.D0:                      _renderOptions = RenderOptions.Basic;                      break;                  case Keys.D1:                      _renderOptions = RenderOptions.NormalMap;                      break;                  case Keys.D2:                      _renderOptions = RenderOptions.DisplacementMap;                      break;              }
Missing Default,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following switch statement is missing a default case: switch (_renderOptions) {                  case RenderOptions.Basic:                      activeTech = Effects.BasicFX.Light3TexTech;                      ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;                      break;                  case RenderOptions.NormalMap:                      activeTech = Effects.NormalMapFX.Light3TexTech;                      ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;                      break;                  case RenderOptions.DisplacementMap:                      activeTech = Effects.DisplacementMapFX.Light3TexTech;                      ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.PatchListWith3ControlPoints;                      break;              }
Missing Default,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following switch statement is missing a default case: switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.BasicFX.SetMaterial(_gridMat);                          Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.NormalMapFX.SetMaterial(_gridMat);                          Effects.NormalMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.NormalMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(8' 10' 1));                          Effects.DisplacementMapFX.SetMaterial(_gridMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_stoneTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_stoneNormalTexSRV);                          break;                  }
Missing Default,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following switch statement is missing a default case: switch (_renderOptions) {                      case RenderOptions.Basic:                          Effects.BasicFX.SetWorld(world);                          Effects.BasicFX.SetWorldInvTranspose(wit);                          Effects.BasicFX.SetWorldViewProj(wvp);                          Effects.BasicFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.BasicFX.SetMaterial(_boxMat);                          Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                          break;                      case RenderOptions.NormalMap:                          Effects.NormalMapFX.SetWorld(world);                          Effects.NormalMapFX.SetWorldInvTranspose(wit);                          Effects.NormalMapFX.SetWorldViewProj(wvp);                          Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.NormalMapFX.SetMaterial(_boxMat);                          Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                      case RenderOptions.DisplacementMap:                          Effects.DisplacementMapFX.SetWorld(world);                          Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                          Effects.DisplacementMapFX.SetViewProj(viewProj);                          Effects.DisplacementMapFX.SetWorldViewProj(wvp);                          Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(2' 1' 1));                          Effects.DisplacementMapFX.SetMaterial(_boxMat);                          Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                          Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                          break;                  }
Missing Default,NormalDisplacementMaps,NormalDisplacementMapsDemo,C:\repos\ericrrichards_dx11\DX11\NormalDisplacementMaps\Program.cs,DrawScene,The following switch statement is missing a default case: switch (_renderOptions) {                          case RenderOptions.Basic:                              Effects.BasicFX.SetWorld(world);                              Effects.BasicFX.SetWorldInvTranspose(wit);                              Effects.BasicFX.SetWorldViewProj(wvp);                              Effects.BasicFX.SetTexTransform(Matrix.Scaling(1'2' 1));                              Effects.BasicFX.SetMaterial(_cylinderMat);                              Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                              break;                          case RenderOptions.NormalMap:                              Effects.NormalMapFX.SetWorld(world);                              Effects.NormalMapFX.SetWorldInvTranspose(wit);                              Effects.NormalMapFX.SetWorldViewProj(wvp);                              Effects.NormalMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.NormalMapFX.SetMaterial(_cylinderMat);                              Effects.NormalMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.NormalMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                          case RenderOptions.DisplacementMap:                              Effects.DisplacementMapFX.SetWorld(world);                              Effects.DisplacementMapFX.SetWorldInvTranspose(wit);                              Effects.DisplacementMapFX.SetViewProj(viewProj);                              Effects.DisplacementMapFX.SetWorldViewProj(wvp);                              Effects.DisplacementMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                              Effects.DisplacementMapFX.SetMaterial(_cylinderMat);                              Effects.DisplacementMapFX.SetDiffuseMap(_brickTexSRV);                              Effects.DisplacementMapFX.SetNormalMap(_brickNormalTexSRV);                              break;                      }
