Implementation smell,Namespace,Class,File,Method,Description
Long Method,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,The method has 106 lines of code.
Complex Method,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,UpdateScene,Cyclomatic complexity of the method is 8
Complex Method,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,Cyclomatic complexity of the method is 8
Long Statement,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildScreenQuadGeometryBuffers,The length of the statement  "            var vbd = new BufferDescription(Basic32.Stride * verts.Count' ResourceUsage.Immutable' BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0); " is 161.
Long Statement,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildScreenQuadGeometryBuffers,The length of the statement  "            var ibd = new BufferDescription(sizeof(int) * quad.Indices.Count' ResourceUsage.Immutable' BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0); " is 164.
Long Statement,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,The length of the statement  "            ImmediateContext.ClearDepthStencilView(DepthStencilView' DepthStencilClearFlags.Depth | DepthStencilClearFlags.Stencil' 1.0f' 0); " is 129.
Long Statement,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,The length of the statement  "            ImmediateContext.ClearDepthStencilView(DepthStencilView' DepthStencilClearFlags.Depth | DepthStencilClearFlags.Stencil' 1.0f' 0); " is 129.
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,SsaoDemo,The following statement contains a magic number: _camera = new FpsCamera {Position = new Vector3(0' 2' -15)};
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,SsaoDemo,The following statement contains a magic number: _camera = new FpsCamera {Position = new Vector3(0' 2' -15)};
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,SsaoDemo,The following statement contains a magic number: _sceneBounds = new BoundingSphere(new Vector3()' MathF.Sqrt(10 * 10 + 15 * 15));
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,SsaoDemo,The following statement contains a magic number: _sceneBounds = new BoundingSphere(new Vector3()' MathF.Sqrt(10 * 10 + 15 * 15));
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,SsaoDemo,The following statement contains a magic number: _sceneBounds = new BoundingSphere(new Vector3()' MathF.Sqrt(10 * 10 + 15 * 15));
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,SsaoDemo,The following statement contains a magic number: _sceneBounds = new BoundingSphere(new Vector3()' MathF.Sqrt(10 * 10 + 15 * 15));
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _gridModel.CreateGrid(Device' 20' 30' 50' 40);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _gridModel.CreateGrid(Device' 20' 30' 50' 40);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _gridModel.CreateGrid(Device' 20' 30' 50' 40);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _gridModel.CreateGrid(Device' 20' 30' 50' 40);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _sphereModel.CreateSphere(Device' 0.5f' 20' 20);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _sphereModel.CreateSphere(Device' 0.5f' 20' 20);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _cylinderModel.CreateCylinder(Device' 0.5f' 0.5f' 3.0f' 15' 15);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _cylinderModel.CreateCylinder(Device' 0.5f' 0.5f' 3.0f' 15' 15);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylinders[i * 2] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                  _cylinders[i * 2 + 1] = new BasicModelInstance(_cylinderModel) {                      World = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f)'                      TexTransform = Matrix.Scaling(1' 2' 1)                  };                    _spheres[i * 2] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f)                  };                  _spheres[i * 2 + 1] = new BasicModelInstance(_sphereModel) {                      World = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f)                  };              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _grid = new BasicModelInstance(_gridModel) {                  TexTransform = Matrix.Scaling(8' 10' 1)'                  World = Matrix.Identity              };
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _grid = new BasicModelInstance(_gridModel) {                  TexTransform = Matrix.Scaling(8' 10' 1)'                  World = Matrix.Identity              };
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: _box = new BasicModelInstance(_boxModel) {                  TexTransform = Matrix.Scaling(2' 1' 1)'                  World = Matrix.Scaling(3.0f' 1.0f' 3.0f) * Matrix.Translation(0' 0.5f' 0)              };
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                           new Basic32(                                               new Vector3(                                                   Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                               new Vector3(                                                   Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                                   Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                               new Vector2()                                               )                                  );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,UpdateScene,The following statement contains a magic number: for (var i = 0; i < 3; i++) {                  var lightDir = _originalLightDirs[i];                  lightDir = Vector3.TransformNormal(lightDir' r);                  _dirLights[i].Direction = lightDir;              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,The following statement contains a magic number: _ssao.BlurAmbientMap(4);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,The following statement contains a magic number: for (var i = 0; i < 16; i++) {                  srvs.Add(null);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScene,The following statement contains a magic number: ImmediateContext.PixelShader.SetShaderResources(srvs.ToArray()' 0' 16);
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawSceneToShadowMap,The following statement contains a magic number: try {                  var view = _lightView;                  var proj = _lightProj;                  var viewProj = view * proj;                    Effects.BuildShadowMapFX.SetEyePosW(_camera.Position);                  Effects.BuildShadowMapFX.SetViewProj(viewProj);                    ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;                  var smapTech = Effects.BuildShadowMapFX.BuildShadowMapTech;                    const int Offset = 0;                    ImmediateContext.InputAssembler.InputLayout = InputLayouts.PosNormalTexTan;                    if (Util.IsKeyDown(Keys.W)) {                      ImmediateContext.Rasterizer.State = RenderStates.WireframeRS;                  }                    for (var p = 0; p < smapTech.Description.PassCount; p++) {                      var pass = smapTech.GetPassByIndex(p);                      _grid.Draw(ImmediateContext' pass' view'proj'RenderMode.ShadowMap);                        _box.Draw(ImmediateContext' pass' view' proj' RenderMode.ShadowMap);                        foreach (var cylinder in _cylinders) {                          cylinder.Draw(ImmediateContext' pass' view' proj' RenderMode.ShadowMap);                      }                  }                    ImmediateContext.HullShader.Set(null);                  ImmediateContext.DomainShader.Set(null);                  ImmediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList;                    for (var p = 0; p < smapTech.Description.PassCount; p++) {                      var pass = smapTech.GetPassByIndex(p);                      foreach (var sphere in _spheres) {                          sphere.Draw(ImmediateContext' pass' view' proj' RenderMode.ShadowMap);                      }                  }                  var stride = Basic32.Stride;                  ImmediateContext.Rasterizer.State = null;                    ImmediateContext.InputAssembler.InputLayout = InputLayouts.Basic32;                  ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_skullVB' stride' Offset));                  ImmediateContext.InputAssembler.SetIndexBuffer(_skullIB' Format.R32_UInt' 0);                    for (var p = 0; p < smapTech.Description.PassCount; p++) {                      var world = _skullWorld;                      var wit = MathF.InverseTranspose(world);                      var wvp = world * viewProj;                        Effects.BuildShadowMapFX.SetWorld(world);                      Effects.BuildShadowMapFX.SetWorldInvTranspose(wit);                      Effects.BuildShadowMapFX.SetWorldViewProj(wvp);                      Effects.BuildShadowMapFX.SetTexTransform(Matrix.Scaling(1' 2' 1));                      smapTech.GetPassByIndex(p).Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_skullIndexCount' 0' 0);                  }                } catch (Exception ex) {                  Console.WriteLine(ex.Message);              }
Magic Number,_28_SsaoDemo,SsaoDemo,C:\repos\ericrrichards_dx11\DX11\28-SsaoDemo\SsaoDemo.cs,DrawScreenQuad,The following statement contains a magic number: for (var p = 0; p < tech.Description.PassCount; p++) {                  Effects.DebugTexFX.SetWorldViewProj(world);                  Effects.DebugTexFX.SetTexture(srv);                  tech.GetPassByIndex(p).Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(6' 0' 0);              }
