Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawScene,The length of the statement  "            ImmediateContext.ClearDepthStencilView(DepthStencilView' DepthStencilClearFlags.Depth | DepthStencilClearFlags.Stencil' 1.0f' 0); " is 129.
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,MirrorDemo,The following statement contains a magic number: _skullTranslation = new Vector3(0' 1' -5);
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawRoom,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p ++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_roomMat);                    Effects.BasicFX.SetDiffuseMap(_floorDiffuseMapSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 0);                    Effects.BasicFX.SetDiffuseMap(_wallDiffuseMapSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.Draw(18' 6);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawRoom,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p ++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_roomMat);                    Effects.BasicFX.SetDiffuseMap(_floorDiffuseMapSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 0);                    Effects.BasicFX.SetDiffuseMap(_wallDiffuseMapSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.Draw(18' 6);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawRoom,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p ++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_roomMat);                    Effects.BasicFX.SetDiffuseMap(_floorDiffuseMapSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 0);                    Effects.BasicFX.SetDiffuseMap(_wallDiffuseMapSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.Draw(18' 6);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,MarkMirrorOnStencil,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                    ImmediateContext.OutputMerger.BlendState = RenderStates.NoRenderTargetWritesBS;                  ImmediateContext.OutputMerger.BlendFactor = blendFactor;                  ImmediateContext.OutputMerger.BlendSampleMask = -1;                    ImmediateContext.OutputMerger.DepthStencilState = RenderStates.MarkMirrorDSS;                  ImmediateContext.OutputMerger.DepthStencilReference = 1;                    pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 24);                  ImmediateContext.OutputMerger.DepthStencilState = null;                  ImmediateContext.OutputMerger.DepthStencilReference = 0;                  ImmediateContext.OutputMerger.BlendState = null;                  ImmediateContext.OutputMerger.BlendFactor = blendFactor;                  ImmediateContext.OutputMerger.BlendSampleMask = -1;              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,MarkMirrorOnStencil,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                    ImmediateContext.OutputMerger.BlendState = RenderStates.NoRenderTargetWritesBS;                  ImmediateContext.OutputMerger.BlendFactor = blendFactor;                  ImmediateContext.OutputMerger.BlendSampleMask = -1;                    ImmediateContext.OutputMerger.DepthStencilState = RenderStates.MarkMirrorDSS;                  ImmediateContext.OutputMerger.DepthStencilReference = 1;                    pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 24);                  ImmediateContext.OutputMerger.DepthStencilState = null;                  ImmediateContext.OutputMerger.DepthStencilReference = 0;                  ImmediateContext.OutputMerger.BlendState = null;                  ImmediateContext.OutputMerger.BlendFactor = blendFactor;                  ImmediateContext.OutputMerger.BlendSampleMask = -1;              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawFloorReflection,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var mirrorPlane = new Plane(new Vector3(0' 0' 1)' 0);                  var r = Matrix.Reflection(mirrorPlane);                    var world = _roomWorld * r;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_roomMat);                  Effects.BasicFX.SetDiffuseMap(_floorDiffuseMapSRV);                    var oldLightDirections = _dirLights.Select(l => l.Direction).ToArray();                    for (int i = 0; i < _dirLights.Length; i++) {                      var l = _dirLights[i];                      var lightDir = l.Direction;                      var reflectedLightDir = Vector3.Transform(lightDir' r);                      _dirLights[i].Direction = new Vector3(reflectedLightDir.X' reflectedLightDir.Y' reflectedLightDir.Z);                  }                  Effects.BasicFX.SetDirLights(_dirLights);                    ImmediateContext.Rasterizer.State = RenderStates.CullClockwiseRS;                    ImmediateContext.OutputMerger.DepthStencilState = RenderStates.DrawReflectionDSS;                  ImmediateContext.OutputMerger.DepthStencilReference = 1;                  pass.Apply(ImmediateContext);                    ImmediateContext.Draw(6' 0);                    ImmediateContext.Rasterizer.State = null;                  ImmediateContext.OutputMerger.DepthStencilState = null;                  ImmediateContext.OutputMerger.DepthStencilReference = 0;                    for (int i = 0; i < oldLightDirections.Length; i++) {                      _dirLights[i].Direction = oldLightDirections[i];                  }                  Effects.BasicFX.SetDirLights(_dirLights);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawMirror,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_mirrorMat);                  Effects.BasicFX.SetDiffuseMap(_mirrorDiffuseMapSRV);                    ImmediateContext.OutputMerger.BlendState = RenderStates.TransparentBS;                  ImmediateContext.OutputMerger.BlendFactor = blendFactor;                  ImmediateContext.OutputMerger.BlendSampleMask = -1;                    pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 24);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,DrawMirror,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  var pass = activeTech.GetPassByIndex(p);                    ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_roomVB' Basic32.Stride' 0));                    var world = _roomWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_mirrorMat);                  Effects.BasicFX.SetDiffuseMap(_mirrorDiffuseMapSRV);                    ImmediateContext.OutputMerger.BlendState = RenderStates.TransparentBS;                  ImmediateContext.OutputMerger.BlendFactor = blendFactor;                  ImmediateContext.OutputMerger.BlendSampleMask = -1;                    pass.Apply(ImmediateContext);                  ImmediateContext.Draw(6' 24);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: var v = new Basic32[30];
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[0] = new Basic32(new Vector3(-3.5f' 0' -10)' new Vector3(0'1'0)' new Vector2(0' 4)  );
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[0] = new Basic32(new Vector3(-3.5f' 0' -10)' new Vector3(0'1'0)' new Vector2(0' 4)  );
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[2] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 1' 0)' new Vector2(4' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[2] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 1' 0)' new Vector2(4' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[3] = new Basic32(new Vector3(-3.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(0' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[3] = new Basic32(new Vector3(-3.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(0' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[3] = new Basic32(new Vector3(-3.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(0' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[4] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 1' 0)' new Vector2(4' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[4] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 1' 0)' new Vector2(4' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[5] = new Basic32(new Vector3(7.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(4' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[5] = new Basic32(new Vector3(7.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(4' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[5] = new Basic32(new Vector3(7.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(4' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[5] = new Basic32(new Vector3(7.5f' 0' -10)' new Vector3(0' 1' 0)' new Vector2(4' 4));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[6] = new Basic32(new Vector3(-3.5f' 0' 0)' new Vector3(0'  0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[6] = new Basic32(new Vector3(-3.5f' 0' 0)' new Vector3(0'  0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[7] = new Basic32(new Vector3(-3.5f' 4' 0)' new Vector3(0'  0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[7] = new Basic32(new Vector3(-3.5f' 4' 0)' new Vector3(0'  0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[8] = new Basic32(new Vector3(-2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0.5f' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[8] = new Basic32(new Vector3(-2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0.5f' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[9] = new Basic32(new Vector3(-3.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[9] = new Basic32(new Vector3(-3.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[10] = new Basic32(new Vector3(-2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0.5f' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[10] = new Basic32(new Vector3(-2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0.5f' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[11] = new Basic32(new Vector3(-2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0.5f' 2.0f));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[12] = new Basic32(new Vector3(2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[12] = new Basic32(new Vector3(2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[13] = new Basic32(new Vector3(2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[13] = new Basic32(new Vector3(2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[14] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(2' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[14] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(2' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[14] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(2' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[15] = new Basic32(new Vector3(2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[15] = new Basic32(new Vector3(2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[16] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(2' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[16] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(2' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[16] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(2' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[17] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(2' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[17] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(2' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[17] = new Basic32(new Vector3(7.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(2' 2));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[18] = new Basic32(new Vector3(-3.5f' 4.0f' 0)' new Vector3(0' 0' -1)' new Vector2(0' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[19] = new Basic32(new Vector3(-3.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[19] = new Basic32(new Vector3(-3.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[20] = new Basic32(new Vector3(7.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(6' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[20] = new Basic32(new Vector3(7.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(6' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[20] = new Basic32(new Vector3(7.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(6' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[21] = new Basic32(new Vector3(-3.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[21] = new Basic32(new Vector3(-3.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[22] = new Basic32(new Vector3(7.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(6' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[22] = new Basic32(new Vector3(7.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(6' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[22] = new Basic32(new Vector3(7.5f' 6' 0)' new Vector3(0' 0' -1)' new Vector2(6' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[23] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(6' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[23] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(6' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[23] = new Basic32(new Vector3(7.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(6' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[24] = new Basic32(new Vector3(-2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[25] = new Basic32(new Vector3(-2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[25] = new Basic32(new Vector3(-2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(0' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[26] = new Basic32(new Vector3(2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(1' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[26] = new Basic32(new Vector3(2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(1' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[27] = new Basic32(new Vector3(-2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(0' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[28] = new Basic32(new Vector3(2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(1' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[28] = new Basic32(new Vector3(2.5f' 4' 0)' new Vector3(0' 0' -1)' new Vector2(1' 0));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: v[29] = new Basic32(new Vector3(2.5f' 0' 0)' new Vector3(0' 0' -1)' new Vector2(1' 1));
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildRoomGeometryBuffers,The following statement contains a magic number: var vbd = new BufferDescription {                  Usage = ResourceUsage.Immutable'                  SizeInBytes = Basic32.Stride * 30'                  BindFlags = BindFlags.VertexBuffer'                  CpuAccessFlags = CpuAccessFlags.None'                  OptionFlags = ResourceOptionFlags.None'                  StructureByteStride = 0              };
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Missing Default,MirrorDemo,MirrorDemo,C:\repos\ericrrichards_dx11\DX11\MirrorDemo\Program.cs,SwitchRenderState,The following switch statement is missing a default case: switch (e.KeyCode) {                  case Keys.D1:                      _renderOptions = RenderOptions.Lighting;                      break;                  case Keys.D2:                      _renderOptions = RenderOptions.Textures;                      break;                  case Keys.D3:                      _renderOptions = RenderOptions.TexturesAndFog;                      break;              }
