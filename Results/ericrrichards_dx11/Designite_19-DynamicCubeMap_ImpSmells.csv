Implementation smell,Namespace,Class,File,Method,Description
Long Method,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The method has 120 lines of code.
Complex Method,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,Cyclomatic complexity of the method is 8
Long Statement,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The length of the statement  "            var vbd = new BufferDescription(Basic32.Stride * totalVertexCount' ResourceUsage.Immutable' BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0); " is 166.
Long Statement,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The length of the statement  "            var ibd = new BufferDescription(sizeof(int) * totalIndexCount' ResourceUsage.Immutable' BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0); " is 161.
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: _lightCount = 3;
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: _camera = new FpsCamera { Position = new Vector3(0' 2' -15) };
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: _camera = new FpsCamera { Position = new Vector3(0' 2' -15) };
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: for (int i = 0; i < 6; i++) {                  _dynamicCubeMapRTV[i] = null;              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: _centerSphereWorld = Matrix.Scaling(new Vector3(2.0f)) * Matrix.Translation(0' 2' 0);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DynamicCubeMapDemo,The following statement contains a magic number: for (var i = 0; i < 5; i++) {                  _cylWorld[i * 2] = Matrix.Translation(-5.0f' 1.5f' -10.0f + i * 5.0f);                  _cylWorld[i * 2 + 1] = Matrix.Translation(5.0f' 1.5f' -10.0f + i * 5.0f);                    _sphereWorld[i * 2] = Matrix.Translation(-5.0f' 3.5f' -10.0f + i * 5.0f);                  _sphereWorld[i * 2 + 1] = Matrix.Translation(5.0f' 3.5f' -10.0f + i * 5.0f);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildCubeFaceCamera,The following statement contains a magic number: for (int i = 0; i < 6; i++) {                  _cubeMapCamera[i] = new FpsCamera();                  _cubeMapCamera[i].LookAt(center' targets[i]' ups[i]);                  _cubeMapCamera[i].SetLens(MathF.PI/2' 1.0f' 0.1f' 1000.0f);                  _cubeMapCamera[i].UpdateViewMatrix();              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildCubeFaceCamera,The following statement contains a magic number: for (int i = 0; i < 6; i++) {                  _cubeMapCamera[i] = new FpsCamera();                  _cubeMapCamera[i].LookAt(center' targets[i]' ups[i]);                  _cubeMapCamera[i].SetLens(MathF.PI/2' 1.0f' 0.1f' 1000.0f);                  _cubeMapCamera[i].UpdateViewMatrix();              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildDynamicCubeMapViews,The following statement contains a magic number: var texDesc = new Texture2DDescription() {                  Width = CubeMapSize'                  Height = CubeMapSize'                  MipLevels = 0'                  ArraySize = 6'                  SampleDescription = new SampleDescription(1' 0)'                  Format = Format.R8G8B8A8_UNorm'                  Usage = ResourceUsage.Default'                  BindFlags = BindFlags.ShaderResource | BindFlags.RenderTarget'                  CpuAccessFlags = CpuAccessFlags.None'                  OptionFlags = ResourceOptionFlags.GenerateMipMaps | ResourceOptionFlags.TextureCube              };
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildDynamicCubeMapViews,The following statement contains a magic number: for (int i = 0; i < 6; i++) {                  rtvDesc.FirstArraySlice = i;                  _dynamicCubeMapRTV[i] = new RenderTargetView(Device' cubeTex' rtvDesc);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,SwitchLights,The following statement contains a magic number: switch (e.KeyCode) {                  case Keys.D0:                      _lightCount = 0;                      break;                  case Keys.D1:                      _lightCount = 1;                      break;                  case Keys.D2:                      _lightCount = 2;                      break;                  case Keys.D3:                      _lightCount = 3;                      break;              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,SwitchLights,The following statement contains a magic number: switch (e.KeyCode) {                  case Keys.D0:                      _lightCount = 0;                      break;                  case Keys.D1:                      _lightCount = 1;                      break;                  case Keys.D2:                      _lightCount = 2;                      break;                  case Keys.D3:                      _lightCount = 3;                      break;              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                          new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                          new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                          new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                          new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                          new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildSkullGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<Basic32>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              vertices.Add(                                  new Basic32(                                      new Vector3(                                          Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture))'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                          new Vector2()                                  )                              );                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPN.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullVB = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _skullIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _skullIB = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var grid = GeometryGenerator.CreateGrid(20' 30' 60' 40);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var sphere = GeometryGenerator.CreateSphere(0.5f' 20' 20);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var sphere = GeometryGenerator.CreateSphere(0.5f' 20' 20);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var cylinder = GeometryGenerator.CreateCylinder(0.5f' 0.3f' 3.0f' 20' 20);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,BuildShapeGeometryBuffers,The following statement contains a magic number: var cylinder = GeometryGenerator.CreateCylinder(0.5f' 0.3f' 3.0f' 20' 20);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,UpdateScene,The following statement contains a magic number: var skullOffset = Matrix.Translation(3' 2' 0);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,UpdateScene,The following statement contains a magic number: var skullOffset = Matrix.Translation(3' 2' 0);
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The following statement contains a magic number: for (int i = 0; i < 6; i++) {                  ImmediateContext.ClearRenderTargetView(_dynamicCubeMapRTV[i]' Color.Silver);                  ImmediateContext.ClearDepthStencilView(                      _dynamicCubeMapDSV'                       DepthStencilClearFlags.Depth|                       DepthStencilClearFlags.Stencil'                       1.0f' 0 );                  ImmediateContext.OutputMerger.SetTargets(                      _dynamicCubeMapDSV'                      _dynamicCubeMapRTV[i]                  );                  DrawScene(_cubeMapCamera[i]' false);              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The following statement contains a magic number: switch (_lightCount) {                  case 1:                      activeTexTech = Effects.BasicFX.Light1TexTech;                      activeSkullTech = Effects.BasicFX.Light1ReflectTech;                      activeReflectTech = Effects.BasicFX.Light1TexReflectTech;                      break;                  case 2:                      activeTexTech = Effects.BasicFX.Light2TexTech;                      activeSkullTech = Effects.BasicFX.Light2ReflectTech;                      activeReflectTech = Effects.BasicFX.Light2TexReflectTech;                      break;                  case 3:                      activeTexTech = Effects.BasicFX.Light3TexTech;                      activeSkullTech = Effects.BasicFX.Light3ReflectTech;                      activeReflectTech = Effects.BasicFX.Light3TexReflectTech;                      break;              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The following statement contains a magic number: switch (_lightCount) {                  case 1:                      activeTexTech = Effects.BasicFX.Light1TexTech;                      activeSkullTech = Effects.BasicFX.Light1ReflectTech;                      activeReflectTech = Effects.BasicFX.Light1TexReflectTech;                      break;                  case 2:                      activeTexTech = Effects.BasicFX.Light2TexTech;                      activeSkullTech = Effects.BasicFX.Light2ReflectTech;                      activeReflectTech = Effects.BasicFX.Light2TexReflectTech;                      break;                  case 3:                      activeTexTech = Effects.BasicFX.Light3TexTech;                      activeSkullTech = Effects.BasicFX.Light3ReflectTech;                      activeReflectTech = Effects.BasicFX.Light3TexReflectTech;                      break;              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The following statement contains a magic number: for (var p = 0; p < activeTexTech.Description.PassCount; p++) {                  var pass = activeTexTech.GetPassByIndex(p);                  ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_shapesVB' Basic32.Stride' 0));                  ImmediateContext.InputAssembler.SetIndexBuffer(_shapesIB' Format.R32_UInt' 0);                    var world = _gridWorld;                  var worldInvTranspose = MathF.InverseTranspose(world);                  var wvp = world * view * proj;                  Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Scaling(6' 8' 1));                  Effects.BasicFX.SetMaterial(_gridMat);                  Effects.BasicFX.SetDiffuseMap(_floorTexSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  worldInvTranspose = MathF.InverseTranspose(world);                  wvp = world * viewProj;                  Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_boxMat);                  Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      worldInvTranspose = MathF.InverseTranspose(world);                      wvp = world * viewProj;                      Effects.BasicFX.SetWorld(world);                      Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                      Effects.BasicFX.SetWorldViewProj(wvp);                      Effects.BasicFX.SetTexTransform(Matrix.Identity);                      Effects.BasicFX.SetMaterial(_cylinderMat);                      Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                  foreach (var matrix in _sphereWorld) {                      world = matrix;                      worldInvTranspose = MathF.InverseTranspose(world);                      wvp = world * viewProj;                      Effects.BasicFX.SetWorld(world);                      Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                      Effects.BasicFX.SetWorldViewProj(wvp);                      Effects.BasicFX.SetTexTransform(Matrix.Identity);                      Effects.BasicFX.SetMaterial(_sphereMat);                      Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_sphereIndexCount' _sphereIndexOffset' _sphereVertexOffset);                  }              }
Magic Number,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The following statement contains a magic number: for (var p = 0; p < activeTexTech.Description.PassCount; p++) {                  var pass = activeTexTech.GetPassByIndex(p);                  ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_shapesVB' Basic32.Stride' 0));                  ImmediateContext.InputAssembler.SetIndexBuffer(_shapesIB' Format.R32_UInt' 0);                    var world = _gridWorld;                  var worldInvTranspose = MathF.InverseTranspose(world);                  var wvp = world * view * proj;                  Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Scaling(6' 8' 1));                  Effects.BasicFX.SetMaterial(_gridMat);                  Effects.BasicFX.SetDiffuseMap(_floorTexSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_gridIndexCount' _gridIndexOffset' _gridVertexOffset);                    world = _boxWorld;                  worldInvTranspose = MathF.InverseTranspose(world);                  wvp = world * viewProj;                  Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetTexTransform(Matrix.Identity);                  Effects.BasicFX.SetMaterial(_boxMat);                  Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_boxIndexCount' _boxIndexOffset' _boxVertexOffset);                    foreach (var matrix in _cylWorld) {                      world = matrix;                      worldInvTranspose = MathF.InverseTranspose(world);                      wvp = world * viewProj;                      Effects.BasicFX.SetWorld(world);                      Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                      Effects.BasicFX.SetWorldViewProj(wvp);                      Effects.BasicFX.SetTexTransform(Matrix.Identity);                      Effects.BasicFX.SetMaterial(_cylinderMat);                      Effects.BasicFX.SetDiffuseMap(_brickTexSRV);                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_cylinderIndexCount' _cylinderIndexOffset' _cylinderVertexOffset);                  }                  foreach (var matrix in _sphereWorld) {                      world = matrix;                      worldInvTranspose = MathF.InverseTranspose(world);                      wvp = world * viewProj;                      Effects.BasicFX.SetWorld(world);                      Effects.BasicFX.SetWorldInvTranspose(worldInvTranspose);                      Effects.BasicFX.SetWorldViewProj(wvp);                      Effects.BasicFX.SetTexTransform(Matrix.Identity);                      Effects.BasicFX.SetMaterial(_sphereMat);                      Effects.BasicFX.SetDiffuseMap(_stoneTexSRV);                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(_sphereIndexCount' _sphereIndexOffset' _sphereVertexOffset);                  }              }
Missing Default,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,SwitchLights,The following switch statement is missing a default case: switch (e.KeyCode) {                  case Keys.D0:                      _lightCount = 0;                      break;                  case Keys.D1:                      _lightCount = 1;                      break;                  case Keys.D2:                      _lightCount = 2;                      break;                  case Keys.D3:                      _lightCount = 3;                      break;              }
Missing Default,DynamicCubeMap,DynamicCubeMapDemo,C:\repos\ericrrichards_dx11\DX11\DynamicCubeMap\Program.cs,DrawScene,The following switch statement is missing a default case: switch (_lightCount) {                  case 1:                      activeTexTech = Effects.BasicFX.Light1TexTech;                      activeSkullTech = Effects.BasicFX.Light1ReflectTech;                      activeReflectTech = Effects.BasicFX.Light1TexReflectTech;                      break;                  case 2:                      activeTexTech = Effects.BasicFX.Light2TexTech;                      activeSkullTech = Effects.BasicFX.Light2ReflectTech;                      activeReflectTech = Effects.BasicFX.Light2TexReflectTech;                      break;                  case 3:                      activeTexTech = Effects.BasicFX.Light3TexTech;                      activeSkullTech = Effects.BasicFX.Light3ReflectTech;                      activeReflectTech = Effects.BasicFX.Light3TexReflectTech;                      break;              }
