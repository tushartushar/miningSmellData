Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SkullDemo,SkullDemo,C:\repos\ericrrichards_dx11\DX11\SkullDemo\Program.cs,DrawScene,The length of the statement  "            ImmediateContext.ClearDepthStencilView(DepthStencilView' DepthStencilClearFlags.Depth | DepthStencilClearFlags.Stencil' 1.0f' 0); " is 129.
Magic Number,SkullDemo,SkullDemo,C:\repos\ericrrichards_dx11\DX11\SkullDemo\Program.cs,BuildGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<VertexPC>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                                              var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] {':'})[1].Trim());                        input = reader.ReadLine();                      if (input != null)                           //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        var c = Color.Black;                      // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                        //set fixed number format format for correct parsing of the vector                      var provider = new NumberFormatInfo {                          NumberDecimalSeparator = "."'                           NumberGroupSeparator = "'"                      };                        // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] {' '});                              vertices.Add(new VertexPC(                                  new Vector3(                                      Convert.ToSingle(vals[0].Trim()'provider)'                                      Convert.ToSingle(vals[1].Trim()' provider)'                                      Convert.ToSingle(vals[2].Trim()' provider))'                                   c));                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3*tcount;                      for (var i = 0; i < tcount; i++) {                              input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPC.Stride*vcount' ResourceUsage.Immutable'                       BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _vb = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof (int)*_skullIndexCount' ResourceUsage.Immutable'                       BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _ib = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,SkullDemo,SkullDemo,C:\repos\ericrrichards_dx11\DX11\SkullDemo\Program.cs,BuildGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<VertexPC>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                                              var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] {':'})[1].Trim());                        input = reader.ReadLine();                      if (input != null)                           //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        var c = Color.Black;                      // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                        //set fixed number format format for correct parsing of the vector                      var provider = new NumberFormatInfo {                          NumberDecimalSeparator = "."'                           NumberGroupSeparator = "'"                      };                        // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] {' '});                              vertices.Add(new VertexPC(                                  new Vector3(                                      Convert.ToSingle(vals[0].Trim()'provider)'                                      Convert.ToSingle(vals[1].Trim()' provider)'                                      Convert.ToSingle(vals[2].Trim()' provider))'                                   c));                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3*tcount;                      for (var i = 0; i < tcount; i++) {                              input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPC.Stride*vcount' ResourceUsage.Immutable'                       BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _vb = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof (int)*_skullIndexCount' ResourceUsage.Immutable'                       BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _ib = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,SkullDemo,SkullDemo,C:\repos\ericrrichards_dx11\DX11\SkullDemo\Program.cs,BuildGeometryBuffers,The following statement contains a magic number: try {                  var vertices = new List<VertexPC>();                  var indices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\skull.txt")) {                                              var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] {':'})[1].Trim());                        input = reader.ReadLine();                      if (input != null)                           //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        var c = Color.Black;                      // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                        //set fixed number format format for correct parsing of the vector                      var provider = new NumberFormatInfo {                          NumberDecimalSeparator = "."'                           NumberGroupSeparator = "'"                      };                        // Get the vertices                        for (var i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] {' '});                              vertices.Add(new VertexPC(                                  new Vector3(                                      Convert.ToSingle(vals[0].Trim()'provider)'                                      Convert.ToSingle(vals[1].Trim()' provider)'                                      Convert.ToSingle(vals[2].Trim()' provider))'                                   c));                          }                      }                      // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _skullIndexCount = 3*tcount;                      for (var i = 0; i < tcount; i++) {                              input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          indices.Add(Convert.ToInt32(m[0].Trim()));                          indices.Add(Convert.ToInt32(m[1].Trim()));                          indices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(VertexPC.Stride*vcount' ResourceUsage.Immutable'                       BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _vb = new Buffer(Device' new DataStream(vertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof (int)*_skullIndexCount' ResourceUsage.Immutable'                       BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _ib = new Buffer(Device' new DataStream(indices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,SkullDemo,SkullDemo,C:\repos\ericrrichards_dx11\DX11\SkullDemo\Program.cs,BuildVertexLayout,The following statement contains a magic number: var vertexDesc = new[] {                  new InputElement("POSITION"' 0' Format.R32G32B32_Float'                       0' 0' InputClassification.PerVertexData' 0)'                  new InputElement("COLOR"' 0' Format.R32G32B32A32_Float'                       12' 0' InputClassification.PerVertexData' 0)              };
