Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,DrawScene,The length of the statement  "            ImmediateContext.ClearDepthStencilView(DepthStencilView' DepthStencilClearFlags.Depth|DepthStencilClearFlags.Stencil' 1.0f' 0 ); " is 128.
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,PickingDemo,The following statement contains a magic number: _cam = new FpsCamera {                  Position = new Vector3(0' 2' -15)              };
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,PickingDemo,The following statement contains a magic number: _cam = new FpsCamera {                  Position = new Vector3(0' 2' -15)              };
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  if (Util.IsKeyDown(Keys.D1)) {                      ImmediateContext.Rasterizer.State = RenderStates.WireframeRS;                  }                  ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_meshVB' stride' offset));                  ImmediateContext.InputAssembler.SetIndexBuffer(_meshIB' Format.R32_UInt' 0);                    var world = _meshWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetMaterial(_meshMat);                    var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_meshIndexCount' 0' 0);                  ImmediateContext.Rasterizer.State = null;                    if (_pickedTriangle >= 0) {                      ImmediateContext.OutputMerger.DepthStencilState = RenderStates.LessEqualDSS;                      ImmediateContext.OutputMerger.DepthStencilReference = 0;                        Effects.BasicFX.SetMaterial(_pickedTriangleMat);                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(3' 3*_pickedTriangle' 0);                        ImmediateContext.OutputMerger.DepthStencilState = null;                  }                }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,DrawScene,The following statement contains a magic number: for (int p = 0; p < activeTech.Description.PassCount; p++) {                  if (Util.IsKeyDown(Keys.D1)) {                      ImmediateContext.Rasterizer.State = RenderStates.WireframeRS;                  }                  ImmediateContext.InputAssembler.SetVertexBuffers(0' new VertexBufferBinding(_meshVB' stride' offset));                  ImmediateContext.InputAssembler.SetIndexBuffer(_meshIB' Format.R32_UInt' 0);                    var world = _meshWorld;                  var wit = MathF.InverseTranspose(world);                  var wvp = world * viewProj;                    Effects.BasicFX.SetWorld(world);                  Effects.BasicFX.SetWorldInvTranspose(wit);                  Effects.BasicFX.SetWorldViewProj(wvp);                  Effects.BasicFX.SetMaterial(_meshMat);                    var pass = activeTech.GetPassByIndex(p);                  pass.Apply(ImmediateContext);                  ImmediateContext.DrawIndexed(_meshIndexCount' 0' 0);                  ImmediateContext.Rasterizer.State = null;                    if (_pickedTriangle >= 0) {                      ImmediateContext.OutputMerger.DepthStencilState = RenderStates.LessEqualDSS;                      ImmediateContext.OutputMerger.DepthStencilReference = 0;                        Effects.BasicFX.SetMaterial(_pickedTriangleMat);                      pass.Apply(ImmediateContext);                      ImmediateContext.DrawIndexed(3' 3*_pickedTriangle' 0);                        ImmediateContext.OutputMerger.DepthStencilState = null;                  }                }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,BuildMeshGeometryBuffers,The following statement contains a magic number: try {                    var min = new Vector3(float.MaxValue' float.MaxValue' float.MaxValue);                  var max = new Vector3(float.MinValue' float.MinValue' float.MinValue);                  _meshVertices = new List<Basic32>();                  _meshIndices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\car.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              var position = new Vector3(                                  Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture));                              _meshVertices.Add(                                  new Basic32(                                      position'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                              min = Vector3.Minimize(min' position);                              max = Vector3.Maximize(max' position);                          }                      }                      _meshBox = new BoundingBox(min' max);                        // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _meshIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          _meshIndices.Add(Convert.ToInt32(m[0].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[1].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshVB = new Buffer(Device' new DataStream(_meshVertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _meshIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshIB = new Buffer(Device' new DataStream(_meshIndices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,BuildMeshGeometryBuffers,The following statement contains a magic number: try {                    var min = new Vector3(float.MaxValue' float.MaxValue' float.MaxValue);                  var max = new Vector3(float.MinValue' float.MinValue' float.MinValue);                  _meshVertices = new List<Basic32>();                  _meshIndices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\car.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              var position = new Vector3(                                  Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture));                              _meshVertices.Add(                                  new Basic32(                                      position'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                              min = Vector3.Minimize(min' position);                              max = Vector3.Maximize(max' position);                          }                      }                      _meshBox = new BoundingBox(min' max);                        // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _meshIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          _meshIndices.Add(Convert.ToInt32(m[0].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[1].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshVB = new Buffer(Device' new DataStream(_meshVertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _meshIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshIB = new Buffer(Device' new DataStream(_meshIndices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,BuildMeshGeometryBuffers,The following statement contains a magic number: try {                    var min = new Vector3(float.MaxValue' float.MaxValue' float.MaxValue);                  var max = new Vector3(float.MinValue' float.MinValue' float.MinValue);                  _meshVertices = new List<Basic32>();                  _meshIndices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\car.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              var position = new Vector3(                                  Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture));                              _meshVertices.Add(                                  new Basic32(                                      position'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                              min = Vector3.Minimize(min' position);                              max = Vector3.Maximize(max' position);                          }                      }                      _meshBox = new BoundingBox(min' max);                        // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _meshIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          _meshIndices.Add(Convert.ToInt32(m[0].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[1].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshVB = new Buffer(Device' new DataStream(_meshVertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _meshIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshIB = new Buffer(Device' new DataStream(_meshIndices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,BuildMeshGeometryBuffers,The following statement contains a magic number: try {                    var min = new Vector3(float.MaxValue' float.MaxValue' float.MaxValue);                  var max = new Vector3(float.MinValue' float.MinValue' float.MinValue);                  _meshVertices = new List<Basic32>();                  _meshIndices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\car.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              var position = new Vector3(                                  Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture));                              _meshVertices.Add(                                  new Basic32(                                      position'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                              min = Vector3.Minimize(min' position);                              max = Vector3.Maximize(max' position);                          }                      }                      _meshBox = new BoundingBox(min' max);                        // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _meshIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          _meshIndices.Add(Convert.ToInt32(m[0].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[1].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshVB = new Buffer(Device' new DataStream(_meshVertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _meshIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshIB = new Buffer(Device' new DataStream(_meshIndices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,BuildMeshGeometryBuffers,The following statement contains a magic number: try {                    var min = new Vector3(float.MaxValue' float.MaxValue' float.MaxValue);                  var max = new Vector3(float.MinValue' float.MinValue' float.MinValue);                  _meshVertices = new List<Basic32>();                  _meshIndices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\car.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              var position = new Vector3(                                  Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture));                              _meshVertices.Add(                                  new Basic32(                                      position'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                              min = Vector3.Minimize(min' position);                              max = Vector3.Maximize(max' position);                          }                      }                      _meshBox = new BoundingBox(min' max);                        // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _meshIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          _meshIndices.Add(Convert.ToInt32(m[0].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[1].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshVB = new Buffer(Device' new DataStream(_meshVertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _meshIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshIB = new Buffer(Device' new DataStream(_meshIndices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,BuildMeshGeometryBuffers,The following statement contains a magic number: try {                    var min = new Vector3(float.MaxValue' float.MaxValue' float.MaxValue);                  var max = new Vector3(float.MinValue' float.MinValue' float.MinValue);                  _meshVertices = new List<Basic32>();                  _meshIndices = new List<int>();                  var vcount = 0;                  var tcount = 0;                  using (var reader = new StreamReader("Models\\car.txt")) {                          var input = reader.ReadLine();                      if (input != null)                          // VertexCount: X                          vcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        input = reader.ReadLine();                      if (input != null)                          //TriangleCount: X                          tcount = Convert.ToInt32(input.Split(new[] { ':' })[1].Trim());                        // skip ahead to the vertex data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the vertices                        for (int i = 0; i < vcount; i++) {                          input = reader.ReadLine();                          if (input != null) {                              var vals = input.Split(new[] { ' ' });                              var position = new Vector3(                                  Convert.ToSingle(vals[0].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[1].Trim()' CultureInfo.InvariantCulture)'                                  Convert.ToSingle(vals[2].Trim()' CultureInfo.InvariantCulture));                              _meshVertices.Add(                                  new Basic32(                                      position'                                      new Vector3(                                          Convert.ToSingle(vals[3].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[4].Trim()' CultureInfo.InvariantCulture)'                                          Convert.ToSingle(vals[5].Trim()' CultureInfo.InvariantCulture))'                                      new Vector2()                                  )                              );                              min = Vector3.Minimize(min' position);                              max = Vector3.Maximize(max' position);                          }                      }                      _meshBox = new BoundingBox(min' max);                        // skip ahead to the index data                      do {                          input = reader.ReadLine();                      } while (input != null && !input.StartsWith("{"));                      // Get the indices                      _meshIndexCount = 3 * tcount;                      for (var i = 0; i < tcount; i++) {                          input = reader.ReadLine();                          if (input == null) {                              break;                          }                          var m = input.Trim().Split(new[] { ' ' });                          _meshIndices.Add(Convert.ToInt32(m[0].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[1].Trim()));                          _meshIndices.Add(Convert.ToInt32(m[2].Trim()));                      }                  }                    var vbd = new BufferDescription(Basic32.Stride * vcount' ResourceUsage.Immutable'                      BindFlags.VertexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshVB = new Buffer(Device' new DataStream(_meshVertices.ToArray()' false' false)' vbd);                    var ibd = new BufferDescription(sizeof(int) * _meshIndexCount' ResourceUsage.Immutable'                      BindFlags.IndexBuffer' CpuAccessFlags.None' ResourceOptionFlags.None' 0);                  _meshIB = new Buffer(Device' new DataStream(_meshIndices.ToArray()' false' false)' ibd);                  } catch (Exception ex) {                  MessageBox.Show(ex.Message);              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,Pick,The following statement contains a magic number: for (var i = 0; i < _meshIndices.Count/3; i++) {                  var v0 = _meshVertices[_meshIndices[i * 3]].Position;                  var v1 = _meshVertices[_meshIndices[i * 3 + 1]].Position;                  var v2 = _meshVertices[_meshIndices[i * 3 + 2]].Position;                    float t;                    float u' v;                  //if (!Ray.Intersects(ray' v0' v1' v2' out t)) continue;                  if (!Ray.Intersects(ray' v0' v1' v2' out t' out u' out v)) continue;                    // determine the actual picked point on the triangle                  var p = v0*(1.0f - u - v) + v1*u + v2*v;                    // find the closest intersection' exclude intersections behind camera                  if (!(t < tmin || t < 0)) continue;                  tmin = t;                  _pickedTriangle = i;              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,Pick,The following statement contains a magic number: for (var i = 0; i < _meshIndices.Count/3; i++) {                  var v0 = _meshVertices[_meshIndices[i * 3]].Position;                  var v1 = _meshVertices[_meshIndices[i * 3 + 1]].Position;                  var v2 = _meshVertices[_meshIndices[i * 3 + 2]].Position;                    float t;                    float u' v;                  //if (!Ray.Intersects(ray' v0' v1' v2' out t)) continue;                  if (!Ray.Intersects(ray' v0' v1' v2' out t' out u' out v)) continue;                    // determine the actual picked point on the triangle                  var p = v0*(1.0f - u - v) + v1*u + v2*v;                    // find the closest intersection' exclude intersections behind camera                  if (!(t < tmin || t < 0)) continue;                  tmin = t;                  _pickedTriangle = i;              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,Pick,The following statement contains a magic number: for (var i = 0; i < _meshIndices.Count/3; i++) {                  var v0 = _meshVertices[_meshIndices[i * 3]].Position;                  var v1 = _meshVertices[_meshIndices[i * 3 + 1]].Position;                  var v2 = _meshVertices[_meshIndices[i * 3 + 2]].Position;                    float t;                    float u' v;                  //if (!Ray.Intersects(ray' v0' v1' v2' out t)) continue;                  if (!Ray.Intersects(ray' v0' v1' v2' out t' out u' out v)) continue;                    // determine the actual picked point on the triangle                  var p = v0*(1.0f - u - v) + v1*u + v2*v;                    // find the closest intersection' exclude intersections behind camera                  if (!(t < tmin || t < 0)) continue;                  tmin = t;                  _pickedTriangle = i;              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,Pick,The following statement contains a magic number: for (var i = 0; i < _meshIndices.Count/3; i++) {                  var v0 = _meshVertices[_meshIndices[i * 3]].Position;                  var v1 = _meshVertices[_meshIndices[i * 3 + 1]].Position;                  var v2 = _meshVertices[_meshIndices[i * 3 + 2]].Position;                    float t;                    float u' v;                  //if (!Ray.Intersects(ray' v0' v1' v2' out t)) continue;                  if (!Ray.Intersects(ray' v0' v1' v2' out t' out u' out v)) continue;                    // determine the actual picked point on the triangle                  var p = v0*(1.0f - u - v) + v1*u + v2*v;                    // find the closest intersection' exclude intersections behind camera                  if (!(t < tmin || t < 0)) continue;                  tmin = t;                  _pickedTriangle = i;              }
Magic Number,PickingDemo,PickingDemo,C:\repos\ericrrichards_dx11\DX11\PickingDemo\Program.cs,Pick,The following statement contains a magic number: for (var i = 0; i < _meshIndices.Count/3; i++) {                  var v0 = _meshVertices[_meshIndices[i * 3]].Position;                  var v1 = _meshVertices[_meshIndices[i * 3 + 1]].Position;                  var v2 = _meshVertices[_meshIndices[i * 3 + 2]].Position;                    float t;                    float u' v;                  //if (!Ray.Intersects(ray' v0' v1' v2' out t)) continue;                  if (!Ray.Intersects(ray' v0' v1' v2' out t' out u' out v)) continue;                    // determine the actual picked point on the triangle                  var p = v0*(1.0f - u - v) + v1*u + v2*v;                    // find the closest intersection' exclude intersections behind camera                  if (!(t < tmin || t < 0)) continue;                  tmin = t;                  _pickedTriangle = i;              }
