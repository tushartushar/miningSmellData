Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nest,AggregationWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Visitor\AggregationWalker.cs,Walk,The method has 139 lines of code.
Long Method,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Serialize,The method has 152 lines of code.
Long Method,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The method has 114 lines of code.
Long Method,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Serialize,The method has 109 lines of code.
Long Method,Nest,PropertyFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\PropertyFormatter.cs,Serialize,The method has 113 lines of code.
Long Method,Nest,MappingWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\MappingWalker.cs,Accept,The method has 213 lines of code.
Long Method,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The method has 101 lines of code.
Complex Method,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,Cyclomatic complexity of the method is 13
Complex Method,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,GetMultiBucketAggregate,Cyclomatic complexity of the method is 8
Complex Method,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,GetRangeBucket,Cyclomatic complexity of the method is 15
Complex Method,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,GetKeyedBucket,Cyclomatic complexity of the method is 9
Complex Method,Nest,TermsIncludeFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Bucket\Terms\TermsIncludeFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,Cyclomatic complexity of the method is 11
Complex Method,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Serialize,Cyclomatic complexity of the method is 18
Complex Method,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,Cyclomatic complexity of the method is 11
Complex Method,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Serialize,Cyclomatic complexity of the method is 18
Complex Method,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,Cyclomatic complexity of the method is 17
Complex Method,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Serialize,Cyclomatic complexity of the method is 20
Complex Method,Nest,VerbatimDictionaryKeysBaseFormatter<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\VerbatimDictionaryKeysFormatter.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,AnalyzerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Analyzers\AnalyzerFormatter.cs,Deserialize,Cyclomatic complexity of the method is 17
Complex Method,Nest,AnalyzerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Analyzers\AnalyzerFormatter.cs,Serialize,Cyclomatic complexity of the method is 14
Complex Method,Nest,CharFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\CharFilters\CharFilterFormatter.cs,Deserialize,Cyclomatic complexity of the method is 9
Complex Method,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,Cyclomatic complexity of the method is 51
Complex Method,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Serialize,Cyclomatic complexity of the method is 48
Complex Method,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,Cyclomatic complexity of the method is 16
Complex Method,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Serialize,Cyclomatic complexity of the method is 13
Complex Method,Nest,CatFielddataRecordFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatFielddata\CatFielddataRecordJsonConverter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,ConnectionSettingsBase<TConnectionSettings>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\ConnectionSettings\ConnectionSettingsBase.cs,ApplyPropertyMappings,Cyclomatic complexity of the method is 9
Complex Method,Nest,ConnectionSettingsBase<TConnectionSettings>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\ConnectionSettings\ConnectionSettingsBase.cs,DefaultMappingFor,Cyclomatic complexity of the method is 8
Complex Method,Nest,FieldFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Field\FieldFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,LazyDocumentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\LazyDocument\LazyDocumentFormatter.cs,WriteUnindented,Cyclomatic complexity of the method is 11
Complex Method,Nest,DateMathTime,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMathTime.cs,SetWholeFactorIntervalAndSeconds,Cyclomatic complexity of the method is 19
Complex Method,Nest,DateMathTime,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMathTime.cs,SetWholeFactorIntervalAndSeconds,Cyclomatic complexity of the method is 11
Complex Method,Nest,DateMathTimeUnitExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMathTimeUnit.cs,GetStringValue,Cyclomatic complexity of the method is 8
Complex Method,Nest,FuzzinessFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Fuzziness\FuzzinessFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,ScriptFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Scripting\ScriptFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,CompareTo,Cyclomatic complexity of the method is 12
Complex Method,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,ToTimeSpan,Cyclomatic complexity of the method is 8
Complex Method,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,Equals,Cyclomatic complexity of the method is 8
Complex Method,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,Reduce,Cyclomatic complexity of the method is 11
Complex Method,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,GetExactMilliseconds,Cyclomatic complexity of the method is 8
Complex Method,Nest,TimeUnitExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\TimeUnit.cs,GetStringValue,Cyclomatic complexity of the method is 8
Complex Method,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,Nest,FieldMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\MappingManagement\GetFieldMapping\FieldMappingFormatter.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,Cyclomatic complexity of the method is 33
Complex Method,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Serialize,Cyclomatic complexity of the method is 33
Complex Method,Nest,NumberTypeExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Core\Number\NumberType.cs,ToFieldType,Cyclomatic complexity of the method is 9
Complex Method,Nest,PropertyFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\PropertyFormatter.cs,Deserialize,Cyclomatic complexity of the method is 36
Complex Method,Nest,PropertyFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\PropertyFormatter.cs,Serialize,Cyclomatic complexity of the method is 32
Complex Method,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Serialize,Cyclomatic complexity of the method is 13
Complex Method,Nest,MappingWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\MappingWalker.cs,Accept,Cyclomatic complexity of the method is 31
Complex Method,Nest,NoopPropertyVisitor,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\NoopPropertyVisitor.cs,Visit,Cyclomatic complexity of the method is 26
Complex Method,Nest,PropertyWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\PropertyWalker.cs,InferProperty,Cyclomatic complexity of the method is 23
Complex Method,Nest,CreateRepositoryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\CreateRepository\CreateRepositoryFormatter.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,GetRepositoryResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\GetRepository\GetRepositoryResponseFormatter.cs,Deserialize,Cyclomatic complexity of the method is 14
Complex Method,Nest,SourceOnlyRepositoryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\SourceOnlyRepository.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,Nest,SourceOnlyRepositoryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\SourceOnlyRepository.cs,Deserialize,Cyclomatic complexity of the method is 12
Complex Method,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Deserialize,Cyclomatic complexity of the method is 13
Complex Method,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Serialize,Cyclomatic complexity of the method is 14
Complex Method,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,ReadDecayFunction,Cyclomatic complexity of the method is 16
Complex Method,Nest,SimpleQueryStringFlagsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\SimpleQueryString\SimpleQueryStringFlags.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,GeoBoundingBoxQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\BoundingBox\GeoBoundingBoxQuery.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,GeoDistanceQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Distance\GeoDistanceQuery.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,GeoDistanceQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Distance\GeoDistanceQuery.cs,Serialize,Cyclomatic complexity of the method is 12
Complex Method,Nest,GeoLocationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoLocationFormatter.cs,Deserialize,Cyclomatic complexity of the method is 9
Complex Method,Nest,GeoPolygonQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Polygon\GeoPolygonQuery.cs,Serialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,GeoShapeFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeBase.cs,Serialize,Cyclomatic complexity of the method is 11
Complex Method,Nest,GeoShapeFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeBase.cs,ReadShape,Cyclomatic complexity of the method is 12
Complex Method,Nest,GeoShapeQueryFieldNameFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeQueryFormatter.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,GeoShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeQueryFormatter.cs,Deserialize,Cyclomatic complexity of the method is 11
Complex Method,Nest,GeoShapeQuery,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\IGeoShapeQuery.cs,IsConditionless,Cyclomatic complexity of the method is 12
Complex Method,Nest,GeoWKTReader,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Nest,WellKnownTextTokenizer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,NextToken,Cyclomatic complexity of the method is 15
Complex Method,Nest,GeoWKTWriter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTWriter.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Nest,MultiTermQueryRewrite,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\MultiTermQueryRewrite\RewriteMultiTerm.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Deserialize,Cyclomatic complexity of the method is 9
Complex Method,Nest,ShapeQuery,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Shape\IShapeQuery.cs,IsConditionless,Cyclomatic complexity of the method is 12
Complex Method,Nest,ShapeQueryFieldNameFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Shape\ShapeQueryFormatter.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,ShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Shape\ShapeQueryFormatter.cs,Deserialize,Cyclomatic complexity of the method is 11
Complex Method,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,Cyclomatic complexity of the method is 16
Complex Method,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,TermsQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Terms\TermsQueryFormatter.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,TermsQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Terms\TermsQueryFormatter.cs,ReadTerms,Cyclomatic complexity of the method is 8
Complex Method,Nest,DslPrettyPrintVisitor,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Visitor\DslPrettyPrintVisitor.cs,WriteShape,Cyclomatic complexity of the method is 11
Complex Method,Nest,MultiSearchResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Search\MultiSearch\MultiSearchResponseFormatter.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,Cyclomatic complexity of the method is 12
Complex Method,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Serialize,Cyclomatic complexity of the method is 13
Complex Method,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,Cyclomatic complexity of the method is 39
Complex Method,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Serialize,Cyclomatic complexity of the method is 11
Complex Method,Nest,MetricFunctionsExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\MetricDetector.cs,GetStringValue,Cyclomatic complexity of the method is 13
Complex Method,Nest,FieldRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Field\FieldRuleBaseFormatter.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,RoleMappingRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Role\RoleMappingRuleBaseFormatter.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,Nest,GetCertificatesResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ssl\GetCertificates\GetCertificatesResponse.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,Nest,ArrayCompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ArrayCompareConditionBase.cs,Deserialize,Cyclomatic complexity of the method is 14
Complex Method,Nest,CompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\CompareConditionBase.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,Nest,ScriptConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ScriptConditionBase.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,Nest,ScriptTransformFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Transform\ScriptTransformBase.cs,Deserialize,Cyclomatic complexity of the method is 8
Long Parameter List,Nest,Extensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Extensions\Extensions.cs,ForEachAsync,The method has 6 parameters. Parameters: lazyList' taskSelector' resultProcessor' done' maxDegreeOfParallelism' additionalRateLimiter
Long Parameter List,Nest,Extensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Extensions\Extensions.cs,ProcessAsync,The method has 6 parameters. Parameters: item' taskSelector' resultProcessor' localRateLimiter' additionalRateLimiter' page
Long Parameter List,Nest,IElasticClient,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\BulkAll\ElasticClient-BulkAll.cs,Reindex,The method has 5 parameters. Parameters: fromIndex' toIndex' mapper' selector' cancellationToken
Long Parameter List,Nest,ElasticClient,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\BulkAll\ElasticClient-BulkAll.cs,Reindex,The method has 5 parameters. Parameters: fromIndex' toIndex' mapper' selector' cancellationToken
Long Parameter List,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,Set,The method has 5 parameters. Parameters: s' settings' key' assign' formatterResolver
Long Parameter List,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetArray,The method has 6 parameters. Parameters: s' settings' key' assign' assign2' formatterResolver
Long Parameter List,Nest,QueryContainerDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Container\QueryContainerDescriptor.cs,Wildcard,The method has 5 parameters. Parameters: field' value' boost' rewrite' name
Long Parameter List,Nest,QueryContainerDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Container\QueryContainerDescriptor.cs,Wildcard,The method has 5 parameters. Parameters: field' value' boost' rewrite' name
Long Parameter List,Nest,QueryContainerDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Container\QueryContainerDescriptor.cs,Prefix,The method has 5 parameters. Parameters: field' value' boost' rewrite' name
Long Parameter List,Nest,QueryContainerDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Container\QueryContainerDescriptor.cs,Prefix,The method has 5 parameters. Parameters: field' value' boost' rewrite' name
Long Parameter List,Nest,BoolQueryAndExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Query\BoolQueryAndExtensions.cs,TryHandleUnmergableBools,The method has 5 parameters. Parameters: leftContainer' rightContainer' leftBool' rightBool' c
Long Parameter List,Nest,BoolQueryAndExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Query\BoolQueryAndExtensions.cs,TryHandleBoolsWithOnlyShouldClauses,The method has 5 parameters. Parameters: leftContainer' rightContainer' leftBool' rightBool' c
Long Parameter List,Nest,BoolQueryOrExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Query\BoolQueryOrExtensions.cs,TryFlattenShould,The method has 5 parameters. Parameters: leftContainer' rightContainer' leftBool' rightBool' c
Long Parameter List,Nest,Query<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Query.cs,Prefix,The method has 5 parameters. Parameters: fieldDescriptor' value' boost' rewrite' name
Long Parameter List,Nest,Query<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Query.cs,Prefix,The method has 5 parameters. Parameters: field' value' boost' rewrite' name
Long Parameter List,Nest,Query<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Query.cs,Wildcard,The method has 5 parameters. Parameters: fieldDescriptor' value' boost' rewrite' name
Long Parameter List,Nest,Query<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Query.cs,Wildcard,The method has 5 parameters. Parameters: field' value' boost' rewrite' name
Long Identifier,Nest,Extensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Extensions\Extensions.cs,ToEnumValue,The length of the parameter alternativeEnumMemberAttribute is 30.
Long Identifier,Nest,Extensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Extensions\Extensions.cs,ToEnum,The length of the parameter alternativeEnumMemberAttribute is 30.
Long Identifier,Nest,CoordinatedRequestDefaults,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Reactive\CoordinatedRequestObserverBase.cs,,The length of the parameter BulkAllMaxDegreeOfParallelismDefault is 36.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter basic_ordinal_date_time_no_millis is 33.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter basic_week_date_time_no_millis is 30.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter date_hour_minute_second_fraction is 32.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter date_hour_minute_second_millis is 30.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_basic_week_date_time_no_millis is 37.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_date_hour_minute_second is 30.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_date_hour_minute_second_fraction is 39.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_date_hour_minute_second_millis is 37.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_hour_minute_second_fraction is 34.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_hour_minute_second_millis is 32.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_ordinal_date_time_no_millis is 34.
Long Identifier,Nest,DateFormat,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateFormat\DateFormat.cs,,The length of the parameter strict_week_date_time_no_millis is 31.
Long Identifier,Nest,DateMathTime,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMathTime.cs,,The length of the parameter MillisecondsInAMonthApproximate is 31.
Long Identifier,Nest,DateMathTime,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMathTime.cs,,The length of the parameter MillisecondsInAYearApproximate is 30.
Long Identifier,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,,The length of the parameter _incrementSeenScrollOperations is 30.
Long Identifier,Nest,FixedIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\FixedIndexSettings.cs,,The length of the parameter PercolatorMapUnmappedFieldsAsText is 33.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter MergePolicyExpungeDeletesAllowed is 32.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter MergePolicyMaxMergeAtOnceExplicit is 33.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter MergePolicyReclaimDeletesWeight is 31.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SoftDeletesRetentionOperations is 30.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter RoutingAllocationDisableAllocation is 34.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter RoutingAllocationDisableNewAllocation is 37.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter RoutingAllocationDisableReplicaAllocation is 41.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter RoutingAllocationTotalShardsPerNode is 35.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogIndexingThresholdFetchDebug is 34.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogIndexingThresholdFetchInfo is 33.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogIndexingThresholdFetchTrace is 34.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogIndexingThresholdFetchWarn is 33.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdFetchDebug is 32.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdFetchInfo is 31.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdFetchTrace is 32.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdFetchWarn is 31.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdQueryDebug is 32.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdQueryInfo is 31.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdQueryTrace is 32.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter SlowlogSearchThresholdQueryWarn is 31.
Long Identifier,Nest,UpdatableIndexSettings,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\UpdatableIndexSettings.cs,,The length of the parameter UnassignedNodeLeftDelayedTimeout is 32.
Long Identifier,Nest,QueryContainerCollectionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Abstractions\Container\QueryContainerFormatter.cs,,The length of the parameter QueryContainerInterfaceFormatter is 32.
Long Identifier,Nest,MatchQueryDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\Match\MatchQuery.cs,AutoGenerateSynonymsPhraseQuery,The length of the parameter autoGenerateSynonymsPhraseQuery is 31.
Long Identifier,Nest,MultiMatchQueryDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\MultiMatch\MultiMatchQuery.cs,AutoGenerateSynonymsPhraseQuery,The length of the parameter autoGenerateSynonymsPhraseQuery is 31.
Long Identifier,Nest,QueryStringQueryDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\QueryString\QueryStringQuery.cs,AutoGenerateSynonymsPhraseQuery,The length of the parameter autoGenerateSynonymsPhraseQuery is 31.
Long Identifier,Nest,SimpleQueryStringQueryDescriptor<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\SimpleQueryString\SimpleQueryStringQuery.cs,AutoGenerateSynonymsPhraseQuery,The length of the parameter autoGenerateSynonymsPhraseQuery is 31.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationDeleteAutoFollowPattern is 46.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationCreateFollowIndex is 40.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationFollowInfo is 33.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationFollowIndexStats is 39.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationForgetFollowerIndex is 42.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationGetAutoFollowPattern is 43.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationPauseFollowIndex is 39.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationCreateAutoFollowPattern is 46.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationResumeFollowIndex is 40.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter CrossClusterReplicationUnfollowIndex is 36.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter NoNamespaceDeleteByQueryRethrottle is 34.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementDeleteLifecycle is 39.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementExplainLifecycle is 40.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementGetLifecycle is 36.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementGetStatus is 33.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementMoveToStep is 34.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementPutLifecycle is 36.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter IndexLifecycleManagementRemovePolicy is 36.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningDeleteCalendarEvent is 34.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningDeleteCalendarJob is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningDeleteExpiredData is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningDeleteModelSnapshot is 34.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningGetCalendarEvents is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningGetDatafeedStats is 31.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningGetModelSnapshots is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningGetOverallBuckets is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningGetAnomalyRecords is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningPostCalendarEvents is 33.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningPreviewDatafeed is 30.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningRevertModelSnapshot is 34.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningUpdateModelSnapshot is 34.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter MachineLearningValidateDetector is 31.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter NoNamespaceMultiSearchTemplate is 30.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter NoNamespaceRenderSearchTemplate is 31.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter NoNamespaceExecutePainlessScript is 32.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter SecurityInvalidateUserAccessToken is 33.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter SnapshotLifecycleManagementDeleteSnapshotLifecycle is 50.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter SnapshotLifecycleManagementExecuteSnapshotLifecycle is 51.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter SnapshotLifecycleManagementGetSnapshotLifecycle is 47.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter SnapshotLifecycleManagementPutSnapshotLifecycle is 47.
Long Identifier,Nest,ApiUrlsLookups,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\_Generated\ApiUrlsLookup.generated.cs,,The length of the parameter NoNamespaceUpdateByQueryRethrottle is 34.
Long Statement,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The length of the statement  "							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta } " is 138.
Long Statement,Nest,CatResponseBuilder<TCatRecord>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatResponseBuilder.cs,DeserializeResponseAsync,The length of the statement  "			var records = await builtInSerializer.DeserializeAsync<IReadOnlyCollection<TCatRecord>>(stream' ctx).ConfigureAwait(false); " is 123.
Long Statement,Nest,ConnectionSettingsBase<TConnectionSettings>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\ConnectionSettings\ConnectionSettingsBase.cs,MapIdPropertyFor,The length of the statement  "					$"Cannot map '{fieldName}' as the id property for type '{typeof(TDocument).Name}': it already has '{_idProperties[typeof(TDocument)]}' mapped."); " is 145.
Long Statement,Nest,ConnectionSettingsBase<TConnectionSettings>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\ConnectionSettings\ConnectionSettingsBase.cs,MapRoutePropertyFor,The length of the statement  "					$"Cannot map '{fieldName}' as the route property for type '{typeof(TDocument).Name}': it already has '{_routeProperties[typeof(TDocument)]}' mapped."); " is 151.
Long Statement,Nest,Extensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Extensions\Extensions.cs,ThrowIfNullOrEmpty,The length of the statement  "				throw new ArgumentException("Argument can't be null or empty" + (when.IsNullOrEmpty() ? "" : " when " + when)' parameterName); " is 126.
Long Statement,Nest,TypeExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Extensions\TypeExtensions.cs,CreateInstance,The length of the statement  "				throw new Exception($"Cannot create an instance of {t.FullName} because it has no constructor taking {args.Length} arguments"); " is 127.
Long Statement,Nest,FieldExpressionVisitor,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Field\FieldExpressionVisitor.cs,Resolve,The length of the statement  "			return _settings.PropertyMappingProvider?.CreatePropertyMapping(info)?.Name ?? _settings.DefaultFieldNameInferrer(name); " is 120.
Long Statement,Nest,IndexName,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\IndexName\IndexName.cs,GetString,The length of the statement  "				throw new Exception("Tried to pass index name on querystring but it could not be resolved because no nest settings are available"); " is 131.
Long Statement,Nest,CoordinatedRequestObserverBase<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Reactive\CoordinatedRequestObserverBase.cs,OnError,The length of the statement  "			if (error is UnexpectedElasticsearchClientException es && es.InnerException != null && es.InnerException is OperationCanceledException c) " is 137.
Long Statement,Nest,RequestDescriptorBase<TDescriptor;TParameters;TInterface>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Request\RequestBase.cs,RequestConfiguration,The length of the statement  "			RequestState.RequestParameters.RequestConfiguration = configurationSelector?.Invoke(new RequestConfigurationDescriptor(rc)) ?? rc; " is 130.
Long Statement,Nest,DictionaryFormatterHelper,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\InterfaceGenericDictionaryResolver.cs,GetFormatter,The length of the statement  "						+ $"have a public constructor accepting IDictionary<{typeArguments[0].FullName}'{typeArguments[1].FullName}> argument"); " is 120.
Long Statement,Nest,IsADictionaryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\IsADictionaryFormatterResolver.cs,GetFormatter,The length of the statement  "				var constructors = from c in implementationType.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance) " is 133.
Long Statement,Nest,JsonNetCompatibleUriFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\JsonNetCompatibleUriFormatter.cs,Serialize,The length of the statement  "			// See https://github.com/JamesNK/Newtonsoft.Json/blob/0ce23ff92459619fde10a5cec0a336ab00a08b4c/Src/Newtonsoft.Json/JsonTextWriter.cs#L769 " is 138.
Long Statement,Nest,InnerResolver,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\NestFormatterResolver.cs,CreateEnumFormatterForType,The length of the statement  "						property.JsonFormatter = typeof(StaticNullableFormatter<>).MakeGenericType(underlyingType).CreateInstance(innerFormatter); " is 122.
Long Statement,Nest,ProxyRequestFormatterBase<TRequestInterface;TRequest>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\ProxyRequestFormatterBase.cs,Deserialize,The length of the statement  "			// TODO: Look at optimizing this. It looks like this could be replaced with SourceFormatter<T> on Document and a serialization ctor " is 131.
Long Statement,Nest,UnionListFormatter<TCollection;TFirst;TSecond>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\UnionListFormatter.cs,Deserialize,The length of the statement  "			while (!reader.ReadIsEndArrayWithSkipValueSeparator(ref count)) list.Add(CharFilterFormatter.Deserialize(ref reader' formatterResolver)); " is 137.
Long Statement,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,ToTimeSpan,The length of the statement  "						throw new InvalidOperationException("Milliseconds is null so we have nothing to create a TimeSpan from' this is a bug please report!"); " is 135.
Long Statement,Nest,BulkAllObservable<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\BulkAll\BulkAllObservable.cs,HandleDroppedDocuments,The length of the statement  "				throw ThrowOnBadBulk(response' $"{nameof(BulkAll)} halted after receiving failures that can not be retried from _bulk"); " is 120.
Long Statement,Nest,BulkAllObservable<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\BulkAll\BulkAllObservable.cs,HandleBulkRequest,The length of the statement  "					$"{nameof(BulkAll)} halted after {nameof(PipelineFailure)}.{reason} from _bulk and exhausting retries ({backOffRetries})" " is 121.
Long Statement,Nest,ElasticClient,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\BulkAll\ElasticClient-BulkAll.cs,DoRequest,The length of the statement  "			var b = (p.HttpMethod == HttpMethod.GET || p.HttpMethod == HttpMethod.HEAD || !parameters.SupportsBody) ? null : new SerializableData<TRequest>(p); " is 147.
Long Statement,Nest,ElasticClient,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\BulkAll\ElasticClient-BulkAll.cs,DoRequestAsync,The length of the statement  "			var b = (p.HttpMethod == HttpMethod.GET || p.HttpMethod == HttpMethod.HEAD || !parameters.SupportsBody) ? null : new SerializableData<TRequest>(p); " is 147.
Long Statement,Nest,BulkOperationsCollection<TOperation>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Bulk\BulkOperation\BulkOperationsCollection.cs,VerifyValueType,The length of the statement  "				throw new ArgumentException($"object is of type {value.GetType().FullName} but collection is of {typeof(TOperation).FullName}"); " is 128.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateBackPressure,The length of the statement  "			var maxConcurrentConsumers = bulkMeta?.MaxDegreeOfParallelism ?? CoordinatedRequestDefaults.BulkAllMaxDegreeOfParallelismDefault; " is 129.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateBackPressure,The length of the statement  "				throw new Exception("The back pressure settings are too conservative in providing enough documents for a single bulk operation. " " is 129.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateBackPressure,The length of the statement  "					+ $"searchSize:{searchSize} * maxConcurrency:{maxConcurrency} * backPressureFactor:{backPressureFactor} = {producerBandwidth}" " is 126.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateBackPressure,The length of the statement  "					"The back pressure settings are too conservative. They provide enough documents for a single bulk but not enough room to advance " " is 130.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateBackPressure,The length of the statement  "					+ $"searchSize:{searchSize} * maxConcurrency:{maxConcurrency} * backPressureFactor:{backPressureFactor} = {producerBandwidth}" " is 126.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateIndex,The length of the statement  "				throw new Exception($"Could not resolve the target index name to reindex to make sure the bulk all operation describes one"); " is 125.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateIndex,The length of the statement  "				throw new Exception("Slices is a negative number and no sane default could be inferred from the origin index's number_of_shards"); " is 130.
Long Statement,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateIndex,The length of the statement  "					+ "shards hint from the source. This could happen if the scroll all points to multiple indices and no slices have been set"); " is 125.
Long Statement,Nest,ScrollAllObservable<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\ScrollAll\ScrollAllObservable.cs,ThrowOnBadSearchResult,The length of the statement  "				throw Throw($"scrolling search on {path} with slice {slice} was not valid on scroll iteration {page}"' result?.ApiCall); " is 120.
Long Statement,Nest,NamespacedClientProxy,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\ElasticClient.cs,DoCat,The length of the statement  "				return DoRequest<TRequest' CatResponse<TCatRecord>>(request' request.RequestParameters' r => ElasticClient.ForceTextPlain(r)); " is 126.
Long Statement,Nest,NamespacedClientProxy,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\ElasticClient.cs,DoCat,The length of the statement  "			return DoRequest<TRequest' CatResponse<TCatRecord>>(request' request.RequestParameters' r => ElasticClient.ForceJson(r)); " is 121.
Long Statement,Nest,NamespacedClientProxy,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\ElasticClient.cs,DoCatAsync,The length of the statement  "				return DoRequestAsync<TRequest' CatResponse<TCatRecord>>(request' request.RequestParameters' ct' r => ElasticClient.ForceTextPlain(r)); " is 135.
Long Statement,Nest,NamespacedClientProxy,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\ElasticClient.cs,DoCatAsync,The length of the statement  "			return DoRequestAsync<TRequest' CatResponse<TCatRecord>>(request' request.RequestParameters' ct' r => ElasticClient.ForceJson(r)); " is 130.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			Set<AutoExpandReplicas>(s' settings' UpdatableIndexSettings.AutoExpandReplicas' v => s.AutoExpandReplicas = v' formatterResolver); " is 130.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			Set<TranslogDurability?>(s' settings' UpdatableIndexSettings.TranslogDurability' v => t.Durability = v' formatterResolver); " is 123.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			Set<FileSystemStorageImplementation?>(s' settings' StoreType' v => s.FileSystemStorageImplementation = v' formatterResolver); " is 125.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			SetArray<string[]' string>(s' settings' IndexSortSettings.Fields' v => sorting.Fields = v' v => sorting.Fields = new[] { v }' " is 125.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			SetArray<IndexSortOrder[]' IndexSortOrder>(s' settings' Order' v => sorting.Order = v' v => sorting.Order = new[] { v }' " is 120.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			SetArray<IndexSortMode[]' IndexSortMode>(s' settings' Mode' v => sorting.Mode = v' v => sorting.Mode = new[] { v }' formatterResolver); " is 135.
Long Statement,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,SetKnownIndexSettings,The length of the statement  "			SetArray<IndexSortMissing[]' IndexSortMissing>(s' settings' IndexSortSettings.Missing' v => sorting.Missing = v' v => sorting.Missing = new[] { v }' " is 148.
Long Statement,Nest,AliasPointingToIndexExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\AliasManagement\GetAlias\ElasticClient-GetAliasesPointingToIndex.cs,GetAliasesPointingToIndexAsync,The length of the statement  "			var response = await client.Indices.GetAliasAsync(index' a => a.RequestConfiguration(r => r.ThrowExceptions())).ConfigureAwait(false); " is 134.
Long Statement,Nest,IndicesPointingToAliasExtensions,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\AliasManagement\GetAlias\ElasticClient-GetIndicesPointingToAlias.cs,GetIndicesPointingToAliasAsync,The length of the statement  "			var response = await client.Indices.GetAliasAsync(Indices.All' a => a.Name(alias).RequestConfiguration(r => r.ThrowExceptions())).ConfigureAwait(false); " is 152.
Long Statement,Nest,Relations,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Core\Join\Relations.cs,Add,The length of the statement  "				throw new ArgumentException($"{type} is already mapped as parent' you have to map all it's children as a single entry"); " is 120.
Long Statement,Nest,Relations,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Core\Join\Relations.cs,Add,The length of the statement  "				throw new ArgumentException($"{type} is already mapped as parent' you have to map all it's children as a single entry"); " is 120.
Long Statement,Nest,PropertiesFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\PropertiesFormatter.cs,Serialize,The length of the statement  "			// HACK: Deduplicate property mappings with an instance of Properties that has access to ConnectionSettings to sanitize PropertyName keys " is 137.
Long Statement,Nest,RestoreObservable,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Restore\RestoreObservable\RestoreObservable.cs,Subscribe,The length of the statement  "					throw new ElasticsearchClientException(PipelineFailure.BadResponse' "Failed to restore snapshot."' restoreResponse.ApiCall); " is 124.
Long Statement,Nest,RestoreObservable,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Restore\RestoreObservable\RestoreObservable.cs,Restore,The length of the statement  "			if (observer == null) throw new ArgumentException($"must be an {nameof(IObserver<RecoveryStatusResponse>)}"' nameof(state)); " is 124.
Long Statement,Nest,RestoreStatusHumbleObject,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Restore\RestoreObservable\RestoreObservable.cs,CheckStatus,The length of the statement  "					throw new ElasticsearchClientException(PipelineFailure.BadResponse' "Failed getting recovery status."' recoveryStatus.ApiCall); " is 127.
Long Statement,Nest,SnapshotObservable,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Snapshot\SnapshotObservable\SnapshotObservable.cs,Subscribe,The length of the statement  "					throw new ElasticsearchClientException(PipelineFailure.BadResponse' "Failed to create snapshot."' snapshotResponse.ApiCall); " is 124.
Long Statement,Nest,GeoWKTReader,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,NextEmptyOrOpen,The length of the statement  "				token == TokenType.Word && tokenizer.TokenValue.Equals(WellKnownTextTokenizer.Empty' StringComparison.OrdinalIgnoreCase)) " is 121.
Complex Conditional,Nest,PropertyWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\PropertyWalker.cs,GetUnderlyingType,The conditional expression  "typeInfo.IsGenericType && type.GetGenericArguments().Length == 1  				&& (typeInfo.ImplementedInterfaces.HasAny(t => t == typeof(IEnumerable)) || Nullable.GetUnderlyingType(type) != null)"  is complex.
Virtual Method Call from Constructor,Nest,IntervalsContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\Intervals\IntervalsQuery.cs,IntervalsContainer,The constructor "IntervalsContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,IntervalsContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\Intervals\IntervalsQuery.cs,IntervalsContainer,The constructor "IntervalsContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,SmoothingModelContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Search\Suggesters\PhraseSuggester\SmoothingModel\SmoothingModelContainer.cs,SmoothingModelContainer,The constructor "SmoothingModelContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,ConditionContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ConditionContainer.cs,ConditionContainer,The constructor "ConditionContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,InputContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Input\InputContainer.cs,InputContainer,The constructor "InputContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,ScheduleContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Schedule\ScheduleContainer.cs,ScheduleContainer,The constructor "ScheduleContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,TransformContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Transform\TransformContainer.cs,TransformContainer,The constructor "TransformContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,TriggerContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Trigger\TriggerContainer.cs,TriggerContainer,The constructor "TriggerContainer" calls a virtual method "WrapInContainer".
Virtual Method Call from Constructor,Nest,TriggerEventContainer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Trigger\TriggerEventContainer.cs,TriggerEventContainer,The constructor "TriggerEventContainer" calls a virtual method "WrapInContainer".
Empty Catch Block,Nest,DynamicIndexSettingsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\IndexSettingsFormatter.cs,ConvertToValue,The method has an empty catch block.
Magic Number,Nest,AggregateDictionary,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateDictionary.cs,TypedKeyTokens,The following statement contains a magic number: var tokens = key.Split(TypedKeysSeparator' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following statement contains a magic number: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadBucket,The following statement contains a magic number: switch (value)  				{  					case 0:  						item = GetKeyedBucket(ref reader' formatterResolver);  						break;  					case 1:  					case 2:  						item = GetRangeBucket(ref reader' formatterResolver' null' property.Utf8String());  						break;  					case 3:  						item = GetDateHistogramBucket(ref reader' formatterResolver);  						break;  					case 4:  						item = GetFiltersBucket(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadBucket,The following statement contains a magic number: switch (value)  				{  					case 0:  						item = GetKeyedBucket(ref reader' formatterResolver);  						break;  					case 1:  					case 2:  						item = GetRangeBucket(ref reader' formatterResolver' null' property.Utf8String());  						break;  					case 3:  						item = GetDateHistogramBucket(ref reader' formatterResolver);  						break;  					case 4:  						item = GetFiltersBucket(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadBucket,The following statement contains a magic number: switch (value)  				{  					case 0:  						item = GetKeyedBucket(ref reader' formatterResolver);  						break;  					case 1:  					case 2:  						item = GetRangeBucket(ref reader' formatterResolver' null' property.Utf8String());  						break;  					case 3:  						item = GetDateHistogramBucket(ref reader' formatterResolver);  						break;  					case 4:  						item = GetFiltersBucket(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,GetTopHitsAggregate,The following statement contains a magic number: switch (value)  					{  						case 0:  							var hitsFormatter = formatterResolver.GetFormatter<TotalHits>();  							total = hitsFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							maxScore = reader.ReadNullableDouble();  							break;  						case 2:  							var lazyDocumentsFormatter = formatterResolver.GetFormatter<List<LazyDocument>>();  							topHits = lazyDocumentsFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,CompositeAggregationSourceFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Bucket\Composite\CompositeAggregationSource.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						compositeAggregationSource = formatterResolver.GetFormatter<TermsCompositeAggregationSource>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						compositeAggregationSource = formatterResolver.GetFormatter<DateHistogramCompositeAggregationSource>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						compositeAggregationSource = formatterResolver.GetFormatter<HistogramCompositeAggregationSource>()  							.Deserialize(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (modelValue)  				{  					case 0:  						aggregation.Model = formatterResolver.GetFormatter<LinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 1:  						aggregation.Model = formatterResolver.GetFormatter<SimpleModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 2:  						aggregation.Model = formatterResolver.GetFormatter<EwmaModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 3:  						aggregation.Model = formatterResolver.GetFormatter<HoltLinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 4:  						aggregation.Model = formatterResolver.GetFormatter<HoltWintersModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  				}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (modelValue)  				{  					case 0:  						aggregation.Model = formatterResolver.GetFormatter<LinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 1:  						aggregation.Model = formatterResolver.GetFormatter<SimpleModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 2:  						aggregation.Model = formatterResolver.GetFormatter<EwmaModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 3:  						aggregation.Model = formatterResolver.GetFormatter<HoltLinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 4:  						aggregation.Model = formatterResolver.GetFormatter<HoltWintersModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  				}
Magic Number,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following statement contains a magic number: switch (modelValue)  				{  					case 0:  						aggregation.Model = formatterResolver.GetFormatter<LinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 1:  						aggregation.Model = formatterResolver.GetFormatter<SimpleModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 2:  						aggregation.Model = formatterResolver.GetFormatter<EwmaModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 3:  						aggregation.Model = formatterResolver.GetFormatter<HoltLinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 4:  						aggregation.Model = formatterResolver.GetFormatter<HoltWintersModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\TokenFilters\TokenFilterFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<AsciiFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<CommonGramsTokenFilter>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<DelimitedPayloadTokenFilter>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<DictionaryDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<EdgeNGramTokenFilter>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<ElisionTokenFilter>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<HunspellTokenFilter>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<HyphenationDecompounderTokenFilter>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KeepTypesTokenFilter>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<KeepWordsTokenFilter>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<KeywordMarkerTokenFilter>(ref segmentReader' formatterResolver);  					case 11: return Deserialize<KStemTokenFilter>(ref segmentReader' formatterResolver);  					case 12: return Deserialize<LengthTokenFilter>(ref segmentReader' formatterResolver);  					case 13: return Deserialize<LimitTokenCountTokenFilter>(ref segmentReader' formatterResolver);  					case 14: return Deserialize<LowercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 15: return Deserialize<NGramTokenFilter>(ref segmentReader' formatterResolver);  					case 16: return Deserialize<PatternCaptureTokenFilter>(ref segmentReader' formatterResolver);  					case 17: return Deserialize<PatternReplaceTokenFilter>(ref segmentReader' formatterResolver);  					case 18: return Deserialize<PorterStemTokenFilter>(ref segmentReader' formatterResolver);  					case 19: return Deserialize<PhoneticTokenFilter>(ref segmentReader' formatterResolver);  					case 20: return Deserialize<ReverseTokenFilter>(ref segmentReader' formatterResolver);  					case 21: return Deserialize<ShingleTokenFilter>(ref segmentReader' formatterResolver);  					case 22: return Deserialize<SnowballTokenFilter>(ref segmentReader' formatterResolver);  					case 23: return Deserialize<StemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 24: return Deserialize<StemmerOverrideTokenFilter>(ref segmentReader' formatterResolver);  					case 25: return Deserialize<StopTokenFilter>(ref segmentReader' formatterResolver);  					case 26: return Deserialize<SynonymTokenFilter>(ref segmentReader' formatterResolver);  					case 27: return Deserialize<SynonymGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 28: return Deserialize<TrimTokenFilter>(ref segmentReader' formatterResolver);  					case 29: return Deserialize<TruncateTokenFilter>(ref segmentReader' formatterResolver);  					case 30: return Deserialize<UniqueTokenFilter>(ref segmentReader' formatterResolver);  					case 31: return Deserialize<UppercaseTokenFilter>(ref segmentReader' formatterResolver);  					case 32: return Deserialize<WordDelimiterTokenFilter>(ref segmentReader' formatterResolver);  					case 33: return Deserialize<WordDelimiterGraphTokenFilter>(ref segmentReader' formatterResolver);  					case 34: return Deserialize<FingerprintTokenFilter>(ref segmentReader' formatterResolver);  					case 35: return Deserialize<NoriPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 36: return Deserialize<KuromojiReadingFormTokenFilter>(ref segmentReader' formatterResolver);  					case 37: return Deserialize<KuromojiPartOfSpeechTokenFilter>(ref segmentReader' formatterResolver);  					case 38: return Deserialize<KuromojiStemmerTokenFilter>(ref segmentReader' formatterResolver);  					case 39: return Deserialize<IcuCollationTokenFilter>(ref segmentReader' formatterResolver);  					case 40: return Deserialize<IcuFoldingTokenFilter>(ref segmentReader' formatterResolver);  					case 41: return Deserialize<IcuNormalizationTokenFilter>(ref segmentReader' formatterResolver);  					case 42: return Deserialize<IcuTransformTokenFilter>(ref segmentReader' formatterResolver);  					case 43: return Deserialize<ConditionTokenFilter>(ref segmentReader' formatterResolver);  					case 44: return Deserialize<MultiplexerTokenFilter>(ref segmentReader' formatterResolver);  					case 45: return Deserialize<PredicateTokenFilter>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,TokenizerFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\Tokenizers\TokenizerFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0: return Deserialize<CharGroupTokenizer>(ref segmentReader' formatterResolver);  					case 1: return Deserialize<EdgeNGramTokenizer>(ref segmentReader' formatterResolver);  					case 2: return Deserialize<NGramTokenizer>(ref segmentReader' formatterResolver);  					case 3: return Deserialize<PathHierarchyTokenizer>(ref segmentReader' formatterResolver);  					case 4: return Deserialize<PatternTokenizer>(ref segmentReader' formatterResolver);  					case 5: return Deserialize<StandardTokenizer>(ref segmentReader' formatterResolver);  					case 6: return Deserialize<UaxEmailUrlTokenizer>(ref segmentReader' formatterResolver);  					case 7: return Deserialize<WhitespaceTokenizer>(ref segmentReader' formatterResolver);  					case 8: return Deserialize<KuromojiTokenizer>(ref segmentReader' formatterResolver);  					case 9: return Deserialize<IcuTokenizer>(ref segmentReader' formatterResolver);  					case 10: return Deserialize<NoriTokenizer>(ref segmentReader' formatterResolver);  					default: return null;  				}
Magic Number,Nest,CatFielddataRecordFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatFielddata\CatFielddataRecordJsonConverter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							record.Id = reader.ReadString();  							break;  						case 1:  							record.Node = reader.ReadString();  							break;  						case 2:  							record.Host = reader.ReadString();  							break;  						case 3:  							record.Ip = reader.ReadString();  							break;  						case 4:  							record.Field = reader.ReadString();  							break;  						case 5:  							record.Size = reader.ReadString();  							break;  					}
Magic Number,Nest,CatFielddataRecordFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatFielddata\CatFielddataRecordJsonConverter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							record.Id = reader.ReadString();  							break;  						case 1:  							record.Node = reader.ReadString();  							break;  						case 2:  							record.Host = reader.ReadString();  							break;  						case 3:  							record.Ip = reader.ReadString();  							break;  						case 4:  							record.Field = reader.ReadString();  							break;  						case 5:  							record.Size = reader.ReadString();  							break;  					}
Magic Number,Nest,CatFielddataRecordFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatFielddata\CatFielddataRecordJsonConverter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							record.Id = reader.ReadString();  							break;  						case 1:  							record.Node = reader.ReadString();  							break;  						case 2:  							record.Host = reader.ReadString();  							break;  						case 3:  							record.Ip = reader.ReadString();  							break;  						case 4:  							record.Field = reader.ReadString();  							break;  						case 5:  							record.Size = reader.ReadString();  							break;  					}
Magic Number,Nest,CatFielddataRecordFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatFielddata\CatFielddataRecordJsonConverter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							record.Id = reader.ReadString();  							break;  						case 1:  							record.Node = reader.ReadString();  							break;  						case 2:  							record.Host = reader.ReadString();  							break;  						case 3:  							record.Ip = reader.ReadString();  							break;  						case 4:  							record.Field = reader.ReadString();  							break;  						case 5:  							record.Size = reader.ReadString();  							break;  					}
Magic Number,Nest,CatHelpResponseBuilder,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatHelpResponseBuilder.cs,DeserializeResponseAsync,The following statement contains a magic number: await stream.CopyToAsync(ms' 81920' ctx).ConfigureAwait(false);
Magic Number,Nest,CatResponseBuilder<TCatRecord>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatResponseBuilder.cs,DeserializeResponse,The following statement contains a magic number: response.HttpStatusCode == 404
Magic Number,Nest,CatResponseBuilder<TCatRecord>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatResponseBuilder.cs,DeserializeResponseAsync,The following statement contains a magic number: response.HttpStatusCode == 404
Magic Number,Nest,ClusterRerouteCommandFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cluster\ClusterReroute\Commands\ClusterRerouteCommandFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							command = Deserialize<AllocateReplicaClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 1:  							command = Deserialize<AllocateEmptyPrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 2:  							command = Deserialize<AllocateStalePrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 3:  							command = Deserialize<MoveClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 4:  							command = Deserialize<CancelClusterRerouteCommand>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ClusterRerouteCommandFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cluster\ClusterReroute\Commands\ClusterRerouteCommandFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							command = Deserialize<AllocateReplicaClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 1:  							command = Deserialize<AllocateEmptyPrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 2:  							command = Deserialize<AllocateStalePrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 3:  							command = Deserialize<MoveClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 4:  							command = Deserialize<CancelClusterRerouteCommand>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ClusterRerouteCommandFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cluster\ClusterReroute\Commands\ClusterRerouteCommandFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							command = Deserialize<AllocateReplicaClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 1:  							command = Deserialize<AllocateEmptyPrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 2:  							command = Deserialize<AllocateStalePrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 3:  							command = Deserialize<MoveClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 4:  							command = Deserialize<CancelClusterRerouteCommand>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,DocumentPath<T>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\DocumentPath\DocumentPath.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (Self.Id?.GetHashCode() ?? 0);
Magic Number,Nest,Field,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Field\Field.cs,ParseFieldName,The following statement contains a magic number: var parts = name.Split(new[] { '^' }' 2' StringSplitOptions.RemoveEmptyEntries);
Magic Number,Nest,Field,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Field\Field.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_type?.GetHashCode() ?? 0);
Magic Number,Nest,FieldFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Field\FieldFormatter.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.Null:  					reader.ReadNext();  					return null;  				case JsonToken.String:  					return new Field(reader.ReadString());  				case JsonToken.BeginObject:  					var count = 0;  					string field = null;  					double? boost = null;  					string format = null;    					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (Fields.TryGetValue(property' out var value))  						{  							switch (value)  							{  								case 0:  									field = reader.ReadString();  									break;  								case 1:  									boost = reader.ReadDouble();  									break;  								case 2:  									format = reader.ReadString();  									break;  							}  						}  						else  							reader.ReadNextBlock();  					}    					return new Field(field' boost' format);  				default:  					throw new JsonParsingException($"Cannot deserialize {typeof(Field).FullName} from {token}");  			}
Magic Number,Nest,Id,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Id\Id.cs,Id,The following statement contains a magic number: Tag = 2;
Magic Number,Nest,Id,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Id\Id.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (StringValue?.GetHashCode() ?? 0);
Magic Number,Nest,Id,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Id\Id.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (LongValue?.GetHashCode() ?? 0);
Magic Number,Nest,Id,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Id\Id.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Document?.GetHashCode() ?? 0);
Magic Number,Nest,Ids,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Id\Ids.cs,GetHashCode,The following statement contains a magic number: hc = hc * 17 + id.GetHashCode();
Magic Number,Nest,IndexName,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\IndexName\IndexName.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Name?.GetHashCode() ?? Type?.GetHashCode() ?? 0);
Magic Number,Nest,IndexName,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\IndexName\IndexName.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Cluster?.GetHashCode() ?? 0);
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,Routing,The following statement contains a magic number: Tag = 2;
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,Routing,The following statement contains a magic number: Tag = 4;
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,Equals,The following statement contains a magic number: switch (Tag)  				{  					case 0:  						var t = DocumentGetter();  						var o = other.DocumentGetter();  						return t?.Equals(o) ?? false;  					case 4: return Document?.Equals(other.Document) ?? false;  					default:  						return StringEquals(StringOrLongValue' other.StringOrLongValue);  				}
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (StringValue?.GetHashCode() ?? 0);
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (LongValue?.GetHashCode() ?? 0);
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (DocumentGetter?.GetHashCode() ?? 0);
Magic Number,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Document?.GetHashCode() ?? 0);
Magic Number,Nest,Name,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Name\Name.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Value?.GetHashCode() ?? 0);
Magic Number,Nest,PropertyName,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\PropertyName\PropertyName.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (_comparisonValue?.GetHashCode() ?? 0);
Magic Number,Nest,PropertyName,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\PropertyName\PropertyName.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (_type?.GetHashCode() ?? 0);
Magic Number,Nest,RelationName,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\RelationName\RelationName.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Name?.GetHashCode() ?? Type?.GetHashCode() ?? 0);
Magic Number,Nest,TaskId,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\TaskId\TaskId.cs,TaskId,The following statement contains a magic number: tokens.Length != 2
Magic Number,Nest,TaskId,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\TaskId\TaskId.cs,GetHashCode,The following statement contains a magic number: return (NodeId.GetHashCode() * 397) ^ TaskNumber.GetHashCode();
Magic Number,Nest,ProducerConsumerBackPressure,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Reactive\ProducerConsumerBackPressure.cs,ProducerConsumerBackPressure,The following statement contains a magic number: _backPressureFactor = backPressureFactor.GetValueOrDefault(4);
Magic Number,Nest,UrlLookup,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Request\UrlLookup.cs,UrlLookup,The following statement contains a magic number: _length = _route.Length + (_parts.Length * 4);
Magic Number,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,ToMinThreeDecimalPlaces,The following statement contains a magic number: var builder = StringBuilderCache.Acquire(33);
Magic Number,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,ToMinThreeDecimalPlaces,The following statement contains a magic number: var diff = 23 - format.Length;
Magic Number,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,ToMinThreeDecimalPlaces,The following statement contains a magic number: format.Length > 20 && format.Length < 23
Magic Number,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,ToMinThreeDecimalPlaces,The following statement contains a magic number: format.Length > 20 && format.Length < 23
Magic Number,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,AppendTwoDigitNumber,The following statement contains a magic number: result.Append((char)('0' + (val / 10)));
Magic Number,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,AppendTwoDigitNumber,The following statement contains a magic number: result.Append((char)('0' + (val % 10)));
Magic Number,Nest,ScriptFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Scripting\ScriptFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  						case 1:  							script = new InlineScript(reader.ReadString());  							break;  						case 2:  							script = new IndexedScript(reader.ReadString());  							break;  						case 3:  							language = reader.ReadString();  							break;  						case 4:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScriptFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Scripting\ScriptFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  						case 1:  							script = new InlineScript(reader.ReadString());  							break;  						case 2:  							script = new IndexedScript(reader.ReadString());  							break;  						case 3:  							language = reader.ReadString();  							break;  						case 4:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScriptFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Scripting\ScriptFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  						case 1:  							script = new InlineScript(reader.ReadString());  							break;  						case 2:  							script = new IndexedScript(reader.ReadString());  							break;  						case 3:  							language = reader.ReadString();  							break;  						case 4:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,SortFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Sorting\SortFormatter.cs,Serialize,The following statement contains a magic number: switch (value.SortKey.Name ?? string.Empty)  			{  				case "_script":  					writer.WritePropertyName("_script");  					var scriptSort = (IScriptSort)value;  					var scriptSortFormatter = formatterResolver.GetFormatter<IScriptSort>();  					scriptSortFormatter.Serialize(ref writer' scriptSort' formatterResolver);  					break;  				case "_geo_distance":  					var geo = value as IGeoDistanceSort;  					writer.WritePropertyName(geo.SortKey.Name);    					var innerWriter = new JsonWriter();  					var formatter = DynamicObjectResolver.ExcludeNullCamelCase.GetFormatter<IGeoDistanceSort>();  					formatter.Serialize(ref innerWriter' geo' formatterResolver);    					var buffer = innerWriter.GetBuffer();  					// get all the written bytes except the closing }  					for (var i = buffer.Offset; i < buffer.Count - 1; i++)  						writer.WriteRawUnsafe(buffer.Array[i]);    					// does the IGeoDistanceSort have other properties set i.e. is it more than simply {} ?  					if (buffer.Count > 2)  						writer.WriteValueSeparator();    					writer.WritePropertyName(settings.Inferrer.Field(geo.Field));  					var geoFormatter = formatterResolver.GetFormatter<IEnumerable<GeoLocation>>();  					geoFormatter.Serialize(ref writer' geo.Points' formatterResolver);  					writer.WriteEndObject();  					break;  				default:  					writer.WritePropertyName(settings.Inferrer.Field(value.SortKey));  					var sortFormatter = DynamicObjectResolver.ExcludeNullCamelCase.GetFormatter<IFieldSort>();  					sortFormatter.Serialize(ref writer' value as IFieldSort' formatterResolver);  					break;  			}
Magic Number,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,ExponentFormat,The following statement contains a magic number: var exponent = (int)((bits >> 52) & 0x7ffL);
Magic Number,Nest,Time,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\TimeUnit\Time.cs,ExponentFormat,The following statement contains a magic number: return new string('#'' Math.Max(2' exponent));
Magic Number,Nest,BulkResponseItemFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Bulk\BulkResponseItem\BulkResponseItemFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						bulkResponseItem = formatterResolver.GetFormatter<BulkDeleteResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						bulkResponseItem = formatterResolver.GetFormatter<BulkUpdateResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						bulkResponseItem = formatterResolver.GetFormatter<BulkIndexResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						bulkResponseItem = formatterResolver.GetFormatter<BulkCreateResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,BulkResponseItemFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Bulk\BulkResponseItem\BulkResponseItemFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						bulkResponseItem = formatterResolver.GetFormatter<BulkDeleteResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						bulkResponseItem = formatterResolver.GetFormatter<BulkUpdateResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						bulkResponseItem = formatterResolver.GetFormatter<BulkIndexResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						bulkResponseItem = formatterResolver.GetFormatter<BulkCreateResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,CreateBackPressure,The following statement contains a magic number: var searchSize = scrollAll?.Search?.Size ?? 10;
Magic Number,Nest,ReindexObservable<TSource;TTarget>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Reindex\ReindexObservable.cs,ScrollAll,The following statement contains a magic number: var scroll = _reindexRequest.ScrollAll?.ScrollTime ?? TimeSpan.FromMinutes(2);
Magic Number,Nest,AutoExpandReplicas,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\IndexSettings\Settings\AutoExpandReplicas.cs,Create,The following statement contains a magic number: expandReplicaParts.Length != 2
Magic Number,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<BM25Similarity>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<LMDirichletSimilarity>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<DFRSimilarity>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<DFISimilarity>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<IBSimilarity>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LMJelinekMercerSimilarity>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<ScriptedSimilarity>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<BM25Similarity>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<LMDirichletSimilarity>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<DFRSimilarity>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<DFISimilarity>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<IBSimilarity>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LMJelinekMercerSimilarity>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<ScriptedSimilarity>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<BM25Similarity>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<LMDirichletSimilarity>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<DFRSimilarity>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<DFISimilarity>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<IBSimilarity>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LMJelinekMercerSimilarity>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<ScriptedSimilarity>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<BM25Similarity>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<LMDirichletSimilarity>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<DFRSimilarity>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<DFISimilarity>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<IBSimilarity>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LMJelinekMercerSimilarity>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<ScriptedSimilarity>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<BM25Similarity>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<LMDirichletSimilarity>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<DFRSimilarity>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<DFISimilarity>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<IBSimilarity>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LMJelinekMercerSimilarity>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<ScriptedSimilarity>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,AliasActionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\AliasManagement\Alias\Actions\IAliasAction.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						aliasAction = Deserialize<AliasAddAction>(ref segmentReader' formatterResolver);  						break;  					case 1:  						aliasAction = Deserialize<AliasRemoveAction>(ref segmentReader' formatterResolver);  						break;  					case 2:  						aliasAction = Deserialize<AliasRemoveIndexAction>(ref segmentReader' formatterResolver);  						break;  				}
Magic Number,Nest,FieldMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\MappingManagement\GetFieldMapping\FieldMappingFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<AllField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 1:  							mapping = formatterResolver.GetFormatter<SourceField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							mapping = formatterResolver.GetFormatter<RoutingField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<IndexField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 4:  							mapping = formatterResolver.GetFormatter<SizeField>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,FieldMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\MappingManagement\GetFieldMapping\FieldMappingFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<AllField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 1:  							mapping = formatterResolver.GetFormatter<SourceField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							mapping = formatterResolver.GetFormatter<RoutingField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<IndexField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 4:  							mapping = formatterResolver.GetFormatter<SizeField>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,FieldMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\MappingManagement\GetFieldMapping\FieldMappingFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<AllField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 1:  							mapping = formatterResolver.GetFormatter<SourceField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							mapping = formatterResolver.GetFormatter<RoutingField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<IndexField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 4:  							mapping = formatterResolver.GetFormatter<SizeField>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Magic Number,Nest,DynamicMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\DynamicMapping.cs,Deserialize,The following statement contains a magic number: switch (token)  			{  				case JsonToken.True:  				case JsonToken.False:  					return new Union<bool' DynamicMapping>(reader.ReadBoolean());  				case JsonToken.String:  					var segment = reader.ReadStringSegmentUnsafe();  					if (Values.TryGetValue(segment' out var value))  					{  						switch (value)  						{  							case 0:  								return new Union<bool' DynamicMapping>(true);  							case 1:  								return new Union<bool' DynamicMapping>(false);  							case 2:  								return new Union<bool' DynamicMapping>(DynamicMapping.Strict);  						}  					}    					return null;  				default:  					throw new JsonParsingException($"Cannot parse Union<bool' DynamicMapping> from token '{token}'");  			}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Magic Number,Nest,PropertyWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\PropertyWalker.cs,InferProperty,The following statement contains a magic number: return new TextProperty  				{  					Fields = new Properties  					{  						{  							"keyword"' new KeywordProperty  							{  								IgnoreAbove = 256  							}  						}  					}  				};
Magic Number,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var formatter = formatterResolver.GetFormatter<QueryContainer>();  							filter = formatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							weight = reader.ReadDouble();  							break;  						case 2:  							var innerCount = 0;  							MultiValueMode? multiValueMode = null;  							IDecayFunction decayFunction = null;  							while (reader.ReadIsInObject(ref innerCount))  							{  								var functionPropertyName = reader.ReadPropertyName();  								if (functionPropertyName == "multi_value_mode")  									multiValueMode = formatterResolver.GetFormatter<MultiValueMode>()  										.Deserialize(ref reader' formatterResolver);  								else  								{  									var name = propertyName.Utf8String();  									decayFunction = ReadDecayFunction(ref reader' name' formatterResolver);  									decayFunction.Field = functionPropertyName;  								}  							}    							if (decayFunction != null)  							{  								decayFunction.MultiValueMode = multiValueMode;  								function = decayFunction;  							}  							break;  						case 3:  							var randomScoreFormatter = formatterResolver.GetFormatter<RandomScoreFunction>();  							function = randomScoreFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							var fieldValueFormatter = formatterResolver.GetFormatter<FieldValueFactorFunction>();  							function = fieldValueFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							var scriptFormatter = formatterResolver.GetFormatter<ScriptScoreFunction>();  							function = scriptFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var formatter = formatterResolver.GetFormatter<QueryContainer>();  							filter = formatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							weight = reader.ReadDouble();  							break;  						case 2:  							var innerCount = 0;  							MultiValueMode? multiValueMode = null;  							IDecayFunction decayFunction = null;  							while (reader.ReadIsInObject(ref innerCount))  							{  								var functionPropertyName = reader.ReadPropertyName();  								if (functionPropertyName == "multi_value_mode")  									multiValueMode = formatterResolver.GetFormatter<MultiValueMode>()  										.Deserialize(ref reader' formatterResolver);  								else  								{  									var name = propertyName.Utf8String();  									decayFunction = ReadDecayFunction(ref reader' name' formatterResolver);  									decayFunction.Field = functionPropertyName;  								}  							}    							if (decayFunction != null)  							{  								decayFunction.MultiValueMode = multiValueMode;  								function = decayFunction;  							}  							break;  						case 3:  							var randomScoreFormatter = formatterResolver.GetFormatter<RandomScoreFunction>();  							function = randomScoreFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							var fieldValueFormatter = formatterResolver.GetFormatter<FieldValueFactorFunction>();  							function = fieldValueFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							var scriptFormatter = formatterResolver.GetFormatter<ScriptScoreFunction>();  							function = scriptFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var formatter = formatterResolver.GetFormatter<QueryContainer>();  							filter = formatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							weight = reader.ReadDouble();  							break;  						case 2:  							var innerCount = 0;  							MultiValueMode? multiValueMode = null;  							IDecayFunction decayFunction = null;  							while (reader.ReadIsInObject(ref innerCount))  							{  								var functionPropertyName = reader.ReadPropertyName();  								if (functionPropertyName == "multi_value_mode")  									multiValueMode = formatterResolver.GetFormatter<MultiValueMode>()  										.Deserialize(ref reader' formatterResolver);  								else  								{  									var name = propertyName.Utf8String();  									decayFunction = ReadDecayFunction(ref reader' name' formatterResolver);  									decayFunction.Field = functionPropertyName;  								}  							}    							if (decayFunction != null)  							{  								decayFunction.MultiValueMode = multiValueMode;  								function = decayFunction;  							}  							break;  						case 3:  							var randomScoreFormatter = formatterResolver.GetFormatter<RandomScoreFunction>();  							function = randomScoreFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							var fieldValueFormatter = formatterResolver.GetFormatter<FieldValueFactorFunction>();  							function = fieldValueFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							var scriptFormatter = formatterResolver.GetFormatter<ScriptScoreFunction>();  							function = scriptFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var formatter = formatterResolver.GetFormatter<QueryContainer>();  							filter = formatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							weight = reader.ReadDouble();  							break;  						case 2:  							var innerCount = 0;  							MultiValueMode? multiValueMode = null;  							IDecayFunction decayFunction = null;  							while (reader.ReadIsInObject(ref innerCount))  							{  								var functionPropertyName = reader.ReadPropertyName();  								if (functionPropertyName == "multi_value_mode")  									multiValueMode = formatterResolver.GetFormatter<MultiValueMode>()  										.Deserialize(ref reader' formatterResolver);  								else  								{  									var name = propertyName.Utf8String();  									decayFunction = ReadDecayFunction(ref reader' name' formatterResolver);  									decayFunction.Field = functionPropertyName;  								}  							}    							if (decayFunction != null)  							{  								decayFunction.MultiValueMode = multiValueMode;  								function = decayFunction;  							}  							break;  						case 3:  							var randomScoreFormatter = formatterResolver.GetFormatter<RandomScoreFunction>();  							function = randomScoreFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							var fieldValueFormatter = formatterResolver.GetFormatter<FieldValueFactorFunction>();  							function = fieldValueFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							var scriptFormatter = formatterResolver.GetFormatter<ScriptScoreFunction>();  							function = scriptFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,SimpleQueryStringFlagsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\FullText\SimpleQueryString\SimpleQueryStringFlags.cs,Serialize,The following statement contains a magic number: var list = new List<string>(13);
Magic Number,Nest,GeoBoundingBoxQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\BoundingBox\GeoBoundingBoxQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Type = formatterResolver.GetFormatter<GeoExecution>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,GeoBoundingBoxQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\BoundingBox\GeoBoundingBoxQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Type = formatterResolver.GetFormatter<GeoExecution>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,GeoDistanceQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Distance\GeoDistanceQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Distance = formatterResolver.GetFormatter<Distance>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							query.DistanceType = formatterResolver.GetFormatter<GeoDistanceType>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,GeoDistanceQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Distance\GeoDistanceQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Distance = formatterResolver.GetFormatter<Distance>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							query.DistanceType = formatterResolver.GetFormatter<GeoDistanceType>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,GeoDistanceQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Distance\GeoDistanceQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Distance = formatterResolver.GetFormatter<Distance>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							query.DistanceType = formatterResolver.GetFormatter<GeoDistanceType>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,GeoCoordinateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoCoordinateFormatter.cs,Deserialize,The following statement contains a magic number: switch (doubles.Length)  			{  				case 2:  					return new GeoCoordinate(doubles[1]' doubles[0]);  				case 3:  					return new GeoCoordinate(doubles[1]' doubles[0]' doubles[2]);  				default:  					return null;  			}
Magic Number,Nest,GeoCoordinateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoCoordinateFormatter.cs,Deserialize,The following statement contains a magic number: switch (doubles.Length)  			{  				case 2:  					return new GeoCoordinate(doubles[1]' doubles[0]);  				case 3:  					return new GeoCoordinate(doubles[1]' doubles[0]' doubles[2]);  				default:  					return null;  			}
Magic Number,Nest,GeoCoordinateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoCoordinateFormatter.cs,Deserialize,The following statement contains a magic number: switch (doubles.Length)  			{  				case 2:  					return new GeoCoordinate(doubles[1]' doubles[0]);  				case 3:  					return new GeoCoordinate(doubles[1]' doubles[0]' doubles[2]);  				default:  					return null;  			}
Magic Number,Nest,GeoLocationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoLocationFormatter.cs,Serialize,The following statement contains a magic number: switch (value.Format)  			{  				case GeoFormat.GeoJson:  					writer.WriteBeginObject();  					writer.WritePropertyName("lat");  					writer.WriteDouble(value.Latitude);  					writer.WriteValueSeparator();  					writer.WritePropertyName("lon");  					writer.WriteDouble(value.Longitude);  					writer.WriteEndObject();  					break;  				case GeoFormat.WellKnownText:  					var lon = value.Longitude.ToString(CultureInfo.InvariantCulture);  					var lat = value.Latitude.ToString(CultureInfo.InvariantCulture);  					var length = GeoShapeType.Point.Length + lon.Length + lat.Length + 4;  					var builder = new StringBuilder(length)  						.Append(GeoShapeType.Point)  						.Append(" (")  						.Append(lon)  						.Append(" ")  						.Append(lat)  						.Append(")");  					writer.WriteString(builder.ToString());  					break;  			}
Magic Number,Nest,GeoPolygonQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Polygon\GeoPolygonQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,GeoShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							boost = reader.ReadDouble();  							break;  						case 1:  							name = reader.ReadString();  							break;  						case 2:  							ignoreUnmapped = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,WellKnownTextTokenizer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,WellKnownTextTokenizer,The following statement contains a magic number: Chars(128 + 32' 255' CharacterType.Alpha);
Magic Number,Nest,WellKnownTextTokenizer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,WellKnownTextTokenizer,The following statement contains a magic number: Chars(128 + 32' 255' CharacterType.Alpha);
Magic Number,Nest,WellKnownTextTokenizer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,WellKnownTextTokenizer,The following statement contains a magic number: Chars(128 + 32' 255' CharacterType.Alpha);
Magic Number,Nest,MultiTermQueryRewrite,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\MultiTermQueryRewrite\RewriteMultiTerm.cs,GetHashCode,The following statement contains a magic number: return ((int)Rewrite * 397) ^ Size.GetHashCode();
Magic Number,Nest,DistanceFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\DistanceFeature\DistanceFeatureQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							query.Origin = OriginUnionFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							query.Pivot = PivotUnionFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Boost = reader.ReadDouble();  							break;  					}
Magic Number,Nest,DistanceFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\DistanceFeature\DistanceFeatureQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							query.Origin = OriginUnionFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							query.Pivot = PivotUnionFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Boost = reader.ReadDouble();  							break;  					}
Magic Number,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Function = DeserializeScoreFunction<RankFeatureSaturationFunction>(ref reader' formatterResolver);  							break;  						case 4:  							query.Function = DeserializeScoreFunction<RankFeatureLogarithmFunction>(ref reader' formatterResolver);  							break;  						case 5:  							query.Function = DeserializeScoreFunction<RankFeatureSigmoidFunction>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Function = DeserializeScoreFunction<RankFeatureSaturationFunction>(ref reader' formatterResolver);  							break;  						case 4:  							query.Function = DeserializeScoreFunction<RankFeatureLogarithmFunction>(ref reader' formatterResolver);  							break;  						case 5:  							query.Function = DeserializeScoreFunction<RankFeatureSigmoidFunction>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Function = DeserializeScoreFunction<RankFeatureSaturationFunction>(ref reader' formatterResolver);  							break;  						case 4:  							query.Function = DeserializeScoreFunction<RankFeatureLogarithmFunction>(ref reader' formatterResolver);  							break;  						case 5:  							query.Function = DeserializeScoreFunction<RankFeatureSigmoidFunction>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Function = DeserializeScoreFunction<RankFeatureSaturationFunction>(ref reader' formatterResolver);  							break;  						case 4:  							query.Function = DeserializeScoreFunction<RankFeatureLogarithmFunction>(ref reader' formatterResolver);  							break;  						case 5:  							query.Function = DeserializeScoreFunction<RankFeatureSigmoidFunction>(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Shape\ShapeQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							boost = reader.ReadDouble();  							break;  						case 1:  							name = reader.ReadString();  							break;  						case 2:  							ignoreUnmapped = reader.ReadBoolean();  							break;  					}
Magic Number,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Magic Number,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Magic Number,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Magic Number,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Magic Number,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Magic Number,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Magic Number,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (innerValue)  						{  							case 0:  							case 1:  								isDate = true;  								break;  							case 2:  							case 3:  							case 4:  							case 5:  								var token = segmentReader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  									case JsonToken.Null:  										if (!isDate)  										{  											var valueSegment = segmentReader.ReadStringSegmentUnsafe();  											isDate = valueSegment.IsDateTime(formatterResolver' out _) ||  												valueSegment.ContainsDateMathSeparator() && DateMath.IsValidDateMathString(valueSegment.Utf8String());  										}  										break;  									case JsonToken.Number:  										if (!isDouble)  										{  											var numberSegment = segmentReader.ReadNumberSegment();  											if (numberSegment.IsDouble())  												isDouble = true;  											else  												isLong = true;  										}  										break;  								}  								break;  						}
Magic Number,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (innerValue)  						{  							case 0:  							case 1:  								isDate = true;  								break;  							case 2:  							case 3:  							case 4:  							case 5:  								var token = segmentReader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  									case JsonToken.Null:  										if (!isDate)  										{  											var valueSegment = segmentReader.ReadStringSegmentUnsafe();  											isDate = valueSegment.IsDateTime(formatterResolver' out _) ||  												valueSegment.ContainsDateMathSeparator() && DateMath.IsValidDateMathString(valueSegment.Utf8String());  										}  										break;  									case JsonToken.Number:  										if (!isDouble)  										{  											var numberSegment = segmentReader.ReadNumberSegment();  											if (numberSegment.IsDouble())  												isDouble = true;  											else  												isLong = true;  										}  										break;  								}  								break;  						}
Magic Number,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (innerValue)  						{  							case 0:  							case 1:  								isDate = true;  								break;  							case 2:  							case 3:  							case 4:  							case 5:  								var token = segmentReader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  									case JsonToken.Null:  										if (!isDate)  										{  											var valueSegment = segmentReader.ReadStringSegmentUnsafe();  											isDate = valueSegment.IsDateTime(formatterResolver' out _) ||  												valueSegment.ContainsDateMathSeparator() && DateMath.IsValidDateMathString(valueSegment.Utf8String());  										}  										break;  									case JsonToken.Number:  										if (!isDouble)  										{  											var numberSegment = segmentReader.ReadNumberSegment();  											if (numberSegment.IsDouble())  												isDouble = true;  											else  												isLong = true;  										}  										break;  								}  								break;  						}
Magic Number,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,The following statement contains a magic number: switch (innerValue)  						{  							case 0:  							case 1:  								isDate = true;  								break;  							case 2:  							case 3:  							case 4:  							case 5:  								var token = segmentReader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  									case JsonToken.Null:  										if (!isDate)  										{  											var valueSegment = segmentReader.ReadStringSegmentUnsafe();  											isDate = valueSegment.IsDateTime(formatterResolver' out _) ||  												valueSegment.ContainsDateMathSeparator() && DateMath.IsValidDateMathString(valueSegment.Utf8String());  										}  										break;  									case JsonToken.Number:  										if (!isDouble)  										{  											var numberSegment = segmentReader.ReadNumberSegment();  											if (numberSegment.IsDouble())  												isDouble = true;  											else  												isLong = true;  										}  										break;  								}  								break;  						}
Magic Number,Nest,TermsQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Terms\TermsQueryFormatter.cs,ReadTerms,The following statement contains a magic number: switch (value)  						{  							case 0:  								fieldLookup.Id = formatterResolver.GetFormatter<Id>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								fieldLookup.Index = formatterResolver.GetFormatter<IndexName>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								fieldLookup.Path = formatterResolver.GetFormatter<Field>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								fieldLookup.Routing = formatterResolver.GetFormatter<Routing>()  									.Deserialize(ref reader' formatterResolver);  								break;  						}
Magic Number,Nest,TermsQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Terms\TermsQueryFormatter.cs,ReadTerms,The following statement contains a magic number: switch (value)  						{  							case 0:  								fieldLookup.Id = formatterResolver.GetFormatter<Id>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								fieldLookup.Index = formatterResolver.GetFormatter<IndexName>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								fieldLookup.Path = formatterResolver.GetFormatter<Field>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								fieldLookup.Routing = formatterResolver.GetFormatter<Routing>()  									.Deserialize(ref reader' formatterResolver);  								break;  						}
Magic Number,Nest,DslPrettyPrintVisitor,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Visitor\DslPrettyPrintVisitor.cs,Write,The following statement contains a magic number: var indent = new string('-'' (Depth - 1) * 2);
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following statement contains a magic number: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Magic Number,Nest,FieldRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Field\FieldRuleBaseFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var username = reader.ReadString();  							fieldRule = new UsernameRule(username);  							break;  						case 1:  							var dn = reader.ReadString();  							fieldRule = new DistinguishedNameRule(dn);  							break;  						case 2:  							var realm = reader.ReadString();  							fieldRule = new RealmRule(realm);  							break;  						case 3:  							var formatter = formatterResolver.GetFormatter<IEnumerable<string>>();  							var groups = formatter.Deserialize(ref reader' formatterResolver);  							fieldRule = new GroupsRule(groups);  							break;  					}
Magic Number,Nest,FieldRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Field\FieldRuleBaseFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var username = reader.ReadString();  							fieldRule = new UsernameRule(username);  							break;  						case 1:  							var dn = reader.ReadString();  							fieldRule = new DistinguishedNameRule(dn);  							break;  						case 2:  							var realm = reader.ReadString();  							fieldRule = new RealmRule(realm);  							break;  						case 3:  							var formatter = formatterResolver.GetFormatter<IEnumerable<string>>();  							var groups = formatter.Deserialize(ref reader' formatterResolver);  							fieldRule = new GroupsRule(groups);  							break;  					}
Magic Number,Nest,RoleMappingRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Role\RoleMappingRuleBaseFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var allRules = SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  							rule = new AllRoleMappingRule(allRules);  							break;  						case 1:  							var anyRules = SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  							rule = new AnyRoleMappingRule(anyRules);  							break;  						case 2:  							var fieldRule = FieldRuleBaseFormatter.Deserialize(ref reader' formatterResolver);  							rule = new FieldRoleMappingRule(fieldRule);  							break;  						case 3:  							var exceptRule = Deserialize(ref reader' formatterResolver);  							rule = new ExceptRoleMappingRole(exceptRule);  							break;  					}
Magic Number,Nest,RoleMappingRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Role\RoleMappingRuleBaseFormatter.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							var allRules = SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  							rule = new AllRoleMappingRule(allRules);  							break;  						case 1:  							var anyRules = SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  							rule = new AnyRoleMappingRule(anyRules);  							break;  						case 2:  							var fieldRule = FieldRuleBaseFormatter.Deserialize(ref reader' formatterResolver);  							rule = new FieldRoleMappingRule(fieldRule);  							break;  						case 3:  							var exceptRule = Deserialize(ref reader' formatterResolver);  							rule = new ExceptRoleMappingRole(exceptRule);  							break;  					}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Magic Number,Nest,ArrayCompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ArrayCompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (comparisonValue)  			{  				case 0: return new EqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 1: return new NotEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 2: return new GreaterThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 3: return new GreaterThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 4: return new LowerThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 5: return new LowerThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				default: return null;  			}
Magic Number,Nest,ArrayCompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ArrayCompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (comparisonValue)  			{  				case 0: return new EqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 1: return new NotEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 2: return new GreaterThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 3: return new GreaterThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 4: return new LowerThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 5: return new LowerThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				default: return null;  			}
Magic Number,Nest,ArrayCompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ArrayCompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (comparisonValue)  			{  				case 0: return new EqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 1: return new NotEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 2: return new GreaterThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 3: return new GreaterThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 4: return new LowerThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 5: return new LowerThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				default: return null;  			}
Magic Number,Nest,ArrayCompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ArrayCompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (comparisonValue)  			{  				case 0: return new EqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 1: return new NotEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 2: return new GreaterThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 3: return new GreaterThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 4: return new LowerThanArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				case 5: return new LowerThanOrEqualArrayCondition(arrayPath' path' value) { Quantifier = quantifier };  				default: return null;  			}
Magic Number,Nest,CompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\CompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								condition = new EqualCondition(path' comparisonValue);  								break;  							case 1:  								condition = new NotEqualCondition(path' value);  								break;  							case 2:  								condition = new GreaterThanCondition(path' value);  								break;  							case 3:  								condition = new GreaterThanOrEqualCondition(path' value);  								break;  							case 4:  								condition = new LowerThanCondition(path' value);  								break;  							case 5:  								condition = new LowerThanOrEqualCondition(path' value);  								break;  						}
Magic Number,Nest,CompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\CompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								condition = new EqualCondition(path' comparisonValue);  								break;  							case 1:  								condition = new NotEqualCondition(path' value);  								break;  							case 2:  								condition = new GreaterThanCondition(path' value);  								break;  							case 3:  								condition = new GreaterThanOrEqualCondition(path' value);  								break;  							case 4:  								condition = new LowerThanCondition(path' value);  								break;  							case 5:  								condition = new LowerThanOrEqualCondition(path' value);  								break;  						}
Magic Number,Nest,CompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\CompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								condition = new EqualCondition(path' comparisonValue);  								break;  							case 1:  								condition = new NotEqualCondition(path' value);  								break;  							case 2:  								condition = new GreaterThanCondition(path' value);  								break;  							case 3:  								condition = new GreaterThanOrEqualCondition(path' value);  								break;  							case 4:  								condition = new LowerThanCondition(path' value);  								break;  							case 5:  								condition = new LowerThanOrEqualCondition(path' value);  								break;  						}
Magic Number,Nest,CompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\CompareConditionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  						{  							case 0:  								condition = new EqualCondition(path' comparisonValue);  								break;  							case 1:  								condition = new NotEqualCondition(path' value);  								break;  							case 2:  								condition = new GreaterThanCondition(path' value);  								break;  							case 3:  								condition = new GreaterThanOrEqualCondition(path' value);  								break;  							case 4:  								condition = new LowerThanCondition(path' value);  								break;  							case 5:  								condition = new LowerThanOrEqualCondition(path' value);  								break;  						}
Magic Number,Nest,ScriptConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ScriptConditionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							scriptCondition = new InlineScriptCondition(reader.ReadString());  							break;  						case 1:  							scriptCondition = new IndexedScriptCondition(reader.ReadString());  							break;  						case 2:  							language = reader.ReadString();  							break;  						case 3:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScriptConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ScriptConditionBase.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							scriptCondition = new InlineScriptCondition(reader.ReadString());  							break;  						case 1:  							scriptCondition = new IndexedScriptCondition(reader.ReadString());  							break;  						case 2:  							language = reader.ReadString();  							break;  						case 3:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScriptTransformFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Transform\ScriptTransformBase.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							scriptTransform = new InlineScriptTransform(reader.ReadString());  							break;  						case 1:  							scriptTransform = new IndexedScriptTransform(reader.ReadString());  							break;  						case 2:  							language = reader.ReadString();  							break;  						case 3:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Magic Number,Nest,ScriptTransformFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Transform\ScriptTransformBase.cs,Deserialize,The following statement contains a magic number: switch (value)  					{  						case 0:  							scriptTransform = new InlineScriptTransform(reader.ReadString());  							break;  						case 1:  							scriptTransform = new IndexedScriptTransform(reader.ReadString());  							break;  						case 2:  							language = reader.ReadString();  							break;  						case 3:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadAggregate,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						aggregate = GetPercentilesAggregate(ref reader' meta);  						break;  					case 1:  						aggregate = GetValueAggregate(ref reader' formatterResolver' meta);  						break;  					case 2:  						var compositeKeyFormatter = formatterResolver.GetFormatter<CompositeKey>();  						var afterKey = compositeKeyFormatter.Deserialize(ref reader' formatterResolver);  						reader.ReadNext(); // '  						propertyName = reader.ReadPropertyNameSegmentRaw();  						var bucketAggregate = propertyName.EqualsBytes(BucketsField)  							? GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta) as BucketAggregate ?? new BucketAggregate { Meta = meta }  							: new BucketAggregate { Meta = meta };  						bucketAggregate.AfterKey = afterKey;  						aggregate = bucketAggregate;  						break;  					case 3:  					case 4:  						aggregate = GetMultiBucketAggregate(ref reader' formatterResolver' ref propertyName' meta);  						break;  					case 5:  						aggregate = GetStatsAggregate(ref reader' meta);  						break;  					case 6:  						aggregate = GetSingleBucketAggregate(ref reader' formatterResolver' meta);  						break;  					case 7:  						aggregate = GetGeoBoundsAggregate(ref reader' formatterResolver' meta);  						break;  					case 8:  						aggregate = GetTopHitsAggregate(ref reader' formatterResolver' meta);  						break;  					case 9:  						aggregate = GetGeoCentroidAggregate(ref reader' formatterResolver' meta);  						break;  					case 10:  						aggregate = GetMatrixStatsAggregate(ref reader' formatterResolver' meta);  						break;  				}
Missing Default,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,ReadBucket,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						item = GetKeyedBucket(ref reader' formatterResolver);  						break;  					case 1:  					case 2:  						item = GetRangeBucket(ref reader' formatterResolver' null' property.Utf8String());  						break;  					case 3:  						item = GetDateHistogramBucket(ref reader' formatterResolver);  						break;  					case 4:  						item = GetFiltersBucket(ref reader' formatterResolver);  						break;  				}
Missing Default,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,GetTopHitsAggregate,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							var hitsFormatter = formatterResolver.GetFormatter<TotalHits>();  							total = hitsFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							maxScore = reader.ReadNullableDouble();  							break;  						case 2:  							var lazyDocumentsFormatter = formatterResolver.GetFormatter<List<LazyDocument>>();  							topHits = lazyDocumentsFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,AggregateFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\AggregateFormatter.cs,GetGeoBoundsAggregate,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							geoBoundsMetric.Bounds.TopLeft =  								latLonFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							geoBoundsMetric.Bounds.BottomRight =  								latLonFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,CompositeAggregationSourceFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Bucket\Composite\CompositeAggregationSource.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						compositeAggregationSource = formatterResolver.GetFormatter<TermsCompositeAggregationSource>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						compositeAggregationSource = formatterResolver.GetFormatter<DateHistogramCompositeAggregationSource>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						compositeAggregationSource = formatterResolver.GetFormatter<HistogramCompositeAggregationSource>()  							.Deserialize(ref reader' formatterResolver);  						break;  				}
Missing Default,Nest,TermsIncludeFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Bucket\Terms\TermsIncludeFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  							{  								case 0:  									partition = reader.ReadInt64();  									break;  								case 1:  									numberOfPartitions = reader.ReadInt64();  									break;  							}
Missing Default,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Values = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Missing Default,Nest,PercentileRanksAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\PercentileRanks\PercentileRanksAggregationFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Method)  				{  					case ITDigestMethod tdigest:  					{  						writer.WritePropertyName("tdigest");  						writer.WriteBeginObject();  						if (tdigest.Compression.HasValue)  						{  							writer.WritePropertyName("compression");  							writer.WriteDouble(tdigest.Compression.Value);  						}  						writer.WriteEndObject();  						break;  					}  					case IHDRHistogramMethod hdr:  					{  						writer.WritePropertyName("hdr");  						writer.WriteBeginObject();  						if (hdr.NumberOfSignificantValueDigits.HasValue)  						{  							writer.WritePropertyName("number_of_significant_value_digits");  							writer.WriteInt32(hdr.NumberOfSignificantValueDigits.Value);  						}  						writer.WriteEndObject();  						break;  					}  				}
Missing Default,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							percentiles.Method = formatterResolver.GetFormatter<HDRHistogramMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							percentiles.Method = formatterResolver.GetFormatter<TDigestMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							percentiles.Field = reader.ReadString();  							break;  						case 3:  							percentiles.Script = formatterResolver.GetFormatter<IScript>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							percentiles.Missing = reader.ReadDouble();  							break;  						case 5:  							percentiles.Percents = formatterResolver.GetFormatter<IEnumerable<double>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							percentiles.Meta = formatterResolver.GetFormatter<IDictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							percentiles.Keyed = reader.ReadBoolean();  							break;  					}
Missing Default,Nest,PercentilesAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Metric\Percentiles\PercentilesAggregationFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Method)  				{  					case ITDigestMethod tdigest:  					{  						writer.WritePropertyName("tdigest");  						writer.WriteBeginObject();  						if (tdigest.Compression.HasValue)  						{  							writer.WritePropertyName("compression");  							writer.WriteDouble(tdigest.Compression.Value);  						}  						writer.WriteEndObject();  						break;  					}  					case IHDRHistogramMethod hdr:  					{  						writer.WritePropertyName("hdr");  						writer.WriteBeginObject();  						if (hdr.NumberOfSignificantValueDigits.HasValue)  						{  							writer.WritePropertyName("number_of_significant_value_digits");  							writer.WriteInt32(hdr.NumberOfSignificantValueDigits.Value);  						}  						writer.WriteEndObject();  						break;  					}  				}
Missing Default,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							aggregation.Format = reader.ReadString();  							break;  						case 1:  							aggregation.GapPolicy = formatterResolver.GetFormatter<GapPolicy?>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							aggregation.Minimize = reader.ReadBoolean();  							break;  						case 3:  							aggregation.Predict = reader.ReadInt32();  							break;  						case 4:  							aggregation.Window = reader.ReadInt32();  							break;  						case 5:  							modelSegment = reader.ReadNextBlockSegment();  							break;  						case 6:  							model = reader.ReadStringSegmentUnsafe();  							break;  						case 7:  							var path = reader.ReadString();  							if (!string.IsNullOrEmpty(path))  								aggregation.BucketsPath = new SingleBucketsPath(path);  							break;  					}
Missing Default,Nest,MovingAverageAggregationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Aggregations\Pipeline\MovingAverage\MovingAverageAggregationFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (modelValue)  				{  					case 0:  						aggregation.Model = formatterResolver.GetFormatter<LinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 1:  						aggregation.Model = formatterResolver.GetFormatter<SimpleModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 2:  						aggregation.Model = formatterResolver.GetFormatter<EwmaModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 3:  						aggregation.Model = formatterResolver.GetFormatter<HoltLinearModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  					case 4:  						aggregation.Model = formatterResolver.GetFormatter<HoltWintersModel>()  							.Deserialize(ref modelReader' formatterResolver);  						break;  				}
Missing Default,Nest,StopWordsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Analysis\StopWords.cs,Serialize,The following switch statement is missing a default case: switch (value.Tag)  			{  				case 0:  					writer.WriteString(value.Item1);  					break;  				case 1:  					var formatter = formatterResolver.GetFormatter<IEnumerable<string>>();  					formatter.Serialize(ref writer' value.Item2' formatterResolver);  					break;  			}
Missing Default,Nest,CatFielddataRecordFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cat\CatFielddata\CatFielddataRecordJsonConverter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							record.Id = reader.ReadString();  							break;  						case 1:  							record.Node = reader.ReadString();  							break;  						case 2:  							record.Host = reader.ReadString();  							break;  						case 3:  							record.Ip = reader.ReadString();  							break;  						case 4:  							record.Field = reader.ReadString();  							break;  						case 5:  							record.Size = reader.ReadString();  							break;  					}
Missing Default,Nest,ClusterRerouteCommandFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Cluster\ClusterReroute\Commands\ClusterRerouteCommandFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							command = Deserialize<AllocateReplicaClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 1:  							command = Deserialize<AllocateEmptyPrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 2:  							command = Deserialize<AllocateStalePrimaryRerouteCommand>(ref reader' formatterResolver);  							break;  						case 3:  							command = Deserialize<MoveClusterRerouteCommand>(ref reader' formatterResolver);  							break;  						case 4:  							command = Deserialize<CancelClusterRerouteCommand>(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,FieldFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Field\FieldFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  							{  								case 0:  									field = reader.ReadString();  									break;  								case 1:  									boost = reader.ReadDouble();  									break;  								case 2:  									format = reader.ReadString();  									break;  							}
Missing Default,Nest,Id,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Id\Id.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case Id r: return Equals(r);  				case string s: return Equals(s);  				case int l: return Equals(l);  				case long l: return Equals(l);  				case Guid g: return Equals(g);  			}
Missing Default,Nest,IndicesFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Indices\IndicesFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Tag)  			{  				case 0:  					writer.WriteBeginArray();  					writer.WriteString("_all");  					writer.WriteEndArray();  					break;  				case 1:  					var settings = formatterResolver.GetConnectionSettings();  					writer.WriteBeginArray();  					for (var index = 0; index < value.Item2.Indices.Count; index++)  					{  						if (index > 0)  							writer.WriteValueSeparator();    						var indexName = value.Item2.Indices[index];  						writer.WriteString(indexName.GetString(settings));  					}  					writer.WriteEndArray();  					break;  			}
Missing Default,Nest,IndicesMultiSyntaxFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\Indices\IndicesMultiSyntaxFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Tag)  			{  				case 0:  					writer.WriteString("_all");  					break;  				case 1:  					var connectionSettings = formatterResolver.GetConnectionSettings();  					writer.WriteString(((IUrlParameter)value).GetString(connectionSettings));  					break;  			}
Missing Default,Nest,Routing,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Infer\JoinFieldRouting\Routing.cs,Equals,The following switch statement is missing a default case: switch (obj)  			{  				case Routing r: return Equals(r);  				case string s: return Equals(s);  				case int l: return Equals(l);  				case long l: return Equals(l);  				case Guid g: return Equals(g);  			}
Missing Default,Nest,LazyDocumentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\LazyDocument\LazyDocumentFormatter.cs,WriteUnindented,The following switch statement is missing a default case: switch (token)              {                  case JsonToken.BeginObject:                      {                          writer.WriteBeginObject();                          var c = 0;                          while (reader.ReadIsInObject(ref c))                          {                              if (c != 1)  								writer.WriteRaw((byte)''');  							writer.WritePropertyName(reader.ReadPropertyName());  							WriteUnindented(ref reader' ref writer);                          }                          writer.WriteEndObject();                      }                      break;                  case JsonToken.BeginArray:                      {                          writer.WriteBeginArray();                          var c = 0;                          while (reader.ReadIsInArray(ref c))                          {                              if (c != 1)  								writer.WriteRaw((byte)''');  							WriteUnindented(ref reader' ref writer);                          }                          writer.WriteEndArray();                      }                      break;                  case JsonToken.Number:  					var segment = reader.ReadNumberSegment();  					for (var i = 0; i < segment.Count; i++)  						// segment.Array never null  						// ReSharper disable once PossibleNullReferenceException  						writer.WriteRawUnsafe(segment.Array[i + segment.Offset]);  					break;                  case JsonToken.String:  					var s = reader.ReadString();  					writer.WriteString(s);  					break;                  case JsonToken.True:                  case JsonToken.False:  					var b = reader.ReadBoolean();  					writer.WriteBoolean(b);  					break;                  case JsonToken.Null:  					reader.ReadIsNull();  					writer.WriteNull();  					break;              }
Missing Default,Nest,DictionaryResponseFormatter<TResponse;TKey;TValue>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Response\DictionaryResponseBase.cs,Deserialize,The following switch statement is missing a default case: switch (errorValue)  					{  						case 0:  							if (reader.GetCurrentJsonToken() == JsonToken.String)  								response.Error = new Error { Reason = reader.ReadString() };  							else  							{  								var formatter = formatterResolver.GetFormatter<Error>();  								response.Error = formatter.Deserialize(ref reader' formatterResolver);  							}  							break;  						case 1:  							if (reader.GetCurrentJsonToken() == JsonToken.Number)  								response.StatusCode = reader.ReadInt32();  							else  								reader.ReadNextBlock();  							break;  					}
Missing Default,Nest,DynamicResponseFormatter<TResponse>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Response\DynamicResponseBase.cs,Deserialize,The following switch statement is missing a default case: switch (errorValue)  					{  						case 0:  							if (reader.GetCurrentJsonToken() == JsonToken.String)  								response.Error = new Error { Reason = reader.ReadString() };  							else  							{  								var formatter = formatterResolver.GetFormatter<Error>();  								response.Error = formatter.Deserialize(ref reader' formatterResolver);  							}  							break;  						case 1:  							if (reader.GetCurrentJsonToken() == JsonToken.Number)  								response.StatusCode = reader.ReadInt32();  							else  								reader.ReadNextBlock();  							break;  					}
Missing Default,Nest,ResolvableDictionaryResponseFormatter<TResponse;TKey;TValue>,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\Response\ResolvableDictionaryProxy.cs,Deserialize,The following switch statement is missing a default case: switch (errorValue)  					{  						case 0:  							if (reader.GetCurrentJsonToken() == JsonToken.String)  								response.Error = new Error { Reason = reader.ReadString() };  							else  							{  								var formatter = formatterResolver.GetFormatter<Error>();  								response.Error = formatter.Deserialize(ref reader' formatterResolver);  							}  							break;  						case 1:  							if (reader.GetCurrentJsonToken() == JsonToken.Number)  								response.StatusCode = reader.ReadInt32();  							else  								reader.ReadNextBlock();  							break;  					}
Missing Default,Nest,InnerResolver,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\NestFormatterResolver.cs,GetMapping,The following switch statement is missing a default case: switch (member)  					{  						case PropertyInfo propertyInfo:  							property.JsonFormatter =  								BuiltinResolver.BuiltinResolverGetFormatterHelper.GetFormatter(propertyInfo.PropertyType);  							break;  						case FieldInfo fieldInfo:  							property.JsonFormatter =  								BuiltinResolver.BuiltinResolverGetFormatterHelper.GetFormatter(fieldInfo.FieldType);  							break;  					}
Missing Default,Nest,InnerResolver,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\NestFormatterResolver.cs,CreateEnumFormatterForProperty,The following switch statement is missing a default case: switch (member)  				{  					case PropertyInfo propertyInfo:  					{  						CreateEnumFormatterForType(propertyInfo.PropertyType' property);  						break;  					}  					case FieldInfo fieldInfo:  					{  						CreateEnumFormatterForType(fieldInfo.FieldType' property);  						break;  					}  				}
Missing Default,Nest,NullableTimeSpanTicksFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\NullableTimeSpanTicksFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (token)  			{  				case JsonToken.Null:  					reader.ReadNext();  					return null;  				case JsonToken.String: return TimeSpan.Parse(reader.ReadString());  				case JsonToken.Number: return new TimeSpan(reader.ReadInt64());  			}
Missing Default,Nest,TimeSpanTicksFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonAbstractions\SerializationBehavior\JsonFormatters\TimeSpanTicksFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (token)  			{  				case JsonToken.String: return TimeSpan.Parse(reader.ReadString());  				case JsonToken.Number: return new TimeSpan(reader.ReadInt64());  			}
Missing Default,Nest,DateMath,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\DateMath\DateMath.cs,ToMinThreeDecimalPlaces,The following switch statement is missing a default case: switch (dateTime.Kind)  			{  				case DateTimeKind.Local:  					var offset = TimeZoneInfo.Local.GetUtcOffset(dateTime);  					if (offset >= TimeSpan.Zero)  						builder.Append('+');  					else  					{  						builder.Append('-');  						offset = offset.Negate();  					}    					AppendTwoDigitNumber(builder' offset.Hours);  					builder.Append(':');  					AppendTwoDigitNumber(builder' offset.Minutes);  					break;  				case DateTimeKind.Utc:  					builder.Append('Z');  					break;  			}
Missing Default,Nest,MinimumShouldMatchFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\MinimumShouldMatch\MinimumShouldMatchFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Tag)  			{  				case 0:  					writer.WriteInt32(value.Item1.Value);  					break;  				case 1:  					writer.WriteString(value.Item2);  					break;  			}
Missing Default,Nest,ScriptFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Scripting\ScriptFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  						case 1:  							script = new InlineScript(reader.ReadString());  							break;  						case 2:  							script = new IndexedScript(reader.ReadString());  							break;  						case 3:  							language = reader.ReadString();  							break;  						case 4:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,SortFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\CommonOptions\Sorting\SortFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							var propCount = 0;  							string field = null;  							var geoDistanceSegment = reader.ReadNextBlockSegment();  							var geoDistanceReader = new JsonReader(geoDistanceSegment.Array' geoDistanceSegment.Offset);  							IEnumerable<GeoLocation> points = null;  							while (geoDistanceReader.ReadIsInObject(ref propCount))  							{  								var nameSegment = geoDistanceReader.ReadPropertyNameSegmentRaw();  								if (geoDistanceReader.GetCurrentJsonToken() == JsonToken.BeginArray)  								{  									field = nameSegment.Utf8String();  									points = formatterResolver.GetFormatter<IEnumerable<GeoLocation>>()  										.Deserialize(ref geoDistanceReader' formatterResolver);  									break;  								}    								// skip value if not array  								geoDistanceReader.ReadNextBlock();  							}  							geoDistanceReader = new JsonReader(geoDistanceSegment.Array' geoDistanceSegment.Offset);  							var geoDistanceSort = formatterResolver.GetFormatter<GeoDistanceSort>()  								.Deserialize(ref geoDistanceReader' formatterResolver);  							geoDistanceSort.Field = field;  							geoDistanceSort.Points = points;  							sort = geoDistanceSort;  							break;  						case 1:  							sort = formatterResolver.GetFormatter<ScriptSort>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,BulkResponseItemFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Document\Multiple\Bulk\BulkResponseItem\BulkResponseItemFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						bulkResponseItem = formatterResolver.GetFormatter<BulkDeleteResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 1:  						bulkResponseItem = formatterResolver.GetFormatter<BulkUpdateResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 2:  						bulkResponseItem = formatterResolver.GetFormatter<BulkIndexResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  					case 3:  						bulkResponseItem = formatterResolver.GetFormatter<BulkCreateResponseItem>()  							.Deserialize(ref reader' formatterResolver);  						break;  				}
Missing Default,Nest,SimilarityFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\IndexModules\Similarity\SimilarityFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						return Deserialize<BM25Similarity>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<LMDirichletSimilarity>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<DFRSimilarity>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<DFISimilarity>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<IBSimilarity>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LMJelinekMercerSimilarity>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<ScriptedSimilarity>(ref segmentReader' formatterResolver);  				}
Missing Default,Nest,AliasActionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\AliasManagement\Alias\Actions\IAliasAction.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						aliasAction = Deserialize<AliasAddAction>(ref segmentReader' formatterResolver);  						break;  					case 1:  						aliasAction = Deserialize<AliasRemoveAction>(ref segmentReader' formatterResolver);  						break;  					case 2:  						aliasAction = Deserialize<AliasRemoveIndexAction>(ref segmentReader' formatterResolver);  						break;  				}
Missing Default,Nest,FieldMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\MappingManagement\GetFieldMapping\FieldMappingFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<AllField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 1:  							mapping = formatterResolver.GetFormatter<SourceField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							mapping = formatterResolver.GetFormatter<RoutingField>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  #pragma warning disable 618  							mapping = formatterResolver.GetFormatter<IndexField>()  								.Deserialize(ref reader' formatterResolver);  #pragma warning restore 618  							break;  						case 4:  							mapping = formatterResolver.GetFormatter<SizeField>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,ShardStoreFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Indices\Monitoring\IndicesShardStores\ShardStoreFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							allocation = formatterResolver.GetFormatter<ShardStoreAllocation>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							allocationId = reader.ReadString();  							break;  					}
Missing Default,Nest,ProcessorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Ingest\ProcessorFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						processor = Deserialize<AttachmentProcessor>(ref reader' formatterResolver);  						break;  					case 1:  						processor = Deserialize<AppendProcessor>(ref reader' formatterResolver);  						break;  					case 2:  						processor = Deserialize<ConvertProcessor>(ref reader' formatterResolver);  						break;  					case 3:  						processor = Deserialize<DateProcessor>(ref reader' formatterResolver);  						break;  					case 4:  						processor = Deserialize<DateIndexNameProcessor>(ref reader' formatterResolver);  						break;  					case 5:  						processor = Deserialize<DotExpanderProcessor>(ref reader' formatterResolver);  						break;  					case 6:  						processor = Deserialize<FailProcessor>(ref reader' formatterResolver);  						break;  					case 7:  						processor = Deserialize<ForeachProcessor>(ref reader' formatterResolver);  						break;  					case 8:  						processor = Deserialize<JsonProcessor>(ref reader' formatterResolver);  						break;  					case 9:  						processor = Deserialize<UserAgentProcessor>(ref reader' formatterResolver);  						break;  					case 10:  						processor = Deserialize<KeyValueProcessor>(ref reader' formatterResolver);  						break;  					case 11:  						processor = Deserialize<GeoIpProcessor>(ref reader' formatterResolver);  						break;  					case 12:  						processor = Deserialize<GrokProcessor>(ref reader' formatterResolver);  						break;  					case 13:  						processor = Deserialize<GsubProcessor>(ref reader' formatterResolver);  						break;  					case 14:  						processor = Deserialize<JoinProcessor>(ref reader' formatterResolver);  						break;  					case 15:  						processor = Deserialize<LowercaseProcessor>(ref reader' formatterResolver);  						break;  					case 16:  						processor = Deserialize<RemoveProcessor>(ref reader' formatterResolver);  						break;  					case 17:  						processor = Deserialize<RenameProcessor>(ref reader' formatterResolver);  						break;  					case 18:  						processor = Deserialize<ScriptProcessor>(ref reader' formatterResolver);  						break;  					case 19:  						processor = Deserialize<SetProcessor>(ref reader' formatterResolver);  						break;  					case 20:  						processor = Deserialize<SortProcessor>(ref reader' formatterResolver);  						break;  					case 21:  						processor = Deserialize<SplitProcessor>(ref reader' formatterResolver);  						break;  					case 22:  						processor = Deserialize<TrimProcessor>(ref reader' formatterResolver);  						break;  					case 23:  						processor = Deserialize<UppercaseProcessor>(ref reader' formatterResolver);  						break;  					case 24:  						processor = Deserialize<UrlDecodeProcessor>(ref reader' formatterResolver);  						break;  					case 25:  						processor = Deserialize<BytesProcessor>(ref reader' formatterResolver);  						break;  					case 26:  						processor = Deserialize<DissectProcessor>(ref reader' formatterResolver);  						break;  					case 27:  						processor = Deserialize<SetSecurityUserProcessor>(ref reader' formatterResolver);  						break;  					case 28:  						processor = Deserialize<PipelineProcessor>(ref reader' formatterResolver);  						break;  					case 29:  						processor = Deserialize<DropProcessor>(ref reader' formatterResolver);  						break;  					case 30:  						processor = Deserialize<CircleProcessor>(ref reader' formatterResolver);  						break;  				}
Missing Default,Nest,DynamicMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\DynamicMapping.cs,Serialize,The following switch statement is missing a default case: switch (value.Tag)  			{  				case 0:  					writer.WriteBoolean(value.Item1);  					break;  				case 1:  					writer.WriteString(value.Item2.GetStringValue());  					break;  			}
Missing Default,Nest,DynamicMappingFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\DynamicMapping.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								return new Union<bool' DynamicMapping>(true);  							case 1:  								return new Union<bool' DynamicMapping>(false);  							case 2:  								return new Union<bool' DynamicMapping>(DynamicMapping.Strict);  						}
Missing Default,Nest,JoinFieldFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Core\Join\JoinFieldFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (propertyName)  				{  					case "parent":  						parentId = formatterResolver.GetFormatter<Id>().Deserialize(ref reader' formatterResolver);  						break;  					case "name":  						name = reader.ReadString();  						break;  				}
Missing Default,Nest,JoinFieldFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Core\Join\JoinFieldFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Tag)  			{  				case 0:  				{  					var relationNameFormatter = formatterResolver.GetFormatter<RelationName>();  					relationNameFormatter.Serialize(ref writer' value.ParentOption.Name' formatterResolver);  					break;  				}  				case 1:  				{  					var child = value.ChildOption;  					writer.WriteBeginObject();  					writer.WritePropertyName("name");  					var relationNameFormatter = formatterResolver.GetFormatter<RelationName>();  					relationNameFormatter.Serialize(ref writer' child.Name' formatterResolver);  					writer.WriteValueSeparator();  					writer.WritePropertyName("parent");  					var id = (child.ParentId as IUrlParameter)?.GetString(formatterResolver.GetConnectionSettings());  					writer.WriteString(id);  					writer.WriteEndObject();  					break;  				}  			}
Missing Default,Nest,GeoOrientationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Geo\GeoShape\GeoOrientation.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case GeoOrientation.ClockWise:  					writer.WriteString("cw");  					break;  				case GeoOrientation.CounterClockWise:  					writer.WriteString("ccw");  					break;  			}
Missing Default,Nest,GeoOrientationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Geo\GeoShape\GeoOrientation.cs,Deserialize,The following switch statement is missing a default case: switch (enumString.ToUpperInvariant())  			{  				case "LEFT":  				case "CW":  				case "CLOCKWISE":  					return GeoOrientation.ClockWise;  			}
Missing Default,Nest,NullableGeoOrientationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Geo\GeoShape\GeoOrientation.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case GeoOrientation.ClockWise:  					writer.WriteString("cw");  					break;  				case GeoOrientation.CounterClockWise:  					writer.WriteString("ccw");  					break;  			}
Missing Default,Nest,PropertyFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\PropertyFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							typeString = segmentReader.ReadString();  							type = typeString.ToEnum<FieldType>().GetValueOrDefault(type);  							break;  						case 1:  							if (type == FieldType.None)  								type = FieldType.Object;    							segmentReader.ReadNextBlock();  							break;  					}
Missing Default,Nest,AttachmentFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Attachment\Attachment.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								attachment.Content = reader.ReadString();  								break;  							case 1:  								attachment.Name = reader.ReadString();  								break;  							case 2:  								attachment.Author = reader.ReadString();  								break;  							case 3:  								attachment.Keywords = reader.ReadString();  								break;  							case 4:  								attachment.Date = formatterResolver.GetFormatter<DateTime?>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								attachment.ContentType = reader.ReadString();  								break;  							case 6:  								attachment.ContentLength = reader.ReadNullableLong();  								break;  							case 7:  								attachment.Language = reader.ReadString();  								break;  							case 8:  								attachment.DetectLanguage = reader.ReadNullableBoolean();  								break;  							case 9:  								attachment.IndexedCharacters = reader.ReadNullableLong();  								break;  							case 10:  								attachment.Title = reader.ReadString();  								break;  						}
Missing Default,Nest,SuggestContextFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Completion\SuggestContextFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						return Deserialize<GeoSuggestContext>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<CategorySuggestContext>(ref segmentReader' formatterResolver);  				}
Missing Default,Nest,ShapeOrientationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Shape\ShapeOrientation.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case ShapeOrientation.CounterClockWise:  					writer.WriteString("counterclockwise");  					break;  				case ShapeOrientation.ClockWise:  					writer.WriteString("clockwise");  					break;  			}
Missing Default,Nest,ShapeOrientationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Shape\ShapeOrientation.cs,Deserialize,The following switch statement is missing a default case: switch (enumString.ToUpperInvariant())  			{  				case "CLOCKWISE":  				case "LEFT":  				case "CW":  					return ShapeOrientation.ClockWise;  			}
Missing Default,Nest,NullableShapeOrientationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Types\Specialized\Shape\ShapeOrientation.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case ShapeOrientation.CounterClockWise:  					writer.WriteString("counterclockwise");  					break;  				case ShapeOrientation.ClockWise:  					writer.WriteString("clockwise");  					break;  			}
Missing Default,Nest,MappingWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\MappingWalker.cs,Accept,The following switch statement is missing a default case: switch (ft)  				{  					case FieldType.Text:  						Visit<ITextProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Keyword:  						Visit<IKeywordProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.SearchAsYouType:  						Visit<ISearchAsYouTypeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.HalfFloat:  					case FieldType.ScaledFloat:  					case FieldType.Float:  					case FieldType.Double:  					case FieldType.Byte:  					case FieldType.Short:  					case FieldType.Integer:  					case FieldType.Long:  						Visit<INumberProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Date:  						Visit<IDateProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.DateNanos:  						Visit<IDateNanosProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Boolean:  						Visit<IBooleanProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Binary:  						Visit<IBinaryProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Object:  						Visit<IObjectProperty>(field' t =>  						{  							_visitor.Visit(t);  							_visitor.Depth += 1;  							Accept(t.Properties);  							_visitor.Depth -= 1;  						});  						break;  					case FieldType.Nested:  						Visit<INestedProperty>(field' t =>  						{  							_visitor.Visit(t);  							_visitor.Depth += 1;  							Accept(t.Properties);  							_visitor.Depth -= 1;  						});  						break;  					case FieldType.Ip:  						Visit<IIpProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.GeoPoint:  						Visit<IGeoPointProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.GeoShape:  						Visit<IGeoShapeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Shape:  						Visit<IShapeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Completion:  						Visit<ICompletionProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Murmur3Hash:  						Visit<IMurmur3HashProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.TokenCount:  						Visit<ITokenCountProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.None:  						continue;  					case FieldType.Percolator:  						Visit<IPercolatorProperty>(field' t => { _visitor.Visit(t); });  						break;  					case FieldType.IntegerRange:  						Visit<IIntegerRangeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.FloatRange:  						Visit<IFloatRangeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.LongRange:  						Visit<ILongRangeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.DoubleRange:  						Visit<IDoubleRangeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.DateRange:  						Visit<IDateRangeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.IpRange:  						Visit<IIpRangeProperty>(field' t =>  						{  							_visitor.Visit(t);  							Accept(t.Fields);  						});  						break;  					case FieldType.Join:  						Visit<IJoinProperty>(field' t =>  						{  							_visitor.Visit(t);  						});  						break;  					case FieldType.RankFeature:  						Visit<IRankFeatureProperty>(field' t =>  						{  							_visitor.Visit(t);  						});  						break;  					case FieldType.RankFeatures:  						Visit<IRankFeaturesProperty>(field' t =>  						{  							_visitor.Visit(t);  						});  						break;  					case FieldType.Flattened:  						Visit<IFlattenedProperty>(field' t =>  						{  							_visitor.Visit(t);  						});  						break;  				}
Missing Default,Nest,NoopPropertyVisitor,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\NoopPropertyVisitor.cs,Visit,The following switch statement is missing a default case: switch (type)  			{  				case INestedProperty nestedType:  					Visit(nestedType' propertyInfo' attribute);  					break;  				case IObjectProperty objectType:  					Visit(objectType' propertyInfo' attribute);  					break;  				case IBinaryProperty binaryType:  					Visit(binaryType' propertyInfo' attribute);  					break;  				case IBooleanProperty booleanType:  					Visit(booleanType' propertyInfo' attribute);  					break;  				case IDateProperty dateType:  					Visit(dateType' propertyInfo' attribute);  					break;  				case IDateNanosProperty dateNanosType:  					Visit(dateNanosType' propertyInfo' attribute);  					break;  				case INumberProperty numberType:  					Visit(numberType' propertyInfo' attribute);  					break;  				case ITextProperty textType:  					Visit(textType' propertyInfo' attribute);  					break;  				case IKeywordProperty keywordType:  					Visit(keywordType' propertyInfo' attribute);  					break;  				case IGeoShapeProperty geoShapeType:  					Visit(geoShapeType' propertyInfo' attribute);  					break;  				case IShapeProperty shapeType:  					Visit(shapeType' propertyInfo' attribute);  					break;  				case IGeoPointProperty geoPointType:  					Visit(geoPointType' propertyInfo' attribute);  					break;  				case ICompletionProperty completionType:  					Visit(completionType' propertyInfo' attribute);  					break;  				case IIpProperty ipType:  					Visit(ipType' propertyInfo' attribute);  					break;  				case IMurmur3HashProperty murmurType:  					Visit(murmurType' propertyInfo' attribute);  					break;  				case ITokenCountProperty tokenCountType:  					Visit(tokenCountType' propertyInfo' attribute);  					break;  				case IPercolatorProperty percolatorType:  					Visit(percolatorType' propertyInfo' attribute);  					break;  				case IJoinProperty joinType:  					Visit(joinType' propertyInfo' attribute);  					break;  				case IIntegerRangeProperty integerRangeType:  					Visit(integerRangeType' propertyInfo' attribute);  					break;  				case ILongRangeProperty longRangeType:  					Visit(longRangeType' propertyInfo' attribute);  					break;  				case IDoubleRangeProperty doubleRangeType:  					Visit(doubleRangeType' propertyInfo' attribute);  					break;  				case IFloatRangeProperty floatRangeType:  					Visit(floatRangeType' propertyInfo' attribute);  					break;  				case IDateRangeProperty dateRangeType:  					Visit(dateRangeType' propertyInfo' attribute);  					break;  				case IIpRangeProperty ipRangeType:  					Visit(ipRangeType' propertyInfo' attribute);  					break;  				case IRankFeatureProperty rankFeature:  					Visit(rankFeature' propertyInfo' attribute);  					break;  				case IRankFeaturesProperty rankFeatures:  					Visit(rankFeatures' propertyInfo' attribute);  					break;  			}
Missing Default,Nest,PropertyWalker,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Mapping\Visitor\PropertyWalker.cs,InferProperty,The following switch statement is missing a default case: switch (type.Name)  				{  					case "Int32":  					case "UInt16":  						return new NumberProperty(NumberType.Integer);  					case "Int16":  					case "Byte":  						return new NumberProperty(NumberType.Short);  					case "SByte":  						return new NumberProperty(NumberType.Byte);  					case "Int64":  					case "UInt32":  					case "TimeSpan":  						return new NumberProperty(NumberType.Long);  					case "Single":  						return new NumberProperty(NumberType.Float);  					case "Decimal":  					case "Double":  					case "UInt64":  						return new NumberProperty(NumberType.Double);  					case "DateTime":  					case "DateTimeOffset":  						return new DateProperty();  					case "Boolean":  						return new BooleanProperty();  					case "Char":  					case "Guid":  						return new KeywordProperty();  				}
Missing Default,Nest,GetRepositoryResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\GetRepository\GetRepositoryResponseFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (errorValue)  					{  						case 0:  							if (reader.GetCurrentJsonToken() == JsonToken.String)  								response.Error = new Error { Reason = reader.ReadString() };  							else  							{  								var formatter = formatterResolver.GetFormatter<Error>();  								response.Error = formatter.Deserialize(ref reader' formatterResolver);  							}  							break;  						case 1:  							if (reader.GetCurrentJsonToken() == JsonToken.Number)  								response.StatusCode = reader.ReadInt32();  							else  								reader.ReadNextBlock();  							break;  					}
Missing Default,Nest,GetRepositoryResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\GetRepository\GetRepositoryResponseFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (repositoryType)  					{  						case "fs":  							var fs = GetRepository<FileSystemRepository' FileSystemRepositorySettings>(settings' formatterResolver);  							repositories.Add(name' fs);  							break;  						case "url":  							var url = GetRepository<ReadOnlyUrlRepository' ReadOnlyUrlRepositorySettings>(settings' formatterResolver);  							repositories.Add(name' url);  							break;  						case "azure":  							var azure = GetRepository<AzureRepository' AzureRepositorySettings>(settings' formatterResolver);  							repositories.Add(name' azure);  							break;  						case "s3":  							var s3 = GetRepository<S3Repository' S3RepositorySettings>(settings' formatterResolver);  							repositories.Add(name' s3);  							break;  						case "hdfs":  							var hdfs = GetRepository<HdfsRepository' HdfsRepositorySettings>(settings' formatterResolver);  							repositories.Add(name' hdfs);  							break;  						case "source":  							// reset the offset  							snapshotSegmentReader.ResetOffset();  							var source = formatterResolver.GetFormatter<ISourceOnlyRepository>()  								.Deserialize(ref snapshotSegmentReader' formatterResolver);  							repositories.Add(name' source);  							break;  					}
Missing Default,Nest,SourceOnlyRepositoryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\SourceOnlyRepository.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							reader.ReadNext();  							break;  						case 1:  							settings = reader.ReadNextBlockSegment();  							break;  					}
Missing Default,Nest,SourceOnlyRepositoryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Modules\SnapshotAndRestore\Repositories\SourceOnlyRepository.cs,Deserialize,The following switch statement is missing a default case: switch (delegateType)  			{  				case "s3":  					delegateSettings = Deserialize<S3RepositorySettings>(ref segmentReader' formatterResolver);  					break;  				case "azure":  					delegateSettings = Deserialize<AzureRepositorySettings>(ref segmentReader' formatterResolver);  					break;  				case "url":  					delegateSettings = Deserialize<ReadOnlyUrlRepositorySettings>(ref segmentReader' formatterResolver);  					break;  				case "hdfs":  					delegateSettings = Deserialize<HdfsRepositorySettings>(ref segmentReader' formatterResolver);  					break;  				case "fs":  					delegateSettings = Deserialize<FileSystemRepositorySettings>(ref segmentReader' formatterResolver);  					break;  			}
Missing Default,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							var formatter = formatterResolver.GetFormatter<QueryContainer>();  							filter = formatter.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							weight = reader.ReadDouble();  							break;  						case 2:  							var innerCount = 0;  							MultiValueMode? multiValueMode = null;  							IDecayFunction decayFunction = null;  							while (reader.ReadIsInObject(ref innerCount))  							{  								var functionPropertyName = reader.ReadPropertyName();  								if (functionPropertyName == "multi_value_mode")  									multiValueMode = formatterResolver.GetFormatter<MultiValueMode>()  										.Deserialize(ref reader' formatterResolver);  								else  								{  									var name = propertyName.Utf8String();  									decayFunction = ReadDecayFunction(ref reader' name' formatterResolver);  									decayFunction.Field = functionPropertyName;  								}  							}    							if (decayFunction != null)  							{  								decayFunction.MultiValueMode = multiValueMode;  								function = decayFunction;  							}  							break;  						case 3:  							var randomScoreFormatter = formatterResolver.GetFormatter<RandomScoreFunction>();  							function = randomScoreFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							var fieldValueFormatter = formatterResolver.GetFormatter<FieldValueFactorFunction>();  							function = fieldValueFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							var scriptFormatter = formatterResolver.GetFormatter<ScriptScoreFunction>();  							function = scriptFormatter.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,ScoreFunctionJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Compound\FunctionScore\Functions\ScoreFunctionJsonFormatter.cs,ReadDecayFunction,The following switch statement is missing a default case: switch (segmentReader.GetCurrentJsonToken())  					{  						case JsonToken.String:  							subType = "date";  							break;  						case JsonToken.BeginObject:  							subType = "geo";  							break;  					}
Missing Default,Nest,GeoBoundingBoxQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\BoundingBox\GeoBoundingBoxQuery.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Type = formatterResolver.GetFormatter<GeoExecution>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,GeoDistanceQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Distance\GeoDistanceQuery.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Distance = formatterResolver.GetFormatter<Distance>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							query.DistanceType = formatterResolver.GetFormatter<GeoDistanceType>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,GeoLocationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoLocationFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  							{  								case 0:  									lat = reader.ReadDouble();  									break;  								case 1:  									lon = reader.ReadDouble();  									break;  							}
Missing Default,Nest,GeoLocationFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\GeoLocationFormatter.cs,Serialize,The following switch statement is missing a default case: switch (value.Format)  			{  				case GeoFormat.GeoJson:  					writer.WriteBeginObject();  					writer.WritePropertyName("lat");  					writer.WriteDouble(value.Latitude);  					writer.WriteValueSeparator();  					writer.WritePropertyName("lon");  					writer.WriteDouble(value.Longitude);  					writer.WriteEndObject();  					break;  				case GeoFormat.WellKnownText:  					var lon = value.Longitude.ToString(CultureInfo.InvariantCulture);  					var lat = value.Latitude.ToString(CultureInfo.InvariantCulture);  					var length = GeoShapeType.Point.Length + lon.Length + lat.Length + 4;  					var builder = new StringBuilder(length)  						.Append(GeoShapeType.Point)  						.Append(" (")  						.Append(lon)  						.Append(" ")  						.Append(lat)  						.Append(")");  					writer.WriteString(builder.ToString());  					break;  			}
Missing Default,Nest,GeoPolygonQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Polygon\GeoPolygonQuery.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.ValidationMethod = formatterResolver.GetFormatter<GeoValidationMethod>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,GeoShapeFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeBase.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case IPointGeoShape point:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<GeoCoordinate>();  					formatter.Serialize(ref writer' point.Coordinates' formatterResolver);  					break;  				}  				case IMultiPointGeoShape multiPoint:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<IEnumerable<GeoCoordinate>>();  					formatter.Serialize(ref writer' multiPoint.Coordinates' formatterResolver);  					break;  				}  				case ILineStringGeoShape lineString:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<IEnumerable<GeoCoordinate>>();  					formatter.Serialize(ref writer' lineString.Coordinates' formatterResolver);  					break;  				}  				case IMultiLineStringGeoShape multiLineString:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<IEnumerable<IEnumerable<GeoCoordinate>>>();  					formatter.Serialize(ref writer' multiLineString.Coordinates' formatterResolver);  					break;  				}  				case IPolygonGeoShape polygon:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<IEnumerable<IEnumerable<GeoCoordinate>>>();  					formatter.Serialize(ref writer' polygon.Coordinates' formatterResolver);  					break;  				}  				case IMultiPolygonGeoShape multiPolygon:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<IEnumerable<IEnumerable<IEnumerable<GeoCoordinate>>>>();  					formatter.Serialize(ref writer' multiPolygon.Coordinates' formatterResolver);  					break;  				}  				case IEnvelopeGeoShape envelope:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<IEnumerable<GeoCoordinate>>();  					formatter.Serialize(ref writer' envelope.Coordinates' formatterResolver);  					break;  				}  				case ICircleGeoShape circle:  				{  					writer.WritePropertyName("coordinates");  					var formatter = formatterResolver.GetFormatter<GeoCoordinate>();  					formatter.Serialize(ref writer' circle.Coordinates' formatterResolver);  					writer.WriteValueSeparator();  					writer.WritePropertyName("radius");  					writer.WriteString(circle.Radius);  					break;  				}  				case IGeometryCollection collection:  				{  					writer.WritePropertyName("geometries");  					var formatter = formatterResolver.GetFormatter<IEnumerable<IGeoShape>>();  					formatter.Serialize(ref writer' collection.Geometries' formatterResolver);  					break;  				}  			}
Missing Default,Nest,GeoShapeFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeBase.cs,ParseCircleGeoShape,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							coordinate = formatterResolver.GetFormatter<GeoCoordinate>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							radius = reader.ReadString();  							break;  					}
Missing Default,Nest,GeoShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							boost = reader.ReadDouble();  							break;  						case 1:  							name = reader.ReadString();  							break;  						case 2:  							ignoreUnmapped = reader.ReadBoolean();  							break;  					}
Missing Default,Nest,GeoShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\Shape\GeoShapeQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (shapeValue)  							{  								case 0:  									var shapeFormatter = formatterResolver.GetFormatter<IGeoShape>();  									query = new GeoShapeQuery  									{  										Shape = shapeFormatter.Deserialize(ref reader' formatterResolver)  									};  									break;  								case 1:  									var fieldLookupFormatter = formatterResolver.GetFormatter<FieldLookup>();  									query = new GeoShapeQuery  									{  										IndexedShape = fieldLookupFormatter.Deserialize(ref reader' formatterResolver)  									};  									break;  								case 2:  									relation = formatterResolver.GetFormatter<GeoShapeRelation>()  										.Deserialize(ref reader' formatterResolver);  									break;  							}
Missing Default,Nest,WellKnownTextTokenizer,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Geo\WKT\GeoWKTReader.cs,NextToken,The following switch statement is missing a default case: switch (c)  			{  				case LParen:  					return TokenType = TokenType.LParen;  				case RParen:  					return TokenType = TokenType.RParen;  				case Comma:  					return TokenType = TokenType.Comma;  			}
Missing Default,Nest,DistanceFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\DistanceFeature\DistanceFeatureQuery.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							query.Origin = OriginUnionFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							query.Pivot = PivotUnionFormatter.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Boost = reader.ReadDouble();  							break;  					}
Missing Default,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Serialize,The following switch statement is missing a default case: switch (value.Function)  			{  				case IRankFeatureSigmoidFunction sigmoid:  					SerializeScoreFunction(ref writer' "sigmoid"' sigmoid' formatterResolver);  					break;  				case IRankFeatureSaturationFunction saturation:  					SerializeScoreFunction(ref writer' "saturation"' saturation' formatterResolver);  					break;  				case IRankFeatureLogarithmFunction log:  					SerializeScoreFunction(ref writer' "log"' log' formatterResolver);  					break;  			}
Missing Default,Nest,RankFeatureQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\RankFeature\RankFeatureQuery.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							query.Name = reader.ReadString();  							break;  						case 1:  							query.Boost = reader.ReadDouble();  							break;  						case 2:  							query.Field = formatterResolver.GetFormatter<Field>().Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							query.Function = DeserializeScoreFunction<RankFeatureSaturationFunction>(ref reader' formatterResolver);  							break;  						case 4:  							query.Function = DeserializeScoreFunction<RankFeatureLogarithmFunction>(ref reader' formatterResolver);  							break;  						case 5:  							query.Function = DeserializeScoreFunction<RankFeatureSigmoidFunction>(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,ScriptScoreQuery,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\ScriptScore\ScriptScoreQuery.cs,IsConditionless,The following switch statement is missing a default case: switch (q.Script)  			{  				case IInlineScript inlineScript:  					return inlineScript.Source.IsNullOrEmpty();  				case IIndexedScript indexedScript:  					return indexedScript.Id.IsNullOrEmpty();  			}
Missing Default,Nest,ScriptQuery,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Script\ScriptQuery.cs,IsConditionless,The following switch statement is missing a default case: switch (q.Script)  			{  				case IInlineScript inlineScript:  					return inlineScript.Source.IsNullOrEmpty();  				case IIndexedScript indexedScript:  					return indexedScript.Id.IsNullOrEmpty();  			}
Missing Default,Nest,ShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Shape\ShapeQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							boost = reader.ReadDouble();  							break;  						case 1:  							name = reader.ReadString();  							break;  						case 2:  							ignoreUnmapped = reader.ReadBoolean();  							break;  					}
Missing Default,Nest,ShapeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\Specialized\Shape\ShapeQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (shapeValue)  							{  								case 0:  									var shapeFormatter = formatterResolver.GetFormatter<IGeoShape>();  									query = new ShapeQuery  									{  										Shape = shapeFormatter.Deserialize(ref reader' formatterResolver)  									};  									break;  								case 1:  									var fieldLookupFormatter = formatterResolver.GetFormatter<FieldLookup>();  									query = new ShapeQuery  									{  										IndexedShape = fieldLookupFormatter.Deserialize(ref reader' formatterResolver)  									};  									break;  								case 2:  									relation = formatterResolver.GetFormatter<ShapeRelation>()  										.Deserialize(ref reader' formatterResolver);  									break;  							}
Missing Default,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  							{  								var token = reader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}    								if (fuzzinessSegment != default)  								{  									var fuzzinessReader = new JsonReader(fuzzinessSegment.Array' fuzzinessSegment.Offset);  									SetFuzziness(ref fuzzinessReader' query' formatterResolver);  								}  								break;  							}  							case 1:  							{  								if (query != null)  									SetFuzziness(ref reader' query' formatterResolver);  								else  									fuzzinessSegment = reader.ReadNextBlockSegment();  								break;  							}  							case 2:  								prefixLength = reader.ReadInt32();  								break;  							case 3:  								maxExpansions = reader.ReadInt32();  								break;  							case 4:  								transpositions = reader.ReadBoolean();  								break;  							case 5:  								var rewriteFormatter = formatterResolver.GetFormatter<MultiTermQueryRewrite>();  								multiTermQueryRewrite = rewriteFormatter.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								name = reader.ReadString();  								break;  							case 7:  								boost = reader.ReadDouble();  								break;  						}
Missing Default,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (token)  								{  									case JsonToken.String:  										var valueSegment = reader.ReadStringSegmentUnsafe();  										if (valueSegment.IsDateTime(formatterResolver' out var dateTime))  											query = new FuzzyDateQuery  											{  												Field = field'  												Value = dateTime  											};  										else  											query = new FuzzyQuery  											{  												Field = field'  												Value = valueSegment.Utf8String()  											};  										break;  									case JsonToken.Number:  										query = new FuzzyNumericQuery  										{  											Field = field'  											Value = reader.ReadDouble()  										};  										break;  								}
Missing Default,Nest,FuzzyQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Fuzzy\FuzzyQueryFormatter.cs,SetFuzziness,The following switch statement is missing a default case: switch (query)  			{  				case FuzzyDateQuery fuzzyDateQuery:  					fuzzyDateQuery.Fuzziness = formatterResolver.GetFormatter<Time>()  						.Deserialize(ref reader' formatterResolver);  					break;  				case FuzzyNumericQuery fuzzyNumericQuery:  					fuzzyNumericQuery.Fuzziness = reader.ReadDouble();  					break;  				case FuzzyQuery fuzzyQuery:  					fuzzyQuery.Fuzziness = formatterResolver.GetFormatter<Fuzziness>()  						.Deserialize(ref reader' formatterResolver);  					break;  			}
Missing Default,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (innerValue)  						{  							case 0:  							case 1:  								isDate = true;  								break;  							case 2:  							case 3:  							case 4:  							case 5:  								var token = segmentReader.GetCurrentJsonToken();  								switch (token)  								{  									case JsonToken.String:  									case JsonToken.Null:  										if (!isDate)  										{  											var valueSegment = segmentReader.ReadStringSegmentUnsafe();  											isDate = valueSegment.IsDateTime(formatterResolver' out _) ||  												valueSegment.ContainsDateMathSeparator() && DateMath.IsValidDateMathString(valueSegment.Utf8String());  										}  										break;  									case JsonToken.Number:  										if (!isDouble)  										{  											var numberSegment = segmentReader.ReadNumberSegment();  											if (numberSegment.IsDouble())  												isDouble = true;  											else  												isLong = true;  										}  										break;  								}  								break;  						}
Missing Default,Nest,RangeQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Range\RangeQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (token)  								{  									case JsonToken.String:  									case JsonToken.Null:  										if (!isDate)  										{  											var valueSegment = segmentReader.ReadStringSegmentUnsafe();  											isDate = valueSegment.IsDateTime(formatterResolver' out _) ||  												valueSegment.ContainsDateMathSeparator() && DateMath.IsValidDateMathString(valueSegment.Utf8String());  										}  										break;  									case JsonToken.Number:  										if (!isDouble)  										{  											var numberSegment = segmentReader.ReadNumberSegment();  											if (numberSegment.IsDouble())  												isDouble = true;  											else  												isLong = true;  										}  										break;  								}
Missing Default,Nest,TermsQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Terms\TermsQueryFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							query.Boost = reader.ReadDouble();  							break;  						case 1:  							query.Name = reader.ReadString();  							break;  					}
Missing Default,Nest,TermsQueryFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\QueryDsl\TermLevel\Terms\TermsQueryFormatter.cs,ReadTerms,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								fieldLookup.Id = formatterResolver.GetFormatter<Id>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								fieldLookup.Index = formatterResolver.GetFormatter<IndexName>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								fieldLookup.Path = formatterResolver.GetFormatter<Field>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								fieldLookup.Routing = formatterResolver.GetFormatter<Routing>()  									.Deserialize(ref reader' formatterResolver);  								break;  						}
Missing Default,Nest,SourceFilterFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\Search\Search\SourceFiltering\SourceFilterJsonConverter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  							{  								case 0:  									filter.Includes = includeExclude;  									break;  								case 1:  									filter.Excludes = includeExclude;  									break;  							}
Missing Default,Nest,AutoFollowPatternFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\CrossClusterReplication\AutoFollow\GetAutoFollowPattern\GetAutoFollowPatternResponse.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								name = reader.ReadString();  								break;  							case 1:  								pattern = autoFollowPatternFormatter.Deserialize(ref reader' formatterResolver);  								break;  						}
Missing Default,Nest,LifecycleActionsJsonFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ilm\LifecycleActions.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							lifecycleAction = formatterResolver.GetFormatter<AllocateLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 1:  							lifecycleAction = formatterResolver.GetFormatter<DeleteLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 2:  							lifecycleAction = formatterResolver.GetFormatter<ForceMergeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 3:  							lifecycleAction = formatterResolver.GetFormatter<FreezeLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 4:  							lifecycleAction = formatterResolver.GetFormatter<ReadOnlyLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 5:  							lifecycleAction = formatterResolver.GetFormatter<RolloverLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 6:  							lifecycleAction = formatterResolver.GetFormatter<SetPriorityLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 7:  							lifecycleAction = formatterResolver.GetFormatter<ShrinkLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  						case 8:  							lifecycleAction = formatterResolver.GetFormatter<UnfollowLifecycleAction>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Deserialize,The following switch statement is missing a default case: switch (value)  				{  					case 0:  						return Deserialize<CountDetector>(ref segmentReader' formatterResolver);  					case 1:  						return Deserialize<HighCountDetector>(ref segmentReader' formatterResolver);  					case 2:  						return Deserialize<LowCountDetector>(ref segmentReader' formatterResolver);  					case 3:  						return Deserialize<NonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 4:  						return Deserialize<HighNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 5:  						return Deserialize<LowNonZeroCountDetector>(ref segmentReader' formatterResolver);  					case 6:  						return Deserialize<DistinctCountDetector>(ref segmentReader' formatterResolver);  					case 7:  						return Deserialize<HighDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 8:  						return Deserialize<LowDistinctCountDetector>(ref segmentReader' formatterResolver);  					case 9:  						return Deserialize<LatLongDetector>(ref segmentReader' formatterResolver);  					case 10:  						return Deserialize<InfoContentDetector>(ref segmentReader' formatterResolver);  					case 11:  						return Deserialize<HighInfoContentDetector>(ref segmentReader' formatterResolver);  					case 12:  						return Deserialize<LowInfoContentDetector>(ref segmentReader' formatterResolver);  					case 13:  						return Deserialize<MinDetector>(ref segmentReader' formatterResolver);  					case 14:  						return Deserialize<MaxDetector>(ref segmentReader' formatterResolver);  					case 15:  						return Deserialize<MedianDetector>(ref segmentReader' formatterResolver);  					case 16:  						return Deserialize<HighMedianDetector>(ref segmentReader' formatterResolver);  					case 17:  						return Deserialize<LowMedianDetector>(ref segmentReader' formatterResolver);  					case 18:  						return Deserialize<MeanDetector>(ref segmentReader' formatterResolver);  					case 19:  						return Deserialize<HighMeanDetector>(ref segmentReader' formatterResolver);  					case 20:  						return Deserialize<LowMeanDetector>(ref segmentReader' formatterResolver);  					case 21:  						return Deserialize<MetricDetector>(ref segmentReader' formatterResolver);  					case 22:  						return Deserialize<VarpDetector>(ref segmentReader' formatterResolver);  					case 23:  						return Deserialize<HighVarpDetector>(ref segmentReader' formatterResolver);  					case 24:  						return Deserialize<LowVarpDetector>(ref segmentReader' formatterResolver);  					case 25:  						return Deserialize<RareDetector>(ref segmentReader' formatterResolver);  					case 26:  						return Deserialize<FreqRareDetector>(ref segmentReader' formatterResolver);  					case 27:  						return Deserialize<SumDetector>(ref segmentReader' formatterResolver);  					case 28:  						return Deserialize<HighSumDetector>(ref segmentReader' formatterResolver);  					case 29:  						return Deserialize<LowSumDetector>(ref segmentReader' formatterResolver);  					case 30:  						return Deserialize<NonNullSumDetector>(ref segmentReader' formatterResolver);  					case 31:  						return Deserialize<HighNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 32:  						return Deserialize<LowNonNullSumDetector>(ref segmentReader' formatterResolver);  					case 33:  						return Deserialize<TimeOfDayDetector>(ref segmentReader' formatterResolver);  					case 34:  						return Deserialize<TimeOfWeekDetector>(ref segmentReader' formatterResolver);  				}
Missing Default,Nest,DetectorFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\MachineLearning\Job\Detectors\Detector.cs,Serialize,The following switch statement is missing a default case: switch (value.Function)  			{  				case "count":  				case "high_count":  				case "low_count":  					Serialize<ICountDetector>(ref writer' value' formatterResolver);  					break;  				case "non_zero_count":  				case "high_non_zero_count":  				case "low_non_zero_count":  					Serialize<INonZeroCountDetector>(ref writer' value' formatterResolver);  					break;  				case "distinct_count":  				case "high_distinct_count":  				case "low_distinct_count":  					Serialize<IDistinctCountDetector>(ref writer' value' formatterResolver);  					break;  				case "lat_long":  					Serialize<IGeographicDetector>(ref writer' value' formatterResolver);  					break;  				case "info_content":  				case "high_info_content":  				case "low_info_content":  					Serialize<IInfoContentDetector>(ref writer' value' formatterResolver);  					break;  				case "min":  				case "max":  				case "median":  				case "high_median":  				case "low_median":  				case "mean":  				case "high_mean":  				case "low_mean":  				case "metric":  				case "varp":  				case "high_varp":  				case "low_varp":  					Serialize<IMetricDetector>(ref writer' value' formatterResolver);  					break;  				case "rare":  				case "freq_rare":  					Serialize<IRareDetector>(ref writer' value' formatterResolver);  					break;  				case "sum":  				case "high_sum":  				case "low_sum":  					Serialize<ISumDetector>(ref writer' value' formatterResolver);  					break;  				case "non_null_sum":  				case "high_non_null_sum":  				case "low_non_null_sum":  					Serialize<INonNullSumDetector>(ref writer' value' formatterResolver);  					break;  				case "time_of_day":  				case "time_of_week":  					Serialize<ITimeDetector>(ref writer' value' formatterResolver);  					break;  			}
Missing Default,Nest,FieldRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Field\FieldRuleBaseFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							var username = reader.ReadString();  							fieldRule = new UsernameRule(username);  							break;  						case 1:  							var dn = reader.ReadString();  							fieldRule = new DistinguishedNameRule(dn);  							break;  						case 2:  							var realm = reader.ReadString();  							fieldRule = new RealmRule(realm);  							break;  						case 3:  							var formatter = formatterResolver.GetFormatter<IEnumerable<string>>();  							var groups = formatter.Deserialize(ref reader' formatterResolver);  							fieldRule = new GroupsRule(groups);  							break;  					}
Missing Default,Nest,RoleMappingRuleBaseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Security\RoleMapping\Rules\Role\RoleMappingRuleBaseFormatter.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							var allRules = SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  							rule = new AllRoleMappingRule(allRules);  							break;  						case 1:  							var anyRules = SingleOrEnumerableFormatter.Deserialize(ref reader' formatterResolver);  							rule = new AnyRoleMappingRule(anyRules);  							break;  						case 2:  							var fieldRule = FieldRuleBaseFormatter.Deserialize(ref reader' formatterResolver);  							rule = new FieldRoleMappingRule(fieldRule);  							break;  						case 3:  							var exceptRule = Deserialize(ref reader' formatterResolver);  							rule = new ExceptRoleMappingRole(exceptRule);  							break;  					}
Missing Default,Nest,GetCertificatesResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ssl\GetCertificates\GetCertificatesResponse.cs,Deserialize,The following switch statement is missing a default case: switch (reader.GetCurrentJsonToken())  			{  				case JsonToken.BeginArray:  					response.Certificates = Formatter.Deserialize(ref reader' formatterResolver);  					break;  				case JsonToken.BeginObject:  					var count = 0;  					while (reader.ReadIsInObject(ref count))  					{  						var property = reader.ReadPropertyNameSegmentRaw();  						if (ResponseFormatterHelpers.ServerErrorFields.TryGetValue(property' out var errorValue))  						{  							switch (errorValue)  							{  								case 0:  									if (reader.GetCurrentJsonToken() == JsonToken.String)  										response.Error = new Error { Reason = reader.ReadString() };  									else  									{  										var formatter = formatterResolver.GetFormatter<Error>();  										response.Error = formatter.Deserialize(ref reader' formatterResolver);  									}  									break;  								case 1:  									if (reader.GetCurrentJsonToken() == JsonToken.Number)  										response.StatusCode = reader.ReadInt32();  									else  										reader.ReadNextBlock();  									break;  							}  						}  						else  							reader.ReadNextBlock();  					}  					break;  			}
Missing Default,Nest,GetCertificatesResponseFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Ssl\GetCertificates\GetCertificatesResponse.cs,Deserialize,The following switch statement is missing a default case: switch (errorValue)  							{  								case 0:  									if (reader.GetCurrentJsonToken() == JsonToken.String)  										response.Error = new Error { Reason = reader.ReadString() };  									else  									{  										var formatter = formatterResolver.GetFormatter<Error>();  										response.Error = formatter.Deserialize(ref reader' formatterResolver);  									}  									break;  								case 1:  									if (reader.GetCurrentJsonToken() == JsonToken.Number)  										response.StatusCode = reader.ReadInt32();  									else  										reader.ReadNextBlock();  									break;  							}
Missing Default,Nest,ActionsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\ActionBase.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								throttlePeriod = formatterResolver.GetFormatter<Time>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 1:  								action = formatterResolver.GetFormatter<EmailAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 2:  								action = formatterResolver.GetFormatter<WebhookAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 3:  								action = formatterResolver.GetFormatter<IndexAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 4:  								action = formatterResolver.GetFormatter<LoggingAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 5:  								action = formatterResolver.GetFormatter<SlackAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 6:  								action = formatterResolver.GetFormatter<PagerDutyAction>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 7:  								@foreach = reader.ReadString();  								break;  							case 8:  								transform = formatterResolver.GetFormatter<TransformContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 9:  								condition = formatterResolver.GetFormatter<ConditionContainer>()  									.Deserialize(ref reader' formatterResolver);  								break;  							case 10:  								maxIterations = reader.ReadInt32();  								break;  						}
Missing Default,Nest,EmailAttachmentsFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Action\Email\EmailAttachments.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								attachment = formatterResolver.GetFormatter<HttpAttachment>()  									.Deserialize(ref reader' formatterResolver);  								attachments.Add(name' attachment);  								break;  							case 1:  								attachment = formatterResolver.GetFormatter<DataAttachment>()  									.Deserialize(ref reader' formatterResolver);  								attachments.Add(name' attachment);  								break;  						}
Missing Default,Nest,ArrayCompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ArrayCompareConditionBase.cs,Deserialize,The following switch statement is missing a default case: switch (propValue)  								{  									case 0:  										quantifier = formatterResolver.GetFormatter<Quantifier>()  											.Deserialize(ref reader' formatterResolver);  										break;  									case 1:  										value = formatterResolver.GetFormatter<object>()  											.Deserialize(ref reader' formatterResolver);  										break;  								}
Missing Default,Nest,CompareConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\CompareConditionBase.cs,Deserialize,The following switch statement is missing a default case: switch (value)  						{  							case 0:  								condition = new EqualCondition(path' comparisonValue);  								break;  							case 1:  								condition = new NotEqualCondition(path' value);  								break;  							case 2:  								condition = new GreaterThanCondition(path' value);  								break;  							case 3:  								condition = new GreaterThanOrEqualCondition(path' value);  								break;  							case 4:  								condition = new LowerThanCondition(path' value);  								break;  							case 5:  								condition = new LowerThanOrEqualCondition(path' value);  								break;  						}
Missing Default,Nest,ScriptConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ScriptConditionBase.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							scriptCondition = new InlineScriptCondition(reader.ReadString());  							break;  						case 1:  							scriptCondition = new IndexedScriptCondition(reader.ReadString());  							break;  						case 2:  							language = reader.ReadString();  							break;  						case 3:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,ScriptConditionFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Condition\ScriptConditionBase.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case IIndexedScriptCondition indexedScriptCondition:  					writer.WritePropertyName("id");  					writer.WriteString(indexedScriptCondition.Id);  					written = true;  					break;  				case IInlineScriptCondition inlineScriptCondition:  					writer.WritePropertyName("source");  					writer.WriteString(inlineScriptCondition.Source);  					written = true;  					break;  			}
Missing Default,Nest,Interval,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Schedule\Interval.cs,SetSeconds,The following switch statement is missing a default case: switch (interval)  			{  				case IntervalUnit.Week:  					_seconds = factor * WeekSeconds;  					break;  				case IntervalUnit.Day:  					_seconds = factor * DaySeconds;  					break;  				case IntervalUnit.Hour:  					_seconds = factor * HourSeconds;  					break;  				case IntervalUnit.Minute:  					_seconds = factor * MinuteSeconds;  					break;  				case IntervalUnit.Second:  					_seconds = factor * Second;  					break;  			}
Missing Default,Nest,ScriptTransformFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Transform\ScriptTransformBase.cs,Deserialize,The following switch statement is missing a default case: switch (value)  					{  						case 0:  							scriptTransform = new InlineScriptTransform(reader.ReadString());  							break;  						case 1:  							scriptTransform = new IndexedScriptTransform(reader.ReadString());  							break;  						case 2:  							language = reader.ReadString();  							break;  						case 3:  							parameters = formatterResolver.GetFormatter<Dictionary<string' object>>()  								.Deserialize(ref reader' formatterResolver);  							break;  					}
Missing Default,Nest,ScriptTransformFormatter,D:\research\architectureSmells\repos\elasticsearch_elasticsearch-net\src\Nest\XPack\Watcher\Transform\ScriptTransformBase.cs,Serialize,The following switch statement is missing a default case: switch (value)  			{  				case IIndexedScriptTransform indexedScriptTransform:  					writer.WritePropertyName("id");  					writer.WriteString(indexedScriptTransform.Id);  					written = true;  					break;  				case IInlineScriptTransform inlineScriptTransform:  					writer.WritePropertyName("source");  					writer.WriteString(inlineScriptTransform.Source);  					written = true;  					break;  			}
