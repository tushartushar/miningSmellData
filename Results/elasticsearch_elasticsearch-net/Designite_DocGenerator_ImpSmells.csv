Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,Cyclomatic complexity of the method is 9
Complex Method,DocGenerator,MethodInfoExtensions,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\MethodInfoExtensions.cs,GetSignature,Cyclomatic complexity of the method is 12
Complex Method,DocGenerator.Walkers,CSharpDocumentationFileWalker,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Walkers\CSharpDocumentationFileWalker.cs,AddBlockChildNodes,Cyclomatic complexity of the method is 10
Complex Method,DocGenerator.Walkers,DocConverter,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Walkers\DocConverter.cs,RearrangeCodeBlocks,Cyclomatic complexity of the method is 8
Long Parameter List,DocGenerator.Documentation.Blocks,CodeBlock,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Documentation\Blocks\CodeBlock.cs,CodeBlock,The method has 5 parameters. Parameters: text' startingLine' depth' language' memberName
Long Statement,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The length of the statement  "				_newDocument.Attributes.Add(new AttributeEntry("ref_current"' "https://www.elastic.co/guide/en/elasticsearch/reference/master")); " is 129.
Long Statement,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The length of the statement  "			var originalFile = Regex.Replace(_source.FullName.Replace("\\"' "/")' @"^(.*Tests/)"' $"{github}/tree/master/src/Tests/"); " is 122.
Long Statement,DocGenerator.AsciiDoc,RawAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\RawAsciidocVisitor.cs,Visit,The length of the statement  "			var originalFile = Regex.Replace(_source.FullName.Replace("\\"' "/")' @"^(.*Tests/)"' $"{github}/tree/master/src/Tests/"); " is 122.
Long Statement,DocGenerator.AsciiDoc,RawAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\RawAsciidocVisitor.cs,Visit,The length of the statement  "					foreach (var file in Directory.EnumerateFiles(Path.Combine(Program.OutputDirPath' directory)' "*.asciidoc"' SearchOption.AllDirectories)) " is 137.
Long Statement,DocGenerator.AsciiDoc,RawAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\RawAsciidocVisitor.cs,Visit,The length of the statement  "					foreach (var file in Directory.EnumerateFiles(Path.Combine(Program.OutputDirPath' directory)' "*.asciidoc"' SearchOption.AllDirectories)) " is 137.
Long Statement,DocGenerator.Documentation.Files,DocumentationFile,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Documentation\Files\DocumentationFile.cs,CopyFileAsync,The length of the statement  "	        using (var sourceStream = new FileStream(sourceFile' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' FileOptions.Asynchronous | FileOptions.SequentialScan)) " is 162.
Long Statement,DocGenerator.Documentation.Files,DocumentationFile,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Documentation\Files\DocumentationFile.cs,CopyFileAsync,The length of the statement  "	        using (var destinationStream = new FileStream(destinationFile' FileMode.Create' FileAccess.Write' FileShare.None' 4096' FileOptions.Asynchronous | FileOptions.SequentialScan)) " is 175.
Long Statement,DocGenerator.Documentation.Files,RawDocumentationFile,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Documentation\Files\RawDocumentationFile.cs,CreateDocumentationLocation,The length of the statement  "			var testInDocumenationFolder = Regex.Replace(testFullPath' @"(^.+\\Tests\\|\" + this.Extension + "$)"' "").PascalToHyphen() + this.Extension; " is 141.
Long Statement,DocGenerator,StringExtensions,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\StringExtensions.cs,TryGetJsonForAnonymousType,The length of the statement  "					var builder = new StringBuilder($"Unable to serialize the following C# anonymous type string to json: {anonymousTypeString}"); " is 126.
Magic Number,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The following statement contains a magic number: _topSectionTitleLevel = _source.Directory.Name.Equals("request"' StringComparison.OrdinalIgnoreCase) &&  				_source.Directory.Parent != null &&  				_source.Directory.Parent.Name.Equals("search"' StringComparison.OrdinalIgnoreCase)  				? 2  				: 3;
Magic Number,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The following statement contains a magic number: _topSectionTitleLevel = _source.Directory.Name.Equals("request"' StringComparison.OrdinalIgnoreCase) &&  				_source.Directory.Parent != null &&  				_source.Directory.Parent.Name.Equals("search"' StringComparison.OrdinalIgnoreCase)  				? 2  				: 3;
Magic Number,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The following statement contains a magic number: if (document.Title == null && document.Count > 0)  			{  				var sectionTitle = document[0] as SectionTitle;    				// capture existing top level  				if (sectionTitle != null && sectionTitle.Level <= 3)  					_topSectionTitleLevel = sectionTitle.Level;    				if (sectionTitle == null || (sectionTitle.Level > 3))  				{  					var id = Path.GetFileNameWithoutExtension(_destination.Name);  					var title = id.LowercaseHyphenToPascal();  					sectionTitle = new SectionTitle(title' _topSectionTitleLevel);  					sectionTitle.Attributes.Add(new Anchor(id));  					_newDocument.Add(sectionTitle);  				}  			}
Magic Number,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The following statement contains a magic number: if (document.Title == null && document.Count > 0)  			{  				var sectionTitle = document[0] as SectionTitle;    				// capture existing top level  				if (sectionTitle != null && sectionTitle.Level <= 3)  					_topSectionTitleLevel = sectionTitle.Level;    				if (sectionTitle == null || (sectionTitle.Level > 3))  				{  					var id = Path.GetFileNameWithoutExtension(_destination.Name);  					var title = id.LowercaseHyphenToPascal();  					sectionTitle = new SectionTitle(title' _topSectionTitleLevel);  					sectionTitle.Attributes.Add(new Anchor(id));  					_newDocument.Add(sectionTitle);  				}  			}
Magic Number,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,Visit,The following statement contains a magic number: if (attributeEntry.Name == "xml-docs")  	        {                  var value = attributeEntry.Value;                    if (string.IsNullOrEmpty(value))                  {                      base.Visit(attributeEntry);                      return;                  }                    var parts = value.Split(':');                  var assemblyName = parts[0];                  var typeName = parts[1];                    string xmlDocsFile;                  Assembly assembly;                  string assemblyNamespace;                    //TODO: tidy this up                  switch (assemblyName.ToLowerInvariant())                  {                      case "elasticsearch.net":                          xmlDocsFile = Path.GetFullPath(Path.Combine(Program.BuildOutputPath' "Elasticsearch.Net.XML"));                          assembly = typeof(ElasticLowLevelClient).Assembly;                          assemblyNamespace = typeof(ElasticLowLevelClient).Namespace;                          break;                      default:                          xmlDocsFile = Path.GetFullPath(Path.Combine(Program.BuildOutputPath' "Nest.XML"));                          assembly = typeof(ElasticClient).Assembly;                          assemblyNamespace = typeof(ElasticClient).Namespace;                          break;                  }                    // build xml documentation file on the fly if it doesn't exist  	            if (!File.Exists(xmlDocsFile))  	            {                      var project = _projects[assemblyName];                      var compilation = project.GetCompilationAsync().Result;                        using (var peStream = new MemoryStream())                      using (var commentStream = File.Create(xmlDocsFile))                      {                          var emitResult = compilation.Emit(peStream' null' commentStream);                            if (!emitResult.Success)                          {                              var failures = emitResult.Diagnostics.Where(diagnostic =>                                  diagnostic.IsWarningAsError ||                                  diagnostic.Severity == DiagnosticSeverity.Error);                                var builder = new StringBuilder($"Unable to emit compilation for: {assemblyName}");                              foreach (var diagnostic in failures)                              {                                  builder.AppendLine($"{diagnostic.Id}: {diagnostic.GetMessage()}");                              }                              builder.AppendLine(new string('-'' 30));                                throw new Exception(builder.ToString());                          }                      }                  }                    var assemblyMembers = DocReader.Read(assembly' xmlDocsFile);                  var type = assembly.GetType(assemblyNamespace + "." + typeName);                  var visitor = new XmlDocsVisitor(type);                    visitor.VisitAssembly(assemblyMembers);                  if (visitor.LabeledListItems.Any())                  {                      var labeledList = new LabeledList();                      foreach (var item in visitor.LabeledListItems.OrderBy(l => l.Label))                      {                          labeledList.Items.Add(item);                      }                      _newDocument.Insert(_newDocument.IndexOf(attributeEntry)' labeledList);                  }              }
Magic Number,DocGenerator.AsciiDoc,GeneratedAsciidocVisitor,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\AsciiDoc\GeneratedAsciidocVisitor.cs,CreateSubsectionTitle,The following statement contains a magic number: if (level < 4)  				sectionTitle.IsFloating = true;
Magic Number,DocGenerator.Documentation.Files,DocumentationFile,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Documentation\Files\DocumentationFile.cs,CopyFileAsync,The following statement contains a magic number: using (var sourceStream = new FileStream(sourceFile' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' FileOptions.Asynchronous | FileOptions.SequentialScan))  	        using (var destinationStream = new FileStream(destinationFile' FileMode.Create' FileAccess.Write' FileShare.None' 4096' FileOptions.Asynchronous | FileOptions.SequentialScan))  	            await sourceStream.CopyToAsync(destinationStream);
Magic Number,DocGenerator.Documentation.Files,DocumentationFile,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\Documentation\Files\DocumentationFile.cs,CopyFileAsync,The following statement contains a magic number: using (var sourceStream = new FileStream(sourceFile' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' FileOptions.Asynchronous | FileOptions.SequentialScan))  	        using (var destinationStream = new FileStream(destinationFile' FileMode.Create' FileAccess.Write' FileShare.None' 4096' FileOptions.Asynchronous | FileOptions.SequentialScan))  	            await sourceStream.CopyToAsync(destinationStream);
Magic Number,DocGenerator,StringExtensions,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\StringExtensions.cs,RemoveNumberOfLeadingTabsOrSpacesAfterNewline,The following statement contains a magic number: return Regex.Replace(                  Regex.Replace(                      input'                      $"(?<tabs>[\n|\r\n]+\t{{{numberOfTabs}}})"'                      m => m.Value.Replace("\t"' string.Empty)                      )'                  $"(?<spaces>[\n|\r\n]+\\s{{{numberOfTabs * 4}}})"'                  m => m.Value.Replace(" "' string.Empty)                  );
Magic Number,DocGenerator,StringExtensions,C:\repos\elasticsearch_elasticsearch-net\src\CodeGeneration\DocGenerator\StringExtensions.cs,TryGetJsonForAnonymousType,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				var result = compilation.Emit(ms);    				if (!result.Success)  				{  					var failures = result.Diagnostics.Where(diagnostic =>  						diagnostic.IsWarningAsError ||  						diagnostic.Severity == DiagnosticSeverity.Error);    					var builder = new StringBuilder($"Unable to serialize the following C# anonymous type string to json: {anonymousTypeString}");  					foreach (var diagnostic in failures)  					{  						builder.AppendLine($"{diagnostic.Id}: {diagnostic.GetMessage()}");  					}  					builder.AppendLine(new string('-'' 30));    					Console.Error.WriteLine(builder.ToString());  					return false;  				}    				ms.Seek(0' SeekOrigin.Begin);    				var assembly = Assembly.Load(ms.ToArray());  				var type = assembly.GetType("Temporary.Json");  				var obj = Activator.CreateInstance(type);    				var output = type.InvokeMember("Write"'  					BindingFlags.Default | BindingFlags.InvokeMethod'  					null'  					obj'  					new object[] { });    				json = output.ToString();  				return true;  			}
