Implementation smell,Namespace,Class,File,Method,Description
Long Method,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IPBanConfig,The method has 112 lines of code.
Long Method,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,FilterRanges,The method has 115 lines of code.
Long Method,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,OSUtility,The method has 117 lines of code.
Complex Method,DigitalRuby.IPBanCore,DefaultHttpRequestMaker,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IHttpRequestMaker.cs,MakeRequestAsync,Cyclomatic complexity of the method is 9
Complex Method,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IPBanConfig,Cyclomatic complexity of the method is 16
Complex Method,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,PopulateList,Cyclomatic complexity of the method is 11
Complex Method,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,CreateFirewall,Cyclomatic complexity of the method is 10
Complex Method,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,GetPortRangeStringBlockExcept,Cyclomatic complexity of the method is 8
Complex Method,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,FilterRanges,Cyclomatic complexity of the method is 18
Complex Method,DigitalRuby.IPBanCore,IPBanMemoryFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanMemoryFirewall.cs,IsIPAddressBlocked,Cyclomatic complexity of the method is 11
Complex Method,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetIPAddressInfoFromRegex,Cyclomatic complexity of the method is 14
Complex Method,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingFailedLogins,Cyclomatic complexity of the method is 9
Complex Method,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,Cyclomatic complexity of the method is 9
Complex Method,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,LoadFirewall,Cyclomatic complexity of the method is 10
Complex Method,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,HandleExpiredLoginsAndBans,Cyclomatic complexity of the method is 9
Complex Method,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetUrl,Cyclomatic complexity of the method is 12
Complex Method,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,Cyclomatic complexity of the method is 12
Complex Method,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,GetTypeFromString,Cyclomatic complexity of the method is 8
Complex Method,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,Cyclomatic complexity of the method is 13
Complex Method,DigitalRuby.IPBanCore,LevenshteinUnsafe,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LevenshteinUnsafe.cs,Distance,Cyclomatic complexity of the method is 10
Complex Method,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,PingFiles,Cyclomatic complexity of the method is 8
Complex Method,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,GetCurrentWatchedFiles,Cyclomatic complexity of the method is 8
Complex Method,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,OSUtility,Cyclomatic complexity of the method is 13
Complex Method,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,UserIsActive,Cyclomatic complexity of the method is 15
Complex Method,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRule,Cyclomatic complexity of the method is 8
Complex Method,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRuleDelta,Cyclomatic complexity of the method is 9
Complex Method,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,ExtractEventViewerXml,Cyclomatic complexity of the method is 14
Complex Method,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,BlockOrAllowIPAddresses,Cyclomatic complexity of the method is 8
Complex Method,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,BlockIPAddressesDelta,Cyclomatic complexity of the method is 12
Long Parameter List,DigitalRuby.IPBanCore,IBannedIPAddressHandler,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IBannedIPAddressHandler.cs,HandleBannedIPAddress,The method has 7 parameters. Parameters: ipAddress' source' userName' osName' osVersion' assemblyVersion' requestMaker
Long Parameter List,DigitalRuby.IPBanCore,DefaultBannedIPAddressHandler,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IBannedIPAddressHandler.cs,HandleBannedIPAddress,The method has 7 parameters. Parameters: ipAddress' source' userName' osName' osVersion' assemblyVersion' requestMaker
Long Parameter List,DigitalRuby.IPBanCore,NullBannedIPAddressHandler,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IBannedIPAddressHandler.cs,HandleBannedIPAddress,The method has 7 parameters. Parameters: ipAddress' source' userName' osName' osVersion' assemblyVersion' requestMaker
Long Parameter List,DigitalRuby.IPBanCore,IIPBanDelegate,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IIPBanService.cs,IPAddressBanned,The method has 8 parameters. Parameters: ip' source' userName' machineGuid' osName' osVersion' timestamp' banned
Long Parameter List,DigitalRuby.IPBanCore,IIPBanDelegate,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IIPBanService.cs,LoginAttemptFailed,The method has 7 parameters. Parameters: ip' source' userName' machineGuid' osName' osVersion' timestamp
Long Parameter List,DigitalRuby.IPBanCore,IIPBanDelegate,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IIPBanService.cs,LoginAttemptSucceeded,The method has 7 parameters. Parameters: ip' source' userName' machineGuid' osName' osVersion' timestamp
Long Parameter List,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IsMatch,The method has 5 parameters. Parameters: entry' set' ranges' others' regex
Long Parameter List,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,PopulateList,The method has 6 parameters. Parameters: set' ranges' others' regex' setValue' regexValue
Long Parameter List,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,GetConfig,The method has 5 parameters. Parameters: key' value' minValue' maxValue' clampSmallTimeSpan
Long Parameter List,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetBanDateInternal,The method has 6 parameters. Parameters: ipAddressObj' banDate' banEndDate' now' conn' tran
Long Parameter List,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,IncrementFailedLoginCount,The method has 6 parameters. Parameters: ipAddress' userName' source' dateTime' increment' transaction
Long Parameter List,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetBanDates,The method has 5 parameters. Parameters: ipAddress' banStartDate' banEndDate' now' transaction
Long Parameter List,DigitalRuby.IPBanCore,IPBanIPAddressLogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanIPAddressLogFileScanner.cs,IPBanIPAddressLogFileScanner,The method has 9 parameters. Parameters: loginHandler' dns' source' pathAndMask' recursive' regexFailure' regexSuccess' maxFileSizeBytes' pingIntervalMilliseconds
Long Parameter List,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The method has 9 parameters. Parameters: ipAddress' source' userName' bannedIpAddresses' startBanDate' configBlacklisted' counter' extraInfo' transaction
Long Parameter List,DigitalRuby.IPBanCore,IPBanUriFirewallRule,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanUriFirewallRule.cs,IPBanUriFirewallRule,The method has 6 parameters. Parameters: firewall' whitelistChecker' httpRequestMaker' rulePrefix' interval' uri
Long Parameter List,DigitalRuby.IPBanCore,NLogWrapper,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\Logger.cs,Log,The method has 5 parameters. Parameters: logLevel' eventId' state' exception' formatter
Long Parameter List,DigitalRuby.IPBanCore,IPAddressLogEvent,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\Logger.cs,IPAddressLogEvent,The method has 6 parameters. Parameters: ipAddress' userName' source' count' type' timestamp
Long Parameter List,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,RunProcess,The method has 5 parameters. Parameters: program' requireExitCode' lines' commandLine' args
Long Parameter List,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,CreateOrUpdateRule,The method has 6 parameters. Parameters: ruleName' action' hashType' maxCount' allowedPorts' cancelToken
Long Parameter List,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRule,The method has 7 parameters. Parameters: ruleName' action' ipAddresses' hashType' maxCount' allowPorts' cancelToken
Long Parameter List,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRuleDelta,The method has 8 parameters. Parameters: ruleName' action' deltas' hashType' maxCount' deleteRule' allowPorts' cancelToken
Long Parameter List,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,CreateBlockRule,The method has 5 parameters. Parameters: ipAddresses' index' count' ruleName' allowedPorts
Long Parameter List,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,CreateAllowRule,The method has 5 parameters. Parameters: ipAddresses' index' count' ruleName' allowedPorts
Long Parameter List,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,BlockOrAllowIPAddresses,The method has 5 parameters. Parameters: ruleNamePrefix' block' ipAddresses' allowedPorts' cancelToken
Long Parameter List,NetFwTypeLib,INetFwMgr,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewallNetFwTypeLibImport.cs,IsPortAllowed,The method has 7 parameters. Parameters: imageFileName' IpVersion' portNumber' localAddress' ipProtocol' allowed' restricted
Long Parameter List,NetFwTypeLib,INetFwMgr,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewallNetFwTypeLibImport.cs,IsIcmpTypeAllowed,The method has 5 parameters. Parameters: IpVersion' localAddress' Type' allowed' restricted
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter minimumTimeBetweenFailedLoginAttempts is 37.
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter minimumTimeBetweenSuccessfulLoginAttempts is 41.
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter resetFailedLoginCountForUnbannedIPAddresses is 43.
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter clearBannedIPAddressesOnRestart is 31.
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter userNameWhitelistMaximumEditDistance is 36.
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter failedLoginAttemptsBeforeBanUserNameWhitelist is 45.
Long Identifier,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,,The length of the parameter useDefaultBannedIPAddressHandler is 32.
Long Identifier,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,CreateAndStartIPBanTestService,The length of the parameter defaultBannedIPAddressHandlerUrl is 32.
Long Identifier,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateExpiredIPAddressStates,The length of the parameter unbanIPAddressesToNotifyDelegate is 32.
Long Identifier,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,,The length of the parameter firewallNeedsBlockedIPAddressesUpdate is 37.
Long Statement,DigitalRuby.IPBanCore,DefaultBannedIPAddressHandler,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IBannedIPAddressHandler.cs,HandleBannedIPAddress,The length of the statement  "                string url = $"/IPSubmitBanned?ip={ipAddress.UrlEncode()}&osname={osName.UrlEncode()}&osversion={osVersion.UrlEncode()}&source={source.UrlEncode()}&timestamp={timestamp.UrlEncode()}&userName={userName.UrlEncode()}&version={assemblyVersion.UrlEncode()}"; " is 253.
Long Statement,DigitalRuby.IPBanCore,DefaultBannedIPAddressHandler,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IBannedIPAddressHandler.cs,HandleBannedIPAddress,The length of the statement  "                string hash = Convert.ToBase64String(new SHA256Managed().ComputeHash(Encoding.UTF8.GetBytes(url + IPBanResources.IPBanKey1))); " is 126.
Long Statement,DigitalRuby.IPBanCore,TestDnsLookup,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IDnsLookup.cs,GetHostEntryAsync,The length of the statement  "            return Task.FromResult(new IPHostEntry { HostName = hostNameOrAddress' AddressList = new System.Net.IPAddress[] { System.Net.IPAddress.Parse("10.10.10.10") } }); " is 161.
Long Statement,DigitalRuby.IPBanCore,DefaultHttpRequestMaker,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IHttpRequestMaker.cs,MakeRequestAsync,The length of the statement  "            if (uri.Host.IndexOf("localhost"' StringComparison.OrdinalIgnoreCase) >= 0 || uri.Host.Contains("127.0.0.1") || uri.Host.Contains("::1")) " is 137.
Long Statement,DigitalRuby.IPBanCore,DefaultSystemMemory,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\ISystemMemory.cs,GetSystemMemory,The length of the statement  "                        Match totalMatch = Regex.Match(total' "[0-9]+"' RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.CultureInvariant); " is 129.
Long Statement,DigitalRuby.IPBanCore,DefaultSystemMemory,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\ISystemMemory.cs,GetSystemMemory,The length of the statement  "                        Match availableMatch = Regex.Match(available' "[0-9]+"' RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.CultureInvariant); " is 137.
Long Statement,DigitalRuby.IPBanCore,IPBanBlockIPAddressesUpdater,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanBlockIPAddressesUpdater.cs,Update,The length of the statement  "                    string[] lines = (await File.ReadAllLinesAsync(textFilePath' cancelToken)).Where(l => IPAddress.TryParse(l' out _)).ToArray(); " is 126.
Long Statement,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,PopulateList,The length of the statement  "                foreach (string entry in setValue.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries).Select(e => e.Trim())) " is 121.
Long Statement,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,ParseFirewallBlockRules,The length of the statement  "            IEnumerable<string> firewallBlockRuleList = firewallBlockRuleString.Trim().Split('\n').Select(s => s.Trim()).Where(s => s.Length != 0); " is 135.
Long Statement,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,ParseFirewallBlockRules,The length of the statement  "                    Logger.Warn("Firewall block rule entry should have 3 comma separated pieces: name;ips;ports. Invalid entry: {0}"' firewallBlockRule); " is 133.
Long Statement,DigitalRuby.IPBanCore,EventViewerExpressionGroup,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfigWindowsEventViewer.cs,AppendQueryString,The length of the statement  "            ulong keywordsDecimal = ulong.Parse(Keywords.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture); " is 121.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetBanDateInternal,The length of the statement  "            // state will stay at 0 if it was 0 else it will become 1 which means the ban is pending' state 0 means ban is already active in firewall " is 137.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetBanDateInternal,The length of the statement  "            int count = ExecuteNonQuery(@"INSERT INTO IPAddresses(IPAddress' IPAddressText' LastFailedLogin' FailedLoginCount' BanDate' State' BanEndDate' Source' UserName) " is 160.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetBanDateInternal,The length of the statement  "                DO UPDATE SET BanDate = @Param2' State = CASE WHEN State = 0 THEN 0 ELSE 1 END' BanEndDate = @Param3 WHERE State <> 2 AND (BanEndDate IS NULL OR BanEndDate <= @Param4); "' " is 171.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,OnInitialize,The length of the statement  "            ExecuteNonQuery("CREATE TABLE IF NOT EXISTS IPAddresses (IPAddress VARBINARY(16) NOT NULL' IPAddressText VARCHAR(64) NOT NULL' LastFailedLogin BIGINT NOT NULL' FailedLoginCount BIGINT NOT NULL' BanDate BIGINT NULL' PRIMARY KEY (IPAddress))"); " is 242.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,IncrementFailedLoginCount,The length of the statement  "                string command = @"INSERT INTO IPAddresses(IPAddress' IPAddressText' LastFailedLogin' FailedLoginCount' BanDate' State' BanEndDate' UserName' Source) " is 149.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,TryGetBanDates,The length of the statement  "                using (SqliteDataReader reader = ExecuteReader("SELECT BanDate' BanEndDate FROM IPAddresses WHERE IPAddress = @Param0"' tran?.DBConnection' tran?.DBTransaction' ipBytes)) " is 170.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetBannedIPAddresses,The length of the statement  "                        count += SetBanDateInternal(ipAddressObj' ipAddress.Item2' ipAddress.Item3' now' tran.DBConnection' tran.DBTransaction); " is 120.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,TryGetIPAddressState,The length of the statement  "                state = (IPAddressState)ExecuteScalar<int>("SELECT State FROM IPAddresses WHERE IPAddress = @Param0"' tran?.DBConnection' tran?.DBTransaction' ipBytes); " is 152.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,SetIPAddressesState,The length of the statement  "                        count += ExecuteNonQuery("UPDATE IPAddresses SET State = @Param0 WHERE IPAddress = @Param1"' tran.DBConnection' tran.DBTransaction' stateInt' ipBytes); " is 151.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,EnumerateIPAddressesDeltaAndUpdateState,The length of the statement  "                reader = ExecuteReader("SELECT IPAddressText' State FROM IPAddresses WHERE State IN (1' 2' 4) ORDER BY IPAddressText"' tran.DBConnection' tran.DBTransaction); " is 158.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,DeleteIPAddress,The length of the statement  "                return (ExecuteNonQuery("DELETE FROM IPAddresses WHERE IPAddress = @Param0"' ipDBTransaction?.DBConnection' ipDBTransaction?.DBTransaction' ipBytes) != 0); " is 155.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,EnumerateIPAddresses,The length of the statement  "            using (SqliteDataReader reader = ExecuteReader(@"SELECT IPAddressText' LastFailedLogin' FailedLoginCount' BanDate' State' BanEndDate' UserName' Source " is 150.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,EnumerateIPAddresses,The length of the statement  "                WHERE (@Param0 IS NULL AND @Param1 IS NULL) OR (@Param0 IS NOT NULL AND State = 3 AND LastFailedLogin <= @Param0) OR (@Param1 IS NOT NULL AND State IN (0' 1) AND BanEndDate <= @Param1) " is 184.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,EnumerateBannedIPAddresses,The length of the statement  "            using (SqliteDataReader reader = ExecuteReader("SELECT IPAddressText FROM IPAddresses WHERE BanDate IS NOT NULL AND State = 0 ORDER BY IPAddress"' null' null)) " is 159.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,DeleteIPAddresses,The length of the statement  "                            count += ExecuteNonQuery("DELETE FROM IPAddresses WHERE IPAddress = @Param0"' conn' tran' ipAddressObj.GetAddressBytes()); " is 122.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,DeleteIPAddresses,The length of the statement  "            using (SqliteDataReader reader = ExecuteReader("SELECT IPAddressText FROM IPAddresses WHERE IPAddress BETWEEN @Param0 AND @Param1 AND length(IPAddress) = length(@Param0) AND length(IPAddress) = length(@Param1); " + " is 214.
Long Statement,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,DeleteIPAddresses,The length of the statement  "                "DELETE FROM IPAddresses WHERE IPAddress BETWEEN @Param0 AND @Param1 AND length(IPAddress) = length(@Param0) AND length(IPAddress) = length(@Param1);"' null' null' start' end)) " is 176.
Long Statement,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,CreateFirewall,The length of the statement  "                    select new { FirewallType = fwType' OS = fwType.GetCustomAttribute<RequiredOperatingSystemAttribute>()' Name = fwType.GetCustomAttribute<CustomNameAttribute>() }; " is 162.
Long Statement,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,CreateFirewall,The length of the statement  "                            (osAndFirewall.TryGetValue(OSUtility.Name' out string firewallToUse) || osAndFirewall.TryGetValue("*"' out firewallToUse))) " is 123.
Long Statement,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,CreateFirewall,The length of the statement  "                            MethodInfo available = result.FirewallType.GetMethod("IsAvailable"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 143.
Long Statement,DigitalRuby.IPBanCore,IPBanMemoryFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanMemoryFirewall.cs,AllowIPAddresses,The length of the statement  "                allowRuleRanges[ruleNamePrefix] = new MemoryFirewallRuleRanges(ipAddresses.Select(i => IPAddressRange.Parse(i)).ToList()' allowedPorts?.ToList()' false);  " is 153.
Long Statement,DigitalRuby.IPBanCore,IPBanMemoryFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanMemoryFirewall.cs,GetRuleNames,The length of the statement  "                foreach (string key in blockRules.Keys.Union(blockRulesRanges.Keys).Where(k => k.StartsWith(prefix' StringComparison.OrdinalIgnoreCase))) " is 137.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,CreateService,The length of the statement  "            return Activator.CreateInstance(instanceType' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' null' null) as T; " is 139.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetIPAddressInfoFromRegex,The length of the statement  "            Match repeater = Regex.Match(text' "message repeated (?<count>[0-9]+) times"' RegexOptions.CultureInvariant | RegexOptions.IgnoreCase); " is 135.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetIPAddressInfoFromRegex,The length of the statement  "            return new IPAddressLogEvent(ipAddress' userName' source' repeatCount' IPAddressEventType.FailedLogin) { FoundMatch = foundMatch }; " is 131.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,WriteConfigAsync,The length of the statement  "            using (XmlReader xmlReader = XmlReader.Create(new StringReader(xml)' new XmlReaderSettings { CheckCharacters = false })) " is 120.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,FirewallTask,The length of the statement  "                KeyValuePair<bool' Func<CancellationToken' Task>> nextAction = await queue.TryDequeueAsync(serviceCancelTokenSource.Token); " is 123.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateLogFiles,The length of the statement  "                            Regex.IsMatch(OSUtility.Description' newFile.PlatformRegex.ToString().Trim()' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 135.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateLogFiles,The length of the statement  "                                newFile.Source' pathAndMask' newFile.Recursive' newFile.FailedLoginRegex' newFile.SuccessfulLoginRegex' newFile.MaxFileSize' newFile.PingInterval); " is 147.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ReadAppSettings,The length of the statement  "                ConfigFilePath = (!File.Exists(ConfigFilePath) ? Path.Combine(AppDomain.CurrentDomain.BaseDirectory' IPBanService.ConfigFileName) : ConfigFilePath); " is 148.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ReadAppSettings,The length of the statement  "                    whitelistChanged = (Config is null || Config.WhiteList != newConfig.WhiteList || Config.WhiteListRegex != newConfig.WhiteListRegex); " is 132.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ReadAppSettings,The length of the statement  "                    throw new ApplicationException("Configuration failed to load' make sure to check for XML errors or unblock all the files."' ex); " is 128.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ReadAppSettings,The length of the statement  "            else if (!Config.UseDefaultBannedIPAddressHandler && BannedIPAddressHandler != null && BannedIPAddressHandler is DefaultBannedIPAddressHandler) " is 143.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,SetNetworkInfo,The length of the statement  "                    IPAddress ipAddress = await ExternalIPAddressLookup.LookupExternalIPAddressAsync(RequestMaker' Config.ExternalIPAddressUrl); " is 124.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingFailedLogins,The length of the statement  "                            bool editDistanceBlacklisted = (ipBlacklisted || userBlacklisted || userFailsWhitelistRegex ? false : !Config.IsUserNameWithinMaximumEditDistanceOfUserNameWhitelist(userName)); " is 176.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingFailedLogins,The length of the statement  "                            // if the ip address is black listed or the ip address has reached the maximum failed login attempts before ban' ban the ip address " is 131.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingFailedLogins,The length of the statement  "                                Logger.Info("IP blacklisted: {0}' user name blacklisted: {1}' fails user name white list regex: {2}' user name edit distance blacklisted: {3}"' " is 143.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingFailedLogins,The length of the statement  "                                    Logger.Debug("Failed login count {0} >= ban count {1}{2}"' newCount' maxFailedLoginAttempts' (configBlacklisted ? " config blacklisted" : string.Empty)); " is 153.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingFailedLogins,The length of the statement  "                                    AddBannedIPAddress(ipAddress' source' userName' bannedIpAddresses' now' configBlacklisted' newCount' string.Empty' transaction); " is 128.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingSuccessfulLogins,The length of the statement  "                            IPBanDelegate.LoginAttemptSucceeded(info.IPAddress' info.Source' info.UserName' MachineGuid' OSName' OSVersion' info.Timestamp); " is 128.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The length of the statement  "            if (banTimes.Length > 1 && ipDB.TryGetIPAddress(ipAddress' out IPBanDB.IPAddressEntry ipEntry' transaction) && ipEntry.BanStartDate != null && ipEntry.BanEndDate != null) " is 170.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The length of the statement  "            // if this is a delegate callback (counter of 0)' exit out - we don't want to run handlers or processes for shared banned ip addresses " is 134.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The length of the statement  "            Logger.Warn(startBanDate' "Banning ip address: {0}' user name: {1}' config black listed: {2}' count: {3}' extra info: {4}"' " is 123.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The length of the statement  "            if (BannedIPAddressHandler != null && System.Net.IPAddress.TryParse(ipAddress' out System.Net.IPAddress ipAddressObj) && !ipAddressObj.IsInternal()) " is 148.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The length of the statement  "                    ExecuteTask(BannedIPAddressHandler.HandleBannedIPAddress(ipAddress' source' userName' OSName' OSVersion' AssemblyVersion' RequestMaker)); " is 137.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateBannedIPAddressesOnStart,The length of the statement  "                ipDB.SetBannedIPAddresses(Firewall.EnumerateBannedIPAddresses().Select(i => new Tuple<string' DateTime' DateTime>(i' now' banEnd))' UtcNow); " is 140.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateBannedIPAddressesOnStart,The length of the statement  "                // ensure firewall is up to date with all the correct ip addresses' if any ip are in the db but not in the firewall' they will " is 126.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateBannedIPAddressesOnStart,The length of the statement  "                // set firewall update flag' if any deltas are lingering in the db (state = add pending or remove pending) they will get " is 120.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,HandleExpiredLoginsAndBans,The length of the statement  "                else if (ipAddress.State == IPBanDB.IPAddressState.Active && ipAddress.BanStartDate != null && ipAddress.BanEndDate != null) " is 124.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,HandleExpiredLoginsAndBans,The length of the statement  "                    // check gap of ban end date vs ban date and see where we are in the ban times' if we have gone beyond the last ban time' " is 121.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,HandleExpiredLoginsAndBans,The length of the statement  "                    // we need to unban the ip address and remove from db' otherwise the ban end date needs to be increased to the next ban interval and " is 132.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,HandleExpiredLoginsAndBans,The length of the statement  "                        ipDB.SetIPAddressesState(new string[] { ipAddress.IPAddress }' IPBanDB.IPAddressState.RemovePendingBecomeFailedLogin' transaction); " is 131.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetUrl,The length of the statement  "            if ((urlType == UrlType.Start && GotStartUrl) || string.IsNullOrWhiteSpace(LocalIPAddressString) || string.IsNullOrWhiteSpace(FQDN)) " is 132.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetUrl,The length of the statement  "                    KeyValuePair<string' object>[] headers = (Authorization is null ? null : new KeyValuePair<string' object>[] { new KeyValuePair<string' object>("Authorization"' Authorization) }); " is 178.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,UpdateFirewall,The length of the statement  "                List<IPBanFirewallIPAddressDelta> deltas = ipDB.EnumerateIPAddressesDeltaAndUpdateState(true' UtcNow' Config.ResetFailedLoginCountForUnbannedIPAddresses).Where(i => !i.Added || !IsWhitelisted(i.IPAddress)).ToList(); " is 215.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessIPAddressEvent,The length of the statement  "                IPAddressLogEvent existing = pendingEvents.FirstOrDefault(p => p.IPAddress == newEvent.IPAddress && (p.UserName is null || p.UserName == newEvent.UserName)); " is 157.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingLogEvents,The length of the statement  "                            AddBannedIPAddress(evt.IPAddress' evt.Source' evt.UserName' bannedIPs' evt.Timestamp' false' evt.Count' string.Empty' transaction); " is 131.
Long Statement,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ParseAndAddUriFirewallRules,The length of the statement  "            List<IPBanUriFirewallRule> toRemove = new List<IPBanUriFirewallRule>(updaters.Where(u => u is IPBanUriFirewallRule).Select(u => u as IPBanUriFirewallRule)); " is 156.
Long Statement,DigitalRuby.IPBanCore,IPBanServiceRunner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanServiceRunner.cs,RunAsync,The length of the statement  "            if (args.Length != 0 && (args[0].Equals("info"' StringComparison.OrdinalIgnoreCase) || args[0].Equals("-info"' StringComparison.OrdinalIgnoreCase))) " is 148.
Long Statement,DigitalRuby.IPBanCore,IPBanUnblockIPAddressesUpdater,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanUnblockIPAddressesUpdater.cs,Update,The length of the statement  "                    string[] lines = (await File.ReadAllLinesAsync(textFilePath' cancelToken)).Where(l => IPAddress.TryParse(l' out _)).ToArray(); " is 126.
Long Statement,DigitalRuby.IPBanCore,IPBanUnblockIPAddressesUpdater,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanUnblockIPAddressesUpdater.cs,UnblockIPAddresses,The length of the statement  "            service.AddIPAddressLogEvents(ipAddresses.Select(i => new IPAddressLogEvent(i' string.Empty' "Unblock"' 1' IPAddressEventType.Unblocked))); " is 139.
Long Statement,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,ToStringXml,The length of the statement  "            using (XmlWriter writer = XmlWriter.Create(xml' new XmlWriterSettings { Indent = true' NewLineHandling = NewLineHandling.None' OmitXmlDeclaration = true })) " is 156.
Long Statement,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The length of the statement  "            // The original IPv6 Site Local addresses (fec0::/10) are deprecated. Unfortunately IsIPv6SiteLocal only checks for the original deprecated version: " is 148.
Long Statement,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The length of the statement  "            //      fc00::/8 is not defined yet' but might be used in the future for internal-use addresses that are registered in a central place (ULA Central).  " is 149.
Long Statement,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,GetLocalIPAddressesAsync,The length of the statement  "                return (await dns.GetHostAddressesAsync(dns.GetHostName())).Union(localHostIP).Where(i => addressFamily is null || i.AddressFamily == addressFamily).ToArray(); " is 159.
Long Statement,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsAnonymousType,The length of the statement  "            return (type != null && Attribute.IsDefined(type' typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute)' false) && " is 127.
Long Statement,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,AsTask,The length of the statement  "            tcs.Task.ContinueWith((_' state) => ((RegisteredWaitHandle)state).Unregister(null)' registration' TaskScheduler.Default); " is 121.
Long Statement,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Contains,The length of the statement  "            return Bits.LtECore(this.Begin.GetAddressBytes()' adrBytes' offset) && Bits.GtECore(this.End.GetAddressBytes()' adrBytes' offset); " is 130.
Long Statement,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,LtE,The length of the statement  "                if (A.Length <= offset || B.Length <= offset) throw new ArgumentException("offset must be less than length of A and B."' nameof(offset)); " is 137.
Long Statement,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GtE,The length of the statement  "                if (A.Length <= offset || B.Length <= offset) throw new ArgumentException("offset must be less than length of A and B."' nameof(offset)); " is 137.
Long Statement,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMask,The length of the statement  "                if (bitsLen > 0) maskBytes[bytesLen] = (byte)~Enumerable.Range(1' 8 - bitsLen).Select(n => 1 << n - 1).Aggregate((a' b) => a | b); " is 130.
Long Statement,DigitalRuby.IPBanCore,PortRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Parse,The length of the statement  "            return new PortRange(int.Parse(pieces[0]' CultureInfo.InvariantCulture)' int.Parse(pieces[1]' CultureInfo.InvariantCulture)); " is 125.
Long Statement,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,ReplacePathVars,The length of the statement  "            return path.Replace("{year}"' nowUtc.Year.ToString("0000")).Replace("{month}"' nowUtc.Month.ToString("00")).Replace("{day}"' nowUtc.Day.ToString("00")) " is 151.
Long Statement,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,ReplacePathVars,The length of the statement  "                .Replace("{year-local}"' nowLocal.Year.ToString("0000")).Replace("{month-local}"' nowLocal.Month.ToString("00")).Replace("{day-local}"' nowLocal.Day.ToString("00")); ; " is 167.
Long Statement,DigitalRuby.IPBanCore,IPAddressLogEvent,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\Logger.cs,ToString,The length of the statement  "            return $"IP: {IPAddress}' Match: {FoundMatch}' UserName: {UserName}' Source: {Source}' Count: {Count}' Type: {Type}' Timestamp: {Timestamp}"; " is 141.
Long Statement,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,LoadVersionFromWmiApi,The length of the statement  "                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT Caption' Version FROM Win32_OperatingSystem")) " is 126.
Long Statement,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,StartProcessAndWait,The length of the statement  "                throw new ApplicationException($"Program {program} {args}: failed with exit code {process.ExitCode}' output: {output}"); " is 120.
Long Statement,DigitalRuby.IPBanCore,SqliteDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\SqliteDB.cs,ExecuteNonQuery,The length of the statement  "                        throw new InvalidOperationException("Connection created a command with an existing transaction that does not match passed transaction' this is an error condition"); " is 164.
Long Statement,DigitalRuby.IPBanCore,SqliteDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\SqliteDB.cs,ExecuteReader,The length of the statement  "            return command.ExecuteReader((closeConnection && conn != InMemoryConnection ? System.Data.CommandBehavior.CloseConnection : System.Data.CommandBehavior.Default)); " is 162.
Long Statement,DigitalRuby.IPBanCore,SqliteDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\SqliteDB.cs,OpenConnection,The length of the statement  "                ExecuteNonQuery($"PRAGMA auto_vacuum = INCREMENTAL; PRAGMA journal_mode = WAL; PRAGMA busy_timeout = 30000; PRAGMA synchronous = NORMAL; PRAGMA foreign_keys = ON; PRAGMA temp_store = MEMORY; {additionalPragmas}"' conn' (SqliteTransaction)null); " is 244.
Long Statement,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,RightShift,The length of the statement  "            return new UInt128(value._mostSignificant >> numberOfBits' (value._leastSignificant >> numberOfBits) + (value._mostSignificant << (64 - numberOfBits))); " is 152.
Long Statement,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,LeftShift,The length of the statement  "            return new UInt128((value._mostSignificant << numberOfBits) + (value._leastSignificant >> (64 - numberOfBits))' value._leastSignificant << numberOfBits); " is 153.
Long Statement,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,BitwiseAnd,The length of the statement  "            return new UInt128(value1._mostSignificant & value2._mostSignificant' value1._leastSignificant & value2._leastSignificant); " is 123.
Long Statement,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,BitwiseOr,The length of the statement  "            return new UInt128(value1._mostSignificant | value2._mostSignificant' value1._leastSignificant | value2._leastSignificant); " is 123.
Long Statement,DigitalRuby.IPBanCore,IPBanMain,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\IPBanMain.cs,MainService,The length of the statement  "                ExtensionMethods.FileWriteAllTextWithRetry(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "startup_fail.txt")' ex.ToString()); " is 141.
Long Statement,DigitalRuby.IPBanCore,IPBanPlugin,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\IPBanPlugin.cs,IPBanLoginFailed,The length of the statement  "                    File.AppendAllText($"/var/log/ipbancustom_{ProcessName}.log"' $"{DateTime.UtcNow.ToString("u")}' ipban failed login' ip address: {remoteIpAddress}' source: {source}' user: {userName}\n"); " is 187.
Long Statement,DigitalRuby.IPBanCore,IPBanPlugin,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\IPBanPlugin.cs,IPBanLoginSucceeded,The length of the statement  "                    File.AppendAllText($"/var/log/ipbancustom_{ProcessName}.log"' $"{DateTime.UtcNow.ToString("u")}' ipban success login' ip address: {remoteIpAddress}' source: {source}' user: {userName}\n"); " is 188.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,CreateOrUpdateRule,The length of the statement  "                portString = " -m multiport -p tcp --dports " + portList.Replace('-'' ':') + " "; // iptables uses ':' instead of '-' for range " is 127.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRule,The length of the statement  "                        writer.WriteLine($"flush {ruleName}");// hash:{hashType} family {INetFamily} hashsize {hashSize} maxelem {maxCount} -exist"); " is 125.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRule,The length of the statement  "                    writer.WriteLine($"create {ruleName} hash:{hashType} family {INetFamily} hashsize {hashSize} maxelem {maxCount} -exist"); " is 121.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRuleDelta,The length of the statement  "                    writer.WriteLine($"create {ruleName} hash:{hashType} family {INetFamily} hashsize {hashSize} maxelem {maxCount} -exist"); " is 121.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,BlockIPAddresses,The length of the statement  "                return Task.FromResult(UpdateRule(ruleName' "DROP"' ipAddresses' hashTypeSingleIP' blockRuleMaxCount' allowedPorts' cancelToken)); " is 130.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,BlockIPAddressesDelta,The length of the statement  "                return Task.FromResult(UpdateRuleDelta(ruleName' "DROP"' deltas' hashTypeSingleIP' blockRuleMaxCount' false' allowedPorts' cancelToken)); " is 137.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,BlockIPAddresses,The length of the statement  "                return Task.FromResult(UpdateRule(RulePrefix + ruleNamePrefix' "DROP"' ranges.Select(r => r.ToCidrString())' hashTypeCidrMask' blockRuleRangesMaxCount' allowedPorts' cancelToken)); " is 180.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,AllowIPAddresses,The length of the statement  "                return Task.FromResult(UpdateRule(AllowRuleName' "ACCEPT"' ipAddresses' hashTypeSingleIP' allowRuleMaxCount' null' cancelToken)); " is 129.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,AllowIPAddresses,The length of the statement  "                return Task.FromResult(UpdateRule(RulePrefix + ruleNamePrefix' "ACCEPT"' ipAddresses.Select(r => r.ToCidrString())' hashTypeCidrMask' blockRuleMaxCount' allowedPorts' cancelToken)); " is 181.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,BlockIPAddresses,The length of the statement  "            IEnumerable<string> ipv4 = ipAddresses.Where(i => IPAddress.TryParse(i' out IPAddress obj) && obj.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork); " is 162.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,BlockIPAddresses,The length of the statement  "            IEnumerable<string> ipv6 = ipAddresses.Where(i => IPAddress.TryParse(i' out IPAddress obj) && obj.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6); " is 164.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,BlockIPAddressesDelta,The length of the statement  "            List<IPBanFirewallIPAddressDelta> deltas4 = new List<IPBanFirewallIPAddressDelta>(ipAddresses.Where(i => IPAddress.Parse(i.IPAddress).AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)); " is 199.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,BlockIPAddressesDelta,The length of the statement  "            List<IPBanFirewallIPAddressDelta> deltas6 = new List<IPBanFirewallIPAddressDelta>(ipAddresses.Where(i => IPAddress.Parse(i.IPAddress).AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6)); " is 201.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,BlockIPAddresses,The length of the statement  "            IEnumerable<IPAddressRange> ipv4 = ranges.Where(i => i.Begin.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork && i.End.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork); " is 197.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,BlockIPAddresses,The length of the statement  "            IEnumerable<IPAddressRange> ipv6 = ranges.Where(i => i.Begin.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6 && i.End.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6); " is 201.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,AllowIPAddresses,The length of the statement  "            IEnumerable<string> ipv4 = ipAddresses.Where(i => IPAddress.TryParse(i' out IPAddress obj) && obj.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork); " is 162.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,AllowIPAddresses,The length of the statement  "            IEnumerable<string> ipv6 = ipAddresses.Where(i => IPAddress.TryParse(i' out IPAddress obj) && obj.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6); " is 164.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,AllowIPAddresses,The length of the statement  "            IEnumerable<IPAddressRange> ipv4 = ipAddresses.Where(i => IPAddressRange.TryParse(i' out IPAddressRange obj) && obj.Begin.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork); " is 186.
Long Statement,DigitalRuby.IPBanCore,IPBanLinuxFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxFirewall.cs,AllowIPAddresses,The length of the statement  "            IEnumerable<IPAddressRange> ipv6 = ipAddresses.Where(i => IPAddressRange.TryParse(i' out IPAddressRange obj) && obj.Begin.AddressFamily == System.Net.Sockets.AddressFamily.InterNetworkV6); " is 188.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,ProcessEventViewerXml,The length of the statement  "            if (info != null && info.FoundMatch && (info.Type == IPAddressEventType.FailedLogin || info.Type == IPAddressEventType.SuccessfulLogin)) " is 136.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,ExtractEventViewerXml,The length of the statement  "                                        throw new InvalidDataException("Conflicting expressions in event viewer' both failed and success logins matched keywords " + group.Keywords); " is 141.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,GetEventLogQueryString,The length of the statement  "            HashSet<string> logNames = new HashSet<string>(System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession.GetLogNames()); " is 127.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,GetEventLogQueryString,The length of the statement  "                    (Environment.OSVersion.Version.Major == group.MinimumWindowsMajorVersion && Environment.OSVersion.Version.Minor < group.MinimumWindowsMinorVersion))) " is 149.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,GetOrCreateRule,The length of the statement  "                if (emptyIPAddressString || string.IsNullOrWhiteSpace(rule.RemoteAddresses) || (rule.RemoteAddresses == "*" && remoteIPAddresses != "0.0.0.0/0'::/0")) " is 150.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,DeleteRules,The length of the statement  "                            Match match = Regex.Match(rule.Name' $"^{ruleNamePrefix}(?<num>[0-9]+)$"' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant); " is 131.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,DeleteRules,The length of the statement  "                            if (match.Success && int.TryParse(match.Groups["num"].Value' NumberStyles.None' CultureInfo.InvariantCulture' out int num) && num >= startIndex) " is 144.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,EnumerateRulesMatchingPrefix,The length of the statement  "            // (New-Object -ComObject HNetCfg.FwPolicy2).rules | Where-Object { $_.Name -match '^prefix' } | ForEach-Object { Write-Output "$($_.Name)" } " is 141.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,BlockIPAddressesDelta,The length of the statement  "            string prefix = (string.IsNullOrWhiteSpace(ruleNamePrefix) ? BlockRulePrefix : RulePrefix + ruleNamePrefix).TrimEnd('_') + "_"; " is 127.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,BlockIPAddressesDelta,The length of the statement  "                remoteIPAddresses.Add(new HashSet<string>(remainingIPAddresses.Skip(i).Take(MaxIpAddressesPerRule).Where(i2 => IPAddress.TryParse(i2' out _)))); " is 144.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,BlockIPAddresses,The length of the statement  "            return BlockOrAllowIPAddresses(RulePrefix + ruleNamePrefix' true' ranges.Select(i => i.ToCidrString())' allowedPorts' cancelToken); " is 131.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,AllowIPAddresses,The length of the statement  "            return BlockOrAllowIPAddresses(RulePrefix + ruleNamePrefix' false' ipAddresses.Select(i => i.ToCidrString())' allowedPorts' cancelToken); " is 137.
Long Statement,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,IsIPAddressBlocked,The length of the statement  "                                HashSet<string> set = new HashSet<string>(rule.RemoteAddresses.Split(''').Select(i2 => IPAddressRange.Parse(i2).Begin.ToString())); " is 131.
Complex Conditional,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,PopulateList,The conditional expression  "entry != "0.0.0.0" && entry != "::0" && entry != "127.0.0.1" && entry != "::1" && entry != "localhost""  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,TryNormalizeIPAddress,The conditional expression  "string.IsNullOrWhiteSpace(normalizedIP) ||                  normalizedIP == "-" ||                  normalizedIP == "0.0.0.0" ||                  normalizedIP == "127.0.0.1" ||                  normalizedIP == "::0" ||                  normalizedIP == "::1" ||                  !IPAddressRange.TryParse(normalizedIP' out IPAddressRange range)"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,CreateFirewall,The conditional expression  "osAndFirewall != null && osAndFirewall.Count != 0 &&                              (osAndFirewall.TryGetValue(OSUtility.Name' out string firewallToUse) || osAndFirewall.TryGetValue("*"' out firewallToUse))"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The conditional expression  "banTimes.Length > 1 && ipDB.TryGetIPAddress(ipAddress' out IPBanDB.IPAddressEntry ipEntry' transaction) && ipEntry.BanStartDate != null && ipEntry.BanEndDate != null"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,GetUrl,The conditional expression  "(urlType == UrlType.Start && GotStartUrl) || string.IsNullOrWhiteSpace(LocalIPAddressString) || string.IsNullOrWhiteSpace(FQDN)"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanUriFirewallRule,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanUriFirewallRule.cs,ProcessResult,The conditional expression  "line.Length == 0 || line.StartsWith("#") || line.StartsWith("'") || line.StartsWith("REM") ||                      !IPAddressRange.TryParse(line' out IPAddressRange range)"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Equals,The conditional expression  "Begin is null && other.Begin is null && End is null && other.End is null"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,PortRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,ToString,The conditional expression  "MinPort > 65535 || MaxPort > 65535 || MinPort < 0 || MaxPort < 0 || MaxPort < MinPort"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,ProcessEventViewerXml,The conditional expression  "info != null && info.FoundMatch && (info.Type == IPAddressEventType.FailedLogin || info.Type == IPAddressEventType.SuccessfulLogin)"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,GetEventLogQueryString,The conditional expression  "!logNames.Contains(group.Path) ||                      (Environment.OSVersion.Version.Major < group.MinimumWindowsMajorVersion ||                      (Environment.OSVersion.Version.Major == group.MinimumWindowsMajorVersion && Environment.OSVersion.Version.Minor < group.MinimumWindowsMinorVersion))"  is complex.
Complex Conditional,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,GetOrCreateRule,The conditional expression  "emptyIPAddressString || string.IsNullOrWhiteSpace(rule.RemoteAddresses) || (rule.RemoteAddresses == "*" && remoteIPAddresses != "0.0.0.0/0'::/0")"  is complex.
Virtual Method Call from Constructor,DigitalRuby.IPBanCore,SqliteDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\SqliteDB.cs,SqliteDB,The constructor "SqliteDB" calls a virtual method "OnInitialize".
Virtual Method Call from Constructor,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,IPBanLinuxBaseFirewall,The constructor "IPBanLinuxBaseFirewall" calls a virtual method "OnInitialize".
Empty Catch Block,DigitalRuby.IPBanCore,DefaultDnsLookup,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IDnsLookup.cs,GetLocalIPAddress,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,PopulateList,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,SetNetworkInfo,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,SetNetworkInfo,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,AddBannedIPAddress,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,CycleTimerElapsed,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,GetAllTypes,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,GetLocalIPAddressesAsync,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,GetTypeFromString,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,PingFiles,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,PingFiles,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,PingFiles,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,PingFiles,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,GetCurrentWatchedFiles,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,Logger,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\Logger.cs,Logger,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,Logger,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\Logger.cs,Write,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,SqliteDBTransaction,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\SqliteDB.cs,Dispose,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,RemoveAllTablesAndSets,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRule,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,UpdateRuleDelta,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,EventRecordWritten,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,GetOrCreateRule,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,GetOrCreateRule,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,MigrateOldDefaultRuleNames,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,MigrateOldDefaultRuleNames,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,DeleteRules,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,IsIPAddressAllowed,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,DeleteRule,The method has an empty catch block.
Empty Catch Block,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,Truncate,The method has an empty catch block.
Magic Number,DigitalRuby.IPBanCore,WebClientWithTimeout,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IHttpRequestMaker.cs,GetWebRequest,The following statement contains a magic number: w.Timeout = 30000;
Magic Number,DigitalRuby.IPBanCore,WebClientWithTimeout,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\IHttpRequestMaker.cs,GetWebRequest,The following statement contains a magic number: req.ReadWriteTimeout = 30000;
Magic Number,DigitalRuby.IPBanCore,LocalMachineExternalIPAddressLookupDefault,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Interfaces\ILocalMachineExternalIPAddressLookup.cs,LookupExternalIPAddressAsync,The following statement contains a magic number: i < 3
Magic Number,DigitalRuby.IPBanCore,IPBanBlockIPAddressesUpdater,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanBlockIPAddressesUpdater.cs,Update,The following statement contains a magic number: string source = (pieces.Length < 2 ? "Block" : pieces[1]);
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IPBanConfig,The following statement contains a magic number: GetConfig<int>("FailedLoginAttemptsBeforeBan"' ref failedLoginAttemptsBeforeBan' 1' 50);
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IPBanConfig,The following statement contains a magic number: GetConfig<TimeSpan>("CycleTime"' ref cycleTime' TimeSpan.FromSeconds(5.0)' TimeSpan.FromMinutes(1.0)' false);
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IPBanConfig,The following statement contains a magic number: GetConfig<TimeSpan>("MinimumTimeBetweenFailedLoginAttempts"' ref minimumTimeBetweenFailedLoginAttempts' TimeSpan.Zero' TimeSpan.FromSeconds(15.0)' false);
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,IPBanConfig,The following statement contains a magic number: pieces.Length == 2
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,ParseFirewallBlockRules,The following statement contains a magic number: IPBanFirewallRule firewallBlockRuleObj = new IPBanFirewallRule                      {                          Block = (pieces[1].Equals("block"' StringComparison.OrdinalIgnoreCase))'                          IPAddressRanges = pieces[2].Split(''').Select(p => IPAddressRange.Parse(p)).ToList()'                          Name = "EXTRA_" + pieces[0].Trim()'                          AllowPortRanges = pieces[3].Split(''').Select(p => PortRange.Parse(p)).Where(p => p.MinPort >= 0).ToList()'                          PlatformRegex = new Regex(pieces[4].Replace('*'' '.')' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)                      };
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,ParseFirewallBlockRules,The following statement contains a magic number: IPBanFirewallRule firewallBlockRuleObj = new IPBanFirewallRule                      {                          Block = (pieces[1].Equals("block"' StringComparison.OrdinalIgnoreCase))'                          IPAddressRanges = pieces[2].Split(''').Select(p => IPAddressRange.Parse(p)).ToList()'                          Name = "EXTRA_" + pieces[0].Trim()'                          AllowPortRanges = pieces[3].Split(''').Select(p => PortRange.Parse(p)).Where(p => p.MinPort >= 0).ToList()'                          PlatformRegex = new Regex(pieces[4].Replace('*'' '.')' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)                      };
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,ParseFirewallBlockRules,The following statement contains a magic number: IPBanFirewallRule firewallBlockRuleObj = new IPBanFirewallRule                      {                          Block = (pieces[1].Equals("block"' StringComparison.OrdinalIgnoreCase))'                          IPAddressRanges = pieces[2].Split(''').Select(p => IPAddressRange.Parse(p)).ToList()'                          Name = "EXTRA_" + pieces[0].Trim()'                          AllowPortRanges = pieces[3].Split(''').Select(p => PortRange.Parse(p)).Where(p => p.MinPort >= 0).ToList()'                          PlatformRegex = new Regex(pieces[4].Replace('*'' '.')' RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)                      };
Magic Number,DigitalRuby.IPBanCore,IPBanConfig,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfig.cs,ParseFirewallBlockRules,The following statement contains a magic number: pieces.Length == 5
Magic Number,DigitalRuby.IPBanCore,EventViewerExpressionGroup,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanConfigWindowsEventViewer.cs,AppendQueryString,The following statement contains a magic number: ulong keywordsDecimal = ulong.Parse(Keywords.Substring(2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture);
Magic Number,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,ParseIPAddressEntry,The following statement contains a magic number: long failedLoginCount = reader.GetInt64(2);
Magic Number,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,ParseIPAddressEntry,The following statement contains a magic number: object banDateObj = reader.GetValue(3);
Magic Number,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,ParseIPAddressEntry,The following statement contains a magic number: IPAddressState state = (IPAddressState)(int)reader.GetInt32(4);
Magic Number,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,ParseIPAddressEntry,The following statement contains a magic number: object banEndDateObj = reader.GetValue(5);
Magic Number,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,ParseIPAddressEntry,The following statement contains a magic number: string userName = reader.GetString(6);
Magic Number,DigitalRuby.IPBanCore,IPBanDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanDB.cs,ParseIPAddressEntry,The following statement contains a magic number: string source = reader.GetString(7);
Magic Number,DigitalRuby.IPBanCore,IPBanFirewallUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanFirewallUtility.cs,GetPortRangeStringBlockExcept,The following statement contains a magic number: AppendRange(b' new PortRange(currentPort' 65535));
Magic Number,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,CreateAndStartIPBanTestService,The following statement contains a magic number: ExtensionMethods.FileDeleteWithRetry(file' 1000);
Magic Number,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ExecuteExternalProcessForBannedIPAddresses,The following statement contains a magic number: RunTask(() =>              {                  foreach (var bannedIp in bannedIPAddresses)                  {                      // Run a process if one is in config                      if (!string.IsNullOrWhiteSpace(programToRunConfigString))                      {                          try                          {                              string[] pieces = programToRunConfigString.Split('|');                              if (pieces.Length == 2)                              {                                  string program = pieces[0];                                  string arguments = pieces[1];                                  Process.Start(program' arguments.Replace("###IPADDRESS###"' bannedIp.IPAddress)                                      .Replace("###SOURCE###"' bannedIp.Source)                                      .Replace("###USERNAME###"' bannedIp.UserName));                              }                              else                              {                                  throw new ArgumentException("Invalid config option for process to run on ban: " + programToRunConfigString);                              }                          }                          catch (Exception ex)                          {                              Logger.Error("Failed to execute process on ban"' ex);                          }                      }                  }              });
Magic Number,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ParseAndAddUriFirewallRules,The following statement contains a magic number: Uri.TryCreate(pieces[2]' UriKind.Absolute' out Uri uri)
Magic Number,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ParseAndAddUriFirewallRules,The following statement contains a magic number: pieces.Length == 3
Magic Number,DigitalRuby.IPBanCore,IPBanUriFirewallRule,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanUriFirewallRule.cs,IPBanUriFirewallRule,The following statement contains a magic number: Interval = (interval.TotalSeconds < 5.0 ? fiveSeconds : interval);
Magic Number,DigitalRuby.IPBanCore,IPBanUriFirewallRule,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanUriFirewallRule.cs,ProcessResult,The following statement contains a magic number: lines++ > 10000
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Write7BitEncodedInt32,The following statement contains a magic number: v >>= 7;
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Read7BitEncodedInt32,The following statement contains a magic number: shift == 5 * 7
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Read7BitEncodedInt32,The following statement contains a magic number: shift == 5 * 7
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Read7BitEncodedInt32,The following statement contains a magic number: shift += 7;
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Write7BitEncodedInt64,The following statement contains a magic number: v >>= 7;
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Read7BitEncodedInt64,The following statement contains a magic number: shift == 10 * 7
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Read7BitEncodedInt64,The following statement contains a magic number: shift == 10 * 7
Magic Number,DigitalRuby.IPBanCore,BinaryExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\BinaryExtensionMethods.cs,Read7BitEncodedInt64,The following statement contains a magic number: shift += 7;
Magic Number,DigitalRuby.IPBanCore,ByteArrayKey,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ByteArrayKey.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,DigitalRuby.IPBanCore,ByteArrayKey,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ByteArrayKey.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + element;
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsInternal,The following statement contains a magic number: switch (bytes[0])                  {                      case 10:                      case 127:                          return true;                      case 172:                          return bytes[1] >= 16 && bytes[1] < 32;                      case 192:                          return bytes[1] == 168;                      default:                          return (bytes[0] == 0 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 0);                  }
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsLocalHost,The following statement contains a magic number: return (bytes[0] == 127 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 1);
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsLocalHost,The following statement contains a magic number: return (bytes[0] == 127 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 1);
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsLocalHost,The following statement contains a magic number: return (bytes[0] == 127 && bytes[1] == 0 && bytes[2] == 0 && bytes[3] == 1);
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,IsLocalHost,The following statement contains a magic number: bytes.Length == 4
Magic Number,DigitalRuby.IPBanCore,ExtensionMethods,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\ExtensionMethods.cs,ToUInt128,The following statement contains a magic number: ulong l2 = BitConverter.ToUInt64(bytes' 8);
Magic Number,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,IPAddressRange,The following statement contains a magic number: baseAdrBytes.Length * 8 < maskLength
Magic Number,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Contains,The following statement contains a magic number: offset = 12;
Magic Number,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Contains,The following statement contains a magic number: offset = 12;
Magic Number,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,Parse,The following statement contains a magic number: baseAdrBytes.Length * 8 < maskLen
Magic Number,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetPrefixLength,The following statement contains a magic number: return byteBegin.Length * 8;
Magic Number,DigitalRuby.IPBanCore,IPAddressRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetPrefixLength,The following statement contains a magic number: int length = byteBegin.Length * 8;
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMask,The following statement contains a magic number: var bytesLen = bitLen / 8;
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMask,The following statement contains a magic number: var bitsLen = bitLen % 8;
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMask,The following statement contains a magic number: maskBytes[bytesLen] = (byte)~Enumerable.Range(1' 8 - bitsLen).Select(n => 1 << n - 1).Aggregate((a' b) => a | b);
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: bitLength = 8 * idx;
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: switch (bytes[idx])                      {                          case 0xFE: bitLength += 7; break;                          case 0xFC: bitLength += 6; break;                          case 0xF8: bitLength += 5; break;                          case 0xF0: bitLength += 4; break;                          case 0xE0: bitLength += 3; break;                          case 0xC0: bitLength += 2; break;                          case 0x80: bitLength += 1; break;                          case 0x00: break;                          default: // invalid bitmask                              return null;                      }
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: switch (bytes[idx])                      {                          case 0xFE: bitLength += 7; break;                          case 0xFC: bitLength += 6; break;                          case 0xF8: bitLength += 5; break;                          case 0xF0: bitLength += 4; break;                          case 0xE0: bitLength += 3; break;                          case 0xC0: bitLength += 2; break;                          case 0x80: bitLength += 1; break;                          case 0x00: break;                          default: // invalid bitmask                              return null;                      }
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: switch (bytes[idx])                      {                          case 0xFE: bitLength += 7; break;                          case 0xFC: bitLength += 6; break;                          case 0xF8: bitLength += 5; break;                          case 0xF0: bitLength += 4; break;                          case 0xE0: bitLength += 3; break;                          case 0xC0: bitLength += 2; break;                          case 0x80: bitLength += 1; break;                          case 0x00: break;                          default: // invalid bitmask                              return null;                      }
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: switch (bytes[idx])                      {                          case 0xFE: bitLength += 7; break;                          case 0xFC: bitLength += 6; break;                          case 0xF8: bitLength += 5; break;                          case 0xF0: bitLength += 4; break;                          case 0xE0: bitLength += 3; break;                          case 0xC0: bitLength += 2; break;                          case 0x80: bitLength += 1; break;                          case 0x00: break;                          default: // invalid bitmask                              return null;                      }
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: switch (bytes[idx])                      {                          case 0xFE: bitLength += 7; break;                          case 0xFC: bitLength += 6; break;                          case 0xF8: bitLength += 5; break;                          case 0xF0: bitLength += 4; break;                          case 0xE0: bitLength += 3; break;                          case 0xC0: bitLength += 2; break;                          case 0x80: bitLength += 1; break;                          case 0x00: break;                          default: // invalid bitmask                              return null;                      }
Magic Number,DigitalRuby.IPBanCore,Bits,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,GetBitMaskLength,The following statement contains a magic number: switch (bytes[idx])                      {                          case 0xFE: bitLength += 7; break;                          case 0xFC: bitLength += 6; break;                          case 0xF8: bitLength += 5; break;                          case 0xF0: bitLength += 4; break;                          case 0xE0: bitLength += 3; break;                          case 0xC0: bitLength += 2; break;                          case 0x80: bitLength += 1; break;                          case 0x00: break;                          default: // invalid bitmask                              return null;                      }
Magic Number,DigitalRuby.IPBanCore,PortRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,ToString,The following statement contains a magic number: MinPort > 65535 || MaxPort > 65535 || MinPort < 0 || MaxPort < 0 || MaxPort < MinPort
Magic Number,DigitalRuby.IPBanCore,PortRange,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\IPAddressRange.cs,ToString,The following statement contains a magic number: MinPort > 65535 || MaxPort > 65535 || MinPort < 0 || MaxPort < 0 || MaxPort < MinPort
Magic Number,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,Dispose,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,DigitalRuby.IPBanCore,LogFileScanner,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\LogFileScanner.cs,PingFile,The following statement contains a magic number: const int maxCountBeforeNewline = 1024;
Magic Number,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,OSUtility,The following statement contains a magic number: System.Threading.Tasks.Task.Delay(100);
Magic Number,DigitalRuby.IPBanCore,OSUtility,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\OSUtility.cs,StartProcessAndWait,The following statement contains a magic number: return StartProcessAndWait(60000' program' args' allowedExitCodes);
Magic Number,DigitalRuby.IPBanCore,SqliteDB,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\SqliteDB.cs,SqliteDB,The following statement contains a magic number: i < 10
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,RightShift,The following statement contains a magic number: numberOfBits >= 128
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,RightShift,The following statement contains a magic number: return new UInt128(0' value._mostSignificant >> (numberOfBits - 64));
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,RightShift,The following statement contains a magic number: numberOfBits >= 64
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,RightShift,The following statement contains a magic number: return new UInt128(value._mostSignificant >> numberOfBits' (value._leastSignificant >> numberOfBits) + (value._mostSignificant << (64 - numberOfBits)));
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,LeftShift,The following statement contains a magic number: numberOfBits %= 128;
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,LeftShift,The following statement contains a magic number: return new UInt128(value._leastSignificant << (numberOfBits - 64)' 0);
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,LeftShift,The following statement contains a magic number: numberOfBits >= 64
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,LeftShift,The following statement contains a magic number: return new UInt128((value._mostSignificant << numberOfBits) + (value._leastSignificant >> (64 - numberOfBits))' value._leastSignificant << numberOfBits);
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,ToString,The following statement contains a magic number: _mostSignificant >> 63 == 1 && bigIntegerString[0] == '0'
Magic Number,DigitalRuby.IPBanCore,UInt128,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\Utility\UInt128.cs,ToBigInteger,The following statement contains a magic number: value <<= 64;
Magic Number,DigitalRuby.IPBanCore,IPBanLinuxBaseFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Linux\IPBanLinuxBaseFirewall.cs,RunProcess,The following statement contains a magic number: !p.WaitForExit(60000)
Magic Number,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,ExtractEventViewerXml,The following statement contains a magic number: keywordsText = keywordsText.Substring(2);
Magic Number,DigitalRuby.IPBanCore,IPBanWindowsEventViewer,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsEventViewer.cs,GetEventLogQueryString,The following statement contains a magic number: return queryString.Length < 32 ? null : queryString.ToString();
Magic Number,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,CreateRuleStringForIPAddresses,The following statement contains a magic number: StringBuilder b = new StringBuilder(count * 16);
Magic Number,DigitalRuby.IPBanCore,IPBanWindowsFirewall,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Windows\IPBanWindowsFirewall.cs,EnumerateRulesMatchingPrefix,The following statement contains a magic number: object[] results = new object[64];
Missing Default,DigitalRuby.IPBanCore,IPBanService,D:\research\architectureSmells\repos\jjxtra_Windows-IP-Ban-Service\IPBanCore\Core\IPBan\IPBanService.cs,ProcessPendingLogEvents,The following switch statement is missing a default case: switch (evt.Type)                      {                          case IPAddressEventType.FailedLogin:                              ProcessIPAddressEvent(evt' pendingFailedLogins' Config.MinimumTimeBetweenFailedLoginAttempts' "failed");                              break;                            case IPAddressEventType.SuccessfulLogin:                              ProcessIPAddressEvent(evt' pendingSuccessfulLogins' Config.MinimumTimeBetweenSuccessfulLoginAttempts' "successful");                              break;                            case IPAddressEventType.Blocked:                              AddBannedIPAddress(evt.IPAddress' evt.Source' evt.UserName' bannedIPs' evt.Timestamp' false' evt.Count' string.Empty' transaction);                              break;                            case IPAddressEventType.Unblocked:                              DB.SetIPAddressesState(new string[] { evt.IPAddress }' IPBanDB.IPAddressState.RemovePending' transaction);                              firewallNeedsBlockedIPAddressesUpdate = true;                              break;                      }
