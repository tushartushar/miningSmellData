Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageTagging,ImageWithTags,C:\repos\DoctahJones_JPEGTag\ImageTagging\ImageWithTags.cs,saveChangesToNewFile,Cyclomatic complexity of the method is 8
Complex Method,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,MainForm_KeyDown,Cyclomatic complexity of the method is 9
Complex Method,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,Cyclomatic complexity of the method is 16
Complex Method,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,setNextImage,Cyclomatic complexity of the method is 8
Complex Method,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,setPreviousImage,Cyclomatic complexity of the method is 8
Long Statement,ImageTagging,ImageWithTags,C:\repos\DoctahJones_JPEGTag\ImageTagging\ImageWithTags.cs,saveChangesToNewFile,The length of the statement  "				output.Frames.Add (BitmapFrame.Create (original.Frames [0]' original.Frames [0].Thumbnail' metadata' original.Frames [0].ColorContexts)); " is 137.
Long Statement,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,displayImage,The length of the statement  "		System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MainForm)); " is 129.
Long Statement,ImageTagging,Program,C:\repos\DoctahJones_JPEGTag\ImageTagging\Program.cs,CurrentDomain_UnhandledException,The length of the statement  "		MessageBox.Show ("An Error Occured: \n" + ex.Message + ex.StackTrace' "Fatal Error"' MessageBoxButtons.OK' MessageBoxIcon.Stop); " is 128.
Long Statement,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,setNextImage,The length of the statement  "			//whilst we still havent successfully loaded a file and theres still more than 2 files in the list and we havent got to the current image " is 137.
Long Statement,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,setNextImage,The length of the statement  "		//if the current image is the last one in the list then we want to try loading the first one in the list as the next image. " is 123.
Long Statement,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,updatePrevTagsPanel,The length of the statement  "		//Create a list of DictionaryEntries so that we can sort the most used tag data by the tags which have been used the most. " is 122.
Long Statement,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,updatePrevTagsPanel,The length of the statement  "		List<DictionaryEntry> x = this.tagUsageData.getMostUsed ().Cast<DictionaryEntry> ().OrderByDescending (entry => entry.Value).ToList (); " is 135.
Long Statement,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,getFilesInFolder,The length of the statement  "	IEnumerable<string> files = Directory.GetFiles (folderPath' "*.*").Where (s => s.EndsWith (".jpg"' StringComparison.OrdinalIgnoreCase) || s.EndsWith (".jpeg"' StringComparison.OrdinalIgnoreCase)); " is 196.
Long Statement,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,getProgDir,The length of the statement  "	return System.IO.Path.GetDirectoryName (new Uri (System.Reflection.Assembly.GetExecutingAssembly ().CodeBase).LocalPath); " is 121.
Magic Number,ImageTagging,ImageWithTags,C:\repos\DoctahJones_JPEGTag\ImageTagging\ImageWithTags.cs,calcPaddingAmount,The following statement contains a magic number: if (this.hasChanged > 0) {  	return 1024 * (uint)Math.Ceiling ((double)this.hasChanged / 10);  }  else {  	return 0;  }  
Magic Number,ImageTagging,ImageWithTags,C:\repos\DoctahJones_JPEGTag\ImageTagging\ImageWithTags.cs,calcPaddingAmount,The following statement contains a magic number: if (this.hasChanged > 0) {  	return 1024 * (uint)Math.Ceiling ((double)this.hasChanged / 10);  }  else {  	return 0;  }  
Magic Number,ImageTagging,ImageWithTags,C:\repos\DoctahJones_JPEGTag\ImageTagging\ImageWithTags.cs,calcPaddingAmount,The following statement contains a magic number: return 1024 * (uint)Math.Ceiling ((double)this.hasChanged / 10);  
Magic Number,ImageTagging,ImageWithTags,C:\repos\DoctahJones_JPEGTag\ImageTagging\ImageWithTags.cs,calcPaddingAmount,The following statement contains a magic number: return 1024 * (uint)Math.Ceiling ((double)this.hasChanged / 10);  
Magic Number,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,populateExistingTags,The following statement contains a magic number: foreach (string curr in tags) {  	lblExistingTags.Links.Add (new LinkLabel.Link (count' curr.Length' curr));  	s.Append (curr);  	count += curr.Length;  	//if the current tag is the last one  	if (tags.IndexOf (curr) != tags.Count - 1) {  		s.Append ("' ");  		count += 2;  	}  }  
Magic Number,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,populateExistingTags,The following statement contains a magic number: if (tags.IndexOf (curr) != tags.Count - 1) {  	s.Append ("' ");  	count += 2;  }  
Magic Number,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,populateExistingTags,The following statement contains a magic number: count += 2;  
Magic Number,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,splitLeftContent_Panel2_Resize,The following statement contains a magic number: this.lblExistingTags.MaximumSize = new System.Drawing.Size (splitLeftContent.Panel2.Width - 50' 0);  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: if (filesInFolder.Count > 2) {  	bool success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (filesInFolder.Count - 1)' out previousImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (0)' out currentImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (1)' out nextImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: if (filesInFolder.Count > 2) {  	bool success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (filesInFolder.Count - 1)' out previousImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (0)' out currentImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (1)' out nextImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: if (filesInFolder.Count > 2) {  	bool success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (filesInFolder.Count - 1)' out previousImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (0)' out currentImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (1)' out nextImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: if (filesInFolder.Count > 2) {  	bool success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (filesInFolder.Count - 1)' out previousImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (0)' out currentImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  	success = false;  	//whilst we still havent successfully loaded a file and theres still more than 2 files in the list.  	while (!success && (filesInFolder.Count > 2)) {  		success = openImageFile (filesInFolder.ElementAt (1)' out nextImage);  		if (!success) {  			filesInFolder.RemoveAt (filesInFolder.Count - 1);  			problems++;  		}  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: while (!success && (filesInFolder.Count > 2)) {  	success = openImageFile (filesInFolder.ElementAt (filesInFolder.Count - 1)' out previousImage);  	if (!success) {  		filesInFolder.RemoveAt (filesInFolder.Count - 1);  		problems++;  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: while (!success && (filesInFolder.Count > 2)) {  	success = openImageFile (filesInFolder.ElementAt (0)' out currentImage);  	if (!success) {  		filesInFolder.RemoveAt (filesInFolder.Count - 1);  		problems++;  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: while (!success && (filesInFolder.Count > 2)) {  	success = openImageFile (filesInFolder.ElementAt (1)' out nextImage);  	if (!success) {  		filesInFolder.RemoveAt (filesInFolder.Count - 1);  		problems++;  	}  }  
Magic Number,ImageTagging,TagController,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagController.cs,loadFirstDirectory,The following statement contains a magic number: if (filesInFolder.Count == 2) {  	ImageWithTags one;  	ImageWithTags two;  	bool x = openImageFile (filesInFolder.ElementAt (0)' out one);  	bool y = openImageFile (filesInFolder.ElementAt (1)' out two);  	if (x && y) {  		previousImage = two;  		currentImage = one;  		nextImage = two;  	}  	if (!y) {  		filesInFolder.RemoveAt (1);  		problems++;  	}  	if (!x) {  		filesInFolder.RemoveAt (0);  		problems++;  	}  }  
Magic Number,ImageTagging,TagUsageData,C:\repos\DoctahJones_JPEGTag\ImageTagging\TagUsageData.cs,newTagUsed,The following statement contains a magic number: if (this.mostRecent.Count >= 50) {  	this.mostRecent.Dequeue ();  }  
Missing Default,ImageTagging,MainForm,C:\repos\DoctahJones_JPEGTag\ImageTagging\MainForm.cs,MainForm_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Left:  	this.controller.displayPreviousImage ();  	e.Handled = true;  	break;  case Keys.Right:  	this.controller.displayNextImage ();  	e.Handled = true;  	break;  }  
