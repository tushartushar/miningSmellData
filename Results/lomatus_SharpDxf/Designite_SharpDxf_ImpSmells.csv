Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,AciColors,The method has 2045 lines of code.
Long Method,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,AddEntity,The method has 125 lines of code.
Long Method,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,Save,The method has 213 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The method has 114 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The method has 113 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The method has 137 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The method has 105 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The method has 232 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The method has 116 lines of code.
Long Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The method has 133 lines of code.
Complex Method,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,AddEntity,Cyclomatic complexity of the method is 81
Complex Method,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,Save,Cyclomatic complexity of the method is 38
Complex Method,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,ReAsignHandlersAndDefaultObjects,Cyclomatic complexity of the method is 27
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,Read,Cyclomatic complexity of the method is 22
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadHeader,Cyclomatic complexity of the method is 9
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,Cyclomatic complexity of the method is 17
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,Cyclomatic complexity of the method is 9
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlocks,Cyclomatic complexity of the method is 8
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,Cyclomatic complexity of the method is 50
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlockEntity,Cyclomatic complexity of the method is 33
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,Cyclomatic complexity of the method is 70
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,Cyclomatic complexity of the method is 19
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEntities,Cyclomatic complexity of the method is 48
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,Cyclomatic complexity of the method is 22
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,Cyclomatic complexity of the method is 19
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,Cyclomatic complexity of the method is 35
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,Cyclomatic complexity of the method is 66
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,Cyclomatic complexity of the method is 58
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,Cyclomatic complexity of the method is 74
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,Cyclomatic complexity of the method is 54
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,Cyclomatic complexity of the method is 78
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,Cyclomatic complexity of the method is 90
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,Cyclomatic complexity of the method is 86
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,Cyclomatic complexity of the method is 66
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,Cyclomatic complexity of the method is 82
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,Cyclomatic complexity of the method is 79
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,Cyclomatic complexity of the method is 94
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,Cyclomatic complexity of the method is 70
Complex Method,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,Cyclomatic complexity of the method is 13
Complex Method,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,Cyclomatic complexity of the method is 15
Complex Method,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,EndSection,Cyclomatic complexity of the method is 19
Complex Method,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEntity,Cyclomatic complexity of the method is 44
Complex Method,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,Cyclomatic complexity of the method is 61
Complex Method,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,Cyclomatic complexity of the method is 48
Complex Method,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,Cyclomatic complexity of the method is 9
Complex Method,SharpDxf.Entities,NurbsCurve,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\NURBSCurve.cs,DefineBasisFunctions,Cyclomatic complexity of the method is 14
Complex Method,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,Cyclomatic complexity of the method is 9
Long Parameter List,SharpDxf,Matrix3d,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3d.cs,Matrix3d,The method has 9 parameters.
Long Parameter List,SharpDxf,Matrix3f,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3f.cs,Matrix3f,The method has 9 parameters.
Long Statement,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,RGBtoACI,The length of the statement  "		int dist = Math.Abs ((r - color [0]) * (r - color [0]) + (g - color [1]) * (g - color [1]) + (b - color [2]) * (b - color [2])); " is 128.
Long Statement,SharpDxf,Vector3d,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3d.cs,ToString,The length of the statement  "	return string.Format ("{0};{1};{2}"' this.x.ToString (provider)' this.y.ToString (provider)' this.z.ToString (provider)); " is 121.
Long Statement,SharpDxf,Matrix3d,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3d.cs,Determinant,The length of the statement  "	return this.mM11 * this.mM22 * this.mM33 + this.mM12 * this.mM23 * this.mM31 + this.mM13 * this.mM21 * this.mM32 - this.mM13 * this.mM22 * this.mM31 - this.mM11 * this.mM23 * this.mM32 - this.mM12 * this.mM21 * this.mM33; " is 221.
Long Statement,SharpDxf,Matrix3d,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3d.cs,Traspose,The length of the statement  "	return new Matrix3d (this.mM11' this.mM21' this.mM31' this.mM12' this.mM22' this.mM32' this.mM13' this.mM23' this.mM33); " is 120.
Long Statement,SharpDxf,Matrix3d,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3d.cs,ToString,The length of the statement  "	s.Append (string.Format ("|{0};{1};{2}|" + Environment.NewLine' this.mM11.ToString (provider)' this.mM12.ToString (provider)' this.mM13.ToString (provider))); " is 158.
Long Statement,SharpDxf,Matrix3d,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3d.cs,ToString,The length of the statement  "	s.Append (string.Format ("|{0};{1};{2}|" + Environment.NewLine' this.mM21.ToString (provider)' this.mM22.ToString (provider)' this.mM23.ToString (provider))); " is 158.
Long Statement,SharpDxf,Matrix3d,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3d.cs,ToString,The length of the statement  "	s.Append (string.Format ("|{0};{1};{2}|" + Environment.NewLine' this.mM31.ToString (provider)' this.mM32.ToString (provider)' this.mM33.ToString (provider))); " is 158.
Long Statement,SharpDxf,StringEnum,C:\repos\lomatus_SharpDxf\SharpDxf\StringEnum.cs,GetListValues,The length of the statement  "				values.Add (new DictionaryEntry (Convert.ChangeType (Enum.Parse (this.enumType' fi.Name)' underlyingType)' attrs [0].Value)); " is 125.
Long Statement,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,AddEntity,The length of the statement  "		throw new ArgumentException ("The entity " + entity.Type + " object has already been added to the document."' "entity"); " is 120.
Long Statement,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,AddEntity,The length of the statement  "					throw new ArgumentException ("The entity " + blockEntity.Type + " object of the block " + ((Insert)entity).Block.Name + " has already been added to the document."' "entity"); " is 174.
Long Statement,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,Save,The length of the statement  "	dxfWriter.WriteSystemVariable (new HeaderVariable (SystemVariable.DabaseVersion' StringEnum.GetStringValue (this.version))); " is 124.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,Read,The length of the statement  "				throw new InvalidDxfSectionException (code.Value' this.file' "Unknown section " + code.Value + " line " + this.fileLine); " is 121.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadHeader,The length of the statement  "				throw new DxfHeaderVariableException (variableName' this.file' "Invalid variable name and code group convination in line " + this.fileLine); " is 140.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The length of the statement  "					throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine); " is 164.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The length of the statement  "	Vector3d ocsAxisPoint = MathHelper.Transform ((Vector3d)axisPoint' (Vector3d)normal' MathHelper.CoordinateSystem.World' MathHelper.CoordinateSystem.Object); " is 156.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The length of the statement  "				throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine); " is 125.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "		throw new DxfEntityException (DxfObjectCode.Polyline' this.file' "End sequence entity not found in line " + this.fileLine); " is 123.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "	if ((flags & PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM) == PolylineTypeFlags.ClosedPolylineOrClosedPolygonMeshInM) { " is 129.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "		////posible error avoidance' the polyline is marked as polyline3d code:(70'8) but the vertex is marked as PolylineVertex code:(70'0) " is 132.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "		//    Polyline3dVertex polyline3dVertex = new Polyline3dVertex(((PolylineVertex)v).Location.X' ((PolylineVertex)v).Location.Y'0); " is 129.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "			if ((v.Flags & (VertexTypeFlags.PolyfaceMeshVertex | VertexTypeFlags.Polygon3dMesh)) == (VertexTypeFlags.PolyfaceMeshVertex | VertexTypeFlags.Polygon3dMesh)) { " is 159.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "			////posible error avoidance' the polyline is marked as polyline code:(70'0) but the vertex is marked as Polyline3dVertex code:(70'32) " is 133.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The length of the statement  "			//    PolylineVertex polylineVertex = new PolylineVertex(((Polyline3dVertex)v).Location.X' ((Polyline3dVertex)v).Location.Y); " is 125.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The length of the statement  "				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine); " is 177.
Long Statement,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The length of the statement  "	//if ((flags & (VertexTypeFlags.PolyfaceMeshVertex | VertexTypeFlags.Polygon3dMesh)) == (VertexTypeFlags.PolyfaceMeshVertex | VertexTypeFlags.Polygon3dMesh)) " is 157.
Long Statement,SharpDxf,Matrix3f,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3f.cs,Determinant,The length of the statement  "	return this.mM11 * this.mM22 * this.mM33 + this.mM12 * this.mM23 * this.mM31 + this.mM13 * this.mM21 * this.mM32 - this.mM13 * this.mM22 * this.mM31 - this.mM11 * this.mM23 * this.mM32 - this.mM12 * this.mM21 * this.mM33; " is 221.
Long Statement,SharpDxf,Matrix3f,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3f.cs,Traspose,The length of the statement  "	return new Matrix3f (this.mM11' this.mM21' this.mM31' this.mM12' this.mM22' this.mM32' this.mM13' this.mM23' this.mM33); " is 120.
Long Statement,SharpDxf,Matrix3f,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3f.cs,ToString,The length of the statement  "	s.Append (string.Format ("|{0};{1};{2}|" + Environment.NewLine' this.mM11.ToString (provider)' this.mM12.ToString (provider)' this.mM13.ToString (provider))); " is 158.
Long Statement,SharpDxf,Matrix3f,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3f.cs,ToString,The length of the statement  "	s.Append (string.Format ("|{0};{1};{2}|" + Environment.NewLine' this.mM21.ToString (provider)' this.mM22.ToString (provider)' this.mM23.ToString (provider))); " is 158.
Long Statement,SharpDxf,Matrix3f,C:\repos\lomatus_SharpDxf\SharpDxf\Matrix3f.cs,ToString,The length of the statement  "	s.Append (string.Format ("|{0};{1};{2}|" + Environment.NewLine' this.mM31.ToString (provider)' this.mM32.ToString (provider)' this.mM33.ToString (provider))); " is 158.
Long Statement,SharpDxf,Vector3f,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3f.cs,Round,The length of the statement  "	return new Vector3f ((float)(Math.Round (u.X' numDigits))' (float)(Math.Round (u.Y' numDigits))' (float)(Math.Round (u.Z' numDigits))); " is 135.
Long Statement,SharpDxf,Vector3f,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3f.cs,ToString,The length of the statement  "	return string.Format ("{0};{1};{2}"' this.x.ToString (provider)' this.y.ToString (provider)' this.z.ToString (provider)); " is 121.
Long Statement,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The length of the statement  "	Vector3d axisPoint = MathHelper.Transform ((Vector3d)new Vector3f (cosine' sine' 0)' (Vector3d)ellipse.Normal' MathHelper.CoordinateSystem.Object' MathHelper.CoordinateSystem.World); " is 182.
Long Statement,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The length of the statement  "						Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y); " is 144.
Long Statement,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,ToPolyline,The length of the statement  "	Vector3d ocsCenter = MathHelper.Transform ((Vector3d)this.center' (Vector3d)this.normal' MathHelper.CoordinateSystem.World' MathHelper.CoordinateSystem.Object); " is 160.
Long Statement,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,PointFromEllipse,The length of the statement  "	return new Vector2f (ptCenter.X + radiusAngle * (float)Math.Cos (radians)' ptCenter.Y + radiusAngle * (float)Math.Sin (radians)); " is 129.
Long Statement,SharpDxf.Entities,NurbsCurve,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\NURBSCurve.cs,DefineBasisFunctions,The length of the statement  "				nurbsBasisFunctions [vertexIndex] [ctrlPointIndex] [orderIndex] = this.controlPoints [ctrlPointIndex].Weight * basisFunctions [vertexIndex] [ctrlPointIndex] [orderIndex] / denominator; " is 184.
Long Statement,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The length of the statement  "		throw new ArgumentOutOfRangeException ("precision"' precision' "The circle precision must be greater or equal to three"); " is 121.
Long Statement,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The length of the statement  "		throw new ArgumentOutOfRangeException ("precision"' precision' "The circle precision must be greater or equal to three"); " is 121.
Long Statement,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The length of the statement  "						Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y); " is 144.
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,AciColor,The following statement contains a magic number: this.index = RGBtoACI ((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,AciColor,The following statement contains a magic number: this.index = RGBtoACI ((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,AciColor,The following statement contains a magic number: this.index = RGBtoACI ((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,AciColor,The following statement contains a magic number: if (index < 0 || index > 256) {  	throw (new ArgumentException ("index"));  }  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,ToString,The following statement contains a magic number: if (this.index == 256)  	return "ByLayer";  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,ToColor,The following statement contains a magic number: if (this.index < 1 || this.index > 255)  	//default color definition for byblock and bylayer colors  	return Color.White;  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,ToColor,The following statement contains a magic number: return Color.FromArgb (rgb [0]' rgb [1]' rgb [2]);  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,RGBtoACI,The following statement contains a magic number: foreach (byte key in aciColors.Keys) {  	byte[] color = aciColors [key];  	int dist = Math.Abs ((r - color [0]) * (r - color [0]) + (g - color [1]) * (g - color [1]) + (b - color [2]) * (b - color [2]));  	if (dist < prevDist) {  		prevDist = dist;  		index = key;  	}  }  
Magic Number,SharpDxf,AciColor,C:\repos\lomatus_SharpDxf\SharpDxf\AciColor.cs,RGBtoACI,The following statement contains a magic number: foreach (byte key in aciColors.Keys) {  	byte[] color = aciColors [key];  	int dist = Math.Abs ((r - color [0]) * (r - color [0]) + (g - color [1]) * (g - color [1]) + (b - color [2]) * (b - color [2]));  	if (dist < prevDist) {  		prevDist = dist;  		index = key;  	}  }  
Magic Number,SharpDxf,Vector2d,C:\repos\lomatus_SharpDxf\SharpDxf\Vector2d.cs,Vector2d,The following statement contains a magic number: if (array.Length != 2)  	throw new ArgumentOutOfRangeException ("array"' array.Length' "The dimension of the array must be two");  
Magic Number,SharpDxf,Vector3d,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3d.cs,Vector3d,The following statement contains a magic number: if (array.Length != 3)  	throw new ArgumentOutOfRangeException ("array"' array.Length' "The dimension of the array must be three.");  
Magic Number,SharpDxf,Vector3d,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3d.cs,Vector3d,The following statement contains a magic number: this.z = array [2];  
Magic Number,SharpDxf,DxfObject,C:\repos\lomatus_SharpDxf\SharpDxf\DxfObject.cs,AsignHandle,The following statement contains a magic number: this.handle = Convert.ToString (entityNumber' 16);  
Magic Number,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,Load,The following statement contains a magic number: this.handleCount = Convert.ToInt32 (dxfReader.HandleSeed' 16);  
Magic Number,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,Save,The following statement contains a magic number: dxfWriter.WriteSystemVariable (new HeaderVariable (SystemVariable.HandSeed' Convert.ToString (this.handleCount' 16)));  
Magic Number,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,ReAsignHandlersAndDefaultObjects,The following statement contains a magic number: this.handleCount = 100;  
Magic Number,SharpDxf,DxfDocument,C:\repos\lomatus_SharpDxf\SharpDxf\DxfDocument.cs,ReAsignHandlersAndDefaultObjects,The following statement contains a magic number: Layer.PlotStyleHandle = Convert.ToString (this.handleCount++' 16);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: while (code.Value != StringCode.EndSection) {  	code = this.ReadCodePair ();  	switch (code.Value) {  	case StringCode.ApplicationIDTable:  		Debug.Assert (code.Code == 2);  		this.ReadApplicationsId ();  		break;  	case StringCode.LayerTable:  		Debug.Assert (code.Code == 2);  		this.ReadLayers ();  		break;  	case StringCode.LineTypeTable:  		Debug.Assert (code.Code == 2);  		this.ReadLineTypes ();  		break;  	case StringCode.TextStyleTable:  		Debug.Assert (code.Code == 2);  		this.ReadTextStyles ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: while (code.Value != StringCode.EndSection) {  	code = this.ReadCodePair ();  	switch (code.Value) {  	case StringCode.ApplicationIDTable:  		Debug.Assert (code.Code == 2);  		this.ReadApplicationsId ();  		break;  	case StringCode.LayerTable:  		Debug.Assert (code.Code == 2);  		this.ReadLayers ();  		break;  	case StringCode.LineTypeTable:  		Debug.Assert (code.Code == 2);  		this.ReadLineTypes ();  		break;  	case StringCode.TextStyleTable:  		Debug.Assert (code.Code == 2);  		this.ReadTextStyles ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: while (code.Value != StringCode.EndSection) {  	code = this.ReadCodePair ();  	switch (code.Value) {  	case StringCode.ApplicationIDTable:  		Debug.Assert (code.Code == 2);  		this.ReadApplicationsId ();  		break;  	case StringCode.LayerTable:  		Debug.Assert (code.Code == 2);  		this.ReadLayers ();  		break;  	case StringCode.LineTypeTable:  		Debug.Assert (code.Code == 2);  		this.ReadLineTypes ();  		break;  	case StringCode.TextStyleTable:  		Debug.Assert (code.Code == 2);  		this.ReadTextStyles ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: while (code.Value != StringCode.EndSection) {  	code = this.ReadCodePair ();  	switch (code.Value) {  	case StringCode.ApplicationIDTable:  		Debug.Assert (code.Code == 2);  		this.ReadApplicationsId ();  		break;  	case StringCode.LayerTable:  		Debug.Assert (code.Code == 2);  		this.ReadLayers ();  		break;  	case StringCode.LineTypeTable:  		Debug.Assert (code.Code == 2);  		this.ReadLineTypes ();  		break;  	case StringCode.TextStyleTable:  		Debug.Assert (code.Code == 2);  		this.ReadTextStyles ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: switch (code.Value) {  case StringCode.ApplicationIDTable:  	Debug.Assert (code.Code == 2);  	this.ReadApplicationsId ();  	break;  case StringCode.LayerTable:  	Debug.Assert (code.Code == 2);  	this.ReadLayers ();  	break;  case StringCode.LineTypeTable:  	Debug.Assert (code.Code == 2);  	this.ReadLineTypes ();  	break;  case StringCode.TextStyleTable:  	Debug.Assert (code.Code == 2);  	this.ReadTextStyles ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: switch (code.Value) {  case StringCode.ApplicationIDTable:  	Debug.Assert (code.Code == 2);  	this.ReadApplicationsId ();  	break;  case StringCode.LayerTable:  	Debug.Assert (code.Code == 2);  	this.ReadLayers ();  	break;  case StringCode.LineTypeTable:  	Debug.Assert (code.Code == 2);  	this.ReadLineTypes ();  	break;  case StringCode.TextStyleTable:  	Debug.Assert (code.Code == 2);  	this.ReadTextStyles ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: switch (code.Value) {  case StringCode.ApplicationIDTable:  	Debug.Assert (code.Code == 2);  	this.ReadApplicationsId ();  	break;  case StringCode.LayerTable:  	Debug.Assert (code.Code == 2);  	this.ReadLayers ();  	break;  case StringCode.LineTypeTable:  	Debug.Assert (code.Code == 2);  	this.ReadLineTypes ();  	break;  case StringCode.TextStyleTable:  	Debug.Assert (code.Code == 2);  	this.ReadTextStyles ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: switch (code.Value) {  case StringCode.ApplicationIDTable:  	Debug.Assert (code.Code == 2);  	this.ReadApplicationsId ();  	break;  case StringCode.LayerTable:  	Debug.Assert (code.Code == 2);  	this.ReadLayers ();  	break;  case StringCode.LineTypeTable:  	Debug.Assert (code.Code == 2);  	this.ReadLineTypes ();  	break;  case StringCode.TextStyleTable:  	Debug.Assert (code.Code == 2);  	this.ReadTextStyles ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: Debug.Assert (code.Code == 2);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: Debug.Assert (code.Code == 2);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: Debug.Assert (code.Code == 2);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following statement contains a magic number: Debug.Assert (code.Code == 2);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		appId = code.Value;  		break;  	case 5:  		handle = code.Value;  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		appId = code.Value;  		break;  	case 5:  		handle = code.Value;  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,The following statement contains a magic number: switch (code.Code) {  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	appId = code.Value;  	break;  case 5:  	handle = code.Value;  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,The following statement contains a magic number: switch (code.Code) {  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	appId = code.Value;  	break;  case 5:  	handle = code.Value;  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Value != StringCode.EndBlock) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 2:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 3:  		name = code.Value;  		code = this.ReadCodePair ();  		break;  	case 0:  		// entity  		IEntityObject entity;  		entity = this.ReadBlockEntity (ref code);  		if (entity != null)  			if (entity.Type == EntityType.AttributeDefinition)  				attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  			else  				entities.Add (entity);  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 2:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 3:  	name = code.Value;  	code = this.ReadCodePair ();  	break;  case 0:  	// entity  	IEntityObject entity;  	entity = this.ReadBlockEntity (ref code);  	if (entity != null)  		if (entity.Type == EntityType.AttributeDefinition)  			attdefs.Add (((AttributeDefinition)entity).Id' (AttributeDefinition)entity);  		else  			entities.Add (entity);  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		endBlockHandle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		endBlockLayer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		endBlockHandle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		endBlockLayer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	endBlockHandle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	endBlockLayer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadBlock,The following statement contains a magic number: switch (code.Code) {  case 5:  	endBlockHandle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	endBlockLayer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		id = code.Value;  		break;  	case 3:  		text = code.Value;  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	case 70:  		flags = (AttributeFlags)int.Parse (code.Value);  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		break;  	case 7:  		style = this.GetTextStyle (code.Value);  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 50:  		rotation = float.Parse (code.Value);  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		break;  	case 74:  		verticalAlignment = int.Parse (code.Value);  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		attdef = block.Attributes [code.Value];  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		attdef = block.Attributes [code.Value];  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		attdef = block.Attributes [code.Value];  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		attdef = block.Attributes [code.Value];  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		attdef = block.Attributes [code.Value];  		break;  	case 1:  		value = code.Value;  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	attdef = block.Attributes [code.Value];  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	attdef = block.Attributes [code.Value];  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	attdef = block.Attributes [code.Value];  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	attdef = block.Attributes [code.Value];  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	attdef = block.Attributes [code.Value];  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 62:  		short index;  		if (short.TryParse (code.Value' out index)) {  			if (index < 0) {  				isVisible = false;  				index = Math.Abs (index);  			}  			if (index > 256) {  				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  			}  		}  		else {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 62:  		short index;  		if (short.TryParse (code.Value' out index)) {  			if (index < 0) {  				isVisible = false;  				index = Math.Abs (index);  			}  			if (index > 256) {  				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  			}  		}  		else {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 62:  		short index;  		if (short.TryParse (code.Value' out index)) {  			if (index < 0) {  				isVisible = false;  				index = Math.Abs (index);  			}  			if (index > 256) {  				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  			}  		}  		else {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 62:  		short index;  		if (short.TryParse (code.Value' out index)) {  			if (index < 0) {  				isVisible = false;  				index = Math.Abs (index);  			}  			if (index > 256) {  				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  			}  		}  		else {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 62:  		short index;  		if (short.TryParse (code.Value' out index)) {  			if (index < 0) {  				isVisible = false;  				index = Math.Abs (index);  			}  			if (index > 256) {  				throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  			}  		}  		else {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		color = new AciColor (short.Parse (code.Value));  		break;  	case 6:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		lineType = this.GetLineType (code.Value);  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 62:  	short index;  	if (short.TryParse (code.Value' out index)) {  		if (index < 0) {  			isVisible = false;  			index = Math.Abs (index);  		}  		if (index > 256) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  	}  	else {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 62:  	short index;  	if (short.TryParse (code.Value' out index)) {  		if (index < 0) {  			isVisible = false;  			index = Math.Abs (index);  		}  		if (index > 256) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  	}  	else {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 62:  	short index;  	if (short.TryParse (code.Value' out index)) {  		if (index < 0) {  			isVisible = false;  			index = Math.Abs (index);  		}  		if (index > 256) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  	}  	else {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 62:  	short index;  	if (short.TryParse (code.Value' out index)) {  		if (index < 0) {  			isVisible = false;  			index = Math.Abs (index);  		}  		if (index > 256) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  	}  	else {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 62:  	short index;  	if (short.TryParse (code.Value' out index)) {  		if (index < 0) {  			isVisible = false;  			index = Math.Abs (index);  		}  		if (index > 256) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  	}  	else {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	lineType = this.GetLineType (code.Value);  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: if (short.TryParse (code.Value' out index)) {  	if (index < 0) {  		isVisible = false;  		index = Math.Abs (index);  	}  	if (index > 256) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  }  else {  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following statement contains a magic number: if (index > 256) {  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		//descripción del tipo de línea  		description = code.Value;  		break;  	case 73:  		//number of segments (not needed)  		break;  	case 40:  		//length of the line type segments (not needed)  		break;  	case 49:  		segments.Add (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		//descripción del tipo de línea  		description = code.Value;  		break;  	case 73:  		//number of segments (not needed)  		break;  	case 40:  		//length of the line type segments (not needed)  		break;  	case 49:  		segments.Add (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		//descripción del tipo de línea  		description = code.Value;  		break;  	case 73:  		//number of segments (not needed)  		break;  	case 40:  		//length of the line type segments (not needed)  		break;  	case 49:  		segments.Add (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		//descripción del tipo de línea  		description = code.Value;  		break;  	case 73:  		//number of segments (not needed)  		break;  	case 40:  		//length of the line type segments (not needed)  		break;  	case 49:  		segments.Add (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		//descripción del tipo de línea  		description = code.Value;  		break;  	case 73:  		//number of segments (not needed)  		break;  	case 40:  		//length of the line type segments (not needed)  		break;  	case 49:  		segments.Add (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		//descripción del tipo de línea  		description = code.Value;  		break;  	case 73:  		//number of segments (not needed)  		break;  	case 40:  		//length of the line type segments (not needed)  		break;  	case 49:  		segments.Add (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		break;  	case 2:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		name = code.Value;  		break;  	case 3:  		if (string.IsNullOrEmpty (code.Value)) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  		font = code.Value;  		break;  	case 70:  		if (int.Parse (code.Value) == 4) {  			isVertical = true;  		}  		break;  	case 71:  		//orientación texto (normal)  		if (int.Parse (code.Value) == 6) {  			isBackward = true;  			isUpsideDown = true;  		}  		else if (int.Parse (code.Value) == 2) {  			isBackward = true;  		}  		else if (int.Parse (code.Value) == 4) {  			isUpsideDown = true;  		}  		break;  	case 40:  		height = float.Parse (code.Value);  		break;  	case 41:  		widthFactor = float.Parse (code.Value);  		break;  	case 42:  		//last text height used (not aplicable)  		break;  	case 50:  		obliqueAngle = (float.Parse (code.Value));  		break;  	}  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 4) {  	isVertical = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 6) {  	isBackward = true;  	isUpsideDown = true;  }  else if (int.Parse (code.Value) == 2) {  	isBackward = true;  }  else if (int.Parse (code.Value) == 4) {  	isUpsideDown = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 6) {  	isBackward = true;  	isUpsideDown = true;  }  else if (int.Parse (code.Value) == 2) {  	isBackward = true;  }  else if (int.Parse (code.Value) == 4) {  	isUpsideDown = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 6) {  	isBackward = true;  	isUpsideDown = true;  }  else if (int.Parse (code.Value) == 2) {  	isBackward = true;  }  else if (int.Parse (code.Value) == 4) {  	isUpsideDown = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 2) {  	isBackward = true;  }  else if (int.Parse (code.Value) == 4) {  	isUpsideDown = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 2) {  	isBackward = true;  }  else if (int.Parse (code.Value) == 4) {  	isUpsideDown = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following statement contains a magic number: if (int.Parse (code.Value) == 4) {  	isUpsideDown = true;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		arc.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		arc.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		arc.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		arc.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		arc.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		arc.StartAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		arc.EndAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		arc.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: switch (code.Code) {  case 5:  	arc.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	arc.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	arc.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	arc.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	arc.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	arc.StartAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	arc.EndAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	arc.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadArc,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		circle.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		circle.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		circle.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		circle.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		circle.Radius = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		circle.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: switch (code.Code) {  case 5:  	circle.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	circle.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	circle.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	circle.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	circle.Radius = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	circle.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadCircle,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		ellipse.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		ellipse.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		ellipse.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		ellipse.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		center.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		center.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		center.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		axisPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		axisPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		axisPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		ratio = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 42:  		ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: switch (code.Code) {  case 5:  	ellipse.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	ellipse.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	ellipse.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	ellipse.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	center.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	center.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	center.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	axisPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	axisPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	axisPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	ratio = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	ellipse.StartAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 42:  	ellipse.EndAngle = (float)(double.Parse (code.Value) * MathHelper.RadToDeg);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadEllipse,The following statement contains a magic number: ellipse.MajorAxis = 2 * axisPoint.Modulus ();  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		point.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		point.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		point.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		point.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		point.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: switch (code.Code) {  case 5:  	point.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	point.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	point.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	point.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	point.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPoint,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		face.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		face.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		face.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		face.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: switch (code.Code) {  case 5:  	face.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	face.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	face.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	face.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	face.EdgeFlags = (EdgeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadFace3D,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		solid.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		solid.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		solid.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		solid.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v0.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		v0.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		v0.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		v1.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		v1.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		v1.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 12:  		v2.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 22:  		v2.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 32:  		v2.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 13:  		v3.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 23:  		v3.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 33:  		v3.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		solid.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: switch (code.Code) {  case 5:  	solid.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	solid.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	solid.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	solid.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v0.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	v0.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	v0.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	v1.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	v1.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	v1.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 12:  	v2.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 22:  	v2.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 32:  	v2.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 13:  	v3.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 23:  	v3.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 33:  	v3.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	solid.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadSolid,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 2:  		block = this.GetBlock (code.Value);  		if (block == null)  			throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		basePoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		basePoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		basePoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		scale.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 2:  	block = this.GetBlock (code.Value);  	if (block == null)  		throw new DxfEntityException (DxfObjectCode.Insert' this.file' "Block " + code.Value + " not defined line " + this.fileLine);  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	basePoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	basePoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	basePoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	scale.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: if (code.Value == DxfObjectCode.Attribute) {  	while (code.Value != StringCode.EndSequence) {  		if (code.Value == DxfObjectCode.Attribute) {  			Debug.Assert (code.Code == 0);  			Attribute attribute = this.ReadAttribute (block' ref code);  			attributes.Add (attribute);  		}  	}  	// read the end end sequence object until a new element is found  	code = this.ReadCodePair ();  	while (code.Code != 0) {  		switch (code.Code) {  		case 5:  			endSequenceHandle = code.Value;  			code = this.ReadCodePair ();  			break;  		case 8:  			endSequenceLayer = this.GetLayer (code.Value);  			code = this.ReadCodePair ();  			break;  		default:  			code = this.ReadCodePair ();  			break;  		}  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: if (code.Value == DxfObjectCode.Attribute) {  	while (code.Value != StringCode.EndSequence) {  		if (code.Value == DxfObjectCode.Attribute) {  			Debug.Assert (code.Code == 0);  			Attribute attribute = this.ReadAttribute (block' ref code);  			attributes.Add (attribute);  		}  	}  	// read the end end sequence object until a new element is found  	code = this.ReadCodePair ();  	while (code.Code != 0) {  		switch (code.Code) {  		case 5:  			endSequenceHandle = code.Value;  			code = this.ReadCodePair ();  			break;  		case 8:  			endSequenceLayer = this.GetLayer (code.Value);  			code = this.ReadCodePair ();  			break;  		default:  			code = this.ReadCodePair ();  			break;  		}  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		endSequenceHandle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		endSequenceLayer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		endSequenceHandle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		endSequenceLayer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	endSequenceHandle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	endSequenceLayer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadInsert,The following statement contains a magic number: switch (code.Code) {  case 5:  	endSequenceHandle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	endSequenceLayer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		line.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		line.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		line.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		line.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		start.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		start.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		start.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		end.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		end.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		end.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		line.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: switch (code.Code) {  case 5:  	line.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	line.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	line.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	line.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	start.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	start.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	start.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	end.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	end.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	end.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	line.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLine,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		pol.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		pol.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		pol.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		pol.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 38:  		pol.Elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		pol.Thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 43:  		constantWidth = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		if (int.Parse (code.Value) == 0) {  			pol.IsClosed = false;  		}  		else if (int.Parse (code.Value) == 1) {  			pol.IsClosed = true;  		}  		code = this.ReadCodePair ();  		break;  	case 90:  		//numVertexes = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		v = new LightWeightPolylineVertex {  			BeginThickness = constantWidth'  			EndThickness = constantWidth  		};  		vX = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		float vY = float.Parse (code.Value);  		v.Location = new Vector2f (vX' vY);  		pol.Vertexes.Add (v);  		code = this.ReadCodePair ();  		break;  	case 40:  		v.BeginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		v.EndThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		v.Bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	pol.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	pol.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	pol.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	pol.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 38:  	pol.Elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	pol.Thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 43:  	constantWidth = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	if (int.Parse (code.Value) == 0) {  		pol.IsClosed = false;  	}  	else if (int.Parse (code.Value) == 1) {  		pol.IsClosed = true;  	}  	code = this.ReadCodePair ();  	break;  case 90:  	//numVertexes = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	v = new LightWeightPolylineVertex {  		BeginThickness = constantWidth'  		EndThickness = constantWidth  	};  	vX = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	float vY = float.Parse (code.Value);  	v.Location = new Vector2f (vX' vY);  	pol.Vertexes.Add (v);  	code = this.ReadCodePair ();  	break;  case 40:  	v.BeginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	v.EndThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	v.Bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLightWeightPolyline,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		elevation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 39:  		thickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (PolylineTypeFlags)(int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 71:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  		code = this.ReadCodePair ();  		break;  	case 72:  		//this field might not exist for polyface meshes' we cannot depend on it  		//numFaces  = int.Parse(code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	elevation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 39:  	thickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (PolylineTypeFlags)(int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 71:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numVertexes = int.Parse(code.Value); code = this.ReadCodePair();  	code = this.ReadCodePair ();  	break;  case 72:  	//this field might not exist for polyface meshes' we cannot depend on it  	//numFaces  = int.Parse(code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		endSequenceHandle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		endSequenceLayer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		endSequenceHandle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		endSequenceLayer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	default:  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	endSequenceHandle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	endSequenceLayer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadPolyline,The following statement contains a magic number: switch (code.Code) {  case 5:  	endSequenceHandle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	endSequenceLayer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  default:  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		text.Handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 1:  		text.Value = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		//layer code  		text.Layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		//aci color code  		text.Color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		//type line code  		text.LineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		firstAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		firstAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		firstAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 11:  		secondAlignmentPoint.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 21:  		secondAlignmentPoint.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 31:  		secondAlignmentPoint.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		text.Height = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		text.WidthFactor = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 50:  		text.Rotation = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 51:  		text.ObliqueAngle = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 7:  		text.Style = this.GetTextStyle (code.Value);  		code = this.ReadCodePair ();  		break;  	case 72:  		horizontalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 73:  		verticalAlignment = int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 210:  		normal.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 220:  		normal.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 230:  		normal.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: switch (code.Code) {  case 5:  	text.Handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 1:  	text.Value = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	//layer code  	text.Layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	//aci color code  	text.Color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	//type line code  	text.LineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	text.Height = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	text.WidthFactor = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 50:  	text.Rotation = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 51:  	text.ObliqueAngle = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 7:  	text.Style = this.GetTextStyle (code.Value);  	code = this.ReadCodePair ();  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 73:  	verticalAlignment = int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 210:  	normal.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadText,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: while (code.Code != 0) {  	switch (code.Code) {  	case 5:  		handle = code.Value;  		code = this.ReadCodePair ();  		break;  	case 8:  		layer = this.GetLayer (code.Value);  		code = this.ReadCodePair ();  		break;  	case 62:  		color = new AciColor (short.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 6:  		lineType = this.GetLineType (code.Value);  		code = this.ReadCodePair ();  		break;  	case 10:  		location.X = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 20:  		location.Y = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 30:  		location.Z = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 40:  		beginThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 41:  		endThickness = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 42:  		bulge = float.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 70:  		flags = (VertexTypeFlags)int.Parse (code.Value);  		code = this.ReadCodePair ();  		break;  	case 71:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 72:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 73:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 74:  		vertexIndexes.Add (int.Parse (code.Value));  		code = this.ReadCodePair ();  		break;  	case 1001:  		XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  		xData.Add (xDataItem.ApplicationRegistry' xDataItem);  		break;  	default:  		if (code.Code >= 1000 && code.Code <= 1071)  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  		code = this.ReadCodePair ();  		break;  	}  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: switch (code.Code) {  case 5:  	handle = code.Value;  	code = this.ReadCodePair ();  	break;  case 8:  	layer = this.GetLayer (code.Value);  	code = this.ReadCodePair ();  	break;  case 62:  	color = new AciColor (short.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 6:  	lineType = this.GetLineType (code.Value);  	code = this.ReadCodePair ();  	break;  case 10:  	location.X = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 20:  	location.Y = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 30:  	location.Z = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 40:  	beginThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 41:  	endThickness = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 42:  	bulge = float.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 70:  	flags = (VertexTypeFlags)int.Parse (code.Value);  	code = this.ReadCodePair ();  	break;  case 71:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 72:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 73:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 74:  	vertexIndexes.Add (int.Parse (code.Value));  	code = this.ReadCodePair ();  	break;  case 1001:  	XData xDataItem = this.ReadXDataRecord (code.Value' ref code);  	xData.Add (xDataItem.ApplicationRegistry' xDataItem);  	break;  default:  	if (code.Code >= 1000 && code.Code <= 1071)  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  	code = this.ReadCodePair ();  	break;  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadVertex,The following statement contains a magic number: if (code.Code >= 1000 && code.Code <= 1071)  	throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "The extended data of an entity must start with the application registry code " + this.fileLine);  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 3)  	alignment = TextAlignment.TopLeft;  else if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 3)  	alignment = TextAlignment.TopCenter;  else if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 3)  	alignment = TextAlignment.TopRight;  else if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 2)  	alignment = TextAlignment.MiddleLeft;  else if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 2)  	alignment = TextAlignment.MiddleCenter;  else if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 2)  	alignment = TextAlignment.MiddleRight;  else if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 0 && vertical == 1)  	alignment = TextAlignment.BottomLeft;  else if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 1)  	alignment = TextAlignment.BottomCenter;  else if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 1)  	alignment = TextAlignment.BottomRight;  else if (horizontal == 0 && vertical == 0)  	alignment = TextAlignment.BaselineLeft;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 1 && vertical == 0)  	alignment = TextAlignment.BaselineCenter;  else if (horizontal == 2 && vertical == 0)  	alignment = TextAlignment.BaselineRight;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ObtainAlignment,The following statement contains a magic number: if (horizontal == 2 && vertical == 0)  	alignment = TextAlignment.BaselineRight;  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadXDataRecord,The following statement contains a magic number: while (code.Code >= 1000 && code.Code <= 1071) {  	if (code.Code == XDataCode.AppReg)  		break;  	XDataRecord xDataRecord = new XDataRecord (code.Code' code.Value);  	xData.XDataRecord.Add (xDataRecord);  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadXDataRecord,The following statement contains a magic number: while (code.Code >= 1000 && code.Code <= 1071) {  	if (code.Code == XDataCode.AppReg)  		break;  	XDataRecord xDataRecord = new XDataRecord (code.Code' code.Value);  	xData.XDataRecord.Add (xDataRecord);  	code = this.ReadCodePair ();  }  
Magic Number,SharpDxf,MathHelper,C:\repos\lomatus_SharpDxf\SharpDxf\MathHelper.cs,ArbitraryAxis,The following statement contains a magic number: if ((Math.Abs (zAxis.X) < 1 / 64.0) && (Math.Abs (zAxis.Y) < 1 / 64.0))  	aX = Vector3d.CrossProduct (wY' zAxis);  else  	aX = Vector3d.CrossProduct (wZ' zAxis);  
Magic Number,SharpDxf,MathHelper,C:\repos\lomatus_SharpDxf\SharpDxf\MathHelper.cs,ArbitraryAxis,The following statement contains a magic number: if ((Math.Abs (zAxis.X) < 1 / 64.0) && (Math.Abs (zAxis.Y) < 1 / 64.0))  	aX = Vector3d.CrossProduct (wY' zAxis);  else  	aX = Vector3d.CrossProduct (wZ' zAxis);  
Magic Number,SharpDxf,Vector2f,C:\repos\lomatus_SharpDxf\SharpDxf\Vector2f.cs,Vector2f,The following statement contains a magic number: if (array.Length != 2)  	throw new ArgumentOutOfRangeException ("array"' array.Length' "The dimension of the array must be two");  
Magic Number,SharpDxf,Vector3f,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3f.cs,Vector3f,The following statement contains a magic number: if (array.Length != 3)  	throw new ArgumentOutOfRangeException ("array"' array.Length' "The dimension of the array must be three.");  
Magic Number,SharpDxf,Vector3f,C:\repos\lomatus_SharpDxf\SharpDxf\Vector3f.cs,Vector3f,The following statement contains a magic number: this.z = array [2];  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: if (section == StringCode.HeaderSection) {  	if (this.isHeader) {  		throw (new ClosedDxfSectionException (StringCode.HeaderSection' this.file));  	}  	this.WriteCodePair (2' StringCode.HeaderSection);  	this.isHeader = true;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: this.WriteCodePair (2' StringCode.HeaderSection);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: if (section == StringCode.ClassesSection) {  	if (this.isClassesSection) {  		throw (new ClosedDxfSectionException (StringCode.ClassesSection' this.file));  	}  	this.WriteCodePair (2' StringCode.ClassesSection);  	this.isClassesSection = true;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: this.WriteCodePair (2' StringCode.ClassesSection);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: if (section == StringCode.TablesSection) {  	if (this.isTableSection) {  		throw (new ClosedDxfSectionException (StringCode.TablesSection' this.file));  	}  	this.WriteCodePair (2' StringCode.TablesSection);  	this.isTableSection = true;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: this.WriteCodePair (2' StringCode.TablesSection);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: if (section == StringCode.BlocksSection) {  	if (this.isBlockDefinition) {  		throw (new ClosedDxfSectionException (StringCode.BlocksSection' this.file));  	}  	this.WriteCodePair (2' StringCode.BlocksSection);  	this.isBlockDefinition = true;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: this.WriteCodePair (2' StringCode.BlocksSection);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: if (section == StringCode.EntitiesSection) {  	if (this.isEntitiesSection) {  		throw (new ClosedDxfSectionException (StringCode.EntitiesSection' this.file));  	}  	this.WriteCodePair (2' StringCode.EntitiesSection);  	this.isEntitiesSection = true;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: this.WriteCodePair (2' StringCode.EntitiesSection);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: if (section == StringCode.ObjectsSection) {  	if (this.isObjectsSection) {  		throw (new ClosedDxfSectionException (StringCode.ObjectsSection' this.file));  	}  	this.WriteCodePair (2' StringCode.ObjectsSection);  	this.isObjectsSection = true;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginSection,The following statement contains a magic number: this.WriteCodePair (2' StringCode.ObjectsSection);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginTable,The following statement contains a magic number: this.WriteCodePair (2' table);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginTable,The following statement contains a magic number: this.WriteCodePair (5' this.reservedHandles++);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginTable,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Table);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginTable,The following statement contains a magic number: if (table == StringCode.DimensionStyleTable)  	this.WriteCodePair (100' SubclassMarker.DimensionStyleTable);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,BeginTable,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.DimensionStyleTable);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteComment,The following statement contains a magic number: if (!string.IsNullOrEmpty (comment))  	this.WriteCodePair (999' comment);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteComment,The following statement contains a magic number: this.WriteCodePair (999' comment);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,RegisterApplication,The following statement contains a magic number: this.WriteCodePair (5' appReg.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,RegisterApplication,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,RegisterApplication,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.ApplicationId);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,RegisterApplication,The following statement contains a magic number: this.WriteCodePair (2' appReg);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,RegisterApplication,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (5' vp.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.ViewPort);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (2' vp);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (10' vp.LowerLeftCorner.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (20' vp.LowerLeftCorner.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (11' vp.UpperRightCorner.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (21' vp.UpperRightCorner.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (12' vp.LowerLeftCorner.X - vp.UpperRightCorner.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (22' vp.UpperRightCorner.Y - vp.LowerLeftCorner.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (13' vp.SnapBasePoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (23' vp.SnapBasePoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (14' vp.SnapSpacing.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (24' vp.SnapSpacing.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (15' vp.GridSpacing.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (25' vp.GridSpacing.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (16' dir.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (26' dir.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (36' dir.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (17' vp.Target.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (27' vp.Target.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteViewPort,The following statement contains a magic number: this.WriteCodePair (37' vp.Target.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDimensionStyle,The following statement contains a magic number: this.WriteCodePair (105' dimStyle.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDimensionStyle,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDimensionStyle,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.DimensionStyle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDimensionStyle,The following statement contains a magic number: this.WriteCodePair (2' dimStyle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDimensionStyle,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockRecord,The following statement contains a magic number: this.WriteCodePair (5' blockRecord.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockRecord,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockRecord,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.BlockRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockRecord,The following statement contains a magic number: this.WriteCodePair (2' blockRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (5' tl.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.LineType);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (2' tl);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (3' tl.Description);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (72' 65);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (72' 65);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (73' tl.Segments.Count);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (40' tl.Legth ());  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: foreach (float s in tl.Segments) {  	this.WriteCodePair (49' s);  	if (this.version != DxfVersion.AutoCad12)  		this.WriteCodePair (74' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: foreach (float s in tl.Segments) {  	this.WriteCodePair (49' s);  	if (this.version != DxfVersion.AutoCad12)  		this.WriteCodePair (74' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (49' s);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: if (this.version != DxfVersion.AutoCad12)  	this.WriteCodePair (74' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLineType,The following statement contains a magic number: this.WriteCodePair (74' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (5' layer.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (2' layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: if (layer.IsVisible) {  	this.WriteCodePair (62' layer.Color.Index);  }  else {  	this.WriteCodePair (62' -layer.Color.Index);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: if (layer.IsVisible) {  	this.WriteCodePair (62' layer.Color.Index);  }  else {  	this.WriteCodePair (62' -layer.Color.Index);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (62' layer.Color.Index);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (62' -layer.Color.Index);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (6' layer.LineType.Name);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: if (this.version != DxfVersion.AutoCad12)  	this.WriteCodePair (390' Layer.PlotStyleHandle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLayer,The following statement contains a magic number: this.WriteCodePair (390' Layer.PlotStyleHandle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (5' style.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TableRecord);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.TextStyle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (2' style);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (3' style.Font);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsVertical) {  	this.WriteCodePair (70' 4);  }  else {  	this.WriteCodePair (70' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsVertical) {  	this.WriteCodePair (70' 4);  }  else {  	this.WriteCodePair (70' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsVertical) {  	this.WriteCodePair (70' 4);  }  else {  	this.WriteCodePair (70' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (70' 4);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (70' 4);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward && style.IsUpsideDown) {  	this.WriteCodePair (71' 6);  }  else if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 6);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 6);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsBackward) {  	this.WriteCodePair (71' 2);  }  else if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: if (style.IsUpsideDown) {  	this.WriteCodePair (71' 4);  }  else {  	this.WriteCodePair (71' 0);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 4);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 4);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (71' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (40' style.Height);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (41' style.WidthFactor);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (42' style.Height);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteTextStyle,The following statement contains a magic number: this.WriteCodePair (50' style.ObliqueAngle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (5' block.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (8' block.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.BlockBegin);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (2' block);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: if (block.Attributes.Count == 0) {  	this.WriteCodePair (70' 0);  }  else {  	this.WriteCodePair (70' 2);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: if (block.Attributes.Count == 0) {  	this.WriteCodePair (70' 0);  }  else {  	this.WriteCodePair (70' 2);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: if (block.Attributes.Count == 0) {  	this.WriteCodePair (70' 0);  }  else {  	this.WriteCodePair (70' 2);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (70' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (70' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (10' block.BasePoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (20' block.BasePoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (30' block.BasePoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlock,The following statement contains a magic number: this.WriteCodePair (3' block);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockEnd,The following statement contains a magic number: this.WriteCodePair (5' blockEnd.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockEnd,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockEnd,The following statement contains a magic number: this.WriteCodePair (8' blockEnd.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteBlockEnd,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.BlockEnd);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (5' arc.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Circle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (39' arc.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (10' arc.Center.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (20' arc.Center.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (30' arc.Center.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (40' arc.Radius);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (210' arc.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (220' arc.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (230' arc.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Arc);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (50' arc.StartAngle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteArc,The following statement contains a magic number: this.WriteCodePair (51' arc.EndAngle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (5' circle.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Circle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (10' circle.Center.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (20' circle.Center.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (30' circle.Center.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (40' circle.Radius);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (39' circle.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (210' circle.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (220' circle.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteCircle,The following statement contains a magic number: this.WriteCodePair (230' circle.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (5' ellipse.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Ellipse);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (10' ellipse.Center.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (20' ellipse.Center.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (30' ellipse.Center.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (11' axisPoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (21' axisPoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (31' axisPoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (210' ellipse.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (220' ellipse.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (230' ellipse.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (40' ellipse.MinorAxis / ellipse.MajorAxis);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (41' ellipse.StartAngle * MathHelper.DegToRad);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipse,The following statement contains a magic number: this.WriteCodePair (42' ellipse.EndAngle * MathHelper.DegToRad);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (70' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (10' 0.0f);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (20' 0.0f);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (30' ellipse.Center.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (39' ellipse.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (210' ellipse.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (220' ellipse.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (230' ellipse.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (66' "1");  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' ellipse.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' ellipse.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' ellipse.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' ellipse.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (8' ellipse.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (10' v.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEllipseAsPolyline,The following statement contains a magic number: this.WriteCodePair (20' v.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (10' 0.0f);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (20' 0.0f);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (30' nurbsCurve.Elevation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (39' nurbsCurve.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (210' nurbsCurve.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (220' nurbsCurve.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (230' nurbsCurve.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (66' "1");  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' nurbsCurve.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' nurbsCurve.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' nurbsCurve.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: foreach (Vector2f v in points) {  	this.WriteCodePair (0' DxfObjectCode.Vertex);  	this.WriteCodePair (8' nurbsCurve.Layer);  	this.WriteCodePair (70' 0);  	this.WriteCodePair (10' v.X);  	this.WriteCodePair (20' v.Y);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (8' nurbsCurve.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (70' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (10' v.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteNurbsCurve,The following statement contains a magic number: this.WriteCodePair (20' v.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (5' solid.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Solid);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (10' solid.FirstVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (20' solid.FirstVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (30' solid.FirstVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (11' solid.SecondVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (21' solid.SecondVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (31' solid.SecondVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (12' solid.ThirdVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (22' solid.ThirdVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (32' solid.ThirdVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (13' solid.FourthVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (23' solid.FourthVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (33' solid.FourthVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (39' solid.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (210' solid.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (220' solid.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteSolid,The following statement contains a magic number: this.WriteCodePair (230' solid.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (5' face.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Face3d);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (10' face.FirstVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (20' face.FirstVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (30' face.FirstVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (11' face.SecondVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (21' face.SecondVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (31' face.SecondVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (12' face.ThirdVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (22' face.ThirdVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (32' face.ThirdVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (13' face.FourthVertex.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (23' face.FourthVertex.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (33' face.FourthVertex.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteFace3D,The following statement contains a magic number: this.WriteCodePair (70' Convert.ToInt32 (face.EdgeFlags));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (5' insert.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Insert);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (2' insert.Block);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (10' insert.InsertionPoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (20' insert.InsertionPoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (30' insert.InsertionPoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (41' insert.Scale.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (42' insert.Scale.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (43' insert.Scale.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (50' insert.Rotation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (210' insert.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (220' insert.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (230' insert.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: if (insert.Attributes.Count > 0) {  	//Obsolete; formerly an “entities follow flag” (optional; ignore if present)  	//but its needed to load the dxf file in AutoCAD  	this.WriteCodePair (66' "1");  	this.WriteXData (insert.XData);  	foreach (Attribute attrib in insert.Attributes) {  		this.WriteAttribute (attrib' insert.InsertionPoint);  	}  	this.WriteCodePair (0' insert.EndSequence.CodeName);  	this.WriteCodePair (5' insert.EndSequence.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' insert.EndSequence.Layer);  }  else {  	this.WriteXData (insert.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: if (insert.Attributes.Count > 0) {  	//Obsolete; formerly an “entities follow flag” (optional; ignore if present)  	//but its needed to load the dxf file in AutoCAD  	this.WriteCodePair (66' "1");  	this.WriteXData (insert.XData);  	foreach (Attribute attrib in insert.Attributes) {  		this.WriteAttribute (attrib' insert.InsertionPoint);  	}  	this.WriteCodePair (0' insert.EndSequence.CodeName);  	this.WriteCodePair (5' insert.EndSequence.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' insert.EndSequence.Layer);  }  else {  	this.WriteXData (insert.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: if (insert.Attributes.Count > 0) {  	//Obsolete; formerly an “entities follow flag” (optional; ignore if present)  	//but its needed to load the dxf file in AutoCAD  	this.WriteCodePair (66' "1");  	this.WriteXData (insert.XData);  	foreach (Attribute attrib in insert.Attributes) {  		this.WriteAttribute (attrib' insert.InsertionPoint);  	}  	this.WriteCodePair (0' insert.EndSequence.CodeName);  	this.WriteCodePair (5' insert.EndSequence.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' insert.EndSequence.Layer);  }  else {  	this.WriteXData (insert.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: if (insert.Attributes.Count > 0) {  	//Obsolete; formerly an “entities follow flag” (optional; ignore if present)  	//but its needed to load the dxf file in AutoCAD  	this.WriteCodePair (66' "1");  	this.WriteXData (insert.XData);  	foreach (Attribute attrib in insert.Attributes) {  		this.WriteAttribute (attrib' insert.InsertionPoint);  	}  	this.WriteCodePair (0' insert.EndSequence.CodeName);  	this.WriteCodePair (5' insert.EndSequence.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' insert.EndSequence.Layer);  }  else {  	this.WriteXData (insert.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (66' "1");  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (5' insert.EndSequence.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteInsert,The following statement contains a magic number: this.WriteCodePair (8' insert.EndSequence.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (5' line.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Line);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (10' line.StartPoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (20' line.StartPoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (30' line.StartPoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (11' line.EndPoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (21' line.EndPoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (31' line.EndPoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (39' line.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (210' line.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (220' line.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLine,The following statement contains a magic number: this.WriteCodePair (230' line.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (5' polyline.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Polyline);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (70' (int)polyline.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (10' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (20' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (30' polyline.Elevation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (39' polyline.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (210' polyline.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (220' polyline.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (230' polyline.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (66' "1");  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: foreach (PolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolylineVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (5' v.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (8' v.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Vertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.PolylineVertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (70' (int)v.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (10' v.Location.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (20' v.Location.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (40' v.BeginThickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (41' v.EndThickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (42' v.Bulge);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (5' polyline.EndSequence.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline2d,The following statement contains a magic number: this.WriteCodePair (8' polyline.EndSequence.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (5' polyline.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.LightWeightPolyline);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (90' polyline.Vertexes.Count);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (70' (int)polyline.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (38' polyline.Elevation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (39' polyline.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: foreach (LightWeightPolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: foreach (LightWeightPolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: foreach (LightWeightPolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: foreach (LightWeightPolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: foreach (LightWeightPolylineVertex v in polyline.Vertexes) {  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (40' v.BeginThickness);  	this.WriteCodePair (41' v.EndThickness);  	this.WriteCodePair (42' v.Bulge);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (10' v.Location.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (20' v.Location.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (40' v.BeginThickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (41' v.EndThickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (42' v.Bulge);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (210' polyline.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (220' polyline.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteLightWeightPolyline,The following statement contains a magic number: this.WriteCodePair (230' polyline.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (5' polyline.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Polyline3d);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (70' (int)polyline.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (10' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (20' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (30' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (66' "1");  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: foreach (Polyline3dVertex v in polyline.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (5' v.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (8' v.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Vertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Polyline3dVertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (70' (int)v.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (10' v.Location.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (20' v.Location.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (30' v.Location.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (5' polyline.EndSequence.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyline3d,The following statement contains a magic number: this.WriteCodePair (8' polyline.EndSequence.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (5' mesh.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.PolyfaceMesh);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (70' (int)mesh.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (71' mesh.Vertexes.Count);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (72' mesh.Faces.Count);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (10' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (20' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (30' 0.0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (66' "1");  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshVertex v in mesh.Vertexes) {  	this.WriteCodePair (0' v.CodeName);  	this.WriteCodePair (5' v.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' v.Layer);  	this.WriteCodePair (100' SubclassMarker.Vertex);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  	this.WriteCodePair (70' (int)v.Flags);  	this.WriteCodePair (10' v.Location.X);  	this.WriteCodePair (20' v.Location.Y);  	this.WriteCodePair (30' v.Location.Z);  	this.WriteXData (v.XData);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (5' v.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (8' v.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Vertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.PolyfaceMeshVertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (70' (int)v.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (10' v.Location.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (20' v.Location.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (30' v.Location.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: foreach (PolyfaceMeshFace face in mesh.Faces) {  	this.WriteCodePair (0' face.CodeName);  	this.WriteCodePair (5' face.Handle);  	this.WriteCodePair (100' SubclassMarker.Entity);  	this.WriteCodePair (8' face.Layer);  	this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  	this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  	this.WriteCodePair (10' 0);  	this.WriteCodePair (20' 0);  	this.WriteCodePair (30' 0);  	this.WriteCodePair (71' face.VertexIndexes [0]);  	this.WriteCodePair (72' face.VertexIndexes [1]);  	this.WriteCodePair (73' face.VertexIndexes [2]);  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (5' face.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (8' face.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.PolyfaceMeshFace);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (70' (int)VertexTypeFlags.PolyfaceMeshVertex);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (10' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (20' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (30' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (71' face.VertexIndexes [0]);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (72' face.VertexIndexes [1]);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (73' face.VertexIndexes [2]);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (73' face.VertexIndexes [2]);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (5' mesh.EndSequence.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePolyfaceMesh,The following statement contains a magic number: this.WriteCodePair (8' mesh.EndSequence.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (5' point.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Point);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (10' point.Location.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (20' point.Location.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (30' point.Location.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (39' point.Thickness);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (210' point.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (220' point.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WritePoint,The following statement contains a magic number: this.WriteCodePair (230' point.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (5' text.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (10' text.BasePoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (20' text.BasePoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (30' text.BasePoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (40' text.Height);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (41' text.WidthFactor);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (50' text.Rotation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (51' text.ObliqueAngle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (7' text.Style);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (11' text.BasePoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (21' text.BasePoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (31' text.BasePoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (210' text.Normal.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (220' text.Normal.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (230' text.Normal.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following statement contains a magic number: this.WriteCodePair (73' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (5' Convert.ToString (10' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (5' Convert.ToString (10' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (5' Convert.ToString (10' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Dictionary);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (281' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (3' dictionary);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (350' Convert.ToString (11' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (350' Convert.ToString (11' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (350' Convert.ToString (11' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (5' Convert.ToString (11' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (5' Convert.ToString (11' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (5' Convert.ToString (11' 16));  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Dictionary);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteDictionary,The following statement contains a magic number: this.WriteCodePair (281' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (5' def.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (10' def.BasePoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (20' def.BasePoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (30' def.BasePoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (40' def.Height);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (7' def.Style);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (41' def.WidthFactor);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (50' def.Rotation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.AttributeDefinition);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (2' def.Id);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (3' def.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (70' (int)def.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 3);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 1);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (72' 2);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (74' 0);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (11' def.BasePoint.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (21' def.BasePoint.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following statement contains a magic number: this.WriteCodePair (31' def.BasePoint.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (5' attrib.Handle);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Entity);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Text);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (10' attrib.Definition.BasePoint.X + puntoInsercion.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (20' attrib.Definition.BasePoint.Y + puntoInsercion.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (30' attrib.Definition.BasePoint.Z + puntoInsercion.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (40' attrib.Definition.Height);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (41' attrib.Definition.WidthFactor);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (50' attrib.Definition.Rotation);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (7' attrib.Definition.Style);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (100' SubclassMarker.Attribute);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (2' attrib.Definition.Id);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (70' (int)attrib.Definition.Flags);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (11' attrib.Definition.BasePoint.X + puntoInsercion.X);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (21' attrib.Definition.BasePoint.Y + puntoInsercion.Y);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttribute,The following statement contains a magic number: this.WriteCodePair (31' attrib.Definition.BasePoint.Z + puntoInsercion.Z);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEntityCommonCodes,The following statement contains a magic number: this.WriteCodePair (8' entity.Layer);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEntityCommonCodes,The following statement contains a magic number: this.WriteCodePair (62' entity.Color.Index);  
Magic Number,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteEntityCommonCodes,The following statement contains a magic number: this.WriteCodePair (6' entity.LineType);  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (LightWeightPolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,LightWeightPolyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\LightWeightPolyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,Ellipse,The following statement contains a magic number: this.curvePoints = 30;  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,Ellipse,The following statement contains a magic number: this.curvePoints = 30;  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,PolygonalVertexes,The following statement contains a magic number: if (this.IsFullEllipse) {  	for (int i = 0; i < 360; i += 360 / precision) {  		float alpha = (float)(i * MathHelper.DegToRad);  		float sinalpha = (float)Math.Sin (alpha);  		float cosalpha = (float)Math.Cos (alpha);  		float pointX = 0.5f * (this.majorAxis * cosalpha * cosbeta - this.minorAxis * sinalpha * sinbeta);  		float pointY = 0.5f * (this.majorAxis * cosalpha * sinbeta + this.minorAxis * sinalpha * cosbeta);  		points.Add (new Vector2f (pointX' pointY));  	}  }  else {  	for (int i = 0; i <= precision; i++) {  		float angle = this.startAngle + i * (this.endAngle - this.startAngle) / precision;  		points.Add (this.PointFromEllipse (angle));  	}  }  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,PolygonalVertexes,The following statement contains a magic number: if (this.IsFullEllipse) {  	for (int i = 0; i < 360; i += 360 / precision) {  		float alpha = (float)(i * MathHelper.DegToRad);  		float sinalpha = (float)Math.Sin (alpha);  		float cosalpha = (float)Math.Cos (alpha);  		float pointX = 0.5f * (this.majorAxis * cosalpha * cosbeta - this.minorAxis * sinalpha * sinbeta);  		float pointY = 0.5f * (this.majorAxis * cosalpha * sinbeta + this.minorAxis * sinalpha * cosbeta);  		points.Add (new Vector2f (pointX' pointY));  	}  }  else {  	for (int i = 0; i <= precision; i++) {  		float angle = this.startAngle + i * (this.endAngle - this.startAngle) / precision;  		points.Add (this.PointFromEllipse (angle));  	}  }  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,PolygonalVertexes,The following statement contains a magic number: for (int i = 0; i < 360; i += 360 / precision) {  	float alpha = (float)(i * MathHelper.DegToRad);  	float sinalpha = (float)Math.Sin (alpha);  	float cosalpha = (float)Math.Cos (alpha);  	float pointX = 0.5f * (this.majorAxis * cosalpha * cosbeta - this.minorAxis * sinalpha * sinbeta);  	float pointY = 0.5f * (this.majorAxis * cosalpha * sinbeta + this.minorAxis * sinalpha * cosbeta);  	points.Add (new Vector2f (pointX' pointY));  }  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,PolygonalVertexes,The following statement contains a magic number: for (int i = 0; i < 360; i += 360 / precision) {  	float alpha = (float)(i * MathHelper.DegToRad);  	float sinalpha = (float)Math.Sin (alpha);  	float cosalpha = (float)Math.Cos (alpha);  	float pointX = 0.5f * (this.majorAxis * cosalpha * cosbeta - this.minorAxis * sinalpha * sinbeta);  	float pointY = 0.5f * (this.majorAxis * cosalpha * sinbeta + this.minorAxis * sinalpha * cosbeta);  	points.Add (new Vector2f (pointX' pointY));  }  
Magic Number,SharpDxf.Entities,Ellipse,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Ellipse.cs,PolygonalVertexes,The following statement contains a magic number: i += 360 / precision
Magic Number,SharpDxf.Entities,NurbsCurve,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\NURBSCurve.cs,NurbsCurve,The following statement contains a magic number: this.curvePoints = 30;  
Magic Number,SharpDxf.Entities,NurbsCurve,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\NURBSCurve.cs,NurbsCurve,The following statement contains a magic number: this.curvePoints = 30;  
Magic Number,SharpDxf.Entities,Arc,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Arc.cs,PoligonalVertexes,The following statement contains a magic number: if (precision < 2)  	throw new ArgumentOutOfRangeException ("precision"' precision' "The arc precision must be greater or equal to two");  
Magic Number,SharpDxf.Entities,Arc,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Arc.cs,PoligonalVertexes,The following statement contains a magic number: if (precision < 2)  	throw new ArgumentOutOfRangeException ("precision"' precision' "The arc precision must be greater or equal to two");  
Magic Number,SharpDxf.Entities,Arc,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Arc.cs,PoligonalVertexes,The following statement contains a magic number: if (2 * this.radius >= weldThreshold) {  	float angulo = (end - start) / precision;  	Vector2f prevPoint;  	Vector2f firstPoint;  	float sine = (float)(this.radius * Math.Sin (start));  	float cosine = (float)(this.radius * Math.Cos (start));  	firstPoint = new Vector2f (cosine + this.center.X' sine + this.center.Y);  	ocsVertexes.Add (firstPoint);  	prevPoint = firstPoint;  	for (int i = 1; i <= precision; i++) {  		sine = (float)(this.radius * Math.Sin (start + angulo * i));  		cosine = (float)(this.radius * Math.Cos (start + angulo * i));  		Vector2f point = new Vector2f (cosine + this.center.X' sine + this.center.Y);  		if (!point.Equals (prevPoint' weldThreshold) && !point.Equals (firstPoint' weldThreshold)) {  			ocsVertexes.Add (point);  			prevPoint = point;  		}  	}  }  
Magic Number,SharpDxf.Entities,PolyfaceMeshFace,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\PolyfaceMeshFace.cs,PolyfaceMeshFace,The following statement contains a magic number: this.vertexIndexes = new int[3];  
Magic Number,SharpDxf.Entities,PolyfaceMeshFace,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\PolyfaceMeshFace.cs,PolyfaceMeshFace,The following statement contains a magic number: if (vertexIndexes.Length > 4)  	throw new ArgumentOutOfRangeException ("vertexIndexes"' vertexIndexes.Length' "The maximun number of index vertexes in a face is 4");  
Magic Number,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The following statement contains a magic number: if (precision < 3)  	throw new ArgumentOutOfRangeException ("precision"' precision' "The circle precision must be greater or equal to three");  
Magic Number,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The following statement contains a magic number: if (precision < 3)  	throw new ArgumentOutOfRangeException ("precision"' precision' "The circle precision must be greater or equal to three");  
Magic Number,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The following statement contains a magic number: if (2 * this.radius >= weldThreshold) {  	float angulo = (float)(MathHelper.TwoPI / precision);  	Vector2f prevPoint;  	Vector2f firstPoint;  	float sine = (float)(this.radius * Math.Sin (MathHelper.HalfPI * 0.5));  	float cosine = (float)(this.radius * Math.Cos (MathHelper.HalfPI * 0.5));  	firstPoint = new Vector2f (cosine + this.center.X' sine + this.center.Y);  	ocsVertexes.Add (firstPoint);  	prevPoint = firstPoint;  	for (int i = 1; i < precision; i++) {  		sine = (float)(this.radius * Math.Sin (MathHelper.HalfPI + angulo * i));  		cosine = (float)(this.radius * Math.Cos (MathHelper.HalfPI + angulo * i));  		Vector2f point = new Vector2f (cosine + this.center.X' sine + this.center.Y);  		if (!point.Equals (prevPoint' weldThreshold) && !point.Equals (firstPoint' weldThreshold)) {  			ocsVertexes.Add (point);  			prevPoint = point;  		}  	}  }  
Magic Number,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The following statement contains a magic number: if (2 * this.radius >= weldThreshold) {  	float angulo = (float)(MathHelper.TwoPI / precision);  	Vector2f prevPoint;  	Vector2f firstPoint;  	float sine = (float)(this.radius * Math.Sin (MathHelper.HalfPI * 0.5));  	float cosine = (float)(this.radius * Math.Cos (MathHelper.HalfPI * 0.5));  	firstPoint = new Vector2f (cosine + this.center.X' sine + this.center.Y);  	ocsVertexes.Add (firstPoint);  	prevPoint = firstPoint;  	for (int i = 1; i < precision; i++) {  		sine = (float)(this.radius * Math.Sin (MathHelper.HalfPI + angulo * i));  		cosine = (float)(this.radius * Math.Cos (MathHelper.HalfPI + angulo * i));  		Vector2f point = new Vector2f (cosine + this.center.X' sine + this.center.Y);  		if (!point.Equals (prevPoint' weldThreshold) && !point.Equals (firstPoint' weldThreshold)) {  			ocsVertexes.Add (point);  			prevPoint = point;  		}  	}  }  
Magic Number,SharpDxf.Entities,Circle,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Circle.cs,PoligonalVertexes,The following statement contains a magic number: if (2 * this.radius >= weldThreshold) {  	float angulo = (float)(MathHelper.TwoPI / precision);  	Vector2f prevPoint;  	Vector2f firstPoint;  	float sine = (float)(this.radius * Math.Sin (MathHelper.HalfPI * 0.5));  	float cosine = (float)(this.radius * Math.Cos (MathHelper.HalfPI * 0.5));  	firstPoint = new Vector2f (cosine + this.center.X' sine + this.center.Y);  	ocsVertexes.Add (firstPoint);  	prevPoint = firstPoint;  	for (int i = 1; i < precision; i++) {  		sine = (float)(this.radius * Math.Sin (MathHelper.HalfPI + angulo * i));  		cosine = (float)(this.radius * Math.Cos (MathHelper.HalfPI + angulo * i));  		Vector2f point = new Vector2f (cosine + this.center.X' sine + this.center.Y);  		if (!point.Equals (prevPoint' weldThreshold) && !point.Equals (firstPoint' weldThreshold)) {  			ocsVertexes.Add (point);  			prevPoint = point;  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: foreach (PolylineVertex vertex in this.Vertexes) {  	float bulge = vertex.Bulge;  	Vector2f p1;  	Vector2f p2;  	if (index == this.Vertexes.Count - 1) {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [0].Location.X' this.vertexes [0].Location.Y);  	}  	else {  		p1 = new Vector2f (vertex.Location.X' vertex.Location.Y);  		p2 = new Vector2f (this.vertexes [index + 1].Location.X' this.vertexes [index + 1].Location.Y);  	}  	if (!p1.Equals (p2' weldThreshold)) {  		if (bulge == 0 || bulgePrecision == 0) {  			ocsVertexes.Add (p1);  		}  		else {  			float c = Vector2f.Distance (p1' p2);  			if (c >= bulgeThreshold) {  				float s = (c / 2) * Math.Abs (bulge);  				float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  				float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  				float gamma = (float)((Math.PI - theta) / 2);  				float phi;  				if (bulge > 0) {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  				}  				else {  					phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  				}  				Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  				Vector2f a1 = p1 - center;  				float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  				ocsVertexes.Add (p1);  				for (int i = 1; i <= bulgePrecision; i++) {  					Vector2f curvePoint = new Vector2f ();  					Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  					curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  					curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  					if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  						ocsVertexes.Add (curvePoint);  					}  				}  			}  			else {  				ocsVertexes.Add (p1);  			}  		}  	}  	index++;  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (!p1.Equals (p2' weldThreshold)) {  	if (bulge == 0 || bulgePrecision == 0) {  		ocsVertexes.Add (p1);  	}  	else {  		float c = Vector2f.Distance (p1' p2);  		if (c >= bulgeThreshold) {  			float s = (c / 2) * Math.Abs (bulge);  			float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  			float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  			float gamma = (float)((Math.PI - theta) / 2);  			float phi;  			if (bulge > 0) {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  			}  			else {  				phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  			}  			Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  			Vector2f a1 = p1 - center;  			float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  			ocsVertexes.Add (p1);  			for (int i = 1; i <= bulgePrecision; i++) {  				Vector2f curvePoint = new Vector2f ();  				Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  				curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  				curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  				if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  					ocsVertexes.Add (curvePoint);  				}  			}  		}  		else {  			ocsVertexes.Add (p1);  		}  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (bulge == 0 || bulgePrecision == 0) {  	ocsVertexes.Add (p1);  }  else {  	float c = Vector2f.Distance (p1' p2);  	if (c >= bulgeThreshold) {  		float s = (c / 2) * Math.Abs (bulge);  		float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  		float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  		float gamma = (float)((Math.PI - theta) / 2);  		float phi;  		if (bulge > 0) {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  		}  		else {  			phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  		}  		Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  		Vector2f a1 = p1 - center;  		float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  		ocsVertexes.Add (p1);  		for (int i = 1; i <= bulgePrecision; i++) {  			Vector2f curvePoint = new Vector2f ();  			Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  			curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  			curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  			if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  				ocsVertexes.Add (curvePoint);  			}  		}  	}  	else {  		ocsVertexes.Add (p1);  	}  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Entities,Polyline,C:\repos\lomatus_SharpDxf\SharpDxf\Entities\Polyline.cs,PoligonalVertexes,The following statement contains a magic number: if (c >= bulgeThreshold) {  	float s = (c / 2) * Math.Abs (bulge);  	float r = ((c / 2) * (c / 2) + s * s) / (2 * s);  	float theta = (float)(4 * Math.Atan (Math.Abs (bulge)));  	float gamma = (float)((Math.PI - theta) / 2);  	float phi;  	if (bulge > 0) {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) + gamma;  	}  	else {  		phi = Vector2f.AngleBetween (Vector2f.UnitX' p2 - p1) - gamma;  	}  	Vector2f center = new Vector2f ((float)(p1.X + r * Math.Cos (phi))' (float)(p1.Y + r * Math.Sin (phi)));  	Vector2f a1 = p1 - center;  	float angle = 4 * ((float)(Math.Atan (bulge))) / (bulgePrecision + 1);  	ocsVertexes.Add (p1);  	for (int i = 1; i <= bulgePrecision; i++) {  		Vector2f curvePoint = new Vector2f ();  		Vector2f prevCurvePoint = new Vector2f (this.vertexes [this.vertexes.Count - 1].Location.X' this.vertexes [this.vertexes.Count - 1].Location.Y);  		curvePoint.X = center.X + (float)(Math.Cos (i * angle) * a1.X - Math.Sin (i * angle) * a1.Y);  		curvePoint.Y = center.Y + (float)(Math.Sin (i * angle) * a1.X + Math.Cos (i * angle) * a1.Y);  		if (!curvePoint.Equals (prevCurvePoint' weldThreshold) && !curvePoint.Equals (p2' weldThreshold)) {  			ocsVertexes.Add (curvePoint);  		}  	}  }  else {  	ocsVertexes.Add (p1);  }  
Magic Number,SharpDxf.Header,HeaderVariable,C:\repos\lomatus_SharpDxf\SharpDxf\Header\HeaderVariable.cs,InitializeSystemVariables,The following statement contains a magic number: return new Dictionary<string' int> {  	{  		SystemVariable.DabaseVersion'  		1  	}'  	{  		SystemVariable.HandSeed'  		5  	}  };  
Magic Number,SharpDxf.Viewer,Canvas,C:\repos\lomatus_SharpDxf\SharpDxf\Viewer\Canvas.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString (dxf.Version.ToString ()' ver' Brushes.Red' 10' 10);  
Magic Number,SharpDxf.Viewer,Canvas,C:\repos\lomatus_SharpDxf\SharpDxf\Viewer\Canvas.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString (dxf.Version.ToString ()' ver' Brushes.Red' 10' 10);  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadHeader,The following switch statement is missing a default case: switch (variableName) {  case SystemVariable.DabaseVersion:  	this.version = (DxfVersion)StringEnum.Parse (typeof(DxfVersion)' code.Value);  	break;  case SystemVariable.HandSeed:  	this.handleSeed = code.Value;  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTables,The following switch statement is missing a default case: switch (code.Value) {  case StringCode.ApplicationIDTable:  	Debug.Assert (code.Code == 2);  	this.ReadApplicationsId ();  	break;  case StringCode.LayerTable:  	Debug.Assert (code.Code == 2);  	this.ReadLayers ();  	break;  case StringCode.LineTypeTable:  	Debug.Assert (code.Code == 2);  	this.ReadLineTypes ();  	break;  case StringCode.TextStyleTable:  	Debug.Assert (code.Code == 2);  	this.ReadTextStyles ();  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadApplicationId,The following switch statement is missing a default case: switch (code.Code) {  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	appId = code.Value;  	break;  case 5:  	handle = code.Value;  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttributeDefinition,The following switch statement is missing a default case: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	id = code.Value;  	break;  case 3:  	text = code.Value;  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  case 70:  	flags = (AttributeFlags)int.Parse (code.Value);  	break;  case 10:  	firstAlignmentPoint.X = float.Parse (code.Value);  	break;  case 20:  	firstAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 30:  	firstAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 11:  	secondAlignmentPoint.X = float.Parse (code.Value);  	break;  case 21:  	secondAlignmentPoint.Y = float.Parse (code.Value);  	break;  case 31:  	secondAlignmentPoint.Z = float.Parse (code.Value);  	break;  case 7:  	style = this.GetTextStyle (code.Value);  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 50:  	rotation = float.Parse (code.Value);  	break;  case 72:  	horizontalAlignment = int.Parse (code.Value);  	break;  case 74:  	verticalAlignment = int.Parse (code.Value);  	break;  case 210:  	normal.X = float.Parse (code.Value);  	break;  case 220:  	normal.Y = float.Parse (code.Value);  	break;  case 230:  	normal.Z = float.Parse (code.Value);  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadAttribute,The following switch statement is missing a default case: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	attdef = block.Attributes [code.Value];  	break;  case 1:  	value = code.Value;  	break;  case 8:  	//layer code  	layer = this.GetLayer (code.Value);  	break;  case 62:  	//aci color code  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	//type line code  	lineType = this.GetLineType (code.Value);  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLayer,The following switch statement is missing a default case: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 62:  	short index;  	if (short.TryParse (code.Value' out index)) {  		if (index < 0) {  			isVisible = false;  			index = Math.Abs (index);  		}  		if (index > 256) {  			throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  		}  	}  	else {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	color = new AciColor (short.Parse (code.Value));  	break;  case 6:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	lineType = this.GetLineType (code.Value);  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadLineType,The following switch statement is missing a default case: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	//descripción del tipo de línea  	description = code.Value;  	break;  case 73:  	//number of segments (not needed)  	break;  case 40:  	//length of the line type segments (not needed)  	break;  case 49:  	segments.Add (float.Parse (code.Value));  	break;  }  
Missing Default,SharpDxf,DxfReader,C:\repos\lomatus_SharpDxf\SharpDxf\Reader.cs,ReadTextStyle,The following switch statement is missing a default case: switch (code.Code) {  case 5:  	handle = code.Value;  	break;  case 2:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	name = code.Value;  	break;  case 3:  	if (string.IsNullOrEmpty (code.Value)) {  		throw new DxfInvalidCodeValueEntityException (code.Code' code.Value' this.file' "Invalid value " + code.Value + " in code " + code.Code + " line " + this.fileLine);  	}  	font = code.Value;  	break;  case 70:  	if (int.Parse (code.Value) == 4) {  		isVertical = true;  	}  	break;  case 71:  	//orientación texto (normal)  	if (int.Parse (code.Value) == 6) {  		isBackward = true;  		isUpsideDown = true;  	}  	else if (int.Parse (code.Value) == 2) {  		isBackward = true;  	}  	else if (int.Parse (code.Value) == 4) {  		isUpsideDown = true;  	}  	break;  case 40:  	height = float.Parse (code.Value);  	break;  case 41:  	widthFactor = float.Parse (code.Value);  	break;  case 42:  	//last text height used (not aplicable)  	break;  case 50:  	obliqueAngle = (float.Parse (code.Value));  	break;  }  
Missing Default,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,EndSection,The following switch statement is missing a default case: switch (this.activeSection) {  case StringCode.HeaderSection:  	this.isEntitiesSection = false;  	break;  case StringCode.ClassesSection:  	this.isEntitiesSection = false;  	break;  case StringCode.TablesSection:  	this.isTableSection = false;  	break;  case StringCode.BlocksSection:  	this.isBlockDefinition = true;  	break;  case StringCode.EntitiesSection:  	this.isEntitiesSection = false;  	break;  case StringCode.ObjectsSection:  	this.isEntitiesSection = false;  	break;  }  
Missing Default,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteText,The following switch statement is missing a default case: switch (text.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (100' SubclassMarker.Text);  	this.WriteCodePair (73' 0);  	break;  }  
Missing Default,SharpDxf,DxfWriter,C:\repos\lomatus_SharpDxf\SharpDxf\Writer.cs,WriteAttributeDefinition,The following switch statement is missing a default case: switch (def.Alignment) {  case TextAlignment.TopLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.TopRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 3);  	break;  case TextAlignment.MiddleLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.MiddleRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 2);  	break;  case TextAlignment.BottomLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BottomRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 1);  	break;  case TextAlignment.BaselineLeft:  	this.WriteCodePair (72' 0);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineCenter:  	this.WriteCodePair (72' 1);  	this.WriteCodePair (74' 0);  	break;  case TextAlignment.BaselineRight:  	this.WriteCodePair (72' 2);  	this.WriteCodePair (74' 0);  	break;  }  
