Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AsyncTargetingPack.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,Cancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(10);                      await TaskEx.Delay(100' cancelSource.Token);                 }             });
Magic Number,AsyncTargetingPack.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,Cancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(10);                      await TaskEx.Delay(100' cancelSource.Token);                 }             });
Magic Number,AsyncTargetingPack.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,NoCancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                 }                  await TaskEx.Delay(100);             });
Magic Number,AsyncTargetingPack.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,NoCancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                 }                  await TaskEx.Delay(100);             });
Magic Number,AsyncTargetingPack.Tests,DelayTest,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\DelayTest.cs,ResiliantToGc,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var keepGcing = true;                  var gcAllTheTime = new Thread(() =>                 {                     // ReSharper disable AccessToModifiedClosure                     while (keepGcing)                     // ReSharper restore AccessToModifiedClosure                     {                         GC.Collect();                         Thread.Sleep(1);                     }                 });                  gcAllTheTime.Start();                 await TaskEx.Delay(500);                 keepGcing = false;             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,FromResultSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.FromResult(4);                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(4' r);             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,FromResultSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.FromResult(4);                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(4' r);             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,DelaySyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 await TaskEx.Delay(10);                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,ReturningTaskSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await WaitAThing();                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(6' r);             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,CapturedReturningTaskSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.Run(async () =>                 {                     SynchronizationContext.SetSynchronizationContext(WickedSynchronizationContext.Instance);                     return await WaitAThing();                 }).ConfigureAwait(true);                  Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(6' r);             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,NotCapturedReturningTaskSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 Write.Line("START");                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.Run(async () =>                 {                     Write.Line("A");                     SynchronizationContext.SetSynchronizationContext(WickedSynchronizationContext.Instance);                     Write.Line("B");                     var result = await WaitAThing();                     Write.Line("C");                     return result;                 }).ConfigureAwait(false);                 Write.Line("END");                 Assert.AreNotSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(6' r);             });
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,WaitABit,The following statement contains a magic number: await TaskEx.Delay(10);
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,WaitAThing,The following statement contains a magic number: await TaskEx.Delay(10);
Magic Number,AsyncTargetingPack.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,WaitAThing,The following statement contains a magic number: return await TaskEx.FromResult(6);
Magic Number,AsyncTargetingPack.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncTargetingPack.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncTargetingPack.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncTargetingPack.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncTargetingPack.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncTargetingPack.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericArrayWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task).ToArray());                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncTargetingPack.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericArrayWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task).ToArray());                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncTargetingPack.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncTargetingPack.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncTargetingPack.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,EnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task).Cast<Task>());                 Assert.IsFalse(whenAnyTask.IsCompleted);                 taskCompletionSources[1].SetResult(2);                 await await whenAnyTask;             });
