Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionToken,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { gotState = (bool)state; }' true' CancellationToken.None));" is 137.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionOptions,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { gotState = (bool)state; }' true' TaskContinuationOptions.None));" is 143.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionScheduler,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { gotState = (bool)state; }' true' TaskScheduler.Current));" is 136.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionTokenOptionsScheduler,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { gotState = (bool)state; }' true' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current));" is 190.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionTokenOptionsSchedulerNull,The length of the statement  "            TaskEx.Run(() => { }).ContinueWith((Action<Task' object>)null' false' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current);" is 147.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionResultToken,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { gotState = (bool)state; }' true' CancellationToken.None));" is 138.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionResultOptions,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { gotState = (bool)state; }' true' TaskContinuationOptions.None));" is 144.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionResultScheduler,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { gotState = (bool)state; }' true' TaskScheduler.Current));" is 137.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionResultTokenOptionsScheduler,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { gotState = (bool)state; }' true' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current));" is 191.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,ActionResultTokenOptionsSchedulerNull,The length of the statement  "            TaskEx.Run(() => true).ContinueWith((Action<Task<bool>' object>)null' false' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current);" is 154.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,Func,The length of the statement  "            TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { return gotState = (bool)state; }' true));" is 120.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncToken,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { return gotState = (bool)state; }' true' CancellationToken.None));" is 157.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncOptions,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { return gotState = (bool)state; }' true' TaskContinuationOptions.None));" is 163.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncScheduler,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { return gotState = (bool)state; }' true' TaskScheduler.Current));" is 156.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncTokenOptionsScheduler,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => { }).ContinueWith((task' state) => { return gotState = (bool)state; }' true' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current));" is 210.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncTokenOptionsSchedulerNull,The length of the statement  "            TaskEx.Run(() => { }).ContinueWith((Func<Task' object' bool>)null' false' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current);" is 151.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncResult,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { return gotState = (bool)state; }' true));" is 134.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncResultToken,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { return gotState = (bool)state; }' true' CancellationToken.None));" is 158.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncResultOptions,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { return gotState = (bool)state; }' true' TaskContinuationOptions.None));" is 164.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncResultScheduler,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { return gotState = (bool)state; }' true' TaskScheduler.Current));" is 157.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncResultTokenOptionsScheduler,The length of the statement  "            var result = TestUtils.RunAsync(() => TaskEx.Run(() => true).ContinueWith((task' state) => { return gotState = (bool)state; }' true' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current));" is 211.
Long Statement,AsyncBridge.Tests,ContinueWithTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\ContinueWithTests.cs,FuncResultTokenOptionsSchedulerNull,The length of the statement  "            TaskEx.Run(() => true).ContinueWith((Func<Task<bool>' object' bool>)null' false' CancellationToken.None' TaskContinuationOptions.None' TaskScheduler.Current);" is 158.
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,Cancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(10);                      await TaskEx.Delay(100' cancelSource.Token);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,Cancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(10);                      await TaskEx.Delay(100' cancelSource.Token);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,NoCancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                 }                  await TaskEx.Delay(100);             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,NoCancel,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                 }                  await TaskEx.Delay(100);             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelChange,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                     cancelSource.CancelAfter(1000);                      await TaskEx.Delay(250);                      Assert.IsFalse(cancelSource.IsCancellationRequested);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelChange,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                     cancelSource.CancelAfter(1000);                      await TaskEx.Delay(250);                      Assert.IsFalse(cancelSource.IsCancellationRequested);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelChange,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                     cancelSource.CancelAfter(1000);                      await TaskEx.Delay(250);                      Assert.IsFalse(cancelSource.IsCancellationRequested);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelRemove,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                     cancelSource.CancelAfter(Timeout.Infinite);                      await TaskEx.Delay(250);                      Assert.IsFalse(cancelSource.IsCancellationRequested);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelRemove,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     cancelSource.CancelAfter(50);                     cancelSource.CancelAfter(Timeout.Infinite);                      await TaskEx.Delay(250);                      Assert.IsFalse(cancelSource.IsCancellationRequested);                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelConcurrentNew,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     var continueSource = new TaskCompletionSource<bool>();                      // Spawn some tasks to create an immediate timer.                     // All we need to test here is that at least one of them runs concurrently with another'                     // so dumping a large number on the ThreadPool should be sufficient.                     var cancelTasks = Enumerable.Range(0' 10).Select(async (index) =>                     {                         await continueSource.Task;                          cancelSource.CancelAfter(0);                     });                                      // Queue them all to run at once                     continueSource.SetResult(true);                      await TaskEx.WhenAll(cancelTasks);                      var spin = new SpinWait();                      while (!cancelSource.IsCancellationRequested)                         spin.SpinOnce();                 }             });
Magic Number,AsyncBridge.Tests,CancelAfterTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\CancelAfterTests.cs,CancelConcurrentExisting,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 using (var cancelSource = new CancellationTokenSource())                 {                     // Create the timer first                     cancelSource.CancelAfter(Timeout.Infinite);                      var continueSource = new TaskCompletionSource<bool>();                      // Spawn some tasks to create an immediate timer.                     // All we need to test here is that at least one of them runs concurrently with another'                     // so dumping a large number on the ThreadPool should be sufficient.                     var cancelTasks = Enumerable.Range(0' 10).Select(async (index) =>                     {                         await continueSource.Task;                          cancelSource.CancelAfter(0);                     });                      // Queue them all to run at once                     continueSource.SetResult(true);                      await TaskEx.WhenAll(cancelTasks);                      var spin = new SpinWait();                      while (!cancelSource.IsCancellationRequested)                         spin.SpinOnce();                 }             });
Magic Number,AsyncBridge.Tests,DelayTest,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\DelayTest.cs,ResiliantToGc,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var keepGcing = true;                  var gcAllTheTime = new Thread(() =>                 {                     // ReSharper disable AccessToModifiedClosure                     while (keepGcing)                     // ReSharper restore AccessToModifiedClosure                     {                         GC.Collect();                         Thread.Sleep(1);                     }                 });                  gcAllTheTime.Start();                 await TaskEx.Delay(500);                 keepGcing = false;             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,FromResultSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.FromResult(4);                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(4' r);             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,FromResultSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.FromResult(4);                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(4' r);             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,DelaySyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 await TaskEx.Delay(10);                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,ReturningTaskSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await WaitAThing();                 Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(6' r);             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,CapturedReturningTaskSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.Run(async () =>                 {                     SynchronizationContext.SetSynchronizationContext(WickedSynchronizationContext.Instance);                     return await WaitAThing();                 }).ConfigureAwait(true);                  Assert.AreSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(6' r);             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,NotCapturedReturningTaskSyncContext,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 Write.Line("START");                 SynchronizationContext.SetSynchronizationContext(MagicSynchronizationContext.Instance);                 int r = await TaskEx.Run(async () =>                 {                     Write.Line("A");                     SynchronizationContext.SetSynchronizationContext(WickedSynchronizationContext.Instance);                     Write.Line("B");                     var result = await WaitAThing();                     Write.Line("C");                     return result;                 }).ConfigureAwait(false);                 Write.Line("END");                 Assert.AreNotSame(SynchronizationContext.Current' MagicSynchronizationContext.Instance);                 Assert.AreEqual(6' r);             });
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,WaitABit,The following statement contains a magic number: await TaskEx.Delay(10);
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,WaitAThing,The following statement contains a magic number: await TaskEx.Delay(10);
Magic Number,AsyncBridge.Tests,SyncContextTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\SyncContextTests.cs,WaitAThing,The following statement contains a magic number: return await TaskEx.FromResult(6);
Magic Number,AsyncBridge.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncBridge.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncBridge.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncBridge.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncBridge.Tests,WhenAllTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAllTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAllTask = TaskEx.WhenAll(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[0].SetResult(1);                 taskCompletionSources[1].SetResult(2);                 taskCompletionSources[2].SetResult(3);                 var results = await whenAllTask;                 CollectionAssert.AreEquivalent(new[] {1' 2' 3}' results.ToList());             });
Magic Number,AsyncBridge.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericArrayWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task).ToArray());                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncBridge.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericArrayWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task).ToArray());                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncBridge.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncBridge.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,GenericIEnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task));                 taskCompletionSources[1].SetResult(2);                 var result = await whenAnyTask;                 Assert.AreEqual(2' await result);             });
Magic Number,AsyncBridge.Tests,WhenAnyTests,C:\research\architectureSmells\repos\OmerMor_AsyncBridge\tests\AsyncBridge.Tests\WhenAnyTests.cs,EnumerableWithSomeContents,The following statement contains a magic number: TestUtils.RunAsync(async () =>             {                 var taskCompletionSources = new[]                 {                     new TaskCompletionSource<int>()'                     new TaskCompletionSource<int>()                 };                 var whenAnyTask = TaskEx.WhenAny(taskCompletionSources.Select(tcs => tcs.Task).Cast<Task>());                 Assert.IsFalse(whenAnyTask.IsCompleted);                 taskCompletionSources[1].SetResult(2);                 await await whenAnyTask;             });
