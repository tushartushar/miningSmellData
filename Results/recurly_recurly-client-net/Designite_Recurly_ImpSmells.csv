Implementation smell,Namespace,Class,File,Method,Description
Long Method,Recurly,Coupon,C:\repos\recurly_recurly-client-net\Library\Coupon.cs,ReadXml,The method has 110 lines of code.
Long Method,Recurly,Invoice,C:\repos\recurly_recurly-client-net\Library\Invoice.cs,ReadXml,The method has 131 lines of code.
Long Method,Recurly,Subscription,C:\repos\recurly_recurly-client-net\Library\Subscription.cs,ReadXml,The method has 148 lines of code.
Long Method,Recurly,Transaction,C:\repos\recurly_recurly-client-net\Library\Transaction.cs,ReadXml,The method has 119 lines of code.
Complex Method,Recurly,Purchase,C:\repos\recurly_recurly-client-net\Library\Purchase.cs,WriteXml,Cyclomatic complexity of the method is 12
Complex Method,Recurly,AddOn,C:\repos\recurly_recurly-client-net\Library\AddOn.cs,WriteXml,Cyclomatic complexity of the method is 8
Complex Method,Recurly,BillingInfo,C:\repos\recurly_recurly-client-net\Library\BillingInfo.cs,WriteXml,Cyclomatic complexity of the method is 8
Complex Method,Recurly,Coupon,C:\repos\recurly_recurly-client-net\Library\Coupon.cs,WriteXml,Cyclomatic complexity of the method is 16
Complex Method,Recurly,Plan,C:\repos\recurly_recurly-client-net\Library\Plan.cs,WriteXml,Cyclomatic complexity of the method is 12
Complex Method,Recurly,Subscription,C:\repos\recurly_recurly-client-net\Library\Subscription.cs,WriteSubscriptionXml,Cyclomatic complexity of the method is 16
Long Parameter List,Recurly,GiftCard,C:\repos\recurly_recurly-client-net\Library\GiftCard.cs,GiftCard,The method has 5 parameters. Parameters: accountCode' delivery' productCode' unitAmountInCents' currency
Long Parameter List,Recurly,GiftCard,C:\repos\recurly_recurly-client-net\Library\GiftCard.cs,GiftCard,The method has 5 parameters. Parameters: gifterAccount' delivery' productCode' unitAmountInCents' currency
Long Parameter List,Recurly,Account,C:\repos\recurly_recurly-client-net\Library\Account.cs,NewAdjustment,The method has 6 parameters. Parameters: currency' unitAmountInCents' description' quantity' accountingCode' taxExempt
Long Parameter List,Recurly,Usages,C:\repos\recurly_recurly-client-net\Library\Usage.cs,List,The method has 5 parameters. Parameters: subscriptionUuid' subscriptionAddOnCode' filter' billingState' dateTimeType
Long Parameter List,Recurly,Adjustment,C:\repos\recurly_recurly-client-net\Library\Adjustment.cs,Adjustment,The method has 7 parameters. Parameters: accountCode' description' currency' unitAmountInCents' quantity' accountingCode' taxExempt
Long Parameter List,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,PerformRequest,The method has 6 parameters. Parameters: method' urlPath' writeXmlDelegate' readXmlDelegate' readXmlListDelegate' reseponseDelegate
Long Parameter List,Recurly,XmlWriterExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\XmlWriterExtensions.cs,WriteIfCollectionHasAny,The method has 5 parameters. Parameters: writer' collectionName' items' localName' stringValue
Long Statement,Recurly,Account,C:\repos\recurly_recurly-client-net\Library\Account.cs,GetAdjustments,The length of the statement  "                + Build.QueryStringWith(Adjustment.AdjustmentState.Any == state ? "" : "state=" + state.ToString().EnumNameToTransportCase()) " is 125.
Long Statement,Recurly,Account,C:\repos\recurly_recurly-client-net\Library\Account.cs,GetSubscriptions,The length of the statement  "                + Build.QueryStringWith(state.Equals(Subscription.SubscriptionState.All) ? "" : "state=" + state.ToString().EnumNameToTransportCase())); " is 136.
Long Statement,Recurly,Account,C:\repos\recurly_recurly-client-net\Library\Account.cs,GetTransactions,The length of the statement  "                 + Build.QueryStringWith(state != TransactionList.TransactionState.All ? "state=" + state.ToString().EnumNameToTransportCase() : "") " is 131.
Long Statement,Recurly,Account,C:\repos\recurly_recurly-client-net\Library\Account.cs,ReadXml,The length of the statement  "                        // TODO investigate in case of incoming data representing multiple states' as https://dev.recurly.com/docs/get-account says is possible " is 135.
Long Statement,Recurly,TransactionError,C:\repos\recurly_recurly-client-net\Library\TransactionError.cs,ToString,The length of the statement  "            return string.Format("Code: \"{0}\" Category: \"{1}\" CustomerMessage: \"{2}\" MerchantAdvice: \"{3}\" GatewayCode: \"{4}\"" " is 124.
Long Statement,Recurly,Usage,C:\repos\recurly_recurly-client-net\Library\Usage.cs,UrlPrefix,The length of the statement  "            return "/subscriptions/" + Uri.EscapeDataString(SubscriptionUuid) + "/add_ons/" + Uri.EscapeDataString(SubscriptionAddOnCode) + "/usage"; " is 137.
Long Statement,Recurly,Usages,C:\repos\recurly_recurly-client-net\Library\Usage.cs,List,The length of the statement  "            return new UsageList(UrlPrefix(subscriptionUuid' subscriptionAddOnCode) + "?" + filter.ToNamedValueCollection().ToString()); " is 124.
Long Statement,Recurly,Usages,C:\repos\recurly_recurly-client-net\Library\Usage.cs,UrlPrefix,The length of the statement  "            return "/subscriptions/" + Uri.EscapeDataString(SubscriptionUuid) + "/add_ons/" + Uri.EscapeDataString(SubscriptionAddOnCode) + "/usage"; " is 137.
Long Statement,Recurly,SubscriptionAddOnList,C:\repos\recurly_recurly-client-net\Library\List\SubscriptionAddOnList.cs,Add,The length of the statement  "                    "The given AddOn does not have UnitAmountInCents for the currency of the subscription (" + _subscription.Currency + ")." " is 120.
Long Statement,Recurly,SubscriptionAddOnList,C:\repos\recurly_recurly-client-net\Library\List\SubscriptionAddOnList.cs,Add,The length of the statement  "            var unitAmount = _subscription.Plan.AddOns.Find(ao => ao.AddOnCode == planAddOnCode).UnitAmountInCents[_subscription.Currency]; " is 127.
Long Statement,Recurly,Plan,C:\repos\recurly_recurly-client-net\Library\Plan.cs,WriteXml,The length of the statement  "            xmlWriter.WriteIfCollectionHasAny("setup_fee_in_cents"' SetupFeeInCents' pair => pair.Key' pair => pair.Value.AsString()); " is 122.
Long Statement,Recurly,Plan,C:\repos\recurly_recurly-client-net\Library\Plan.cs,WriteXml,The length of the statement  "            xmlWriter.WriteIfCollectionHasAny("unit_amount_in_cents"' UnitAmountInCents' pair => pair.Key' pair => pair.Value.AsString()); " is 126.
Long Statement,Recurly,Plan,C:\repos\recurly_recurly-client-net\Library\Plan.cs,WriteXml,The length of the statement  "                xmlWriter.WriteElementString("setup_fee_revenue_schedule_type"' SetupFeeRevenueScheduleType.Value.ToString().EnumNameToTransportCase()); " is 136.
Long Statement,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,ToPascalCase,The length of the statement  "            var words = source.Split(' '); // break into words (note that in this case 'words' means groups of letters separated by '_' or ' '' not real words) " is 147.
Long Statement,Recurly,Subscription,C:\repos\recurly_recurly-client-net\Library\Subscription.cs,Postpone,The length of the statement  "                UrlPrefix + Uri.EscapeDataString(Uuid) + "/postpone?next_renewal_date=" + nextRenewalDate.ToString("s") + "&bulk=" + bulk.ToString().ToLower()' " is 143.
Empty Catch Block,Recurly,Errors,C:\repos\recurly_recurly-client-net\Library\Errors.cs,ReadResponseAndParseErrors,The method has an empty catch block.
Empty Catch Block,Recurly,TransactionError,C:\repos\recurly_recurly-client-net\Library\TransactionError.cs,ReadResponseAndParseError,The method has an empty catch block.
Magic Number,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,Client,The following statement contains a magic number: const int SecurityProtocolTypeTls11 = 768;
Magic Number,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,Client,The following statement contains a magic number: const int SecurityProtocolTypeTls12 = 3072;
Magic Number,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,PerformRequest,The following statement contains a magic number: if ((method == HttpRequestMethod.Post || method == HttpRequestMethod.Put) && (writeXmlDelegate != null))              {                  // 60 second timeout -- some payment gateways (e.g. PayPal) can take a while to respond                  request.Timeout = 60000;                    // Write POST/PUT body                  using (var requestStream = request.GetRequestStream())                  {                      WritePostParameters(requestStream' writeXmlDelegate);                  }              }              else              {                  request.ContentLength = 0;              }
Magic Number,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,PerformDownloadRequest,The following statement contains a magic number: try              {                  var r = (HttpWebResponse)request.GetResponse();                  byte[] pdf;                  var buffer = new byte[2048];                  if (!request.HaveResponse || r.StatusCode != HttpStatusCode.OK) return null;                  using (var ms = new MemoryStream())                  {                      using (var reader = new BinaryReader(r.GetResponseStream()' Encoding.Default))                      {                          int bytesRead;                          while ((bytesRead = reader.Read(buffer' 0' 2048)) > 0)                          {                              ms.Write(buffer' 0' bytesRead);                          }                      }                      pdf = ms.ToArray();                  }                  return pdf;                }              catch (WebException ex)              {                  if (ex.Response == null) throw;                  var response = (HttpWebResponse)ex.Response;                  var statusCode = response.StatusCode;                  Errors errors;                    Debug.WriteLine(String.Format("Recurly Library Received: {0} - {1}"' (int)statusCode' statusCode));                    switch (response.StatusCode)                  {                      case HttpStatusCode.OK:                      case HttpStatusCode.Accepted:                      case HttpStatusCode.Created:                      case HttpStatusCode.NoContent:                            return null;                        case HttpStatusCode.NotFound:                          errors = Errors.ReadResponseAndParseErrors(response);                            if (errors.ValidationErrors.HasAny())                              throw new NotFoundException(errors.ValidationErrors[0].Message' errors);                          throw new NotFoundException("The requested object was not found."' errors);                        case HttpStatusCode.Unauthorized:                      case HttpStatusCode.Forbidden:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new InvalidCredentialsException(errors);                        case HttpStatusCode.PreconditionFailed:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ValidationException(errors);                        case HttpStatusCode.ServiceUnavailable:                          throw new TemporarilyUnavailableException();                        case HttpStatusCode.InternalServerError:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ServerException(errors);                  }                    if ((int)statusCode == ValidationException.HttpStatusCode) // Unprocessable Entity                  {                      errors = Errors.ReadResponseAndParseErrors(response);                      throw new ValidationException(errors);                  }                    throw;              }
Magic Number,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,PerformDownloadRequest,The following statement contains a magic number: try              {                  var r = (HttpWebResponse)request.GetResponse();                  byte[] pdf;                  var buffer = new byte[2048];                  if (!request.HaveResponse || r.StatusCode != HttpStatusCode.OK) return null;                  using (var ms = new MemoryStream())                  {                      using (var reader = new BinaryReader(r.GetResponseStream()' Encoding.Default))                      {                          int bytesRead;                          while ((bytesRead = reader.Read(buffer' 0' 2048)) > 0)                          {                              ms.Write(buffer' 0' bytesRead);                          }                      }                      pdf = ms.ToArray();                  }                  return pdf;                }              catch (WebException ex)              {                  if (ex.Response == null) throw;                  var response = (HttpWebResponse)ex.Response;                  var statusCode = response.StatusCode;                  Errors errors;                    Debug.WriteLine(String.Format("Recurly Library Received: {0} - {1}"' (int)statusCode' statusCode));                    switch (response.StatusCode)                  {                      case HttpStatusCode.OK:                      case HttpStatusCode.Accepted:                      case HttpStatusCode.Created:                      case HttpStatusCode.NoContent:                            return null;                        case HttpStatusCode.NotFound:                          errors = Errors.ReadResponseAndParseErrors(response);                            if (errors.ValidationErrors.HasAny())                              throw new NotFoundException(errors.ValidationErrors[0].Message' errors);                          throw new NotFoundException("The requested object was not found."' errors);                        case HttpStatusCode.Unauthorized:                      case HttpStatusCode.Forbidden:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new InvalidCredentialsException(errors);                        case HttpStatusCode.PreconditionFailed:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ValidationException(errors);                        case HttpStatusCode.ServiceUnavailable:                          throw new TemporarilyUnavailableException();                        case HttpStatusCode.InternalServerError:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ServerException(errors);                  }                    if ((int)statusCode == ValidationException.HttpStatusCode) // Unprocessable Entity                  {                      errors = Errors.ReadResponseAndParseErrors(response);                      throw new ValidationException(errors);                  }                    throw;              }
Magic Number,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,CopyAndClose,The following statement contains a magic number: const int readSize = 256;
Magic Number,Recurly,Invoice,C:\repos\recurly_recurly-client-net\Library\Invoice.cs,ReadXml,The following statement contains a magic number: while (reader.Read())              {                  // End of invoice element' get out of here                  if (reader.Name == "invoice" && reader.NodeType == XmlNodeType.EndElement)                      break;                    if (reader.NodeType != XmlNodeType.Element) continue;                    switch (reader.Name)                  {                      case "account":                          var accountHref = reader.GetAttribute("href");                          AccountCode = Uri.UnescapeDataString(accountHref.Substring(accountHref.LastIndexOf("/") + 1));                          break;                        case "original_invoice":                          var originalInvoiceHref = reader.GetAttribute("href");                          var invoiceNumber = Uri.UnescapeDataString(originalInvoiceHref.Substring(originalInvoiceHref.LastIndexOf("/") + 1));                          MatchCollection matches = Regex.Matches(invoiceNumber' "([^\\d]{2})(\\d+)");                                                    if (matches.Count == 1)                           {                              OriginalInvoiceNumberPrefix = matches[0].Groups[1].Value;                              OriginalInvoiceNumber = int.Parse(matches[0].Groups[2].Value);                          }                           else                          {                              OriginalInvoiceNumber = int.Parse(invoiceNumber);                          }                          break;                        case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString().ParseAsEnum<InvoiceState>();                          break;                        case "invoice_number":                          int invNumber;                          if (Int32.TryParse(reader.ReadElementContentAsString()' out invNumber))                              InvoiceNumber = invNumber;                          break;                        case "invoice_number_prefix":                          InvoiceNumberPrefix = reader.ReadElementContentAsString();                          break;                        case "po_number":                          PoNumber = reader.ReadElementContentAsString();                          break;                        case "vat_number":                          VatNumber = reader.ReadElementContentAsString();                          break;                        case "subtotal_in_cents":                          SubtotalInCents = reader.ReadElementContentAsInt();                          break;                        case "tax_in_cents":                          TaxInCents = reader.ReadElementContentAsInt();                          break;                        case "total_in_cents":                          TotalInCents = reader.ReadElementContentAsInt();                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "created_at":                          DateTime createdAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out createdAt))                              CreatedAt = createdAt;                          break;                        case "updated_at":                          DateTime updatedAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out updatedAt))                              UpdatedAt = updatedAt;                          break;                                            case "closed_at":                          DateTime closedAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out closedAt))                              ClosedAt = closedAt;                          break;                        case "tax_type":                          TaxType = reader.ReadElementContentAsString();                          break;                        case "tax_rate":                          TaxRate = reader.ReadElementContentAsDecimal();                          break;                        case "tax_region":                          TaxRegion = reader.ReadElementContentAsString();                          break;                        case "net_terms":                          NetTerms = reader.ReadElementContentAsInt();                          break;                        case "collection_method":                          CollectionMethod = reader.ReadElementContentAsString().ParseAsEnum<Collection>();                          break;                        case "customer_notes":                          CustomerNotes = reader.ReadElementContentAsString();                          break;                        case "terms_and_conditions":                          TermsAndConditions = reader.ReadElementContentAsString();                          break;                        case "vat_reverse_charge_notes":                          VatReverseChargeNotes = reader.ReadElementContentAsString();                          break;                        case "line_items":                          // overrite existing value with the Recurly API response                          Adjustments = new AdjustmentList();                          Adjustments.ReadXml(reader);                          break;                        case "transactions":                          // overrite existing value with the Recurly API response                          Transactions = new TransactionList();                          Transactions.ReadXml(reader);                          break;                        case "address":                          Address = new Address(reader);                          break;                        case "subtotal_after_discount_in_cents":                          int s;                          if (int.TryParse(reader.ReadElementContentAsString()' out s))                              SubtotalAfterDiscountInCents = s;                          break;                        case "attempt_next_collection_at":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                              AttemptNextCollectionAt = d;                          break;                        case "recovery_reason":                          RecoveryReason = reader.ReadElementContentAsString();                          break;                        case "all_line_items":                          AllLineItemsLink = reader.ReadElementContentAsString();                          break;                    }              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (card.Length < 13 || !card.IsNumeric()) return false;
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: var firstTwo = Int32.Parse(card.Substring(0' 2));
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (firstTwo >= 34 && firstTwo <= 37 && card.Length == 15)              {                  type = BillingInfo.CreditCardType.AmericanExpress;                  return card.PassesLuhnsTest();              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (firstTwo >= 34 && firstTwo <= 37 && card.Length == 15)              {                  type = BillingInfo.CreditCardType.AmericanExpress;                  return card.PassesLuhnsTest();              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (firstTwo >= 34 && firstTwo <= 37 && card.Length == 15)              {                  type = BillingInfo.CreditCardType.AmericanExpress;                  return card.PassesLuhnsTest();              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (firstTwo >= 51 && firstTwo <= 55)              {                  type = BillingInfo.CreditCardType.MasterCard;                  return card.Length == 16 && card.PassesLuhnsTest();              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (firstTwo >= 51 && firstTwo <= 55)              {                  type = BillingInfo.CreditCardType.MasterCard;                  return card.Length == 16 && card.PassesLuhnsTest();              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: if (firstTwo >= 51 && firstTwo <= 55)              {                  type = BillingInfo.CreditCardType.MasterCard;                  return card.Length == 16 && card.PassesLuhnsTest();              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: var firstFour = Int32.Parse(card.Substring(0' 4));
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: var firstThree = Int32.Parse(card.Substring(0' 3));
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,IsValidCreditCardNumber,The following statement contains a magic number: switch (firstFour)              {                  case 1800:                  case 2131:                      type = BillingInfo.CreditCardType.JCB;                      return card.Length == 15 && card.PassesLuhnsTest();                  case 6011:                      type = BillingInfo.CreditCardType.Discover;                      return card.Length == 16 && card.PassesLuhnsTest();                  default:                      if (!(firstThree >= 300 && firstThree <= 305))                      {                          if (card.StartsWith("3"))                          {                              type = BillingInfo.CreditCardType.JCB;                              return card.Length == 16 && card.PassesLuhnsTest();                          }                          if (card.StartsWith("4"))                          {                              type = BillingInfo.CreditCardType.Visa;                              return (card.Length == 13 || card.Length == 16) && card.PassesLuhnsTest();                          }                      }                      break;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,PassesLuhnsTest,The following statement contains a magic number: for (var k = numbers.Length - 1; k <= 0; --k)              {                  var now = numbers[k];                  if (alt)                  {                      now *= 2;                      if (now > 9)                      {                          now -= 9;                      }                  }                  sum += now;                  alt = !alt;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,PassesLuhnsTest,The following statement contains a magic number: for (var k = numbers.Length - 1; k <= 0; --k)              {                  var now = numbers[k];                  if (alt)                  {                      now *= 2;                      if (now > 9)                      {                          now -= 9;                      }                  }                  sum += now;                  alt = !alt;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,PassesLuhnsTest,The following statement contains a magic number: for (var k = numbers.Length - 1; k <= 0; --k)              {                  var now = numbers[k];                  if (alt)                  {                      now *= 2;                      if (now > 9)                      {                          now -= 9;                      }                  }                  sum += now;                  alt = !alt;              }
Magic Number,Recurly,StringExtensions,C:\repos\recurly_recurly-client-net\Library\Extensions\StringExtensions.cs,PassesLuhnsTest,The following statement contains a magic number: return sum % 10 == 0;
Magic Number,Recurly,Transaction,C:\repos\recurly_recurly-client-net\Library\Transaction.cs,ReadXml,The following statement contains a magic number: while (reader.Read())              {                  // End of account element' get out of here                  if ((reader.Name == "transaction") &&                      reader.NodeType == XmlNodeType.EndElement)                      break;                    if (reader.NodeType != XmlNodeType.Element) continue;                    string href;                  int amount;                  switch (reader.Name)                  {                      case "account":                          href = reader.GetAttribute("href");                          if (null != href)                              AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "invoice":                          href = reader.GetAttribute("href");                          if (null != href)                          {                              string invoiceNumber = href.Substring(href.LastIndexOf("/") + 1);                              MatchCollection matches = Regex.Matches(invoiceNumber' "([^\\d]{2})(\\d+)");                                if (matches.Count == 1)                              {                                  InvoicePrefix = matches[0].Groups[1].Value;                                  Invoice = int.Parse(matches[0].Groups[2].Value);                              }                              else                              {                                  Invoice = int.Parse(invoiceNumber);                              }                          }                          break;                        case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "action":                          Action = reader.ReadElementContentAsString().ParseAsEnum<TransactionType>();                          break;                        case "amount_in_cents":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out amount))                              AmountInCents = amount;                          break;                        case "tax_in_cents":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out amount))                              TaxInCents = amount;                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "description":                          Description = reader.ReadElementContentAsString();                          break;                        case "payment_method":                          PaymentMethod = reader.ReadElementContentAsString();                          break;                        case "status":                          var state = reader.ReadElementContentAsString();                          Status = "void" == state ? TransactionState.Voided : state.ParseAsEnum<TransactionState>();                          break;                        case "reference":                          Reference = reader.ReadElementContentAsString();                          break;                        case "test":                          Test = reader.ReadElementContentAsBoolean();                          break;                        case "voidable":                          Voidable = reader.ReadElementContentAsBoolean();                          break;                        case "refundable":                          Refundable = reader.ReadElementContentAsBoolean();                          break;                        case "ip_address":                          IpAddress = reader.ReadElementContentAsString();                          break;                        case "ccv_result":                          CCVResult = reader.ReadElementContentAsString();                          break;                        case "avs_result":                          AvsResult = reader.ReadElementContentAsString();                          break;                        case "avs_result_street":                          AvsResultStreet = reader.ReadElementContentAsString();                          break;                        case "avs_result_postal":                          AvsResultPostal = reader.ReadElementContentAsString();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          UpdatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "details":                          // API docs say not to load details into objects                          break;                        case "gateway_type":                          GatewayType = reader.ReadElementContentAsString();                          break;                        case "origin":                          Origin = reader.ReadElementContentAsString();                          break;                      case "message":                          Message = reader.ReadElementContentAsString();                          break;                      case "approval_code":                          ApprovalCode = reader.ReadElementContentAsString();                          break;                      case "collected_at":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                          {                              CollectedAt = d;                          }                          break;                  }              }
Missing Default,Recurly,Delivery,C:\repos\recurly_recurly-client-net\Library\Delivery.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                                      case "email_address":                          EmailAddress = reader.ReadElementContentAsString();                          break;                        case "first_name":                          FirstName = reader.ReadElementContentAsString();                          break;                        case "last_name":                          LastName = reader.ReadElementContentAsString();                          break;                        case "gifter_name":                          GifterName = reader.ReadElementContentAsString();                          break;                        case "deliver_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              DeliverAt = dateVal;                          break;                                            case "method":                          Method = reader.ReadElementContentAsString().ParseAsEnum<DeliveryMethod>();                          break;                        case "address":                          Address = new Address(reader);                          break;                  }
Missing Default,Recurly,GiftCard,C:\repos\recurly_recurly-client-net\Library\GiftCard.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "id":                          long id;                          if (long.TryParse(reader.ReadElementContentAsString()' out id))                              Id = id;                          break;                                                case "product_code":                          ProductCode = reader.ReadElementContentAsString();                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "redemption_code":                          RedemptionCode = reader.ReadElementContentAsString();                          break;                        case "unit_amount_in_cents":                          int amount;                          if (Int32.TryParse(reader.ReadElementContentAsString()' out amount))                              UnitAmountInCents = amount;                          break;                        case "balance_in_cents":                          int balance;                          if (Int32.TryParse(reader.ReadElementContentAsString()' out balance))                              BalanceInCents = balance;                          break;                        case "gifter_account":                          string href = reader.GetAttribute("href");                          if (null != href)                          {                              _accountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          }                          else                          {                              GifterAccount = new Account(reader' "gifter_account");                          }                          break;                        case "delivery":                          Delivery = new Delivery(reader);                          break;                        case "created_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              CreatedAt = dateVal;                          break;                        case "updated_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              UpdatedAt = dateVal;                          break;                        case "redeemed_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              RedeemedAt = dateVal;                          break;                        case "delivered_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              DeliveredAt = dateVal;                          break;                  }
Missing Default,Recurly,Account,C:\repos\recurly_recurly-client-net\Library\Account.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "account_code":                          AccountCode = reader.ReadElementContentAsString();                          break;                        case "state":                          // TODO investigate in case of incoming data representing multiple states' as https://dev.recurly.com/docs/get-account says is possible                          State = reader.ReadElementContentAsString().ParseAsEnum<AccountState>();                          break;                        case "username":                          Username = reader.ReadElementContentAsString();                          break;                        case "email":                          Email = reader.ReadElementContentAsString();                          break;                        case "first_name":                          FirstName = reader.ReadElementContentAsString();                          break;                        case "last_name":                          LastName = reader.ReadElementContentAsString();                          break;                        case "company_name":                          CompanyName = reader.ReadElementContentAsString();                          break;                        case "vat_number":                          VatNumber = reader.ReadElementContentAsString();                          break;                        case "tax_exempt":                          TaxExempt = reader.ReadElementContentAsBoolean();                          break;                        case "entity_use_code":                          EntityUseCode = reader.ReadElementContentAsString();                          break;                        case "accept_language":                          AcceptLanguage = reader.ReadElementContentAsString();                          break;                        case "cc_emails":                          CcEmails = reader.ReadElementContentAsString();                          break;                        case "hosted_login_token":                          HostedLoginToken = reader.ReadElementContentAsString();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          UpdatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "address":                          Address = new Address(reader);                          break;                        case "vat_location_valid":                          if (reader.GetAttribute("nil") == null)                          {                              VatLocationValid = reader.ReadElementContentAsBoolean();                          }                          break;                        case "has_live_subscription":                          bool a;                          if (bool.TryParse(reader.ReadElementContentAsString()' out a))                              HasLiveSubscription = a;                          break;                        case "has_active_subscription":                          bool b;                          if (bool.TryParse(reader.ReadElementContentAsString()' out b))                              HasActiveSubscription = b;                          break;                        case "has_future_subscription":                          bool c;                          if (bool.TryParse(reader.ReadElementContentAsString()' out c))                              HasFutureSubscription = c;                          break;                        case "has_canceled_subscription":                          bool d;                          if (bool.TryParse(reader.ReadElementContentAsString()' out d))                              HasCanceledSubscription = d;                          break;                        case "has_past_due_invoice":                          bool e;                          if (bool.TryParse(reader.ReadElementContentAsString()' out e))                              HasPastDueInvoice = e;                          break;                  }
Missing Default,Recurly,AccountBalance,C:\repos\recurly_recurly-client-net\Library\AccountBalance.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "past_due":                          bool b;                          if (bool.TryParse(reader.ReadElementContentAsString()' out b))                              PastDue = b;                            break;                      case "balance_in_cents":                          while (reader.Read())                          {                              if (reader.Name == "balance_in_cents" && reader.NodeType == XmlNodeType.EndElement)                                  break;                                if (reader.NodeType == XmlNodeType.Element)                              {                                  BalanceInCents.Add(reader.Name' reader.ReadElementContentAsInt());                              }                          }                          break;                  }
Missing Default,Recurly,Address,C:\repos\recurly_recurly-client-net\Library\Address.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "address1":                          Address1 = reader.ReadElementContentAsString();                          break;                        case "address2":                          Address2 = reader.ReadElementContentAsString();                          break;                        case "city":                          City = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString();                          break;                        case "zip":                          Zip = reader.ReadElementContentAsString();                          break;                        case "country":                          Country = reader.ReadElementContentAsString();                          break;                        case "phone":                          Phone = reader.ReadElementContentAsString();                          break;                  }
Missing Default,Recurly,ExportDate,C:\repos\recurly_recurly-client-net\Library\Export.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "date":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                              Date = d;                            break;                  }
Missing Default,Recurly,ExportFile,C:\repos\recurly_recurly-client-net\Library\Export.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "name":                          Name = reader.ReadElementContentAsString();                          break;                      case "expires_at":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                              ExpiresAt = d;                          break;                      case "download_url":                          DownloadUrl = reader.ReadElementContentAsString();                          break;                      case "md5sum":                          Md5Sum = reader.ReadElementContentAsString();                          break;                  }
Missing Default,Recurly,TransactionError,C:\repos\recurly_recurly-client-net\Library\TransactionError.cs,TransactionError,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "error_code":                          ErrorCode = reader.ReadElementContentAsString();                          break;                      case "error_category":                          ErrorCategory = reader.ReadElementContentAsString();                          break;                      case "customer_message":                          CustomerMessage = reader.ReadElementContentAsString();                          break;                      case "merchant_advice":                          MerchantAdvice = reader.ReadElementContentAsString();                          break;                      case "gateway_error_code":                          GatewayErrorCode = reader.ReadElementContentAsString();                          break;                  }
Missing Default,Recurly,ShippingAddress,C:\repos\recurly_recurly-client-net\Library\ShippingAddress.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "address1":                          Address1 = reader.ReadElementContentAsString();                          break;                        case "address2":                          Address2 = reader.ReadElementContentAsString();                          break;                        case "city":                          City = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString();                          break;                        case "zip":                          Zip = reader.ReadElementContentAsString();                          break;                        case "country":                          Country = reader.ReadElementContentAsString();                          break;                        case "phone":                          Phone = reader.ReadElementContentAsString();                          break;                        case "company_name":                          CompanyName = reader.ReadElementContentAsString();                          break;                        case "first_name":                          FirstName = reader.ReadElementContentAsString();                          break;                        case "last_name":                          LastName = reader.ReadElementContentAsString();                          break;                        case "nickname":                          Nickname = reader.ReadElementContentAsString();                          break;                        case "email":                          Email = reader.ReadElementContentAsString();                          break;                        case "vat_number":                          VatNumber = reader.ReadElementContentAsString();                          break;                        case "id":                          Id = reader.ReadElementContentAsLong();                          break;                  }
Missing Default,Recurly,Usage,C:\repos\recurly_recurly-client-net\Library\Usage.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "usage":                          Uri usageUri = new Uri(reader.GetAttribute("href"));                          if (Int64.TryParse(usageUri.Segments.Last()' out usageId))                              Id = usageId;                          break;                        case "amount":                          Amount = reader.ReadElementContentAsInt();                          break;                        case "unit_amount_in_cents":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out unitAmountInCents))                              UnitAmountInCents = unitAmountInCents;                          break;                        case "merchant_tag":                          MerchantTag = reader.ReadElementContentAsString();                          break;                        case "usage_percentage":                          if (reader.GetAttribute("nil") == null)                          {                              UsagePercentage = reader.ReadElementContentAsFloat();                          }                          break;                        case "recording_timestamp":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              RecordingTimestamp = dateVal;                          break;                        case "usage_timestamp":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              UsageTimestamp = dateVal;                          break;                        case "billed_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              BilledAt = dateVal;                          break;                        case "created_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              CreatedAt = dateVal;                          break;                        case "updated_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              UpdatedAt = dateVal;                          break;                  }
Missing Default,Recurly,MeasuredUnit,C:\repos\recurly_recurly-client-net\Library\MeasuredUnit.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "id":                          Id = Convert.ToInt64(reader.ReadElementContentAsString());                          break;                                     case "display_name":                          DisplayName = reader.ReadElementContentAsString();                          break;                        case "description":                          Description = reader.ReadElementContentAsString();                          break;                        case "name":                          Name = reader.ReadElementContentAsString();                          break;                  }
Missing Default,Recurly,AddOn,C:\repos\recurly_recurly-client-net\Library\AddOn.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "add_on_code":                          AddOnCode = reader.ReadElementContentAsString();                          break;                        case "accounting_code":                          AccountingCode = reader.ReadElementContentAsString();                          break;                        case "name":                          Name = reader.ReadElementContentAsString();                          break;                        case "display_quantity_on_hosted_page":                          DisplayQuantityOnHostedPage = reader.ReadElementContentAsBoolean();                          break;                        case "default_quantity":                          DefaultQuantity = reader.ReadElementContentAsInt();                          break;                        case "optional":                          Optional = reader.ReadElementContentAsBoolean();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          UpdatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "unit_amount_in_cents":                          ReadXmlUnitAmount(reader);                          break;                        case "tax_code":                          TaxCode = reader.ReadElementContentAsString();                          break;                        case "add_on_type":                          AddOnType = reader.ReadElementContentAsString().ParseAsEnum<Type>();                          break;                        case "usage_type":                          UsageType = reader.ReadElementContentAsString().ParseAsEnum<Usage.Type>();                          break;                        case "revenue_schedule_type":                          RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();                          break;                  }
Missing Default,Recurly,Adjustment,C:\repos\recurly_recurly-client-net\Library\Adjustment.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                       case "account":                          var href = reader.GetAttribute("href");                          AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "description":                          Description = reader.ReadElementContentAsString();                          break;                        case "accounting_code":                          AccountingCode = reader.ReadElementContentAsString();                          break;                        case "product_code":                          ProductCode = reader.ReadElementContentAsString();                          break;                        case "origin":                          Origin = reader.ReadElementContentAsString();                          break;                        case "unit_amount_in_cents":                          UnitAmountInCents = reader.ReadElementContentAsInt();                          break;                        case "quantity":                          Quantity = reader.ReadElementContentAsInt();                          break;                        case "discount_in_cents":                          DiscountInCents = reader.ReadElementContentAsInt();                          break;                        case "tax_in_cents":                          TaxInCents = reader.ReadElementContentAsInt();                          break;                        case "total_in_cents":                          TotalInCents = reader.ReadElementContentAsInt();                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "tax_exempt":                          TaxExempt = reader.ReadElementContentAsBoolean();                          break;                        case "tax_code":                          TaxCode = reader.ReadElementContentAsString();                          break;                        case "tax_type":                          TaxType = reader.ReadElementContentAsString();                          break;                        case "tax_rate":                          TaxRate = reader.ReadElementContentAsDecimal();                          break;                        case "tax_region":                          TaxRegion = reader.ReadElementContentAsString();                          break;                        case "start_date":                          DateTime startDate;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out startDate))                              StartDate = startDate;                                                  break;                        case "end_date":                          DateTime endDate;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out endDate))                              EndDate = endDate;                          break;                        case "created_at":                          DateTime createdAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out createdAt))                              CreatedAt = createdAt;                          break;                        case "updated_at":                          DateTime updatedAt;                          if(DateTime.TryParse(reader.ReadElementContentAsString()' out updatedAt))                              UpdatedAt = updatedAt;                          break;                        case "state":                          State = reader.ReadElementContentAsString().ParseAsEnum<AdjustmentState>();                          break;                        case "revenue_schedule_type":                          RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();                          break;                  }
Missing Default,Recurly,BillingInfo,C:\repos\recurly_recurly-client-net\Library\BillingInfo.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "account":                          var href = reader.GetAttribute("href");                          AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "first_name":                          FirstName = reader.ReadElementContentAsString();                          break;                        case "last_name":                          LastName = reader.ReadElementContentAsString();                          break;                        case "name_on_account":                          NameOnAccount = reader.ReadElementContentAsString();                          break;                        case "company":                          Company = reader.ReadElementContentAsString();                          break;                        case "address1":                          Address1 = reader.ReadElementContentAsString();                          break;                        case "address2":                          Address2 = reader.ReadElementContentAsString();                          break;                        case "city":                          City = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString();                          break;                        case "zip":                          PostalCode = reader.ReadElementContentAsString();                          break;                        case "country":                          Country = reader.ReadElementContentAsString();                          break;                        case "phone":                          PhoneNumber = reader.ReadElementContentAsString();                          break;                        case "vat_number":                          VatNumber = reader.ReadElementContentAsString();                          break;                        case "ip_address":                          IpAddress = reader.ReadElementContentAsString();                          break;                        case "ip_address_country":                          IpAddressCountry = reader.ReadElementContentAsString();                          break;                        case "card_type":                          CardType = reader.ReadElementContentAsString().ParseAsEnum<CreditCardType>();                          break;                        case "year":                          ExpirationYear = reader.ReadElementContentAsInt();                          break;                        case "month":                          ExpirationMonth = reader.ReadElementContentAsInt();                          break;                        case "first_six":                          FirstSix = reader.ReadElementContentAsString();                          break;                        case "last_four":                          LastFour = reader.ReadElementContentAsString();                          break;                        case "paypal_billing_agreement_id":                          PaypalBillingAgreementId = reader.ReadElementContentAsString();                          break;                        case "amazon_billing_agreement_id":                          AmazonBillingAgreementId = reader.ReadElementContentAsString();                          break;                        case "routing_number":                          RoutingNumber = reader.ReadElementContentAsString();                          break;                        case "account_type":                          AccountType = reader.ReadElementContentAsString().ParseAsEnum<BankAccountType>();                          break;                        case "external_hpp_type":                          ExternalHppType = reader.ReadElementContentAsString().ParseAsEnum<HppType>();                          break;                        case "updated_at":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                          {                              UpdatedAt = d;                          }                          break;                  }
Missing Default,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,PerformRequest,The following switch statement is missing a default case: switch (response.StatusCode)                  {                      case HttpStatusCode.OK:                      case HttpStatusCode.Accepted:                      case HttpStatusCode.Created:                      case HttpStatusCode.NoContent:                          ReadWebResponse(response' readXmlDelegate' readXmlListDelegate' reseponseDelegate);                            return HttpStatusCode.NoContent;                        case HttpStatusCode.NotFound:                          errors = Errors.ReadResponseAndParseErrors(response);                          if (errors.ValidationErrors.HasAny())                              throw new NotFoundException(errors.ValidationErrors[0].Message' errors);                          throw new NotFoundException("The requested object was not found."' errors);                        case HttpStatusCode.Unauthorized:                      case HttpStatusCode.Forbidden:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new InvalidCredentialsException(errors);                        case HttpStatusCode.BadRequest:                      case HttpStatusCode.PreconditionFailed:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ValidationException(errors);                        case HttpStatusCode.ServiceUnavailable:                          throw new TemporarilyUnavailableException();                        case HttpStatusCode.InternalServerError:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ServerException(errors);                  }
Missing Default,Recurly,Client,C:\repos\recurly_recurly-client-net\Library\Client.cs,PerformDownloadRequest,The following switch statement is missing a default case: switch (response.StatusCode)                  {                      case HttpStatusCode.OK:                      case HttpStatusCode.Accepted:                      case HttpStatusCode.Created:                      case HttpStatusCode.NoContent:                            return null;                        case HttpStatusCode.NotFound:                          errors = Errors.ReadResponseAndParseErrors(response);                            if (errors.ValidationErrors.HasAny())                              throw new NotFoundException(errors.ValidationErrors[0].Message' errors);                          throw new NotFoundException("The requested object was not found."' errors);                        case HttpStatusCode.Unauthorized:                      case HttpStatusCode.Forbidden:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new InvalidCredentialsException(errors);                        case HttpStatusCode.PreconditionFailed:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ValidationException(errors);                        case HttpStatusCode.ServiceUnavailable:                          throw new TemporarilyUnavailableException();                        case HttpStatusCode.InternalServerError:                          errors = Errors.ReadResponseAndParseErrors(response);                          throw new ServerException(errors);                  }
Missing Default,Recurly,Coupon,C:\repos\recurly_recurly-client-net\Library\Coupon.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "id":                          int id;                          if (int.TryParse(reader.ReadElementContentAsString()' out id))                              Id = id;                          break;                      case "coupon_code":                          CouponCode = reader.ReadElementContentAsString();                          break;                        case "name":                          Name = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString().ParseAsEnum<CouponState>();                          break;                        case "discount_type":                          DiscountType = reader.ReadElementContentAsString().ParseAsEnum<CouponDiscountType>();                          break;                        case "redemption_resource":                          RedemptionResource = reader.ReadElementContentAsString().ParseAsEnum<RedemptionResourceType>();                          break;                        case "discount_percent":                          if (int.TryParse(reader.ReadElementContentAsString()' out m))                              DiscountPercent = m;                          break;                        case "redeem_by_date":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out date))                              RedeemByDate = date;                          break;                        case "single_use":                          SingleUse = reader.ReadElementContentAsBoolean();                          break;                        case "applies_for_months":                          if (int.TryParse(reader.ReadElementContentAsString()' out m))                              AppliesForMonths = m;                          break;                        case "duration":                          Duration = reader.ReadElementContentAsString().ParseAsEnum<CouponDuration>();                          break;                        case "temporal_unit":                          var element_content = reader.ReadElementContentAsString();                          if (element_content != "")                              TemporalUnit = element_content.ParseAsEnum<CouponTemporalUnit>();                          break;                        case "temporal_amount":                          if (int.TryParse(reader.ReadElementContentAsString()' out m))                              TemporalAmount = m;                          break;                        case "max_redemptions":                          if (int.TryParse(reader.ReadElementContentAsString()' out m))                              MaxRedemptions = m;                          break;                        case "applies_to_all_plans":                          AppliesToAllPlans = reader.ReadElementContentAsBoolean();                          break;                        case "applies_to_non_plan_charges":                          AppliesToNonPlanCharges = reader.ReadElementContentAsBoolean();                          break;                        case "max_redemptions_per_account":                          if (int.TryParse(reader.ReadElementContentAsString()' out m))                              MaxRedemptionsPerAccount = m;                          break;                        case "description":                          HostedDescription = reader.ReadElementContentAsString();                          break;                        case "invoice_description":                          InvoiceDescription = reader.ReadElementContentAsString();                          break;                        case "unique_code_template":                          UniqueCodeTemplate = reader.ReadElementContentAsString();                          break;                        case "coupon_type":                          var type_content = reader.ReadElementContentAsString();                          if (type_content != "")                              Type = type_content.ParseAsEnum<CouponType>();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          UpdatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "plan_codes":                          ReadXmlPlanCodes(reader);                          break;                        case "discount_in_cents":                          ReadXmlDiscounts(reader);                          break;                        case "free_trial_unit":                          var trial_unit_content = reader.ReadElementContentAsString();                          if (trial_unit_content != "")                              FreeTrialUnit = trial_unit_content.ParseAsEnum<CouponTemporalUnit>();                          break;                        case "free_trial_amount":                          if (int.TryParse(reader.ReadElementContentAsString()' out m))                              FreeTrialAmount = m;                          break;                  }
Missing Default,Recurly,Coupon,C:\repos\recurly_recurly-client-net\Library\Coupon.cs,ReadXmlPlanCodes,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "plan_code":                          Plans.Add(reader.ReadElementContentAsString());                          break;                    }
Missing Default,Recurly,CouponRedemption,C:\repos\recurly_recurly-client-net\Library\CouponRedemption.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "account":                          href = reader.GetAttribute("href");                          AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "coupon":                          href = reader.GetAttribute("href");                          CouponCode =Uri.UnescapeDataString( href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "single_use":                          SingleUse = reader.ReadElementContentAsBoolean();                          break;                        case "total_discounted_in_cents":                          int discountInCents;                          if (Int32.TryParse(reader.ReadElementContentAsString()' out discountInCents))                              TotalDiscountedInCents = discountInCents;                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString();                          break;                        case "subscription_uuid":                          SubscriptionUuid = reader.ReadElementContentAsString();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                  }
Missing Default,Recurly,Error,C:\repos\recurly_recurly-client-net\Library\Error.cs,Error,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "symbol":                          Symbol = reader.ReadElementContentAsString();                          break;                      case "description":                          Message = reader.ReadElementContentAsString();                          break;                      case "details":                          Details = reader.ReadElementContentAsString();                          break;                  }
Missing Default,Recurly,Invoice,C:\repos\recurly_recurly-client-net\Library\Invoice.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "account":                          var accountHref = reader.GetAttribute("href");                          AccountCode = Uri.UnescapeDataString(accountHref.Substring(accountHref.LastIndexOf("/") + 1));                          break;                        case "original_invoice":                          var originalInvoiceHref = reader.GetAttribute("href");                          var invoiceNumber = Uri.UnescapeDataString(originalInvoiceHref.Substring(originalInvoiceHref.LastIndexOf("/") + 1));                          MatchCollection matches = Regex.Matches(invoiceNumber' "([^\\d]{2})(\\d+)");                                                    if (matches.Count == 1)                           {                              OriginalInvoiceNumberPrefix = matches[0].Groups[1].Value;                              OriginalInvoiceNumber = int.Parse(matches[0].Groups[2].Value);                          }                           else                          {                              OriginalInvoiceNumber = int.Parse(invoiceNumber);                          }                          break;                        case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString().ParseAsEnum<InvoiceState>();                          break;                        case "invoice_number":                          int invNumber;                          if (Int32.TryParse(reader.ReadElementContentAsString()' out invNumber))                              InvoiceNumber = invNumber;                          break;                        case "invoice_number_prefix":                          InvoiceNumberPrefix = reader.ReadElementContentAsString();                          break;                        case "po_number":                          PoNumber = reader.ReadElementContentAsString();                          break;                        case "vat_number":                          VatNumber = reader.ReadElementContentAsString();                          break;                        case "subtotal_in_cents":                          SubtotalInCents = reader.ReadElementContentAsInt();                          break;                        case "tax_in_cents":                          TaxInCents = reader.ReadElementContentAsInt();                          break;                        case "total_in_cents":                          TotalInCents = reader.ReadElementContentAsInt();                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "created_at":                          DateTime createdAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out createdAt))                              CreatedAt = createdAt;                          break;                        case "updated_at":                          DateTime updatedAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out updatedAt))                              UpdatedAt = updatedAt;                          break;                                            case "closed_at":                          DateTime closedAt;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out closedAt))                              ClosedAt = closedAt;                          break;                        case "tax_type":                          TaxType = reader.ReadElementContentAsString();                          break;                        case "tax_rate":                          TaxRate = reader.ReadElementContentAsDecimal();                          break;                        case "tax_region":                          TaxRegion = reader.ReadElementContentAsString();                          break;                        case "net_terms":                          NetTerms = reader.ReadElementContentAsInt();                          break;                        case "collection_method":                          CollectionMethod = reader.ReadElementContentAsString().ParseAsEnum<Collection>();                          break;                        case "customer_notes":                          CustomerNotes = reader.ReadElementContentAsString();                          break;                        case "terms_and_conditions":                          TermsAndConditions = reader.ReadElementContentAsString();                          break;                        case "vat_reverse_charge_notes":                          VatReverseChargeNotes = reader.ReadElementContentAsString();                          break;                        case "line_items":                          // overrite existing value with the Recurly API response                          Adjustments = new AdjustmentList();                          Adjustments.ReadXml(reader);                          break;                        case "transactions":                          // overrite existing value with the Recurly API response                          Transactions = new TransactionList();                          Transactions.ReadXml(reader);                          break;                        case "address":                          Address = new Address(reader);                          break;                        case "subtotal_after_discount_in_cents":                          int s;                          if (int.TryParse(reader.ReadElementContentAsString()' out s))                              SubtotalAfterDiscountInCents = s;                          break;                        case "attempt_next_collection_at":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                              AttemptNextCollectionAt = d;                          break;                        case "recovery_reason":                          RecoveryReason = reader.ReadElementContentAsString();                          break;                        case "all_line_items":                          AllLineItemsLink = reader.ReadElementContentAsString();                          break;                    }
Missing Default,Recurly,Note,C:\repos\recurly_recurly-client-net\Library\Note.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "account":                          href = reader.GetAttribute("href");                          if (null != href)                              AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "message":                          Message = reader.ReadElementContentAsString();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                  }
Missing Default,Recurly,Plan,C:\repos\recurly_recurly-client-net\Library\Plan.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "plan_code":                          PlanCode = reader.ReadElementContentAsString();                          break;                        case "name":                          Name = reader.ReadElementContentAsString();                          break;                        case "description":                          Description = reader.ReadElementContentAsString();                          break;                        case "success_url":                          SuccessUrl = reader.ReadElementContentAsString();                          break;                        case "cancel_url":                          CancelUrl = reader.ReadElementContentAsString();                          break;                        case "display_donation_amounts":                          DisplayDonationAmounts = reader.ReadElementContentAsBoolean();                          break;                        case "display_quantity":                          DisplayQuantity = reader.ReadElementContentAsBoolean();                          break;                        case "display_phone_number":                          DisplayPhoneNumber = reader.ReadElementContentAsBoolean();                          break;                        case "bypass_hosted_confirmation":                          BypassHostedConfirmation = reader.ReadElementContentAsBoolean();                          break;                        case "unit_name":                          UnitName = reader.ReadElementContentAsString();                          break;                        case "payment_page_tos_link":                          PaymentPageTOSLink = reader.ReadElementContentAsString();                          break;                        case "plan_interval_length":                          PlanIntervalLength = reader.ReadElementContentAsInt();                          break;                        case "plan_interval_unit":                          PlanIntervalUnit = reader.ReadElementContentAsString().ParseAsEnum<IntervalUnit>();                          break;                        case "trial_interval_length":                          TrialIntervalLength = reader.ReadElementContentAsInt();                          break;                        case "trial_interval_unit":                          TrialIntervalUnit = reader.ReadElementContentAsString().ParseAsEnum<IntervalUnit>();                          break;                        case "accounting_code":                          AccountingCode = reader.ReadElementContentAsString();                          break;                        case "setup_fee_accounting_code":                          SetupFeeAccountingCode = reader.ReadElementContentAsString();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          UpdatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "tax_exempt":                          TaxExempt = reader.ReadElementContentAsBoolean();                          break;                        case "tax_code":                          TaxCode = reader.ReadElementContentAsString();                          break;                        case "unit_amount_in_cents":                          ReadXmlUnitAmount(reader);                          break;                        case "setup_fee_in_cents":                          ReadXmlSetupFee(reader);                          break;                        case "total_billing_cycles":                          int totalBillingCycles;                          if (int.TryParse(reader.ReadElementContentAsString()' out totalBillingCycles))                              TotalBillingCycles = totalBillingCycles;                          break;                        case "trial_requires_billing_info":                          bool b;                          if (bool.TryParse(reader.ReadElementContentAsString()' out b))                              TrialRequiresBillingInfo = b;                          break;                        case "revenue_schedule_type":                          RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();                          break;                        case "setup_fee_revenue_schedule_type":                          SetupFeeRevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();                          break;                  }
Missing Default,Recurly,Subscription,C:\repos\recurly_recurly-client-net\Library\Subscription.cs,ReadPlanXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "plan_code":                          PlanCode = reader.ReadElementContentAsString();                          break;                  }
Missing Default,Recurly,Subscription,C:\repos\recurly_recurly-client-net\Library\Subscription.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "account":                          href = reader.GetAttribute("href");                          if (null != href)                              _accountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "plan":                          ReadPlanXml(reader);                          break;                        case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "state":                          State = reader.ReadElementContentAsString().ParseAsEnum<SubscriptionState>();                          break;                        case "unit_amount_in_cents":                          UnitAmountInCents = reader.ReadElementContentAsInt();                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "quantity":                          Quantity = reader.ReadElementContentAsInt();                          break;                        case "activated_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              ActivatedAt = dateVal;                          break;                        case "canceled_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              CanceledAt = dateVal;                          break;                        case "expires_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              ExpiresAt = dateVal;                          break;                        case "updated_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              UpdatedAt = dateVal; ;                          break;                        case "current_period_started_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              CurrentPeriodStartedAt = dateVal;                          break;                        case "current_period_ends_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              CurrentPeriodEndsAt = dateVal;                          break;                        case "trial_started_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              TrialPeriodStartedAt = dateVal;                          break;                        case "trial_ends_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              _trialPeriodEndsAt = dateVal;                          break;                        case "bank_account_authorized_at":                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out dateVal))                              BankAccountAuthorizedAt = dateVal;                          break;                        case "subscription_add_ons":                          // overwrite existing list with what came back from Recurly                          AddOns = new SubscriptionAddOnList(this);                          AddOns.ReadXml(reader);                          break;                        case "invoice":                          href = reader.GetAttribute("href");                          if (!href.IsNullOrEmpty())                              _invoiceNumber = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          else                              InvoicePreview = new Invoice(reader);                          break;                        case "pending_subscription":                          PendingSubscription = new Subscription { IsPendingSubscription = true };                          PendingSubscription.ReadPendingSubscription(reader);                          // TODO test all returned properties are read                          break;                        case "collection_method":                          CollectionMethod = reader.ReadElementContentAsString();                          break;                        case "net_terms":                          NetTerms = reader.ReadElementContentAsInt();                          break;                        case "po_number":                          PoNumber = reader.ReadElementContentAsString();                          break;                        case "total_billing_cycles":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out billingCycles))                              TotalBillingCycles = billingCycles;                          break;                        case "remaining_billing_cycles":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out billingCycles))                              RemainingBillingCycles = billingCycles;                          break;                        case "tax_in_cents":                          TaxInCents = reader.ReadElementContentAsInt();                          break;                        case "tax_type":                          TaxType = reader.ReadElementContentAsString();                          break;                        case "tax_rate":                          TaxRate = reader.ReadElementContentAsDecimal();                          break;                        case "customer_notes":                          CustomerNotes = reader.ReadElementContentAsString();                          break;                        case "terms_and_conditions":                          TermsAndConditions = reader.ReadElementContentAsString();                          break;                        case "vat_reverse_charge_notes":                          VatReverseChargeNotes = reader.ReadElementContentAsString();                          break;                        case "address":                          Address = new Address(reader);                          break;                      case "started_with_gift":                          StartedWithGiftCard = reader.ReadElementContentAsBoolean();                          break;                      case "converted_at":                          DateTime date;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out date))                          {                              ConvertedAt = date;                          }                          break;                      case "no_billing_info_reason":                          NoBillingInfoReason = reader.ReadElementContentAsString();                          break;                      case "imported_trial":                          ImportedTrial = reader.ReadElementContentAsBoolean();                          break;                        case "revenue_schedule_type":                          RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();                          break;                  }
Missing Default,Recurly,Subscription,C:\repos\recurly_recurly-client-net\Library\Subscription.cs,ReadPendingSubscription,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "plan":                          ReadPlanXml(reader);                          break;                        case "unit_amount_in_cents":                          UnitAmountInCents = reader.ReadElementContentAsInt();                          break;                        case "quantity":                          Quantity = reader.ReadElementContentAsInt();                          break;                        case "subscription_add_ons":                          AddOns = new SubscriptionAddOnList(this);                          AddOns.ReadXml(reader);                          break;                  }
Missing Default,Recurly,SubscriptionAddOn,C:\repos\recurly_recurly-client-net\Library\SubscriptionAddOn.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "add_on_code":                          AddOnCode = reader.ReadElementContentAsString();                          break;                        case "quantity":                          Quantity = reader.ReadElementContentAsInt();                          break;                        case "unit_amount_in_cents":                          UnitAmountInCents = reader.ReadElementContentAsInt();                          break;                        case "revenue_schedule_type":                          RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();                          break;                  }
Missing Default,Recurly,Transaction,C:\repos\recurly_recurly-client-net\Library\Transaction.cs,ReadXml,The following switch statement is missing a default case: switch (reader.Name)                  {                      case "account":                          href = reader.GetAttribute("href");                          if (null != href)                              AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf("/") + 1));                          break;                        case "invoice":                          href = reader.GetAttribute("href");                          if (null != href)                          {                              string invoiceNumber = href.Substring(href.LastIndexOf("/") + 1);                              MatchCollection matches = Regex.Matches(invoiceNumber' "([^\\d]{2})(\\d+)");                                if (matches.Count == 1)                              {                                  InvoicePrefix = matches[0].Groups[1].Value;                                  Invoice = int.Parse(matches[0].Groups[2].Value);                              }                              else                              {                                  Invoice = int.Parse(invoiceNumber);                              }                          }                          break;                        case "uuid":                          Uuid = reader.ReadElementContentAsString();                          break;                        case "action":                          Action = reader.ReadElementContentAsString().ParseAsEnum<TransactionType>();                          break;                        case "amount_in_cents":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out amount))                              AmountInCents = amount;                          break;                        case "tax_in_cents":                          if (Int32.TryParse(reader.ReadElementContentAsString()' out amount))                              TaxInCents = amount;                          break;                        case "currency":                          Currency = reader.ReadElementContentAsString();                          break;                        case "description":                          Description = reader.ReadElementContentAsString();                          break;                        case "payment_method":                          PaymentMethod = reader.ReadElementContentAsString();                          break;                        case "status":                          var state = reader.ReadElementContentAsString();                          Status = "void" == state ? TransactionState.Voided : state.ParseAsEnum<TransactionState>();                          break;                        case "reference":                          Reference = reader.ReadElementContentAsString();                          break;                        case "test":                          Test = reader.ReadElementContentAsBoolean();                          break;                        case "voidable":                          Voidable = reader.ReadElementContentAsBoolean();                          break;                        case "refundable":                          Refundable = reader.ReadElementContentAsBoolean();                          break;                        case "ip_address":                          IpAddress = reader.ReadElementContentAsString();                          break;                        case "ccv_result":                          CCVResult = reader.ReadElementContentAsString();                          break;                        case "avs_result":                          AvsResult = reader.ReadElementContentAsString();                          break;                        case "avs_result_street":                          AvsResultStreet = reader.ReadElementContentAsString();                          break;                        case "avs_result_postal":                          AvsResultPostal = reader.ReadElementContentAsString();                          break;                        case "created_at":                          CreatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "updated_at":                          UpdatedAt = reader.ReadElementContentAsDateTime();                          break;                        case "details":                          // API docs say not to load details into objects                          break;                        case "gateway_type":                          GatewayType = reader.ReadElementContentAsString();                          break;                        case "origin":                          Origin = reader.ReadElementContentAsString();                          break;                      case "message":                          Message = reader.ReadElementContentAsString();                          break;                      case "approval_code":                          ApprovalCode = reader.ReadElementContentAsString();                          break;                      case "collected_at":                          DateTime d;                          if (DateTime.TryParse(reader.ReadElementContentAsString()' out d))                          {                              CollectedAt = d;                          }                          break;                  }
