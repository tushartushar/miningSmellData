Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The method has 143 lines of code.
Long Statement,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The length of the statement  "				throw new ArgumentException (String.Format ("Target Framework {0} not compatible with MonoBerry! Please compile for v4.5"' " is 122.
Long Statement,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The length of the statement  "				xml.WriteElementString ("versionNumber"' String.Format("{0}.{1}.{2}"' assembly.GetName ().Version.Major' assembly.GetName ().Version.Minor' assembly.GetName ().Version.Build)); " is 176.
Long Statement,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The length of the statement  "				xml.WriteAttributeString ("path"' Path.Combine (Application.Configuration.Location' "target"' arch.Name' "bin"' "mono")); " is 121.
Long Statement,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The length of the statement  "				//xml.WriteElementString ("arg"' "--trace=N:OpenTK'N:OpenTK.Graphics.ES10'OpenTK.Graphics.ES11'OpenTK.Graphics.ES20'N:OpenTK.Platform.Egl'N:OpenTK.Platform.BlackBerry'N:OpenTK.Platform'N:OpenTK.Graphics'program"); " is 213.
Empty Catch Block,MonoBerry.Tool,Shell,C:\repos\roblillack_monoberry\tooling\Shell.cs,SetupDaemon,The method has an empty catch block.
Magic Number,MonoBerry.Tool,Configuration,C:\repos\roblillack_monoberry\tooling\Configuration.cs,Get,The following statement contains a magic number: string[] secKey = absoluteKey.Split (new[] {  				'.'  			}' 2);
Magic Number,MonoBerry.Tool,Configuration,C:\repos\roblillack_monoberry\tooling\Configuration.cs,Get,The following statement contains a magic number: return Get (secKey.Length < 2 ? DEFAULT_SECTION : secKey [0]' secKey [secKey.Length < 2 ? 0 : 1]);
Magic Number,MonoBerry.Tool,Configuration,C:\repos\roblillack_monoberry\tooling\Configuration.cs,Get,The following statement contains a magic number: return Get (secKey.Length < 2 ? DEFAULT_SECTION : secKey [0]' secKey [secKey.Length < 2 ? 0 : 1]);
Magic Number,MonoBerry.Tool,Extensions,C:\repos\roblillack_monoberry\tooling\Extensions.cs,Unescape,The following statement contains a magic number: for (int i = 0; i < me.Length; i++) {  				if (i + 1 == me.Length) {  					b.Append (me [i]);  					continue;  				}  				  				if (me.Substring(i' 2).Equals (@"\n")) {  					b.Append ("\n");  					++i;  					continue;  				}  				  				if (me [i] == '\\' && NEEDS_ESCAPING.Contains (me [i + 1])) {  					b.Append (me [++i]);  					continue;  				}  				  				b.Append (me [i]);  			}
Magic Number,MonoBerry.Tool,Complete,C:\repos\roblillack_monoberry\tooling\Complete.cs,Execute,The following statement contains a magic number: string current = parameters.Count > 2 ? parameters [1] : "";
Magic Number,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,ResolveDependency,The following statement contains a magic number: return assembly.CodeBase.StartsWith ("file://") ? assembly.CodeBase.Substring (7) : assembly.CodeBase;
Magic Number,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The following statement contains a magic number: if (id == null || id.Length < 10) {  				Console.Error.WriteLine ("Application Identifier not specified or too short.");  				return;  			}
Magic Number,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The following statement contains a magic number: if (name == null || name.Title.Length < 3) {  				Console.Error.WriteLine ("Assembly Title not specified or too short.");  				return;  			}
Magic Number,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,CreateAppDescriptor,The following statement contains a magic number: using (var xml = new XmlTextWriter ("app-descriptor.xml"' Encoding.UTF8)) {  				xml.Formatting = Formatting.Indented;  				xml.WriteStartDocument ();  				xml.WriteStartElement ("qnx"' "http://www.qnx.com/schemas/application/1.0");  				xml.WriteElementString ("id"' id);  				xml.WriteElementString ("name"' name.Title);  				xml.WriteElementString ("versionNumber"' String.Format("{0}.{1}.{2}"' assembly.GetName ().Version.Major' assembly.GetName ().Version.Minor' assembly.GetName ().Version.Build));  				xml.WriteElementString ("platformVersion"' platform);    				// We work around a problem with the NDK here  				xml.WriteElementString ("buildId"' Math.Abs ((short)assembly.GetName ().Version.Revision).ToString ());    				if (devMode) {  					xml.WriteElementString ("author"' Application.Configuration.Get ("author_name"));  					xml.WriteElementString ("authorId"' Application.Configuration.Get ("author_id"));  				}    				var permissions = GetAttribute<RequestedPermissionsAttribute> (assembly);  				if (permissions != null) {  					foreach (var i in permissions.Functions) {  						Console.WriteLine ("- Requested permission: {0}"' i);  						xml.WriteElementString ("permission"' i.GetValue ());  					}  				}    				xml.WriteStartElement ("initialWindow");  				xml.WriteElementString ("systemChrome"' "none");  				xml.WriteElementString ("transparent"' "true");  				var aspectRatio = GetAttributeValue<AspectRatioAttribute> (assembly);  				if (aspectRatio != null) {  					xml.WriteElementString ("aspectRatio"' aspectRatio);  				}  				xml.WriteEndElement ();    				foreach (var i in GetAttributes<EnvironmentVariableAttribute> (assembly)) {  					Console.WriteLine ("- Environment Variable: {0}={1}"' i.Name' i.Value);  					xml.WriteStartElement ("env");  					xml.WriteAttributeString ("var"' i.Name);  					xml.WriteAttributeString ("value"' i.Value);  					xml.WriteEndElement ();  				}    				xml.WriteStartElement ("env");  				xml.WriteAttributeString ("var"' "MONO_PATH");  				xml.WriteAttributeString ("value"' "app/native/lib");  				xml.WriteEndElement ();    				xml.WriteStartElement ("env");  				xml.WriteAttributeString ("var"' "LD_LIBRARY_PATH");  				xml.WriteAttributeString ("value"' "app/native/lib:/usr/lib/qt4/lib:/lib:/usr/lib");  				xml.WriteEndElement ();    				string monopath = null;  				foreach (var path in ResolveDependencies (assembly.Location)) {    					var p = path;  					if (Path.GetFileName (path) == "mscorlib.dll") {  						monopath = UpPath (path' 4);  						p = Path.Combine (Application.Configuration.Location' "lib"' "mscorlib.dll");						                    					}    					Console.WriteLine ("- {0}"' p);  					xml.WriteStartElement ("asset");  					xml.WriteAttributeString ("path"' p);  					xml.WriteString ("lib/" + Path.GetFileName (p));  					xml.WriteEndElement ();    					var cfg = path + ".config";  					if (File.Exists (cfg)) {  						Console.Out.WriteLine ("- Adding assembly config from {0}"' cfg);  						xml.WriteStartElement ("asset");  						xml.WriteAttributeString ("path"' cfg);  						xml.WriteString ("lib/" + Path.GetFileName (cfg));  						xml.WriteEndElement ();  					}  				}    				var machinecfg = Path.Combine (monopath' "etc"' "mono"' "4.0"' "machine.config");  				if (monopath != null && File.Exists (machinecfg)) {  					Console.Out.WriteLine ("- Adding machine config from {0}"' machinecfg);  					xml.WriteStartElement ("asset");  					xml.WriteAttributeString ("path"' machinecfg);  					xml.WriteString ("lib/" + Path.GetFileName (assembly.Location) + ".config");  					xml.WriteEndElement ();  				}    				foreach (var i in assembly.GetCustomAttributes (typeof (NativeLibraryAttribute)' false)) {  					var attr = (NativeLibraryAttribute)i;  					if (!arch.Matches (attr.Architecture)) {  						continue;  					}  					Console.Out.WriteLine ("- Adding native library {0}"' attr.Path);  					xml.WriteStartElement ("asset");  					xml.WriteAttributeString ("path"' attr.Path);  					xml.WriteString ("lib/" + Path.GetFileName (attr.Path));  					xml.WriteEndElement ();  				}    				foreach (var i in assembly.GetCustomAttributes (typeof (AssetAttribute)' false)) {  					var attr = (AssetAttribute)i;  					Console.Out.WriteLine ("- Adding asset {0}"' attr.Path);  					xml.WriteStartElement ("asset");  					xml.WriteAttributeString ("path"' attr.Path);  					xml.WriteString (Path.GetFileName (attr.Path));  					xml.WriteEndElement ();  				}    				if (icon != null && icon.Path != null) {  					Console.WriteLine ("ICON: {0}"' icon.Path);  					xml.WriteStartElement ("icon");  					xml.WriteElementString ("image"' icon.Path);  					xml.WriteEndElement ();    					xml.WriteStartElement ("asset");  					xml.WriteAttributeString ("path"' Path.Combine (Path.GetDirectoryName (assembly.Location)' icon.Path));  					//xml.WriteAttributeString ("entry"' "true");  					//xml.WriteAttributeString ("type"' "Qnx/Elf");  					xml.WriteString (icon.Path);  					xml.WriteEndElement ();    				}    				xml.WriteStartElement ("asset");  				xml.WriteAttributeString ("path"' Path.Combine (Application.Configuration.Location' "target"' arch.Name' "bin"' "mono"));  				xml.WriteAttributeString ("entry"' "true");  				xml.WriteAttributeString ("type"' "Qnx/Elf");  				xml.WriteString ("bin/mono");  				xml.WriteEndElement ();    				//xml.WriteElementString ("arg"' "--trace=N:OpenTK'N:OpenTK.Graphics.ES10'OpenTK.Graphics.ES11'OpenTK.Graphics.ES20'N:OpenTK.Platform.Egl'N:OpenTK.Platform.BlackBerry'N:OpenTK.Platform'N:OpenTK.Graphics'program");  				xml.WriteElementString ("arg"' "app/native/lib/" + Path.GetFileName (assembly.Location));    				xml.WriteEndElement ();  				xml.WriteEndDocument ();  				xml.Close ();  			}
Magic Number,MonoBerry.Tool,Debug,C:\repos\roblillack_monoberry\tooling\Debug.cs,GetDevice,The following statement contains a magic number: if (devs.Count == 1) {  				var e = devs.Values.GetEnumerator ();  				e.MoveNext ();  				return e.Current;  			} else if (devs.Count == 0) {  				throw new CommandErrorException ("No devices configured.");  			} else if (parameters.Count == 2) {  				return devs [parameters [1]];  			}
Magic Number,MonoBerry.Tool,Shell,C:\repos\roblillack_monoberry\tooling\Shell.cs,Execute,The following statement contains a magic number: try {  				var chars = "\\|/-";  				var i = 0;  				Console.CursorVisible = false;  				while (connecting) {  					Thread.Sleep (100);  					Console.SetCursorPosition (Console.CursorLeft - 1' Console.CursorTop);  					Console.Write (chars [i++ % chars.Length]);  				}  			} finally {  				Console.WriteLine ();  				Console.CursorVisible = true;  			}
Magic Number,MonoBerry.Tool,Shell,C:\repos\roblillack_monoberry\tooling\Shell.cs,Execute,The following statement contains a magic number: Thread.Sleep (1000);
Magic Number,MonoBerry.Tool,Deploy,C:\repos\roblillack_monoberry\tooling\Deploy.cs,GetDevice,The following statement contains a magic number: if (parameters.Count == 2) {  				return devs [parameters [1]];  			}
Missing Default,MonoBerry.Tool,Configuration,C:\repos\roblillack_monoberry\tooling\Configuration.cs,Get,The following switch statement is missing a default case: switch (key) {  				case "location": return FindLocation ();  				case "ndk_tools_dir": return FindNDKToolsDir ();  				case "debug_token": return Path.Combine (DefaultConfigDir' "debugtoken.bar");  				case "private_key": return Path.Combine (DefaultConfigDir' "id_rsa");  				case "public_key": return Path.Combine (DefaultConfigDir' "id_rsa.pub");  				}
Missing Default,MonoBerry.Tool,Extensions,C:\repos\roblillack_monoberry\tooling\Extensions.cs,ReadPassword,The following switch statement is missing a default case: switch (key.Key) {  				case ConsoleKey.Backspace:  					if (stack.Count > 0) {  						stack.Pop ();  					}  					continue;  				case ConsoleKey.Enter:  					Console.WriteLine ();  					return stack.Reverse ().Join ();  				}
Missing Default,MonoBerry.Tool,Package,C:\repos\roblillack_monoberry\tooling\Package.cs,GetTargetFramework,The following switch statement is missing a default case: switch (attr != null ? attr.FrameworkName : null) {  			case ".NETFramework'Version=v4.5":  				return TargetFramework.NET_4_5;  			case ".NETFramework'Version=v4.0":  				return TargetFramework.NET_4_0;  			}
Missing Default,MonoBerry.Tool,Architecture,C:\repos\roblillack_monoberry\tooling\Architecture.cs,FromName,The following switch statement is missing a default case: switch (name.Trim ().ToLower ()) {  			case "armle-v7":  				return ARM;  			case "x86":  				return X86;  			}
