Implementation smell,Namespace,Class,File,Method,Description
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: win.AddBuffers (2);
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
Magic Number,MonoBerry.Samples.Paint,MainClass,C:\research\architectureSmells\repos\roblillack_monoberry\samples\paint\Main.cs,Main,The following statement contains a magic number: var paintThread = new Thread (() => { 					for (;;) { 						Point point; 						Rectangle dirty; 						int taken; 						for (taken = 0; taken < 10 && queue.TryTake (out point); taken++) { 							var dst_x = Math.Min (win.Width - 10' point.X); 							var dst_y = Math.Min (win.Height - 10' point.Y); 							try { 								buffer.Blit (brush' 0' 0' 10' 10' dst_x' dst_y); 							} catch (Exception e) { 								Console.WriteLine (e.Message); 							} 							if (taken == 0) { 								dirty = new Rectangle (dst_x' dst_y' 10' 10); 							} else { 								dirty.X = Math.Min (dirty.Left' dst_x); 								dirty.Width = Math.Max (dirty.Width' (dst_x + 10) - dirty.X); 								dirty.Y = Math.Min (dirty.Top' dst_y); 								dirty.Height = Math.Max (dirty.Height' (dst_y + 10) - dirty.Y); 							} 						} 						if (taken < 1) { 							continue; 						} 						//Console.WriteLine ("Blitted {0} times before rendering"' taken); 						try { 							win.Render (buffer' dirty' Flushing.SCREEN_WAIT_IDLE); 						} catch (Exception e) { 							Console.WriteLine (e.Message); 						} 					} 				});
