Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Banzai.Test,SimpleTestNodeA1,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\TestClasses.cs,,The length of the parameter _shouldExecuteCancelProcessing is 30.
Long Statement,Banzai.Test,WhenAddingInheritedSubjectNodes,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenAddingInheritedSubjectNodes.cs,Can_Add_Inherited_Func_Node_To_Pipleline,The length of the statement  "            testNode.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 138.
Long Statement,Banzai.Test,WhenPassingInheritedSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenPassingInheritedSubject.cs,Subject_Of_Inherited_Type_Works_With_Func_Node,The length of the statement  "            node.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 134.
Long Statement,Banzai.Test,WhenPassingState,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenPassingState.cs,Adding_State_To_A_Node_Is_Available_In_Following_Node,The length of the statement  "            pipelineNode.AddChild(new FuncNode<TestObjectA> { ExecutedFunc = ctxt => { ctxt.State.Foo = "Bar"; return Task.FromResult(NodeResultStatus.Succeeded); } }); " is 156.
Long Statement,Banzai.Test,WhenPassingState,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenPassingState.cs,Adding_State_To_A_Node_Is_Available_In_Following_Node,The length of the statement  "            pipelineNode.AddChild(new FuncNode<TestObjectA> { ExecutedFunc = ctxt => (ctxt.State.Foo == "Bar") ? Task.FromResult(NodeResultStatus.Succeeded) : Task.FromResult(NodeResultStatus.Failed) }); " is 191.
Long Statement,Banzai.Test,WhenPassingState,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenPassingState.cs,Adding_State_To_A_Node_Is_Available_In_Global_Context,The length of the statement  "            pipelineNode.AddChild(new FuncNode<TestObjectA> { ExecutedFunc = ctxt => { ctxt.State.Foo = "Bar"; return Task.FromResult(NodeResultStatus.Succeeded); } }); " is 156.
Long Statement,Banzai.Test,WhenRunningAgainstMultipleSubjects,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningAgainstMultipleSubjects.cs,Faulted_Node_Throws_If_Throw_On_Error_True,The length of the statement  "            Assert.ThrowsAsync<AggregateException>(() => testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { ThrowOnError = true })); " is 134.
Long Statement,Banzai.Test,WhenRunningAgainstMultipleSubjects,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningAgainstMultipleSubjects.cs,Faulted_Sync_Node_Throws_If_Throw_On_Error_True,The length of the statement  "            Assert.ThrowsAsync<Exception>(() => testNode.ExecuteManySeriallyAsync(testObjectList' new ExecutionOptions { ThrowOnError = true })); " is 133.
Long Statement,Banzai.Test,WhenRunningAgainstMultipleSubjects,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningAgainstMultipleSubjects.cs,Faulted_Sync_Node_Run_Status_Is_Failed_If_Continue_On_Failure_True,The length of the statement  "            var result = await testNode.ExecuteManySeriallyAsync(testObjectList' new ExecutionOptions { ContinueOnFailure = true }); " is 120.
Long Statement,Banzai.Test,WhenRunningFuncNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningFuncNode.cs,Successful_FuncNode_Values_Match_Expected,The length of the statement  "            node.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 134.
Long Statement,Banzai.Test,WhenRunningFuncNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningFuncNode.cs,FuncNode_With_ShouldExecute_False_Shouldnt_Run,The length of the statement  "            node.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 134.
Long Statement,Banzai.Test,WhenRunningFuncNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningFuncNode.cs,Can_Run_Func_Node_On_Inherited_Type,The length of the statement  "            node.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 134.
Long Statement,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Faulted_Node_Throws_If_Throw_On_Error_True,The length of the statement  "            Assert.ThrowsAsync<AggregateException>(() => testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { ThrowOnError = true' DegreeOfParallelism = 4 })); " is 159.
Long Statement,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Faulted_Node_Run_Status_Is_Failed_If_Continue_On_Failure_True,The length of the statement  "            var result = await testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { ContinueOnFailure = true' DegreeOfParallelism = 4 }); " is 137.
Long Statement,Banzai.Test,WhenRunningWithShouldExecuteBlocks,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithShouldExecuteBlocks.cs,Node_With_ShouldExecuteBlock_Should_Run,The length of the statement  "            node.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 134.
Long Statement,Banzai.Test,WhenRunningWithShouldExecuteBlocks,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithShouldExecuteBlocks.cs,Node_With_ShouldExecuteBlock_False_Shouldnt_Run,The length of the statement  "            node.ExecutedFunc = context => { context.Subject.TestValueString = "Completed"; return Task.FromResult(NodeResultStatus.Succeeded); }; " is 134.
Magic Number,Banzai.Test,SimpleTestNodeA2,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\TestClasses.cs,PerformExecuteAsync,The following statement contains a magic number: context.Subject.TestValueInt = 100;
Magic Number,Banzai.Test,WhenChangingTheSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenChangingTheSubject.cs,Pipeline_Node_Results_Following_Subject_Change_Node_Return_Changed_Subject,The following statement contains a magic number: childResults[2].Subject.Should().NotBeSameAs(testObject);
Magic Number,Banzai.Test,WhenChangingTheSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenChangingTheSubject.cs,Pipeline_Node_Results_Following_Subject_Change_Node_Return_Changed_Subject,The following statement contains a magic number: childResults[1].Subject.Should().Be(childResults[2].Subject);
Magic Number,Banzai.Test,WhenChangingTheSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenChangingTheSubject.cs,Pipeline_Overall_Result_Subject_Equals_Last_Changed_Subject,The following statement contains a magic number: result.Subject.Should().NotBeSameAs(childResults[2].Subject);
Magic Number,Banzai.Test,WhenChangingTheSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenChangingTheSubject.cs,Pipeline_Overall_Result_Subject_Equals_Last_Changed_Subject,The following statement contains a magic number: result.Subject.Should().BeSameAs(childResults[3].Subject);
Magic Number,Banzai.Test,WhenChangingTheSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenChangingTheSubject.cs,Group_Overall_Result_Subject_Equals_Last_Changed_Subject,The following statement contains a magic number: result.Subject.Should().NotBeSameAs(childResults[2].Subject);
Magic Number,Banzai.Test,WhenChangingTheSubject,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenChangingTheSubject.cs,Group_Overall_Result_Subject_Equals_Last_Changed_Subject,The following statement contains a magic number: result.Subject.Should().BeSameAs(childResults[3].Subject);
Magic Number,Banzai.Test,WhenRequestingNodeResultErrors,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRequestingNodeResultErrors.cs,Pipeline_With_ContinueOnError_Returns_Exceptions_On_All_Failures,The following statement contains a magic number: exceptions.Count().Should().Be(2);
Magic Number,Banzai.Test,WhenRunningFirstMatchNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningFirstMatchNode.cs,Successful_FirstMatch_Node_Runs_Second_Node_When_First_Not_Matched,The following statement contains a magic number: testObject.TestValueInt.Should().Be(100);
Magic Number,Banzai.Test,WhenRunningFuncNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningFuncNode.cs,FuncNode_With_ShouldExecute_False_Shouldnt_Run,The following statement contains a magic number: node.AddShouldExecute(context => Task.FromResult(context.Subject.TestValueInt == 5));
Magic Number,Banzai.Test,WhenRunningGroupNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningGroupNode.cs,Successful_Group_Result_Matches_Expectations,The following statement contains a magic number: testObject.TestValueInt.Should().Be(100);
Magic Number,Banzai.Test,WhenRunningPipelineNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningPipelineNode.cs,Pipeline_Child_Result_Count_Equals_Child_Node_Count,The following statement contains a magic number: result.ChildResults.Count().Should().Be(2);
Magic Number,Banzai.Test,WhenRunningPipelineNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningPipelineNode.cs,Successful_Pipeline_Result_Matches_Expectations,The following statement contains a magic number: testObject.TestValueInt.Should().Be(100);
Magic Number,Banzai.Test,WhenRunningPipelineNode,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningPipelineNode.cs,Nested_Pipeline_Results_Contain_All_Child_Results,The following statement contains a magic number: result.ChildResults.First().ChildResults.Count().Should().Be(2);
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Successful_Node_Run_Status_Is_Completed,The following statement contains a magic number: var testObjectList = GetTestObjects(100);
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Successful_Node_Run_Status_Is_Completed,The following statement contains a magic number: var result = await testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions{ DegreeOfParallelism = 4 });
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Successful_Node_Run_Status_Is_Completed_When_Fewer_Subjects_Than_DegreeOfParallelism,The following statement contains a magic number: var testObjectList = GetTestObjects(2);
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Successful_Node_Run_Status_Is_Completed_When_Fewer_Subjects_Than_DegreeOfParallelism,The following statement contains a magic number: var result = await testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { DegreeOfParallelism = 4 });
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Failed_Node_Run_Status_Is_Failed,The following statement contains a magic number: var result = await testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { DegreeOfParallelism = 4 });
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Faulted_Node_Throws_If_Throw_On_Error_True,The following statement contains a magic number: Assert.ThrowsAsync<AggregateException>(() => testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { ThrowOnError = true' DegreeOfParallelism = 4 }));
Magic Number,Banzai.Test,WhenRunningWithDegreeOfParallelism,D:\research\architectureSmells\repos\eswann_Banzai\test\Banzai.Test\WhenRunningWithDegreeOfParallelism.cs,Faulted_Node_Run_Status_Is_Failed_If_Continue_On_Failure_True,The following statement contains a magic number: var result = await testNode.ExecuteManyAsync(testObjectList' new ExecutionOptions { ContinueOnFailure = true' DegreeOfParallelism = 4 });
