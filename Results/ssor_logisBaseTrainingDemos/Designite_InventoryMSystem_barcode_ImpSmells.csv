Implementation smell,Namespace,Class,File,Method,Description
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventoryResult.cs,tabControl1_TabIndexChanged,Cyclomatic complexity of the method is 9
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventoryResult.cs,refreshInventoryMore,Cyclomatic complexity of the method is 8
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventoryResult.cs,refreshInventoryLess,Cyclomatic complexity of the method is 8
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventoryResult.cs,refreshInventoryEqual,Cyclomatic complexity of the method is 8
Long Parameter List,Inventory,Product,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\system_class\Product.cs,Product,The method has 5 parameters.
Long Statement,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,LinkEPCToProduct,The length of the statement  "			Product p1 = new Product (epc' string.Empty' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Empty' string.Empty); " is 120.
Long Statement,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmNewOrder.cs,helper_RequestCompleted_addOrder,The length of the statement  "			Debug.WriteLine (string.Format ("frmNewOrder.helper_RequestCompleted_addOrder  ->  = {0}  {1}"' u2.productName' u2.quantity)); " is 126.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,helper_RequestCompleted_disposeProductNameList,The length of the statement  "	Debug.WriteLine (string.Format ("frmProductManage.helper_RequestCompleted_disposeProductNameList  -> response = {0}"' strProduct)); " is 131.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,helper_RequestCompleted_disposeList,The length of the statement  "		Debug.WriteLine (string.Format ("frmProductManage.helper_RequestCompleted_disposeList  -> response = {0}"' strProduct)); " is 120.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,btnSave_Click,The length of the statement  "	Product newPro = new Product (this.txtPID.Text' this.cmbName.Text' this.dateTimePicker1.Value.ToString ("yyyy-MM-dd HH:mm:ss")' this.cmbFactory.Text' this.txtComment.Text); " is 172.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,btnDelete_Click,The length of the statement  "	Product newPro = new Product (this.txtPID.Text' this.cmbName.Text' this.dateTimePicker1.Value.ToString ("yyyy-MM-dd HH:mm:ss")' this.cmbFactory.Text' this.txtComment.Text); " is 172.
Long Statement,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_addProductToStorage,The length of the statement  "	Debug.WriteLine (string.Format ("frmStorageManage.helper_RequestCompleted_addProductToStorage  ->  = {0}"' strProducts)); " is 121.
Long Statement,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,LinkEPCToProduct,The length of the statement  "	Product p1 = new Product (epc' string.Empty' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Empty' string.Empty); " is 120.
Long Statement,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,btnStartCheck_Click,The length of the statement  "			Product p1 = new Product (productID' string.Empty' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Empty' string.Empty); " is 126.
Long Statement,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_deleteProductToStorage,The length of the statement  "	Debug.WriteLine (string.Format ("frmTakeOutInventory.helper_RequestCompleted_deleteProductToStorage  ->  = {0}"' strProducts)); " is 127.
Long Statement,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManageAdd.cs,helper_RequestCompleted_disposeProductNameList,The length of the statement  "	Debug.WriteLine (string.Format ("frmProductManageAdd.helper_RequestCompleted_disposeProductNameList  -> response = {0}"' strProduct)); " is 134.
Long Statement,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManageAdd.cs,btnAdd_Click,The length of the statement  "	Product newPro = new Product (this.txtPID.Text' this.cmbName.Text' this.dateTimePicker1.Value.ToString ("yyyy-MM-dd HH:mm:ss")' this.cmbFactory.Text' this.txtComment.Text); " is 172.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\HttpDownloader.cs,TryRequest,The length of the statement  "		IAsyncResult result = (IAsyncResult)myHttpWebRequest.BeginGetResponse (new AsyncCallback (RespCallback)' myRequestState); " is 121.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\HttpDownloader.cs,RespCallback,The length of the statement  "		IAsyncResult asynchronousInputRead = responseStream.BeginRead (myRequestState.BufferRead' 0' BUFFER_SIZE' new AsyncCallback (ReadCallBack)' myRequestState); " is 156.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\HttpDownloader.cs,ReadCallBack,The length of the statement  "			IAsyncResult asynchronousResult = responseStream.BeginRead (myRequestState.BufferRead' 0' BUFFER_SIZE' new AsyncCallback (ReadCallBack)' myRequestState); " is 153.
Long Statement,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\UDPServer.cs,startUDPListening,The length of the statement  "			serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender); " is 134.
Long Statement,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\UDPServer.cs,OnReceive,The length of the statement  "		serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender); " is 134.
Magic Number,InventoryMSystem,frmSysConfig,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmSysConfig.cs,button1_Click,The following statement contains a magic number: UDPHelper.UDPServer.startUDPListening (12306);  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,frmInventory,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,frmInventory,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,frmInventory,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,frmInventory,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,CreateCheckBoxColumn,The following statement contains a magic number: cbc.Width = 50;  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventory.cs,helper_RequestCompleted_getProductInfoForInventoryList,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventoryResult.cs,tabControl1_TabIndexChanged,The following statement contains a magic number: switch (this.tabControl1.SelectedIndex) {  case 0:  	//盘盈  	this.refreshInventoryMore ();  	break;  case 1:  	this.refreshInventoryLess ();  	break;  case 2:  	this.refreshInventoryEqual ();  	break;  }  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmNewOrder.cs,helper_RequestCompleted_getAllOrders,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmNewOrder.cs,RefreshOrderInfo,The following statement contains a magic number: if (!this.dgvOrderInfo.Columns.Contains ("checkColumn")) {  	DataGridViewCheckBoxColumn cc = new DataGridViewCheckBoxColumn ();  	cc.HeaderText = "";  	cc.Name = "checkColumn";  	cc.Width = 50;  	dgvOrderInfo.Columns.Insert (0' cc);  }  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmNewOrder.cs,RefreshOrderInfo,The following statement contains a magic number: cc.Width = 50;  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmNewOrder.cs,RefreshOrderInfo,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: if (tb != null && tb.Rows.Count > 0) {  	txtPID.Text = tb.Rows [0] [0].ToString ();  	this.cmbName.Text = tb.Rows [0] [1].ToString ();  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  	this.txtComment.Text = tb.Rows [0] [4].ToString ();  }  else {  	txtPID.Text = null;  	cmbName.Text = null;  	this.dateTimePicker1.Value = DateTime.Now;  	cmbFactory.Text = null;  	txtComment.Text = null;  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: if (tb != null && tb.Rows.Count > 0) {  	txtPID.Text = tb.Rows [0] [0].ToString ();  	this.cmbName.Text = tb.Rows [0] [1].ToString ();  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  	this.txtComment.Text = tb.Rows [0] [4].ToString ();  }  else {  	txtPID.Text = null;  	cmbName.Text = null;  	this.dateTimePicker1.Value = DateTime.Now;  	cmbFactory.Text = null;  	txtComment.Text = null;  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: if (tb != null && tb.Rows.Count > 0) {  	txtPID.Text = tb.Rows [0] [0].ToString ();  	this.cmbName.Text = tb.Rows [0] [1].ToString ();  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  	this.txtComment.Text = tb.Rows [0] [4].ToString ();  }  else {  	txtPID.Text = null;  	cmbName.Text = null;  	this.dateTimePicker1.Value = DateTime.Now;  	cmbFactory.Text = null;  	txtComment.Text = null;  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: try {  	this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: this.txtComment.Text = tb.Rows [0] [4].ToString ();  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: if (e.RowIndex >= 0) {  	dataGridView1.Rows [e.RowIndex].Selected = true;  	txtPID.Text = tb.Rows [e.RowIndex] [0].ToString ();  	//this.cmbName.Text = tb.Rows[e.RowIndex][1].ToString();  	this.cmbName.SelectedIndex = this.cmbName.Items.IndexOf (tb.Rows [e.RowIndex] [1].ToString ());  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  	this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: if (e.RowIndex >= 0) {  	dataGridView1.Rows [e.RowIndex].Selected = true;  	txtPID.Text = tb.Rows [e.RowIndex] [0].ToString ();  	//this.cmbName.Text = tb.Rows[e.RowIndex][1].ToString();  	this.cmbName.SelectedIndex = this.cmbName.Items.IndexOf (tb.Rows [e.RowIndex] [1].ToString ());  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  	this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: if (e.RowIndex >= 0) {  	dataGridView1.Rows [e.RowIndex].Selected = true;  	txtPID.Text = tb.Rows [e.RowIndex] [0].ToString ();  	//this.cmbName.Text = tb.Rows[e.RowIndex][1].ToString();  	this.cmbName.SelectedIndex = this.cmbName.Items.IndexOf (tb.Rows [e.RowIndex] [1].ToString ());  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  	this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: try {  	this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,frmStorageManage,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,frmStorageManage,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,frmStorageManage,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,frmStorageManage,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_getPreProListToStorage,The following statement contains a magic number: if (!this.dgvNotStoragedPInfo.Columns.Contains ("checkColumn")) {  	DataGridViewCheckBoxColumn cc = new DataGridViewCheckBoxColumn ();  	cc.HeaderText = "";  	cc.Name = "checkColumn";  	cc.Width = 50;  	dgvNotStoragedPInfo.Columns.Insert (0' cc);  }  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_getPreProListToStorage,The following statement contains a magic number: cc.Width = 50;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_getPreProListToStorage,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,RefreshNotStoragedPInfo,The following statement contains a magic number: if (!this.dgvNotStoragedPInfo.Columns.Contains ("checkColumn")) {  	DataGridViewCheckBoxColumn cc = new DataGridViewCheckBoxColumn ();  	cc.HeaderText = "";  	cc.Name = "checkColumn";  	cc.Width = 50;  	dgvNotStoragedPInfo.Columns.Insert (0' cc);  }  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,RefreshNotStoragedPInfo,The following statement contains a magic number: cc.Width = 50;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmStorageManage.cs,RefreshNotStoragedPInfo,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,frmTakeOutInventory,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,frmTakeOutInventory,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,frmTakeOutInventory,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,frmTakeOutInventory,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (u2 != null && u2.state == "ok") {  	Debug.WriteLine (string.Format ("frmTakeOutInventory.helper_RequestCompleted_getProduct  ->  = {0}"' u2.toString ()));  	//将具体的产品信息添加到详细列表里面  	if (this.dgvDetailProductsInfo.DataSource != null) {  		DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  		//首先检查该产品是否已经扫描过  		bool alreadyAdded = false;  		foreach (DataRow dr in dt.Rows) {  			if (dr.ItemArray [0].ToString () == u2.productID) {  				alreadyAdded = true;  				break;  			}  		}  		//如果尚未扫描过  		if (!alreadyAdded) {  			//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  			bool bEnough = false;  			string productName = u2.productName;  			DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  			int quantityOrdered = -1;  			int quantityNow = -1;  			DataRow drOrderProduct = null;  			if (dtOrder != null && dtOrder.Rows.Count > 0) {  				foreach (DataRow dr in dtOrder.Rows) {  					if (dr [0].ToString () == productName) {  						drOrderProduct = dr;  						break;  					}  				}  				if (drOrderProduct != null) {  					try {  						quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  						quantityNow = int.Parse (drOrderProduct [2].ToString ());  					}  					catch (System.Exception ex) {  						MessageBox.Show ("程序异常：" + ex.Message);  						return;  					}  					if (quantityNow > -1 && quantityOrdered > -1) {  						if (quantityNow >= quantityOrdered) {  							bEnough = true;  						}  					}  					if (!bEnough) {  						if (null != drOrderProduct) {  							drOrderProduct [2] = (++quantityNow).ToString ();  						}  						dt.Rows.Add (new object[] {  							u2.productID'  							u2.productName'  							u2.produceDate'  							u2.productCategory'  							u2.descript  						});  						if (this.CheckAllOrderEnough ()) {  							this.btnStartCheck.Enabled = true;  						}  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (u2 != null && u2.state == "ok") {  	Debug.WriteLine (string.Format ("frmTakeOutInventory.helper_RequestCompleted_getProduct  ->  = {0}"' u2.toString ()));  	//将具体的产品信息添加到详细列表里面  	if (this.dgvDetailProductsInfo.DataSource != null) {  		DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  		//首先检查该产品是否已经扫描过  		bool alreadyAdded = false;  		foreach (DataRow dr in dt.Rows) {  			if (dr.ItemArray [0].ToString () == u2.productID) {  				alreadyAdded = true;  				break;  			}  		}  		//如果尚未扫描过  		if (!alreadyAdded) {  			//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  			bool bEnough = false;  			string productName = u2.productName;  			DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  			int quantityOrdered = -1;  			int quantityNow = -1;  			DataRow drOrderProduct = null;  			if (dtOrder != null && dtOrder.Rows.Count > 0) {  				foreach (DataRow dr in dtOrder.Rows) {  					if (dr [0].ToString () == productName) {  						drOrderProduct = dr;  						break;  					}  				}  				if (drOrderProduct != null) {  					try {  						quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  						quantityNow = int.Parse (drOrderProduct [2].ToString ());  					}  					catch (System.Exception ex) {  						MessageBox.Show ("程序异常：" + ex.Message);  						return;  					}  					if (quantityNow > -1 && quantityOrdered > -1) {  						if (quantityNow >= quantityOrdered) {  							bEnough = true;  						}  					}  					if (!bEnough) {  						if (null != drOrderProduct) {  							drOrderProduct [2] = (++quantityNow).ToString ();  						}  						dt.Rows.Add (new object[] {  							u2.productID'  							u2.productName'  							u2.produceDate'  							u2.productCategory'  							u2.descript  						});  						if (this.CheckAllOrderEnough ()) {  							this.btnStartCheck.Enabled = true;  						}  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (this.dgvDetailProductsInfo.DataSource != null) {  	DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  	//首先检查该产品是否已经扫描过  	bool alreadyAdded = false;  	foreach (DataRow dr in dt.Rows) {  		if (dr.ItemArray [0].ToString () == u2.productID) {  			alreadyAdded = true;  			break;  		}  	}  	//如果尚未扫描过  	if (!alreadyAdded) {  		//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  		bool bEnough = false;  		string productName = u2.productName;  		DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  		int quantityOrdered = -1;  		int quantityNow = -1;  		DataRow drOrderProduct = null;  		if (dtOrder != null && dtOrder.Rows.Count > 0) {  			foreach (DataRow dr in dtOrder.Rows) {  				if (dr [0].ToString () == productName) {  					drOrderProduct = dr;  					break;  				}  			}  			if (drOrderProduct != null) {  				try {  					quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  					quantityNow = int.Parse (drOrderProduct [2].ToString ());  				}  				catch (System.Exception ex) {  					MessageBox.Show ("程序异常：" + ex.Message);  					return;  				}  				if (quantityNow > -1 && quantityOrdered > -1) {  					if (quantityNow >= quantityOrdered) {  						bEnough = true;  					}  				}  				if (!bEnough) {  					if (null != drOrderProduct) {  						drOrderProduct [2] = (++quantityNow).ToString ();  					}  					dt.Rows.Add (new object[] {  						u2.productID'  						u2.productName'  						u2.produceDate'  						u2.productCategory'  						u2.descript  					});  					if (this.CheckAllOrderEnough ()) {  						this.btnStartCheck.Enabled = true;  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (this.dgvDetailProductsInfo.DataSource != null) {  	DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  	//首先检查该产品是否已经扫描过  	bool alreadyAdded = false;  	foreach (DataRow dr in dt.Rows) {  		if (dr.ItemArray [0].ToString () == u2.productID) {  			alreadyAdded = true;  			break;  		}  	}  	//如果尚未扫描过  	if (!alreadyAdded) {  		//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  		bool bEnough = false;  		string productName = u2.productName;  		DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  		int quantityOrdered = -1;  		int quantityNow = -1;  		DataRow drOrderProduct = null;  		if (dtOrder != null && dtOrder.Rows.Count > 0) {  			foreach (DataRow dr in dtOrder.Rows) {  				if (dr [0].ToString () == productName) {  					drOrderProduct = dr;  					break;  				}  			}  			if (drOrderProduct != null) {  				try {  					quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  					quantityNow = int.Parse (drOrderProduct [2].ToString ());  				}  				catch (System.Exception ex) {  					MessageBox.Show ("程序异常：" + ex.Message);  					return;  				}  				if (quantityNow > -1 && quantityOrdered > -1) {  					if (quantityNow >= quantityOrdered) {  						bEnough = true;  					}  				}  				if (!bEnough) {  					if (null != drOrderProduct) {  						drOrderProduct [2] = (++quantityNow).ToString ();  					}  					dt.Rows.Add (new object[] {  						u2.productID'  						u2.productName'  						u2.produceDate'  						u2.productCategory'  						u2.descript  					});  					if (this.CheckAllOrderEnough ()) {  						this.btnStartCheck.Enabled = true;  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (!alreadyAdded) {  	//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  	bool bEnough = false;  	string productName = u2.productName;  	DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  	int quantityOrdered = -1;  	int quantityNow = -1;  	DataRow drOrderProduct = null;  	if (dtOrder != null && dtOrder.Rows.Count > 0) {  		foreach (DataRow dr in dtOrder.Rows) {  			if (dr [0].ToString () == productName) {  				drOrderProduct = dr;  				break;  			}  		}  		if (drOrderProduct != null) {  			try {  				quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  				quantityNow = int.Parse (drOrderProduct [2].ToString ());  			}  			catch (System.Exception ex) {  				MessageBox.Show ("程序异常：" + ex.Message);  				return;  			}  			if (quantityNow > -1 && quantityOrdered > -1) {  				if (quantityNow >= quantityOrdered) {  					bEnough = true;  				}  			}  			if (!bEnough) {  				if (null != drOrderProduct) {  					drOrderProduct [2] = (++quantityNow).ToString ();  				}  				dt.Rows.Add (new object[] {  					u2.productID'  					u2.productName'  					u2.produceDate'  					u2.productCategory'  					u2.descript  				});  				if (this.CheckAllOrderEnough ()) {  					this.btnStartCheck.Enabled = true;  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (!alreadyAdded) {  	//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  	bool bEnough = false;  	string productName = u2.productName;  	DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  	int quantityOrdered = -1;  	int quantityNow = -1;  	DataRow drOrderProduct = null;  	if (dtOrder != null && dtOrder.Rows.Count > 0) {  		foreach (DataRow dr in dtOrder.Rows) {  			if (dr [0].ToString () == productName) {  				drOrderProduct = dr;  				break;  			}  		}  		if (drOrderProduct != null) {  			try {  				quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  				quantityNow = int.Parse (drOrderProduct [2].ToString ());  			}  			catch (System.Exception ex) {  				MessageBox.Show ("程序异常：" + ex.Message);  				return;  			}  			if (quantityNow > -1 && quantityOrdered > -1) {  				if (quantityNow >= quantityOrdered) {  					bEnough = true;  				}  			}  			if (!bEnough) {  				if (null != drOrderProduct) {  					drOrderProduct [2] = (++quantityNow).ToString ();  				}  				dt.Rows.Add (new object[] {  					u2.productID'  					u2.productName'  					u2.produceDate'  					u2.productCategory'  					u2.descript  				});  				if (this.CheckAllOrderEnough ()) {  					this.btnStartCheck.Enabled = true;  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (dtOrder != null && dtOrder.Rows.Count > 0) {  	foreach (DataRow dr in dtOrder.Rows) {  		if (dr [0].ToString () == productName) {  			drOrderProduct = dr;  			break;  		}  	}  	if (drOrderProduct != null) {  		try {  			quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  			quantityNow = int.Parse (drOrderProduct [2].ToString ());  		}  		catch (System.Exception ex) {  			MessageBox.Show ("程序异常：" + ex.Message);  			return;  		}  		if (quantityNow > -1 && quantityOrdered > -1) {  			if (quantityNow >= quantityOrdered) {  				bEnough = true;  			}  		}  		if (!bEnough) {  			if (null != drOrderProduct) {  				drOrderProduct [2] = (++quantityNow).ToString ();  			}  			dt.Rows.Add (new object[] {  				u2.productID'  				u2.productName'  				u2.produceDate'  				u2.productCategory'  				u2.descript  			});  			if (this.CheckAllOrderEnough ()) {  				this.btnStartCheck.Enabled = true;  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (dtOrder != null && dtOrder.Rows.Count > 0) {  	foreach (DataRow dr in dtOrder.Rows) {  		if (dr [0].ToString () == productName) {  			drOrderProduct = dr;  			break;  		}  	}  	if (drOrderProduct != null) {  		try {  			quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  			quantityNow = int.Parse (drOrderProduct [2].ToString ());  		}  		catch (System.Exception ex) {  			MessageBox.Show ("程序异常：" + ex.Message);  			return;  		}  		if (quantityNow > -1 && quantityOrdered > -1) {  			if (quantityNow >= quantityOrdered) {  				bEnough = true;  			}  		}  		if (!bEnough) {  			if (null != drOrderProduct) {  				drOrderProduct [2] = (++quantityNow).ToString ();  			}  			dt.Rows.Add (new object[] {  				u2.productID'  				u2.productName'  				u2.produceDate'  				u2.productCategory'  				u2.descript  			});  			if (this.CheckAllOrderEnough ()) {  				this.btnStartCheck.Enabled = true;  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (drOrderProduct != null) {  	try {  		quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  		quantityNow = int.Parse (drOrderProduct [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show ("程序异常：" + ex.Message);  		return;  	}  	if (quantityNow > -1 && quantityOrdered > -1) {  		if (quantityNow >= quantityOrdered) {  			bEnough = true;  		}  	}  	if (!bEnough) {  		if (null != drOrderProduct) {  			drOrderProduct [2] = (++quantityNow).ToString ();  		}  		dt.Rows.Add (new object[] {  			u2.productID'  			u2.productName'  			u2.produceDate'  			u2.productCategory'  			u2.descript  		});  		if (this.CheckAllOrderEnough ()) {  			this.btnStartCheck.Enabled = true;  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (drOrderProduct != null) {  	try {  		quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  		quantityNow = int.Parse (drOrderProduct [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show ("程序异常：" + ex.Message);  		return;  	}  	if (quantityNow > -1 && quantityOrdered > -1) {  		if (quantityNow >= quantityOrdered) {  			bEnough = true;  		}  	}  	if (!bEnough) {  		if (null != drOrderProduct) {  			drOrderProduct [2] = (++quantityNow).ToString ();  		}  		dt.Rows.Add (new object[] {  			u2.productID'  			u2.productName'  			u2.produceDate'  			u2.productCategory'  			u2.descript  		});  		if (this.CheckAllOrderEnough ()) {  			this.btnStartCheck.Enabled = true;  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: try {  	quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  	quantityNow = int.Parse (drOrderProduct [2].ToString ());  }  catch (System.Exception ex) {  	MessageBox.Show ("程序异常：" + ex.Message);  	return;  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: quantityNow = int.Parse (drOrderProduct [2].ToString ());  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (!bEnough) {  	if (null != drOrderProduct) {  		drOrderProduct [2] = (++quantityNow).ToString ();  	}  	dt.Rows.Add (new object[] {  		u2.productID'  		u2.productName'  		u2.produceDate'  		u2.productCategory'  		u2.descript  	});  	if (this.CheckAllOrderEnough ()) {  		this.btnStartCheck.Enabled = true;  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (null != drOrderProduct) {  	drOrderProduct [2] = (++quantityNow).ToString ();  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: drOrderProduct [2] = (++quantityNow).ToString ();  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,CheckAllOrderEnough,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	int quantityOrdered = -1;  	int quantityNow = -1;  	try {  		quantityNow = int.Parse (dr [2].ToString ());  		quantityOrdered = int.Parse (dr [1].ToString ());  		if (quantityOrdered > quantityNow) {  			bEnough = false;  			break;  		}  	}  	catch (System.Exception ex) {  		MessageBox.Show ("程序异常：" + ex.Message);  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,CheckAllOrderEnough,The following statement contains a magic number: try {  	quantityNow = int.Parse (dr [2].ToString ());  	quantityOrdered = int.Parse (dr [1].ToString ());  	if (quantityOrdered > quantityNow) {  		bEnough = false;  		break;  	}  }  catch (System.Exception ex) {  	MessageBox.Show ("程序异常：" + ex.Message);  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmTakeOutInventory.cs,CheckAllOrderEnough,The following statement contains a magic number: quantityNow = int.Parse (dr [2].ToString ());  
Magic Number,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManageAdd.cs,frmProductManageAdd,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManageAdd.cs,frmProductManageAdd,The following statement contains a magic number: try {  	comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "异常提示！");  }  
Magic Number,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManageAdd.cs,frmProductManageAdd,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmProductManageAdd.cs,frmProductManageAdd,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600' Parity.None' 8' StopBits.One);  
Magic Number,barcode_helper,barcode_reader_helper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\barcode_reader_helper.cs,start,The following statement contains a magic number: _timer.Interval = 500;  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\UDPServer.cs,startUDPListening,The following statement contains a magic number: try {  	if (serverSocket == null) {  		IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  		for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  			ipAddress = ipHostInfo.AddressList [i];  			if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  				break;  			}  			else {  				ipAddress = null;  			}  		}  		if (null == ipAddress) {  			return;  		}  		IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  		//We are using UDP sockets  		serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  		//IPAddress ip = IPAddress.Parse(servIP);  		//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  		//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  		//Bind this address to the server  		serverSocket.Bind (ipEndPoint);  		//防止客户端强行中断造成的异常  		long IOC_IN = 0x80000000;  		long IOC_VENDOR = 0x18000000;  		long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  		byte[] optionInValue =  {  			Convert.ToByte (false)  		};  		byte[] optionOutValue = new byte[4];  		serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  		IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  		//The epSender identifies the incoming clients  		EndPoint epSender = (EndPoint)ipeSender;  		//Start receiving data  		serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  	}  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("UDPServer.startUDPListening  -> error = {0}"' ex.Message));  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\UDPServer.cs,startUDPListening,The following statement contains a magic number: try {  	if (serverSocket == null) {  		IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  		for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  			ipAddress = ipHostInfo.AddressList [i];  			if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  				break;  			}  			else {  				ipAddress = null;  			}  		}  		if (null == ipAddress) {  			return;  		}  		IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  		//We are using UDP sockets  		serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  		//IPAddress ip = IPAddress.Parse(servIP);  		//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  		//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  		//Bind this address to the server  		serverSocket.Bind (ipEndPoint);  		//防止客户端强行中断造成的异常  		long IOC_IN = 0x80000000;  		long IOC_VENDOR = 0x18000000;  		long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  		byte[] optionInValue =  {  			Convert.ToByte (false)  		};  		byte[] optionOutValue = new byte[4];  		serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  		IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  		//The epSender identifies the incoming clients  		EndPoint epSender = (EndPoint)ipeSender;  		//Start receiving data  		serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  	}  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("UDPServer.startUDPListening  -> error = {0}"' ex.Message));  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\UDPServer.cs,startUDPListening,The following statement contains a magic number: if (serverSocket == null) {  	IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  	for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  		ipAddress = ipHostInfo.AddressList [i];  		if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  			break;  		}  		else {  			ipAddress = null;  		}  	}  	if (null == ipAddress) {  		return;  	}  	IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  	//We are using UDP sockets  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  	//IPAddress ip = IPAddress.Parse(servIP);  	//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  	//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  	//Bind this address to the server  	serverSocket.Bind (ipEndPoint);  	//防止客户端强行中断造成的异常  	long IOC_IN = 0x80000000;  	long IOC_VENDOR = 0x18000000;  	long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  	byte[] optionInValue =  {  		Convert.ToByte (false)  	};  	byte[] optionOutValue = new byte[4];  	serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  	IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  	//The epSender identifies the incoming clients  	EndPoint epSender = (EndPoint)ipeSender;  	//Start receiving data  	serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  }  
Magic Number,UDPHelper,UDPServer,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Public\UDPServer.cs,startUDPListening,The following statement contains a magic number: if (serverSocket == null) {  	IPHostEntry ipHostInfo = Dns.GetHostEntry (Dns.GetHostName ());  	for (int i = 0; i < ipHostInfo.AddressList.Length; i++) {  		ipAddress = ipHostInfo.AddressList [i];  		if (ipAddress.AddressFamily == AddressFamily.InterNetwork) {  			break;  		}  		else {  			ipAddress = null;  		}  	}  	if (null == ipAddress) {  		return;  	}  	IPEndPoint ipEndPoint = new IPEndPoint (ipAddress' servPort);  	//We are using UDP sockets  	serverSocket = new Socket (AddressFamily.InterNetwork' SocketType.Dgram' ProtocolType.Udp);  	//IPAddress ip = IPAddress.Parse(servIP);  	//IPEndPoint ipEndPoint = new IPEndPoint(ip' servPort);  	//                IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any' port);  	//Bind this address to the server  	serverSocket.Bind (ipEndPoint);  	//防止客户端强行中断造成的异常  	long IOC_IN = 0x80000000;  	long IOC_VENDOR = 0x18000000;  	long SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;  	byte[] optionInValue =  {  		Convert.ToByte (false)  	};  	byte[] optionOutValue = new byte[4];  	serverSocket.IOControl ((int)SIO_UDP_CONNRESET' optionInValue' optionOutValue);  	IPEndPoint ipeSender = new IPEndPoint (IPAddress.Any' 0);  	//The epSender identifies the incoming clients  	EndPoint epSender = (EndPoint)ipeSender;  	//Start receiving data  	serverSocket.BeginReceiveFrom (byteData' 0' byteData.Length' SocketFlags.None' ref epSender' new AsyncCallback (OnReceive)' epSender);  }  
Missing Default,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem_barcode\InventoryMSystem\Forms\frmInventoryResult.cs,tabControl1_TabIndexChanged,The following switch statement is missing a default case: switch (this.tabControl1.SelectedIndex) {  case 0:  	//盘盈  	this.refreshInventoryMore ();  	break;  case 1:  	this.refreshInventoryLess ();  	break;  case 2:  	this.refreshInventoryEqual ();  	break;  }  
