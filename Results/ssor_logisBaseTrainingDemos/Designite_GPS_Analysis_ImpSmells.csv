Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,Cyclomatic complexity of the method is 23
Complex Method,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,Cyclomatic complexity of the method is 8
Long Statement,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The length of the statement  "		PointF pt1 = new PointF (m_InnerRadius * (float)Math.Cos (ConvertDegreesToRadians (angle))' m_InnerRadius * (float)Math.Sin (ConvertDegreesToRadians (angle))); " is 159.
Long Statement,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The length of the statement  "		PointF pt2 = new PointF (m_OuterRadius * (float)Math.Cos (ConvertDegreesToRadians (angle))' m_OuterRadius * (float)Math.Sin (ConvertDegreesToRadians (angle))); " is 159.
Long Statement,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The length of the statement  "		System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds); " is 140.
Long Statement,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The length of the statement  "			if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") { " is 120.
Long Statement,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The length of the statement  "				strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString (); " is 193.
Magic Number,GPS_Analysis,GPSA,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\GPSA.cs,button1_Click,The following statement contains a magic number: try {  	// Set the port's settings  	if (comport == null) {  		comport = new SerialPort (staticClass.serialport_name' 9600);  		comport.DataReceived += new SerialDataReceivedEventHandler (port_DataReceived);  		//zxy  	}  	if (!comport.IsOpen) {  		// Open the port  		comport.Open ();  		this.GPS.StartInterpreter ();  		this.ProgressControl1.Start ();  	}  	this.btnStart.Visible = false;  	this.btnStop.Visible = true;  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message' "程序异常");  }  
Magic Number,GPS_Analysis,GPSA,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\GPSA.cs,button1_Click,The following statement contains a magic number: if (comport == null) {  	comport = new SerialPort (staticClass.serialport_name' 9600);  	comport.DataReceived += new SerialDataReceivedEventHandler (port_DataReceived);  	//zxy  }  
Magic Number,GPS_Analysis,GPSA,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\GPSA.cs,button1_Click,The following statement contains a magic number: comport = new SerialPort (staticClass.serialport_name' 9600);  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,MatrixCircularProgressControl,The following statement contains a magic number: this.StartAngle = 270;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,MatrixCircularProgressControl,The following statement contains a magic number: m_SpokesCount = 12;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,MatrixCircularProgressControl,The following statement contains a magic number: m_AlphaLowerLimit = 15;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The following statement contains a magic number: m_AngleIncrement = (360 / (float)m_SpokesCount);  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The following statement contains a magic number: m_AlphaChange = (int)((255 - m_AlphaLowerLimit) / m_SpokesCount);  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The following statement contains a magic number: m_CentrePt = new PointF (this.Width / 2' this.Height / 2);  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The following statement contains a magic number: m_CentrePt = new PointF (this.Width / 2' this.Height / 2);  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,CalculateSpokesPoints,The following statement contains a magic number: m_Pen.Width = (int)(width / 15);  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.CLOCKWISE) {  	m_StartAngle += m_AngleIncrement;  	if (m_StartAngle >= 360)  		m_StartAngle = 0;  }  else if (Rotation == Direction.ANTICLOCKWISE) {  	m_StartAngle -= m_AngleIncrement;  	if (m_StartAngle <= -360)  		m_StartAngle = 0;  }  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.CLOCKWISE) {  	m_StartAngle += m_AngleIncrement;  	if (m_StartAngle >= 360)  		m_StartAngle = 0;  }  else if (Rotation == Direction.ANTICLOCKWISE) {  	m_StartAngle -= m_AngleIncrement;  	if (m_StartAngle <= -360)  		m_StartAngle = 0;  }  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnTimerElapsed,The following statement contains a magic number: if (m_StartAngle >= 360)  	m_StartAngle = 0;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnTimerElapsed,The following statement contains a magic number: if (Rotation == Direction.ANTICLOCKWISE) {  	m_StartAngle -= m_AngleIncrement;  	if (m_StartAngle <= -360)  		m_StartAngle = 0;  }  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnTimerElapsed,The following statement contains a magic number: if (m_StartAngle <= -360)  	m_StartAngle = 0;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnPaint,The following statement contains a magic number: for (int i = 0; i < m_SpokesCount; i++) {  	m_Pen.Color = Color.FromArgb (alpha' this.TickColor);  	e.Graphics.DrawLine (m_Pen' m_Spokes [i].StartPoint' m_Spokes [i].EndPoint);  	alpha -= m_AlphaChange;  	if (alpha < m_AlphaLowerLimit)  		alpha = 255 - m_AlphaChange;  }  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnPaint,The following statement contains a magic number: if (alpha < m_AlphaLowerLimit)  	alpha = 255 - m_AlphaChange;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,OnPaint,The following statement contains a magic number: alpha = 255 - m_AlphaChange;  
Magic Number,GPS_Analysis,MatrixCircularProgressControl,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\MatrixCircularProgressControl.cs,ConvertDegreesToRadians,The following statement contains a magic number: return ((Math.PI / (double)180) * degrees);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [3] != "" & Words [4] != "" & Words [5] != "" & Words [6] != "") {  	// Yes. Extract latitude and longitude  	// Append hours  	Latitude = Words [3].Substring (0' 2) + "��";  	// Append minutes  	Latitude = Latitude + Words [3].Substring (2) + "\"";  	// Append hours  	Latitude = Latitude + Words [4];  	// Append the hemisphere  	Longitude = Words [5].Substring (0' 3) + "��";  	// Append minutes  	Longitude = Longitude + Words [5].Substring (3) + "\"";  	// Append the hemisphere  	Longitude = Longitude + Words [6];  	// Notify the calling application of the change  	if (PositionReceived != null && this.bStop == false)  		PositionReceived (Latitude' Longitude);  	strParsed = strParsed + Latitude + " Longitude: " + Longitude;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Latitude = Words [3].Substring (0' 2) + "��";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Latitude = Words [3].Substring (0' 2) + "��";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Latitude = Latitude + Words [3].Substring (2) + "\"";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Latitude = Latitude + Words [3].Substring (2) + "\"";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Latitude = Latitude + Words [4];  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Longitude = Words [5].Substring (0' 3) + "��";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Longitude = Words [5].Substring (0' 3) + "��";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Longitude = Longitude + Words [5].Substring (3) + "\"";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Longitude = Longitude + Words [5].Substring (3) + "\"";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Longitude = Longitude + Words [6];  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1] != "") {  	// Yes. Extract hours' minutes' seconds and milliseconds  	int UtcHours = Convert.ToInt32 (Words [1].Substring (0' 2));  	int UtcMinutes = Convert.ToInt32 (Words [1].Substring (2' 2));  	int UtcSeconds = Convert.ToInt32 (Words [1].Substring (4' 2));  	int UtcMilliseconds = 0;  	// Extract milliseconds if it is available  	if (Words [1].Length > 7) {  		UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  	}  	// Now build a DateTime object with all values  	System.DateTime Today = System.DateTime.Now.ToUniversalTime ();  	System.DateTime SatelliteTime = new System.DateTime (Today.Year' Today.Month' Today.Day' UtcHours' UtcMinutes' UtcSeconds' UtcMilliseconds);  	// Notify of the new time' adjusted to the local time zone  	if (DateTimeChanged != null && this.bStop == false)  		DateTimeChanged (SatelliteTime.ToLocalTime ());  	strParsed = strParsed + " Time: " + SatelliteTime.ToLocalTime ().ToShortTimeString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1].Length > 7) {  	UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [1].Length > 7) {  	UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: UtcMilliseconds = Convert.ToInt32 (Words [1].Substring (7));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [7] != "") {  	// Yes.  Parse the speed and convert it to MPH  	Speed = double.Parse (Words [7]' NmeaCultureInfo) * MPHPerKnot;  	// Notify of the new speed  	if (SpeedReceived != null && this.bStop == false)  		SpeedReceived (Speed);  	// Are we over the highway speed limit?  	if (Speed > 55)  		if (SpeedLimitReached != null && this.bStop == false)  			SpeedLimitReached ();  	strParsed = strParsed + " Speed: " + Speed;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [7] != "") {  	// Yes.  Parse the speed and convert it to MPH  	Speed = double.Parse (Words [7]' NmeaCultureInfo) * MPHPerKnot;  	// Notify of the new speed  	if (SpeedReceived != null && this.bStop == false)  		SpeedReceived (Speed);  	// Are we over the highway speed limit?  	if (Speed > 55)  		if (SpeedLimitReached != null && this.bStop == false)  			SpeedLimitReached ();  	strParsed = strParsed + " Speed: " + Speed;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [7] != "") {  	// Yes.  Parse the speed and convert it to MPH  	Speed = double.Parse (Words [7]' NmeaCultureInfo) * MPHPerKnot;  	// Notify of the new speed  	if (SpeedReceived != null && this.bStop == false)  		SpeedReceived (Speed);  	// Are we over the highway speed limit?  	if (Speed > 55)  		if (SpeedLimitReached != null && this.bStop == false)  			SpeedLimitReached ();  	strParsed = strParsed + " Speed: " + Speed;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Speed = double.Parse (Words [7]' NmeaCultureInfo) * MPHPerKnot;  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Speed > 55)  	if (SpeedLimitReached != null && this.bStop == false)  		SpeedLimitReached ();  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [8] != "") {  	// Indicate that the sentence was recognized  	Bearing = double.Parse (Words [8]' NmeaCultureInfo);  	if (BearingReceived != null && this.bStop == false)  		BearingReceived (Bearing);  	strParsed = strParsed + " Bearing: " + Bearing.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [8] != "") {  	// Indicate that the sentence was recognized  	Bearing = double.Parse (Words [8]' NmeaCultureInfo);  	if (BearingReceived != null && this.bStop == false)  		BearingReceived (Bearing);  	strParsed = strParsed + " Bearing: " + Bearing.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: Bearing = double.Parse (Words [8]' NmeaCultureInfo);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [2] != "") {  	switch (Words [2]) {  	case "A":  		strParsed = strParsed + " Fixed: True";  		if (FixObtained != null && this.bStop == false)  			FixObtained ();  		break;  	case "V":  		strParsed = strParsed + " Fixed: False";  		if (FixLost != null && this.bStop == false)  			FixLost ();  		break;  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: if (Words [2] != "") {  	switch (Words [2]) {  	case "A":  		strParsed = strParsed + " Fixed: True";  		if (FixObtained != null && this.bStop == false)  			FixObtained ();  		break;  	case "V":  		strParsed = strParsed + " Fixed: False";  		if (FixLost != null && this.bStop == false)  			FixLost ();  		break;  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following statement contains a magic number: switch (Words [2]) {  case "A":  	strParsed = strParsed + " Fixed: True";  	if (FixObtained != null && this.bStop == false)  		FixObtained ();  	break;  case "V":  	strParsed = strParsed + " Fixed: False";  	if (FixLost != null && this.bStop == false)  		FixLost ();  	break;  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: for (Count = 1; Count <= 4; Count++) {  	// Do we have enough values to parse satellitesIinView?  	if (Words [3] != "") {  		if (SatellitesInViewReceived != null && this.bStop == false)  			SatellitesInViewReceived (int.Parse (Words [3]));  		strParsed = Words [3] + "Satellites In View ";  	}  	// Does the sentence have enough words to analyze?  	if ((Words.Length - 1) >= (Count * 4 + 3)) {  		// Yes.  Proceed with analyzing the block.   		// Does it contain any information?  		if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  			// Yes. Extract satellite information and report it  			PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  			Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  			Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  			SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  			// Notify of this satellite's information  			if (SatelliteReceived != null && this.bStop == false)  				SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  			strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  		}  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [3] != "") {  	if (SatellitesInViewReceived != null && this.bStop == false)  		SatellitesInViewReceived (int.Parse (Words [3]));  	strParsed = Words [3] + "Satellites In View ";  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [3] != "") {  	if (SatellitesInViewReceived != null && this.bStop == false)  		SatellitesInViewReceived (int.Parse (Words [3]));  	strParsed = Words [3] + "Satellites In View ";  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [3] != "") {  	if (SatellitesInViewReceived != null && this.bStop == false)  		SatellitesInViewReceived (int.Parse (Words [3]));  	strParsed = Words [3] + "Satellites In View ";  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (SatellitesInViewReceived != null && this.bStop == false)  	SatellitesInViewReceived (int.Parse (Words [3]));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: SatellitesInViewReceived (int.Parse (Words [3]));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: strParsed = Words [3] + "Satellites In View ";  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if ((Words.Length - 1) >= (Count * 4 + 3)) {  	// Yes.  Proceed with analyzing the block.   	// Does it contain any information?  	if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  		// Yes. Extract satellite information and report it  		PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  		Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  		Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  		SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  		// Notify of this satellite's information  		if (SatelliteReceived != null && this.bStop == false)  			SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  		strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  	}  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: if (Words [Count * 4] != "" & Words [Count * 4 + 1] != "" & Words [Count * 4 + 2] != "" & Words [Count * 4 + 3] != "") {  	// Yes. Extract satellite information and report it  	PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  	Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  	Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  	SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  	// Notify of this satellite's information  	if (SatelliteReceived != null && this.bStop == false)  		SatelliteReceived (PseudoRandomCode' Azimuth' Elevation' SignalToNoiseRatio);  	strParsed = strParsed + "PseudoRandomCode: " + PseudoRandomCode.ToString () + " Azimuth: " + Azimuth.ToString () + " Elevation: " + Elevation + " NoiseRatio: " + SignalToNoiseRatio.ToString ();  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: PseudoRandomCode = System.Convert.ToInt32 (Words [Count * 4]);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: Elevation = Convert.ToInt32 (Words [Count * 4 + 1]);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: Azimuth = Convert.ToInt32 (Words [Count * 4 + 2]);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSV,The following statement contains a magic number: SignalToNoiseRatio = Convert.ToInt32 (Words [Count * 4 + 3]);  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (Words [15] != "") {  	if (PDOPReceived != null && this.bStop == false)  		PDOPReceived (double.Parse (Words [15]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (Words [15] != "") {  	if (PDOPReceived != null && this.bStop == false)  		PDOPReceived (double.Parse (Words [15]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (PDOPReceived != null && this.bStop == false)  	PDOPReceived (double.Parse (Words [15]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: PDOPReceived (double.Parse (Words [15]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (Words [16] != "") {  	if (HDOPReceived != null && this.bStop == false)  		HDOPReceived (double.Parse (Words [16]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (Words [16] != "") {  	if (HDOPReceived != null && this.bStop == false)  		HDOPReceived (double.Parse (Words [16]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (HDOPReceived != null && this.bStop == false)  	HDOPReceived (double.Parse (Words [16]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: HDOPReceived (double.Parse (Words [16]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (Words [17] != "") {  	if (VDOPReceived != null && this.bStop == false)  		VDOPReceived (double.Parse (Words [17]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (Words [17] != "") {  	if (VDOPReceived != null && this.bStop == false)  		VDOPReceived (double.Parse (Words [17]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: if (VDOPReceived != null && this.bStop == false)  	VDOPReceived (double.Parse (Words [17]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGSA,The following statement contains a magic number: VDOPReceived (double.Parse (Words [17]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (Words [7] != "") {  	if (SatellitesUsed != null && this.bStop == false)  		SatellitesUsed (int.Parse (Words [7]));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (Words [7] != "") {  	if (SatellitesUsed != null && this.bStop == false)  		SatellitesUsed (int.Parse (Words [7]));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (SatellitesUsed != null && this.bStop == false)  	SatellitesUsed (int.Parse (Words [7]));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: SatellitesUsed (int.Parse (Words [7]));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (Words [8] != "") {  	if (HDOPReceived != null && this.bStop == false)  		HDOPReceived (double.Parse (Words [8]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (Words [8] != "") {  	if (HDOPReceived != null && this.bStop == false)  		HDOPReceived (double.Parse (Words [8]' NmeaCultureInfo));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (HDOPReceived != null && this.bStop == false)  	HDOPReceived (double.Parse (Words [8]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: HDOPReceived (double.Parse (Words [8]' NmeaCultureInfo));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (Words [9] != "") {  	if (EllipsoidHeightReceived != null && this.bStop == false)  		EllipsoidHeightReceived (double.Parse (Words [9]));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (Words [9] != "") {  	if (EllipsoidHeightReceived != null && this.bStop == false)  		EllipsoidHeightReceived (double.Parse (Words [9]));  }  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: if (EllipsoidHeightReceived != null && this.bStop == false)  	EllipsoidHeightReceived (double.Parse (Words [9]));  
Magic Number,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPGGA,The following statement contains a magic number: EllipsoidHeightReceived (double.Parse (Words [9]));  
Missing Default,GPS_Analysis,NmeaInterpreter,C:\repos\ssor_logisBaseTrainingDemos\GPS_Analysis\GPS_Analysis\NmeaInterpreter.cs,ParseGPRMC,The following switch statement is missing a default case: switch (Words [2]) {  case "A":  	strParsed = strParsed + " Fixed: True";  	if (FixObtained != null && this.bStop == false)  		FixObtained ();  	break;  case "V":  	strParsed = strParsed + " Fixed: False";  	if (FixLost != null && this.bStop == false)  		FixLost ();  	break;  }  
