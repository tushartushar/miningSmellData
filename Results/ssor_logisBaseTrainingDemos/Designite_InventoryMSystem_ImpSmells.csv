Implementation smell,Namespace,Class,File,Method,Description
Long Method,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The method has 261 lines of code.
Complex Method,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,Cyclomatic complexity of the method is 38
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventoryResult.cs,tabControl1_TabIndexChanged,Cyclomatic complexity of the method is 9
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventoryResult.cs,refreshInventoryMore,Cyclomatic complexity of the method is 8
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventoryResult.cs,refreshInventoryLess,Cyclomatic complexity of the method is 8
Complex Method,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventoryResult.cs,refreshInventoryEqual,Cyclomatic complexity of the method is 8
Complex Method,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,Cyclomatic complexity of the method is 86
Complex Method,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuReadDataCommandComposer,Cyclomatic complexity of the method is 11
Complex Method,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,Cyclomatic complexity of the method is 11
Complex Method,InventoryMSystem,rfidOperateUnitBase,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\rfidOperate\rfidOperateUnitBase.cs,_RFIDHelper_evtCardState,Cyclomatic complexity of the method is 8
Complex Method,InventoryMSystem,rfidOperateUnitBase,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\rfidOperate\rfidOperateUnitBase.cs,clearException,Cyclomatic complexity of the method is 15
Complex Method,InventoryMSystem,frmSerialPortConfig,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmSerialPortConfig.cs,LoadConfig,Cyclomatic complexity of the method is 8
Long Parameter List,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuReadDataCommandComposer,The method has 6 parameters.
Long Parameter List,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The method has 6 parameters.
Long Parameter List,InventoryMSystem,StaticSerialPort,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\StaticSerialPort.cs,resetStaticSerialPort,The method has 5 parameters.
Long Parameter List,Inventory,Product,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\system_class\Product.cs,Product,The method has 5 parameters.
Long Parameter List,Config,serialPortConfig,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\serialPortConfig.cs,serialPortConfig,The method has 6 parameters.
Long Statement,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The length of the statement  "				Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 135.
Long Statement,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The length of the statement  "				List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null); " is 142.
Long Statement,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The length of the statement  "				List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null); " is 151.
Long Statement,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventory.cs,LinkEPCToProduct,The length of the statement  "		Product p1 = new Product (epc' string.Empty' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Empty' string.Empty); " is 120.
Long Statement,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmNewOrder.cs,helper_RequestCompleted_addOrder,The length of the statement  "			Debug.WriteLine (string.Format ("frmNewOrder.helper_RequestCompleted_addOrder  ->  = {0}  {1}"' u2.productName' u2.quantity)); " is 126.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,helper_RequestCompleted_disposeProductNameList,The length of the statement  "	Debug.WriteLine (string.Format ("frmProductManage.helper_RequestCompleted_disposeProductNameList  -> response = {0}"' strProduct)); " is 131.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,helper_RequestCompleted_disposeList,The length of the statement  "		Debug.WriteLine (string.Format ("frmProductManage.helper_RequestCompleted_disposeList  -> response = {0}"' strProduct)); " is 120.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,btnSave_Click,The length of the statement  "	Product newPro = new Product (this.txtPID.Text' this.cmbName.Text' this.dateTimePicker1.Value.ToString ("yyyy-MM-dd HH:mm:ss")' this.cmbFactory.Text' this.txtComment.Text); " is 172.
Long Statement,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,btnDelete_Click,The length of the statement  "	Product newPro = new Product (this.txtPID.Text' this.cmbName.Text' this.dateTimePicker1.Value.ToString ("yyyy-MM-dd HH:mm:ss")' this.cmbFactory.Text' this.txtComment.Text); " is 172.
Long Statement,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_addProductToStorage,The length of the statement  "	Debug.WriteLine (string.Format ("frmStorageManage.helper_RequestCompleted_addProductToStorage  ->  = {0}"' strProducts)); " is 121.
Long Statement,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,LinkEPCToProduct,The length of the statement  "	Product p1 = new Product (epc' string.Empty' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Empty' string.Empty); " is 120.
Long Statement,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,btnStartCheck_Click,The length of the statement  "			Product p1 = new Product (productID' string.Empty' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' string.Empty' string.Empty); " is 126.
Long Statement,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_deleteProductToStorage,The length of the statement  "	Debug.WriteLine (string.Format ("frmTakeOutInventory.helper_RequestCompleted_deleteProductToStorage  ->  = {0}"' strProducts)); " is 127.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,SendCommand,The length of the statement  "	Debug.WriteLine (string.Format ("SendCommand -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 131.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,SendCommand,The length of the statement  "	Debug.WriteLine (string.Format ("SendCommand -> {0} {1} type = {2} value = {3}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' type.ToString ()' GetEventStatusValue (type).ToString ())); " is 212.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "		Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ()))); " is 175.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 140.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 137.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "				Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 131.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "						Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 145.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 153.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 137.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 134.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ())); " is 167.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "					Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ())); " is 146.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "						Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 153.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The length of the statement  "						Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT)); " is 147.
Long Statement,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuReadDataCommandComposer,The length of the statement  "		commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55"; " is 155.
Long Statement,InventoryMSystem,operateActionInventoryWriteEpc,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\rfidOperate\operateAction.cs,setEPC,The length of the statement  "	this.nextCommand = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' null' 1' 2' this.epc' null); " is 123.
Long Statement,InventoryMSystem,frmSerialPortConfig,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmSerialPortConfig.cs,btnSaveConfig_Click,The length of the statement  "	serialPortConfig config = new serialPortConfig ("default"' cmbPortName.Text' cmbBaudRate.Text' cmbParity.Text' cmbDataBits.Text' cmbStopBits.Text); " is 147.
Long Statement,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManageAdd.cs,helper_RequestCompleted_disposeProductNameList,The length of the statement  "	Debug.WriteLine (string.Format ("frmProductManageAdd.helper_RequestCompleted_disposeProductNameList  -> response = {0}"' strProduct)); " is 134.
Long Statement,InventoryMSystem,frmProductManageAdd,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManageAdd.cs,btnAdd_Click,The length of the statement  "	Product newPro = new Product (this.txtPID.Text' this.cmbName.Text' this.dateTimePicker1.Value.ToString ("yyyy-MM-dd HH:mm:ss")' this.cmbFactory.Text' this.txtComment.Text); " is 172.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\HttpDownloader.cs,TryRequest,The length of the statement  "		IAsyncResult result = (IAsyncResult)myHttpWebRequest.BeginGetResponse (new AsyncCallback (RespCallback)' myRequestState); " is 121.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\HttpDownloader.cs,RespCallback,The length of the statement  "		IAsyncResult asynchronousInputRead = responseStream.BeginRead (myRequestState.BufferRead' 0' BUFFER_SIZE' new AsyncCallback (ReadCallBack)' myRequestState); " is 156.
Long Statement,httpHelper,HttpWebConnect,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\HttpDownloader.cs,ReadCallBack,The length of the statement  "			IAsyncResult asynchronousResult = responseStream.BeginRead (myRequestState.BufferRead' 0' BUFFER_SIZE' new AsyncCallback (ReadCallBack)' myRequestState); " is 153.
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,textBox1_TextChanged,The following statement contains a magic number: if (txtContent.Length >= 0 && txtContent.Length < 24) {  	Value = "当前EPC长度为 " + txtContent.Length.ToString () + "'长度不符合要求";  	goto SetTipValue;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,textBox1_TextChanged,The following statement contains a magic number: if (txtContent.Length > 24) {  	Value = "当前EPC长度为 " + txtContent.Length.ToString () + "'长度不符合要求";  	goto SetTipValue;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,textBox1_TextChanged,The following statement contains a magic number: if (txtContent.Length == 24) {  	//Value = "当前EPC长度为 " + txtContent.Length.ToString();  	if (!Regex.IsMatch (txtContent' "[0-9a-fA-F]{24}")) {  		Value = "EPC中含有不符合要求的符号";  		goto SetTipValue;  	}  	//if (this.ctl.CheckEpcExist(txtContent))  	//{  	//    Value = "当前EPC已经使用过，请重新制定";  	//    goto SetTipValue;  	//}  	Value = "当前EPC符合要求";  	lblTip.ForeColor = Color.Black;  	this.button1.Enabled = true;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (null != o) {  	}  	value = "设备尚未准备就绪！";  	//MessageBox.Show("设备尚未准备就绪！");  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_CardIsReady:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_InventoryAnti3' RFIDEventType.RMU_InventoryAnti);  	break;  case (int)RFIDEventType.RMU_InventoryAnti:  	if (o != null && (string)o != "ok") {  		value = RFIDHelper.GetEPCFormUII ((string)o);  		_RFIDHelper.StopCallback ();  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	}  	if (this.textBox1.InvokeRequired) {  		this.textBox1.Invoke (new deleUpdateContorl (UpdateEPCtxtBox)' value);  	}  	else {  		UpdateEPCtxtBox (value);  	}  	break;  case (int)RFIDEventType.RMU_SingleWriteData:  	if (nSingleWriteDataState == 0) {  		if (o == null) {  			//MessageBox.Show("更改标签EPC失败");  			value = "更改标签EPC失败";  		}  		else {  			value = "更改标签EPC成功";  			//MessageBox.Show("更改标签EPC成功");  		}  	}  	if (nSingleWriteDataState == 1) {  		if (o == null) {  			value = "标签锁定失败";  			//MessageBox.Show("标签锁定失败");  		}  		else {  			value = "标签( " + (string)o + " )锁定成功 ";  			//MessageBox.Show(value);  		}  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_Inventory:  	if (null == o) {  		value = "正在检测周围标签...";  	}  	else {  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		tagUII = (string)o;  		value = "检测到标签：" + tagUII;  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_StopGet:  	_RFIDHelper.RmuLockTagReserverdEpcTid ("00000000"' tagUII);  	break;  case (int)RFIDEventType.RMU_LockMem:  	{  		if (null == o) {  			value = "标签锁定失败 ";  			//MessageBox.Show("标签锁定失败 ");  		}  		else if ((string)o == "ok")//写入密码  		 {  			value = "写入密码...";  			Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			string _initialPwd = RFIDHelper.PwdCheck (null);  			List<string> commands = new List<string> ();  			string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  			string pwdTH4 = strPwdT.Substring (0' 4);  			//前四位   			string pwdTT4 = strPwdT.Substring (4' 4);  			//后四位   			List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  			List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  			commands.AddRange (commandSetSecret1);  			commands.AddRange (commandSetSecret2);  			this.nSingleWriteDataState = 1;  			_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  		}  	}  	UpdateStatus (value);  	break;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (null != o) {  	}  	value = "设备尚未准备就绪！";  	//MessageBox.Show("设备尚未准备就绪！");  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_CardIsReady:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_InventoryAnti3' RFIDEventType.RMU_InventoryAnti);  	break;  case (int)RFIDEventType.RMU_InventoryAnti:  	if (o != null && (string)o != "ok") {  		value = RFIDHelper.GetEPCFormUII ((string)o);  		_RFIDHelper.StopCallback ();  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	}  	if (this.textBox1.InvokeRequired) {  		this.textBox1.Invoke (new deleUpdateContorl (UpdateEPCtxtBox)' value);  	}  	else {  		UpdateEPCtxtBox (value);  	}  	break;  case (int)RFIDEventType.RMU_SingleWriteData:  	if (nSingleWriteDataState == 0) {  		if (o == null) {  			//MessageBox.Show("更改标签EPC失败");  			value = "更改标签EPC失败";  		}  		else {  			value = "更改标签EPC成功";  			//MessageBox.Show("更改标签EPC成功");  		}  	}  	if (nSingleWriteDataState == 1) {  		if (o == null) {  			value = "标签锁定失败";  			//MessageBox.Show("标签锁定失败");  		}  		else {  			value = "标签( " + (string)o + " )锁定成功 ";  			//MessageBox.Show(value);  		}  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_Inventory:  	if (null == o) {  		value = "正在检测周围标签...";  	}  	else {  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		tagUII = (string)o;  		value = "检测到标签：" + tagUII;  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_StopGet:  	_RFIDHelper.RmuLockTagReserverdEpcTid ("00000000"' tagUII);  	break;  case (int)RFIDEventType.RMU_LockMem:  	{  		if (null == o) {  			value = "标签锁定失败 ";  			//MessageBox.Show("标签锁定失败 ");  		}  		else if ((string)o == "ok")//写入密码  		 {  			value = "写入密码...";  			Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			string _initialPwd = RFIDHelper.PwdCheck (null);  			List<string> commands = new List<string> ();  			string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  			string pwdTH4 = strPwdT.Substring (0' 4);  			//前四位   			string pwdTT4 = strPwdT.Substring (4' 4);  			//后四位   			List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  			List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  			commands.AddRange (commandSetSecret1);  			commands.AddRange (commandSetSecret2);  			this.nSingleWriteDataState = 1;  			_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  		}  	}  	UpdateStatus (value);  	break;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (null != o) {  	}  	value = "设备尚未准备就绪！";  	//MessageBox.Show("设备尚未准备就绪！");  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_CardIsReady:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_InventoryAnti3' RFIDEventType.RMU_InventoryAnti);  	break;  case (int)RFIDEventType.RMU_InventoryAnti:  	if (o != null && (string)o != "ok") {  		value = RFIDHelper.GetEPCFormUII ((string)o);  		_RFIDHelper.StopCallback ();  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	}  	if (this.textBox1.InvokeRequired) {  		this.textBox1.Invoke (new deleUpdateContorl (UpdateEPCtxtBox)' value);  	}  	else {  		UpdateEPCtxtBox (value);  	}  	break;  case (int)RFIDEventType.RMU_SingleWriteData:  	if (nSingleWriteDataState == 0) {  		if (o == null) {  			//MessageBox.Show("更改标签EPC失败");  			value = "更改标签EPC失败";  		}  		else {  			value = "更改标签EPC成功";  			//MessageBox.Show("更改标签EPC成功");  		}  	}  	if (nSingleWriteDataState == 1) {  		if (o == null) {  			value = "标签锁定失败";  			//MessageBox.Show("标签锁定失败");  		}  		else {  			value = "标签( " + (string)o + " )锁定成功 ";  			//MessageBox.Show(value);  		}  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_Inventory:  	if (null == o) {  		value = "正在检测周围标签...";  	}  	else {  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		tagUII = (string)o;  		value = "检测到标签：" + tagUII;  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_StopGet:  	_RFIDHelper.RmuLockTagReserverdEpcTid ("00000000"' tagUII);  	break;  case (int)RFIDEventType.RMU_LockMem:  	{  		if (null == o) {  			value = "标签锁定失败 ";  			//MessageBox.Show("标签锁定失败 ");  		}  		else if ((string)o == "ok")//写入密码  		 {  			value = "写入密码...";  			Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			string _initialPwd = RFIDHelper.PwdCheck (null);  			List<string> commands = new List<string> ();  			string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  			string pwdTH4 = strPwdT.Substring (0' 4);  			//前四位   			string pwdTT4 = strPwdT.Substring (4' 4);  			//后四位   			List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  			List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  			commands.AddRange (commandSetSecret1);  			commands.AddRange (commandSetSecret2);  			this.nSingleWriteDataState = 1;  			_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  		}  	}  	UpdateStatus (value);  	break;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (null != o) {  	}  	value = "设备尚未准备就绪！";  	//MessageBox.Show("设备尚未准备就绪！");  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_CardIsReady:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_InventoryAnti3' RFIDEventType.RMU_InventoryAnti);  	break;  case (int)RFIDEventType.RMU_InventoryAnti:  	if (o != null && (string)o != "ok") {  		value = RFIDHelper.GetEPCFormUII ((string)o);  		_RFIDHelper.StopCallback ();  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	}  	if (this.textBox1.InvokeRequired) {  		this.textBox1.Invoke (new deleUpdateContorl (UpdateEPCtxtBox)' value);  	}  	else {  		UpdateEPCtxtBox (value);  	}  	break;  case (int)RFIDEventType.RMU_SingleWriteData:  	if (nSingleWriteDataState == 0) {  		if (o == null) {  			//MessageBox.Show("更改标签EPC失败");  			value = "更改标签EPC失败";  		}  		else {  			value = "更改标签EPC成功";  			//MessageBox.Show("更改标签EPC成功");  		}  	}  	if (nSingleWriteDataState == 1) {  		if (o == null) {  			value = "标签锁定失败";  			//MessageBox.Show("标签锁定失败");  		}  		else {  			value = "标签( " + (string)o + " )锁定成功 ";  			//MessageBox.Show(value);  		}  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_Inventory:  	if (null == o) {  		value = "正在检测周围标签...";  	}  	else {  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		tagUII = (string)o;  		value = "检测到标签：" + tagUII;  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_StopGet:  	_RFIDHelper.RmuLockTagReserverdEpcTid ("00000000"' tagUII);  	break;  case (int)RFIDEventType.RMU_LockMem:  	{  		if (null == o) {  			value = "标签锁定失败 ";  			//MessageBox.Show("标签锁定失败 ");  		}  		else if ((string)o == "ok")//写入密码  		 {  			value = "写入密码...";  			Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			string _initialPwd = RFIDHelper.PwdCheck (null);  			List<string> commands = new List<string> ();  			string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  			string pwdTH4 = strPwdT.Substring (0' 4);  			//前四位   			string pwdTT4 = strPwdT.Substring (4' 4);  			//后四位   			List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  			List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  			commands.AddRange (commandSetSecret1);  			commands.AddRange (commandSetSecret2);  			this.nSingleWriteDataState = 1;  			_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  		}  	}  	UpdateStatus (value);  	break;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (null != o) {  	}  	value = "设备尚未准备就绪！";  	//MessageBox.Show("设备尚未准备就绪！");  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_CardIsReady:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_InventoryAnti3' RFIDEventType.RMU_InventoryAnti);  	break;  case (int)RFIDEventType.RMU_InventoryAnti:  	if (o != null && (string)o != "ok") {  		value = RFIDHelper.GetEPCFormUII ((string)o);  		_RFIDHelper.StopCallback ();  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	}  	if (this.textBox1.InvokeRequired) {  		this.textBox1.Invoke (new deleUpdateContorl (UpdateEPCtxtBox)' value);  	}  	else {  		UpdateEPCtxtBox (value);  	}  	break;  case (int)RFIDEventType.RMU_SingleWriteData:  	if (nSingleWriteDataState == 0) {  		if (o == null) {  			//MessageBox.Show("更改标签EPC失败");  			value = "更改标签EPC失败";  		}  		else {  			value = "更改标签EPC成功";  			//MessageBox.Show("更改标签EPC成功");  		}  	}  	if (nSingleWriteDataState == 1) {  		if (o == null) {  			value = "标签锁定失败";  			//MessageBox.Show("标签锁定失败");  		}  		else {  			value = "标签( " + (string)o + " )锁定成功 ";  			//MessageBox.Show(value);  		}  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_Inventory:  	if (null == o) {  		value = "正在检测周围标签...";  	}  	else {  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		tagUII = (string)o;  		value = "检测到标签：" + tagUII;  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_StopGet:  	_RFIDHelper.RmuLockTagReserverdEpcTid ("00000000"' tagUII);  	break;  case (int)RFIDEventType.RMU_LockMem:  	{  		if (null == o) {  			value = "标签锁定失败 ";  			//MessageBox.Show("标签锁定失败 ");  		}  		else if ((string)o == "ok")//写入密码  		 {  			value = "写入密码...";  			Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			string _initialPwd = RFIDHelper.PwdCheck (null);  			List<string> commands = new List<string> ();  			string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  			string pwdTH4 = strPwdT.Substring (0' 4);  			//前四位   			string pwdTT4 = strPwdT.Substring (4' 4);  			//后四位   			List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  			List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  			commands.AddRange (commandSetSecret1);  			commands.AddRange (commandSetSecret2);  			this.nSingleWriteDataState = 1;  			_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  		}  	}  	UpdateStatus (value);  	break;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if (null == o) {  	value = "标签锁定失败 ";  	//MessageBox.Show("标签锁定失败 ");  }  else if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if (null == o) {  	value = "标签锁定失败 ";  	//MessageBox.Show("标签锁定失败 ");  }  else if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if (null == o) {  	value = "标签锁定失败 ";  	//MessageBox.Show("标签锁定失败 ");  }  else if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if (null == o) {  	value = "标签锁定失败 ";  	//MessageBox.Show("标签锁定失败 ");  }  else if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if (null == o) {  	value = "标签锁定失败 ";  	//MessageBox.Show("标签锁定失败 ");  }  else if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following statement contains a magic number: if ((string)o == "ok")//写入密码   {  	value = "写入密码...";  	Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	string _initialPwd = RFIDHelper.PwdCheck (null);  	List<string> commands = new List<string> ();  	string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  	string pwdTH4 = strPwdT.Substring (0' 4);  	//前四位   	string pwdTT4 = strPwdT.Substring (4' 4);  	//后四位   	List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  	List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  	commands.AddRange (commandSetSecret1);  	commands.AddRange (commandSetSecret2);  	this.nSingleWriteDataState = 1;  	_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,button1_Click,The following statement contains a magic number: if (strID.Length < 0 || strID.Length > 24 || !Regex.IsMatch (strID' "[0-9a-fA-F]{24}")) {  	MessageBox.Show ("EPC长度应为24位，且不能包含除 a-f 和 A-F之外的字母！");  	return;  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,btnSaveSecret_Click,The following statement contains a magic number: if (null != this.txtSecret) {  	secret = this.txtSecret.Text;  	secret += "00000000";  	secret = secret.Substring (0' 8);  }  
Magic Number,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,btnSaveSecret_Click,The following statement contains a magic number: secret = secret.Substring (0' 8);  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventory.cs,frmInventory,The following statement contains a magic number: __timer.Interval = 1000;  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventory.cs,CreateCheckBoxColumn,The following statement contains a magic number: cbc.Width = 50;  
Magic Number,InventoryMSystem,frmInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventory.cs,helper_RequestCompleted_getProductInfoForInventoryList,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventoryResult.cs,tabControl1_TabIndexChanged,The following statement contains a magic number: switch (this.tabControl1.SelectedIndex) {  case 0:  	//盘盈  	this.refreshInventoryMore ();  	break;  case 1:  	this.refreshInventoryLess ();  	break;  case 2:  	this.refreshInventoryEqual ();  	break;  }  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmNewOrder.cs,helper_RequestCompleted_getAllOrders,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmNewOrder.cs,RefreshOrderInfo,The following statement contains a magic number: if (!this.dgvOrderInfo.Columns.Contains ("checkColumn")) {  	DataGridViewCheckBoxColumn cc = new DataGridViewCheckBoxColumn ();  	cc.HeaderText = "";  	cc.Name = "checkColumn";  	cc.Width = 50;  	dgvOrderInfo.Columns.Insert (0' cc);  }  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmNewOrder.cs,RefreshOrderInfo,The following statement contains a magic number: cc.Width = 50;  
Magic Number,InventoryMSystem,frmNewOrder,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmNewOrder.cs,RefreshOrderInfo,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: if (tb != null && tb.Rows.Count > 0) {  	txtPID.Text = tb.Rows [0] [0].ToString ();  	this.cmbName.Text = tb.Rows [0] [1].ToString ();  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  	this.txtComment.Text = tb.Rows [0] [4].ToString ();  }  else {  	txtPID.Text = null;  	cmbName.Text = null;  	this.dateTimePicker1.Value = DateTime.Now;  	cmbFactory.Text = null;  	txtComment.Text = null;  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: if (tb != null && tb.Rows.Count > 0) {  	txtPID.Text = tb.Rows [0] [0].ToString ();  	this.cmbName.Text = tb.Rows [0] [1].ToString ();  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  	this.txtComment.Text = tb.Rows [0] [4].ToString ();  }  else {  	txtPID.Text = null;  	cmbName.Text = null;  	this.dateTimePicker1.Value = DateTime.Now;  	cmbFactory.Text = null;  	txtComment.Text = null;  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: if (tb != null && tb.Rows.Count > 0) {  	txtPID.Text = tb.Rows [0] [0].ToString ();  	this.cmbName.Text = tb.Rows [0] [1].ToString ();  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  	this.txtComment.Text = tb.Rows [0] [4].ToString ();  }  else {  	txtPID.Text = null;  	cmbName.Text = null;  	this.dateTimePicker1.Value = DateTime.Now;  	cmbFactory.Text = null;  	txtComment.Text = null;  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: try {  	this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [0] [2].ToString ());  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: this.cmbFactory.Text = tb.Rows [0] [3].ToString ();  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,SetLabelContent,The following statement contains a magic number: this.txtComment.Text = tb.Rows [0] [4].ToString ();  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: if (e.RowIndex >= 0) {  	dataGridView1.Rows [e.RowIndex].Selected = true;  	txtPID.Text = tb.Rows [e.RowIndex] [0].ToString ();  	//this.cmbName.Text = tb.Rows[e.RowIndex][1].ToString();  	this.cmbName.SelectedIndex = this.cmbName.Items.IndexOf (tb.Rows [e.RowIndex] [1].ToString ());  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  	this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: if (e.RowIndex >= 0) {  	dataGridView1.Rows [e.RowIndex].Selected = true;  	txtPID.Text = tb.Rows [e.RowIndex] [0].ToString ();  	//this.cmbName.Text = tb.Rows[e.RowIndex][1].ToString();  	this.cmbName.SelectedIndex = this.cmbName.Items.IndexOf (tb.Rows [e.RowIndex] [1].ToString ());  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  	this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: if (e.RowIndex >= 0) {  	dataGridView1.Rows [e.RowIndex].Selected = true;  	txtPID.Text = tb.Rows [e.RowIndex] [0].ToString ();  	//this.cmbName.Text = tb.Rows[e.RowIndex][1].ToString();  	this.cmbName.SelectedIndex = this.cmbName.Items.IndexOf (tb.Rows [e.RowIndex] [1].ToString ());  	try {  		this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show (ex.Message);  	}  	this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  	this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: try {  	this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  }  catch (System.Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: this.dateTimePicker1.Value = DateTime.Parse (tb.Rows [e.RowIndex] [2].ToString ());  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: this.cmbFactory.Text = tb.Rows [e.RowIndex] [3].ToString ();  
Magic Number,InventoryMSystem,frmProductManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmProductManage.cs,dataGridView1_CellContentClick,The following statement contains a magic number: this.txtComment.Text = tb.Rows [e.RowIndex] [4].ToString ();  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,frmStorageManage,The following statement contains a magic number: __timer.Interval = 1000;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_getPreProListToStorage,The following statement contains a magic number: if (!this.dgvNotStoragedPInfo.Columns.Contains ("checkColumn")) {  	DataGridViewCheckBoxColumn cc = new DataGridViewCheckBoxColumn ();  	cc.HeaderText = "";  	cc.Name = "checkColumn";  	cc.Width = 50;  	dgvNotStoragedPInfo.Columns.Insert (0' cc);  }  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_getPreProListToStorage,The following statement contains a magic number: cc.Width = 50;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,helper_RequestCompleted_getPreProListToStorage,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,RefreshNotStoragedPInfo,The following statement contains a magic number: if (!this.dgvNotStoragedPInfo.Columns.Contains ("checkColumn")) {  	DataGridViewCheckBoxColumn cc = new DataGridViewCheckBoxColumn ();  	cc.HeaderText = "";  	cc.Name = "checkColumn";  	cc.Width = 50;  	dgvNotStoragedPInfo.Columns.Insert (0' cc);  }  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,RefreshNotStoragedPInfo,The following statement contains a magic number: cc.Width = 50;  
Magic Number,InventoryMSystem,frmStorageManage,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmStorageManage.cs,RefreshNotStoragedPInfo,The following statement contains a magic number: columns [0].Width = 50;  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (u2 != null && u2.state == "ok") {  	Debug.WriteLine (string.Format ("frmTakeOutInventory.helper_RequestCompleted_getProduct  ->  = {0}"' u2.toString ()));  	//将具体的产品信息添加到详细列表里面  	if (this.dgvDetailProductsInfo.DataSource != null) {  		DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  		//首先检查该产品是否已经扫描过  		bool alreadyAdded = false;  		foreach (DataRow dr in dt.Rows) {  			if (dr.ItemArray [0].ToString () == u2.productID) {  				alreadyAdded = true;  				break;  			}  		}  		//如果尚未扫描过  		if (!alreadyAdded) {  			//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  			bool bEnough = false;  			string productName = u2.productName;  			DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  			int quantityOrdered = -1;  			int quantityNow = -1;  			DataRow drOrderProduct = null;  			if (dtOrder != null && dtOrder.Rows.Count > 0) {  				foreach (DataRow dr in dtOrder.Rows) {  					if (dr [0].ToString () == productName) {  						drOrderProduct = dr;  						break;  					}  				}  				if (drOrderProduct != null) {  					try {  						quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  						quantityNow = int.Parse (drOrderProduct [2].ToString ());  					}  					catch (System.Exception ex) {  						MessageBox.Show ("程序异常：" + ex.Message);  						return;  					}  					if (quantityNow > -1 && quantityOrdered > -1) {  						if (quantityNow >= quantityOrdered) {  							bEnough = true;  						}  					}  					if (!bEnough) {  						if (null != drOrderProduct) {  							drOrderProduct [2] = (++quantityNow).ToString ();  						}  						dt.Rows.Add (new object[] {  							u2.productID'  							u2.productName'  							u2.produceDate'  							u2.productCategory'  							u2.descript  						});  						if (this.CheckAllOrderEnough ()) {  							this.btnStartCheck.Enabled = true;  						}  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (u2 != null && u2.state == "ok") {  	Debug.WriteLine (string.Format ("frmTakeOutInventory.helper_RequestCompleted_getProduct  ->  = {0}"' u2.toString ()));  	//将具体的产品信息添加到详细列表里面  	if (this.dgvDetailProductsInfo.DataSource != null) {  		DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  		//首先检查该产品是否已经扫描过  		bool alreadyAdded = false;  		foreach (DataRow dr in dt.Rows) {  			if (dr.ItemArray [0].ToString () == u2.productID) {  				alreadyAdded = true;  				break;  			}  		}  		//如果尚未扫描过  		if (!alreadyAdded) {  			//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  			bool bEnough = false;  			string productName = u2.productName;  			DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  			int quantityOrdered = -1;  			int quantityNow = -1;  			DataRow drOrderProduct = null;  			if (dtOrder != null && dtOrder.Rows.Count > 0) {  				foreach (DataRow dr in dtOrder.Rows) {  					if (dr [0].ToString () == productName) {  						drOrderProduct = dr;  						break;  					}  				}  				if (drOrderProduct != null) {  					try {  						quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  						quantityNow = int.Parse (drOrderProduct [2].ToString ());  					}  					catch (System.Exception ex) {  						MessageBox.Show ("程序异常：" + ex.Message);  						return;  					}  					if (quantityNow > -1 && quantityOrdered > -1) {  						if (quantityNow >= quantityOrdered) {  							bEnough = true;  						}  					}  					if (!bEnough) {  						if (null != drOrderProduct) {  							drOrderProduct [2] = (++quantityNow).ToString ();  						}  						dt.Rows.Add (new object[] {  							u2.productID'  							u2.productName'  							u2.produceDate'  							u2.productCategory'  							u2.descript  						});  						if (this.CheckAllOrderEnough ()) {  							this.btnStartCheck.Enabled = true;  						}  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (this.dgvDetailProductsInfo.DataSource != null) {  	DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  	//首先检查该产品是否已经扫描过  	bool alreadyAdded = false;  	foreach (DataRow dr in dt.Rows) {  		if (dr.ItemArray [0].ToString () == u2.productID) {  			alreadyAdded = true;  			break;  		}  	}  	//如果尚未扫描过  	if (!alreadyAdded) {  		//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  		bool bEnough = false;  		string productName = u2.productName;  		DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  		int quantityOrdered = -1;  		int quantityNow = -1;  		DataRow drOrderProduct = null;  		if (dtOrder != null && dtOrder.Rows.Count > 0) {  			foreach (DataRow dr in dtOrder.Rows) {  				if (dr [0].ToString () == productName) {  					drOrderProduct = dr;  					break;  				}  			}  			if (drOrderProduct != null) {  				try {  					quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  					quantityNow = int.Parse (drOrderProduct [2].ToString ());  				}  				catch (System.Exception ex) {  					MessageBox.Show ("程序异常：" + ex.Message);  					return;  				}  				if (quantityNow > -1 && quantityOrdered > -1) {  					if (quantityNow >= quantityOrdered) {  						bEnough = true;  					}  				}  				if (!bEnough) {  					if (null != drOrderProduct) {  						drOrderProduct [2] = (++quantityNow).ToString ();  					}  					dt.Rows.Add (new object[] {  						u2.productID'  						u2.productName'  						u2.produceDate'  						u2.productCategory'  						u2.descript  					});  					if (this.CheckAllOrderEnough ()) {  						this.btnStartCheck.Enabled = true;  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (this.dgvDetailProductsInfo.DataSource != null) {  	DataTable dt = (DataTable)this.dgvDetailProductsInfo.DataSource;  	//首先检查该产品是否已经扫描过  	bool alreadyAdded = false;  	foreach (DataRow dr in dt.Rows) {  		if (dr.ItemArray [0].ToString () == u2.productID) {  			alreadyAdded = true;  			break;  		}  	}  	//如果尚未扫描过  	if (!alreadyAdded) {  		//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  		bool bEnough = false;  		string productName = u2.productName;  		DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  		int quantityOrdered = -1;  		int quantityNow = -1;  		DataRow drOrderProduct = null;  		if (dtOrder != null && dtOrder.Rows.Count > 0) {  			foreach (DataRow dr in dtOrder.Rows) {  				if (dr [0].ToString () == productName) {  					drOrderProduct = dr;  					break;  				}  			}  			if (drOrderProduct != null) {  				try {  					quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  					quantityNow = int.Parse (drOrderProduct [2].ToString ());  				}  				catch (System.Exception ex) {  					MessageBox.Show ("程序异常：" + ex.Message);  					return;  				}  				if (quantityNow > -1 && quantityOrdered > -1) {  					if (quantityNow >= quantityOrdered) {  						bEnough = true;  					}  				}  				if (!bEnough) {  					if (null != drOrderProduct) {  						drOrderProduct [2] = (++quantityNow).ToString ();  					}  					dt.Rows.Add (new object[] {  						u2.productID'  						u2.productName'  						u2.produceDate'  						u2.productCategory'  						u2.descript  					});  					if (this.CheckAllOrderEnough ()) {  						this.btnStartCheck.Enabled = true;  					}  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (!alreadyAdded) {  	//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  	bool bEnough = false;  	string productName = u2.productName;  	DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  	int quantityOrdered = -1;  	int quantityNow = -1;  	DataRow drOrderProduct = null;  	if (dtOrder != null && dtOrder.Rows.Count > 0) {  		foreach (DataRow dr in dtOrder.Rows) {  			if (dr [0].ToString () == productName) {  				drOrderProduct = dr;  				break;  			}  		}  		if (drOrderProduct != null) {  			try {  				quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  				quantityNow = int.Parse (drOrderProduct [2].ToString ());  			}  			catch (System.Exception ex) {  				MessageBox.Show ("程序异常：" + ex.Message);  				return;  			}  			if (quantityNow > -1 && quantityOrdered > -1) {  				if (quantityNow >= quantityOrdered) {  					bEnough = true;  				}  			}  			if (!bEnough) {  				if (null != drOrderProduct) {  					drOrderProduct [2] = (++quantityNow).ToString ();  				}  				dt.Rows.Add (new object[] {  					u2.productID'  					u2.productName'  					u2.produceDate'  					u2.productCategory'  					u2.descript  				});  				if (this.CheckAllOrderEnough ()) {  					this.btnStartCheck.Enabled = true;  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (!alreadyAdded) {  	//检查该产品在出库单中是否已经足够，数量足够的话不需要再添加  	bool bEnough = false;  	string productName = u2.productName;  	DataTable dtOrder = (DataTable)this.dgvTakenOutP.DataSource;  	int quantityOrdered = -1;  	int quantityNow = -1;  	DataRow drOrderProduct = null;  	if (dtOrder != null && dtOrder.Rows.Count > 0) {  		foreach (DataRow dr in dtOrder.Rows) {  			if (dr [0].ToString () == productName) {  				drOrderProduct = dr;  				break;  			}  		}  		if (drOrderProduct != null) {  			try {  				quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  				quantityNow = int.Parse (drOrderProduct [2].ToString ());  			}  			catch (System.Exception ex) {  				MessageBox.Show ("程序异常：" + ex.Message);  				return;  			}  			if (quantityNow > -1 && quantityOrdered > -1) {  				if (quantityNow >= quantityOrdered) {  					bEnough = true;  				}  			}  			if (!bEnough) {  				if (null != drOrderProduct) {  					drOrderProduct [2] = (++quantityNow).ToString ();  				}  				dt.Rows.Add (new object[] {  					u2.productID'  					u2.productName'  					u2.produceDate'  					u2.productCategory'  					u2.descript  				});  				if (this.CheckAllOrderEnough ()) {  					this.btnStartCheck.Enabled = true;  				}  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (dtOrder != null && dtOrder.Rows.Count > 0) {  	foreach (DataRow dr in dtOrder.Rows) {  		if (dr [0].ToString () == productName) {  			drOrderProduct = dr;  			break;  		}  	}  	if (drOrderProduct != null) {  		try {  			quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  			quantityNow = int.Parse (drOrderProduct [2].ToString ());  		}  		catch (System.Exception ex) {  			MessageBox.Show ("程序异常：" + ex.Message);  			return;  		}  		if (quantityNow > -1 && quantityOrdered > -1) {  			if (quantityNow >= quantityOrdered) {  				bEnough = true;  			}  		}  		if (!bEnough) {  			if (null != drOrderProduct) {  				drOrderProduct [2] = (++quantityNow).ToString ();  			}  			dt.Rows.Add (new object[] {  				u2.productID'  				u2.productName'  				u2.produceDate'  				u2.productCategory'  				u2.descript  			});  			if (this.CheckAllOrderEnough ()) {  				this.btnStartCheck.Enabled = true;  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (dtOrder != null && dtOrder.Rows.Count > 0) {  	foreach (DataRow dr in dtOrder.Rows) {  		if (dr [0].ToString () == productName) {  			drOrderProduct = dr;  			break;  		}  	}  	if (drOrderProduct != null) {  		try {  			quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  			quantityNow = int.Parse (drOrderProduct [2].ToString ());  		}  		catch (System.Exception ex) {  			MessageBox.Show ("程序异常：" + ex.Message);  			return;  		}  		if (quantityNow > -1 && quantityOrdered > -1) {  			if (quantityNow >= quantityOrdered) {  				bEnough = true;  			}  		}  		if (!bEnough) {  			if (null != drOrderProduct) {  				drOrderProduct [2] = (++quantityNow).ToString ();  			}  			dt.Rows.Add (new object[] {  				u2.productID'  				u2.productName'  				u2.produceDate'  				u2.productCategory'  				u2.descript  			});  			if (this.CheckAllOrderEnough ()) {  				this.btnStartCheck.Enabled = true;  			}  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (drOrderProduct != null) {  	try {  		quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  		quantityNow = int.Parse (drOrderProduct [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show ("程序异常：" + ex.Message);  		return;  	}  	if (quantityNow > -1 && quantityOrdered > -1) {  		if (quantityNow >= quantityOrdered) {  			bEnough = true;  		}  	}  	if (!bEnough) {  		if (null != drOrderProduct) {  			drOrderProduct [2] = (++quantityNow).ToString ();  		}  		dt.Rows.Add (new object[] {  			u2.productID'  			u2.productName'  			u2.produceDate'  			u2.productCategory'  			u2.descript  		});  		if (this.CheckAllOrderEnough ()) {  			this.btnStartCheck.Enabled = true;  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (drOrderProduct != null) {  	try {  		quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  		quantityNow = int.Parse (drOrderProduct [2].ToString ());  	}  	catch (System.Exception ex) {  		MessageBox.Show ("程序异常：" + ex.Message);  		return;  	}  	if (quantityNow > -1 && quantityOrdered > -1) {  		if (quantityNow >= quantityOrdered) {  			bEnough = true;  		}  	}  	if (!bEnough) {  		if (null != drOrderProduct) {  			drOrderProduct [2] = (++quantityNow).ToString ();  		}  		dt.Rows.Add (new object[] {  			u2.productID'  			u2.productName'  			u2.produceDate'  			u2.productCategory'  			u2.descript  		});  		if (this.CheckAllOrderEnough ()) {  			this.btnStartCheck.Enabled = true;  		}  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: try {  	quantityOrdered = int.Parse (drOrderProduct [1].ToString ());  	quantityNow = int.Parse (drOrderProduct [2].ToString ());  }  catch (System.Exception ex) {  	MessageBox.Show ("程序异常：" + ex.Message);  	return;  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: quantityNow = int.Parse (drOrderProduct [2].ToString ());  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (!bEnough) {  	if (null != drOrderProduct) {  		drOrderProduct [2] = (++quantityNow).ToString ();  	}  	dt.Rows.Add (new object[] {  		u2.productID'  		u2.productName'  		u2.produceDate'  		u2.productCategory'  		u2.descript  	});  	if (this.CheckAllOrderEnough ()) {  		this.btnStartCheck.Enabled = true;  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: if (null != drOrderProduct) {  	drOrderProduct [2] = (++quantityNow).ToString ();  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,helper_RequestCompleted_getProduct,The following statement contains a magic number: drOrderProduct [2] = (++quantityNow).ToString ();  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,CheckAllOrderEnough,The following statement contains a magic number: foreach (DataRow dr in dt.Rows) {  	int quantityOrdered = -1;  	int quantityNow = -1;  	try {  		quantityNow = int.Parse (dr [2].ToString ());  		quantityOrdered = int.Parse (dr [1].ToString ());  		if (quantityOrdered > quantityNow) {  			bEnough = false;  			break;  		}  	}  	catch (System.Exception ex) {  		MessageBox.Show ("程序异常：" + ex.Message);  	}  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,CheckAllOrderEnough,The following statement contains a magic number: try {  	quantityNow = int.Parse (dr [2].ToString ());  	quantityOrdered = int.Parse (dr [1].ToString ());  	if (quantityOrdered > quantityNow) {  		bEnough = false;  		break;  	}  }  catch (System.Exception ex) {  	MessageBox.Show ("程序异常：" + ex.Message);  }  
Magic Number,InventoryMSystem,frmTakeOutInventory,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmTakeOutInventory.cs,CheckAllOrderEnough,The following statement contains a magic number: quantityNow = int.Parse (dr [2].ToString ());  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RFIDHelper,The following statement contains a magic number: for (int i = 1; i <= 17; i++) {  	dicCommandSuccess.Add (i' true);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,CheckRmuStatus,The following statement contains a magic number: RMUStatus.WaitOne (300' false);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,SendCommand,The following statement contains a magic number: for (int i = 0; i < commands.Count; i++) {  	if (commands.Count - 1 == i) {  		bRaiseEvent = true;  	}  	SendCommand (commands [i]' type);  	Thread.Sleep (200);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,SendCommand,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: try {  	maxbuf.AddRange (value);  	//将buf数组添加到maxbuf'只管添加  	Debug.WriteLine (string.Format ("Parse -> {0} {1} value = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' BytesToHexString (maxbuf.ToArray ())));  	while (maxbuf.Count > 0) {  		//****************************************************************************  		// 从整个数据源中找出一段命令  		int nEndIndex = maxbuf.FindIndex (IsEnd);  		while (nEndIndex != -1) {  			if (nEndIndex > 0) {  				if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  				 {  					break;  				}  				else {  					if (nEndIndex - 2 >= 0) {  						if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  						 {  							break;  						}  					}  				}  			}  			if (nEndIndex + 1 < maxbuf.Count) {  				nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  			}  			else {  				return;  				//没找到一个完整的命令字符串，无法继续处理，直接返回  			}  		}  		//*********************************************************************************  		List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  		maxbuf.RemoveRange (0' nEndIndex + 1);  		//将取出的命令从源中清除  		//*********************************************************************************  		// 对命令格式进行检查和处理，明显不符合直接返回  		if (bytesCmd.Count < 4)//返回命令的最小长度是4  		 {  			return;  		}  		if (bytesCmd [0] != 0xaa) {  			return;  		}  		// 取出多于的 FF  		int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  		while (nFFindex != -1) {  			byte b = bytesCmd [nFFindex + 1];  			if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  			 {  				bytesCmd.RemoveAt (nFFindex);  			}  			if (nFFindex - 1 > 0) {  				nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  			}  			else {  				break;  			}  		}  		dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  		//如果有其它的命令返回，那该命令当然已经成功了  		//*********************************************************************************  		switch (bytesCmd [2]) //第3位表示的是命令  		{  		case 0:  			EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  			//RMUStatus.Set();  			StopSeeing (RFIDEventType.RMU_CardIsReady);  			HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  			break;  		case 0x10:  			EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  			StopSeeing (RFIDEventType.RMU_Inventory);  			if (bytesCmd [3] == 1) {  				//_bExistCardAround = false;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x11:  			EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  			StopSeeing (RFIDEventType.RMU_InventoryAnti);  			if (bytesCmd [3] == 1) {  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  				Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  				Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case 0x12:  			EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  			StopSeeing (RFIDEventType.RMU_StopGet);  			//_bExistCardAround = false;  			Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			HandleEventInNewThread (RFIDEventType.RMU_StopGet);  			break;  		case 0x13:  			//指定UII读取数据  			{  				EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  				StopSeeing (RFIDEventType.RMU_ReadData);  				if (bytesCmd [3] == 0) {  					byte[] bUII = new byte[bytesCmd.Count - 5];  					bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					//_bExistCardAround = true;  					HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  					Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  					//DecodeFixUIIData(str0.ToString()' str1);  				}  				else {  					//读取数据失败  					HandleEventInNewThread (RFIDEventType.RMU_ReadData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_InventorySingle:  			EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  			StopSeeing (RFIDEventType.RMU_InventorySingle);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  				Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  				Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			break;  		case (int)RMU_CommandType.RMU_LockMem:  			EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  			StopSeeing (RFIDEventType.RMU_LockMem);  			if (bytesCmd [3] > 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem);  				Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			if (bytesCmd [3] == 0) {  				HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  				Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x20:  			//不指定UII读取标签数据  			EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  			StopSeeing (RFIDEventType.RMU_SingleReadData);  			if (bytesCmd [3] == 0) {  				int nDataCount = bytesCmd.Count - 5 - 14;  				//14 UII length  				int nTotalCount = bytesCmd.Count - 5 + 1;  				//14 UII length  				byte[] binary_data_1 = new byte[nTotalCount];  				byte[] bytesData = new byte[nDataCount];  				byte[] bytesUii = new byte[14];  				//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  				bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  				bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  				//byte[] sign = Encoding.ASCII.GetBytes("&");  				//binary_data_1[nDataCount] = sign[0];  				//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  				StringBuilder str0 = new StringBuilder ();  				foreach (byte b in bytesData) {  					str0.Append (b.ToString ("X2"));  				}  				str0.Append ("&");  				foreach (byte b in bytesUii) {  					str0.Append (b.ToString ("X2"));  				}  				//foreach (byte b in binary_data_1)  				//{  				//    str0.Append(b.ToString("X2"));  				//}  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  				Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			}  			break;  		case 0x21:  			//不指定UII写入标签数据  			{  				EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  				StopSeeing (RFIDEventType.RMU_SingleWriteData);  				if (bytesCmd [3] == 0) {  					int uiiLen = 14;  					byte[] bUII = new byte[uiiLen];  					bytesCmd.CopyTo (4' bUII' 0' uiiLen);  					string sT = string.Empty;  					foreach (byte b in bUII) {  						sT += b.ToString ("X2");  					}  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  					Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  				}  			}  			break;  		case (int)RMU_CommandType.RMU_WriteData:  			{  				EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  				StopSeeing (RFIDEventType.RMU_WriteData);  				if (bytesCmd [3] == 0) {  					string sT = "OK";  					HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  					Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				}  				else {  					HandleEventInNewThread (RFIDEventType.RMU_WriteData);  				}  			}  			break;  		case 0x17:  			if (bytesCmd [3] == 0) {  				//strinfo = "销毁标签成功";  			}  			else {  				//strinfo = "销毁标签失败";  			}  			break;  		default:  			return;  		}  	}  	return;  }  catch (Exception ex) {  	Debug.WriteLine (string.Format ("Parse Exception -> {0}"' ex.Message));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (maxbuf.Count > 0) {  	//****************************************************************************  	// 从整个数据源中找出一段命令  	int nEndIndex = maxbuf.FindIndex (IsEnd);  	while (nEndIndex != -1) {  		if (nEndIndex > 0) {  			if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  			 {  				break;  			}  			else {  				if (nEndIndex - 2 >= 0) {  					if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  					 {  						break;  					}  				}  			}  		}  		if (nEndIndex + 1 < maxbuf.Count) {  			nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  		}  		else {  			return;  			//没找到一个完整的命令字符串，无法继续处理，直接返回  		}  	}  	//*********************************************************************************  	List<byte> bytesCmd = maxbuf.GetRange (0' nEndIndex + 1);  	maxbuf.RemoveRange (0' nEndIndex + 1);  	//将取出的命令从源中清除  	//*********************************************************************************  	// 对命令格式进行检查和处理，明显不符合直接返回  	if (bytesCmd.Count < 4)//返回命令的最小长度是4  	 {  		return;  	}  	if (bytesCmd [0] != 0xaa) {  		return;  	}  	// 取出多于的 FF  	int nFFindex = bytesCmd.FindLastIndex (bytesCmd.Count - 3' IsFF);  	while (nFFindex != -1) {  		byte b = bytesCmd [nFFindex + 1];  		if (b == 0xaa || b == 0xff || b == 0x55)//如果 FF的下一个是aa或者ff或者55，将其删除  		 {  			bytesCmd.RemoveAt (nFFindex);  		}  		if (nFFindex - 1 > 0) {  			nFFindex = bytesCmd.FindLastIndex (nFFindex - 1' IsFF);  		}  		else {  			break;  		}  	}  	dicCommandSuccess [(int)RFIDEventType.RMU_CardIsReady] = true;  	//如果有其它的命令返回，那该命令当然已经成功了  	//*********************************************************************************  	switch (bytesCmd [2]) //第3位表示的是命令  	{  	case 0:  		EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  		//RMUStatus.Set();  		StopSeeing (RFIDEventType.RMU_CardIsReady);  		HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  		break;  	case 0x10:  		EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  		StopSeeing (RFIDEventType.RMU_Inventory);  		if (bytesCmd [3] == 1) {  			//_bExistCardAround = false;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x11:  		EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  		StopSeeing (RFIDEventType.RMU_InventoryAnti);  		if (bytesCmd [3] == 1) {  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  			Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  			Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case 0x12:  		EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  		StopSeeing (RFIDEventType.RMU_StopGet);  		//_bExistCardAround = false;  		Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		HandleEventInNewThread (RFIDEventType.RMU_StopGet);  		break;  	case 0x13:  		//指定UII读取数据  		{  			EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  			StopSeeing (RFIDEventType.RMU_ReadData);  			if (bytesCmd [3] == 0) {  				byte[] bUII = new byte[bytesCmd.Count - 5];  				bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				//_bExistCardAround = true;  				HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  				Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  				//DecodeFixUIIData(str0.ToString()' str1);  			}  			else {  				//读取数据失败  				HandleEventInNewThread (RFIDEventType.RMU_ReadData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_InventorySingle:  		EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  		StopSeeing (RFIDEventType.RMU_InventorySingle);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  			Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  			Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		break;  	case (int)RMU_CommandType.RMU_LockMem:  		EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  		StopSeeing (RFIDEventType.RMU_LockMem);  		if (bytesCmd [3] > 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem);  			Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		if (bytesCmd [3] == 0) {  			HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  			Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x20:  		//不指定UII读取标签数据  		EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  		StopSeeing (RFIDEventType.RMU_SingleReadData);  		if (bytesCmd [3] == 0) {  			int nDataCount = bytesCmd.Count - 5 - 14;  			//14 UII length  			int nTotalCount = bytesCmd.Count - 5 + 1;  			//14 UII length  			byte[] binary_data_1 = new byte[nTotalCount];  			byte[] bytesData = new byte[nDataCount];  			byte[] bytesUii = new byte[14];  			//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  			bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  			bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  			//byte[] sign = Encoding.ASCII.GetBytes("&");  			//binary_data_1[nDataCount] = sign[0];  			//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  			StringBuilder str0 = new StringBuilder ();  			foreach (byte b in bytesData) {  				str0.Append (b.ToString ("X2"));  			}  			str0.Append ("&");  			foreach (byte b in bytesUii) {  				str0.Append (b.ToString ("X2"));  			}  			//foreach (byte b in binary_data_1)  			//{  			//    str0.Append(b.ToString("X2"));  			//}  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  			Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  		}  		break;  	case 0x21:  		//不指定UII写入标签数据  		{  			EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  			StopSeeing (RFIDEventType.RMU_SingleWriteData);  			if (bytesCmd [3] == 0) {  				int uiiLen = 14;  				byte[] bUII = new byte[uiiLen];  				bytesCmd.CopyTo (4' bUII' 0' uiiLen);  				string sT = string.Empty;  				foreach (byte b in bUII) {  					sT += b.ToString ("X2");  				}  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  				Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  			}  		}  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  			StopSeeing (RFIDEventType.RMU_WriteData);  			if (bytesCmd [3] == 0) {  				string sT = "OK";  				HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  				Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			}  			else {  				HandleEventInNewThread (RFIDEventType.RMU_WriteData);  			}  		}  		break;  	case 0x17:  		if (bytesCmd [3] == 0) {  			//strinfo = "销毁标签成功";  		}  		else {  			//strinfo = "销毁标签失败";  		}  		break;  	default:  		return;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (nEndIndex != -1) {  	if (nEndIndex > 0) {  		if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  		 {  			break;  		}  		else {  			if (nEndIndex - 2 >= 0) {  				if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  				 {  					break;  				}  			}  		}  	}  	if (nEndIndex + 1 < maxbuf.Count) {  		nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  	}  	else {  		return;  		//没找到一个完整的命令字符串，无法继续处理，直接返回  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: while (nEndIndex != -1) {  	if (nEndIndex > 0) {  		if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  		 {  			break;  		}  		else {  			if (nEndIndex - 2 >= 0) {  				if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  				 {  					break;  				}  			}  		}  	}  	if (nEndIndex + 1 < maxbuf.Count) {  		nEndIndex = maxbuf.FindIndex (nEndIndex + 1' IsEnd);  	}  	else {  		return;  		//没找到一个完整的命令字符串，无法继续处理，直接返回  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex > 0) {  	if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  	 {  		break;  	}  	else {  		if (nEndIndex - 2 >= 0) {  			if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  			 {  				break;  			}  		}  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex > 0) {  	if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾  	 {  		break;  	}  	else {  		if (nEndIndex - 2 >= 0) {  			if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  			 {  				break;  			}  		}  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾   {  	break;  }  else {  	if (nEndIndex - 2 >= 0) {  		if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  		 {  			break;  		}  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (maxbuf [nEndIndex - 1] != 0xff)// eg: aa 55'此时55肯定标识结尾   {  	break;  }  else {  	if (nEndIndex - 2 >= 0) {  		if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  		 {  			break;  		}  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex - 2 >= 0) {  	if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  	 {  		break;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (nEndIndex - 2 >= 0) {  	if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾  	 {  		break;  	}  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (maxbuf [nEndIndex - 2] == 0xff)// eg: aa ff ff 55'此时55肯定标识结尾   {  	break;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd.Count < 4)//返回命令的最小长度是4   {  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: switch (bytesCmd [2]) //第3位表示的是命令  {  case 0:  	EditEventStatusValue (RFIDEventType.RMU_CardIsReady' true);  	//RMUStatus.Set();  	StopSeeing (RFIDEventType.RMU_CardIsReady);  	HandleEventInNewThread (RFIDEventType.RMU_CardIsReady);  	break;  case 0x10:  	EditEventStatusValue (RFIDEventType.RMU_Inventory' true);  	StopSeeing (RFIDEventType.RMU_Inventory);  	if (bytesCmd [3] == 1) {  		//_bExistCardAround = false;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		//_bExistCardAround = true;  		HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x11:  	EditEventStatusValue (RFIDEventType.RMU_InventoryAnti' true);  	StopSeeing (RFIDEventType.RMU_InventoryAnti);  	if (bytesCmd [3] == 1) {  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  		Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  		Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case 0x12:  	EditEventStatusValue (RFIDEventType.RMU_StopGet' true);  	StopSeeing (RFIDEventType.RMU_StopGet);  	//_bExistCardAround = false;  	Debug.WriteLine (string.Format ("RMU_StopGet -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	HandleEventInNewThread (RFIDEventType.RMU_StopGet);  	break;  case 0x13:  	//指定UII读取数据  	{  		EditEventStatusValue (RFIDEventType.RMU_ReadData' true);  		StopSeeing (RFIDEventType.RMU_ReadData);  		if (bytesCmd [3] == 0) {  			byte[] bUII = new byte[bytesCmd.Count - 5];  			bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			//_bExistCardAround = true;  			HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  			Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  			//DecodeFixUIIData(str0.ToString()' str1);  		}  		else {  			//读取数据失败  			HandleEventInNewThread (RFIDEventType.RMU_ReadData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_InventorySingle:  	EditEventStatusValue (RFIDEventType.RMU_InventorySingle' true);  	StopSeeing (RFIDEventType.RMU_InventorySingle);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  		Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		byte[] bUII = new byte[bytesCmd.Count - 5];  		bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  		string sT = string.Empty;  		foreach (byte b in bUII) {  			sT += b.ToString ("X2");  		}  		HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  		Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	}  	break;  case (int)RMU_CommandType.RMU_LockMem:  	EditEventStatusValue (RFIDEventType.RMU_LockMem' true);  	StopSeeing (RFIDEventType.RMU_LockMem);  	if (bytesCmd [3] > 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem);  		Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	if (bytesCmd [3] == 0) {  		HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  		Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x20:  	//不指定UII读取标签数据  	EditEventStatusValue (RFIDEventType.RMU_SingleReadData' true);  	StopSeeing (RFIDEventType.RMU_SingleReadData);  	if (bytesCmd [3] == 0) {  		int nDataCount = bytesCmd.Count - 5 - 14;  		//14 UII length  		int nTotalCount = bytesCmd.Count - 5 + 1;  		//14 UII length  		byte[] binary_data_1 = new byte[nTotalCount];  		byte[] bytesData = new byte[nDataCount];  		byte[] bytesUii = new byte[14];  		//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  		bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  		bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  		//byte[] sign = Encoding.ASCII.GetBytes("&");  		//binary_data_1[nDataCount] = sign[0];  		//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  		StringBuilder str0 = new StringBuilder ();  		foreach (byte b in bytesData) {  			str0.Append (b.ToString ("X2"));  		}  		str0.Append ("&");  		foreach (byte b in bytesUii) {  			str0.Append (b.ToString ("X2"));  		}  		//foreach (byte b in binary_data_1)  		//{  		//    str0.Append(b.ToString("X2"));  		//}  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  	}  	else {  		HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  		Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  	}  	break;  case 0x21:  	//不指定UII写入标签数据  	{  		EditEventStatusValue (RFIDEventType.RMU_SingleWriteData' true);  		StopSeeing (RFIDEventType.RMU_SingleWriteData);  		if (bytesCmd [3] == 0) {  			int uiiLen = 14;  			byte[] bUII = new byte[uiiLen];  			bytesCmd.CopyTo (4' bUII' 0' uiiLen);  			string sT = string.Empty;  			foreach (byte b in bUII) {  				sT += b.ToString ("X2");  			}  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  			Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  		}  	}  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		EditEventStatusValue (RFIDEventType.RMU_WriteData' true);  		StopSeeing (RFIDEventType.RMU_WriteData);  		if (bytesCmd [3] == 0) {  			string sT = "OK";  			HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  			Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  		}  		else {  			HandleEventInNewThread (RFIDEventType.RMU_WriteData);  		}  	}  	break;  case 0x17:  	if (bytesCmd [3] == 0) {  		//strinfo = "销毁标签成功";  	}  	else {  		//strinfo = "销毁标签失败";  	}  	break;  default:  	return;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 1) {  	//_bExistCardAround = false;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} no UII"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_Inventory' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 1) {  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' "ok");  	Debug.WriteLine (string.Format ("RMU_InventoryAnti -> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventoryAnti' sT);  	Debug.WriteLine (string.Format ("RMU_Inventory -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	//_bExistCardAround = true;  	HandleEventInNewThread (RFIDEventType.RMU_ReadData' sT);  	Debug.WriteLine (string.Format ("RMU_ReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  	//DecodeFixUIIData(str0.ToString()' str1);  }  else {  	//读取数据失败  	HandleEventInNewThread (RFIDEventType.RMU_ReadData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] > 0) {  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle);  	Debug.WriteLine (string.Format ("RMU_InventorySingle Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	byte[] bUII = new byte[bytesCmd.Count - 5];  	bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_InventorySingle' sT);  	Debug.WriteLine (string.Format ("RMU_InventorySingle -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' bytesCmd.Count - 5);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] > 0) {  	HandleEventInNewThread (RFIDEventType.RMU_LockMem);  	Debug.WriteLine (string.Format ("RMU_LockMem Failed-> {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	HandleEventInNewThread (RFIDEventType.RMU_LockMem' "ok");  	Debug.WriteLine (string.Format ("RMU_LockMem -> {0} {1} OK"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int nDataCount = bytesCmd.Count - 5 - 14;  	//14 UII length  	int nTotalCount = bytesCmd.Count - 5 + 1;  	//14 UII length  	byte[] binary_data_1 = new byte[nTotalCount];  	byte[] bytesData = new byte[nDataCount];  	byte[] bytesUii = new byte[14];  	//bytesCmd.CopyTo(4' binary_data_1' 0' nDataCount);  	bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  	bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  	//byte[] sign = Encoding.ASCII.GetBytes("&");  	//binary_data_1[nDataCount] = sign[0];  	//bytesCmd.CopyTo(4 + nDataCount' binary_data_1' nDataCount' 14);  	StringBuilder str0 = new StringBuilder ();  	foreach (byte b in bytesData) {  		str0.Append (b.ToString ("X2"));  	}  	str0.Append ("&");  	foreach (byte b in bytesUii) {  		str0.Append (b.ToString ("X2"));  	}  	//foreach (byte b in binary_data_1)  	//{  	//    str0.Append(b.ToString("X2"));  	//}  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData' str0.ToString ());  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1} Data = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' str0.ToString ()));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleReadData);  	Debug.WriteLine (string.Format ("RMU_SingleReadData -> {0} {1}  Failed"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bytesData' 0' nDataCount);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4 + nDataCount' bytesUii' 0' 14);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int uiiLen = 14;  	byte[] bUII = new byte[uiiLen];  	bytesCmd.CopyTo (4' bUII' 0' uiiLen);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  	Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int uiiLen = 14;  	byte[] bUII = new byte[uiiLen];  	bytesCmd.CopyTo (4' bUII' 0' uiiLen);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  	Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	int uiiLen = 14;  	byte[] bUII = new byte[uiiLen];  	bytesCmd.CopyTo (4' bUII' 0' uiiLen);  	string sT = string.Empty;  	foreach (byte b in bUII) {  		sT += b.ToString ("X2");  	}  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData' sT);  	Debug.WriteLine (string.Format ("RMU_SingleWriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_SingleWriteData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: bytesCmd.CopyTo (4' bUII' 0' uiiLen);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	string sT = "OK";  	HandleEventInNewThread (RFIDEventType.RMU_WriteData' sT);  	Debug.WriteLine (string.Format ("RMU_WriteData -> {0} {1} UII = {2}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()' sT));  }  else {  	HandleEventInNewThread (RFIDEventType.RMU_WriteData);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,Parse,The following statement contains a magic number: if (bytesCmd [3] == 0) {  	//strinfo = "销毁标签成功";  }  else {  	//strinfo = "销毁标签失败";  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WriteData,The following statement contains a magic number: for (int i = 2; i < value.Length - 2; i += 2) {  	str2 = value.Substring (i' 2);  	if (str2 == "FF" || str2 == "AA" || str2 == "55")  		str2 = "FF" + str2;  	str1 += str2;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WriteData,The following statement contains a magic number: i += 2
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WriteData,The following statement contains a magic number: str2 = value.Substring (i' 2);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,WaitToSee,The following statement contains a magic number: RMUStatus.WaitOne (1000' false);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetEPCFormUII,The following statement contains a magic number: if (uii == null || uii.Length < 4) {  	return null;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetEPCFormUII,The following statement contains a magic number: return uii.Substring (4);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetFormatEPC,The following statement contains a magic number: epc = epc.Substring (0' 12);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: if (nFindex != -1) {  	strID = epc.Substring (4' nFindex - 4);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: if (nFindex != -1) {  	strID = epc.Substring (4' nFindex - 4);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: strID = epc.Substring (4' nFindex - 4);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,GetIDFromEPC,The following statement contains a magic number: strID = epc.Substring (4' nFindex - 4);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,PwdCheck,The following statement contains a magic number: return strR.Substring (0' 8);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuReadDataCommandComposer,The following statement contains a magic number: switch ((int)commandtype) {  case (int)RMU_CommandType.RMU_SingleReadData:  	commandR = "aa0920" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + "55";  	break;  case (int)RMU_CommandType.RMU_ReadData:  	if (null == strUii || !Regex.IsMatch (strUii' "[0-9a-zA-Z]{14}")) {  		return commandR;  	}  	int nLength = 1 + 1 + 4 + 1 + 1 + 1 + 14;  	commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55";  	break;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuReadDataCommandComposer,The following statement contains a magic number: switch ((int)commandtype) {  case (int)RMU_CommandType.RMU_SingleReadData:  	commandR = "aa0920" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + "55";  	break;  case (int)RMU_CommandType.RMU_ReadData:  	if (null == strUii || !Regex.IsMatch (strUii' "[0-9a-zA-Z]{14}")) {  		return commandR;  	}  	int nLength = 1 + 1 + 4 + 1 + 1 + 1 + 14;  	commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55";  	break;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,passwordFormat,The following statement contains a magic number: return strCommand.Substring (0' 8);  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	commandList.Add (strCmd);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	commandList.Add (strCmd);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	commandList.Add (strCmd);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	commandList.Add (strCmd);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	commandList.Add (strCmd);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: for (int i = 0; i < strData_in.Length; i += 4' nAddress++) {  	string strAddress_in = nAddress.ToString ("X2");  	string strData2Send = strData_in.Substring (i' 4);  	string strCmd = "aa";  	int nLength = 0;  	// 命令长度，以byte计算  	nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  	// length +cmd +pwd + bank + address + cnt + data len  	switch ((int)commandType) {  	case (int)RMU_CommandType.RMU_SingleWriteData:  		strCmd += "21";  		break;  	case (int)RMU_CommandType.RMU_WriteData:  		{  			if (null == strUii) {  				return commandList;  			}  			nLength += 14;  			// strUii.Length / 2;// 加上uii的长度  			strCmd += "14";  		}  		break;  	}  	strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  	//strCmd += nLength.ToString("X2");  	//strCmd += commandType;  	strCmd += strPwd_in;  	strCmd += Bank_in.ToString ("X2");  	strCmd += strAddress_in;  	strCmd += "01";  	//目前硬件只支持 1  	strCmd += strData2Send;  	if (commandType == RMU_CommandType.RMU_WriteData)//指定UII  	 {  		strCmd += strUii;  	}  	strCmd += "55";  	commandList.Add (strCmd);  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: i += 4
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: nLength = 1 + 1 + 4 + 1 + 1 + 1 + 2;  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: switch ((int)commandType) {  case (int)RMU_CommandType.RMU_SingleWriteData:  	strCmd += "21";  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		if (null == strUii) {  			return commandList;  		}  		nLength += 14;  		// strUii.Length / 2;// 加上uii的长度  		strCmd += "14";  	}  	break;  }  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: nLength += 14;  
Magic Number,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following statement contains a magic number: strCmd = strCmd.Insert (2' nLength.ToString ("X2"));  
Magic Number,InventoryMSystem,operateActionInventoryWriteEpc,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\rfidOperate\operateAction.cs,setEPC,The following statement contains a magic number: this.nextCommand = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' null' 1' 2' this.epc' null);  
Magic Number,InventoryMSystem,operateActionInventoryWriteEpc,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\rfidOperate\operateAction.cs,operateActionInventoryWriteEpc,The following statement contains a magic number: this.nextCommand = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' null' 1' 2' this.epc' null);  
Missing Default,InventoryMSystem,frmEditEPC,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmEditEPC.cs,_RFIDHelper_evtCardState,The following switch statement is missing a default case: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (null != o) {  	}  	value = "设备尚未准备就绪！";  	//MessageBox.Show("设备尚未准备就绪！");  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_CardIsReady:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_InventoryAnti3' RFIDEventType.RMU_InventoryAnti);  	break;  case (int)RFIDEventType.RMU_InventoryAnti:  	if (o != null && (string)o != "ok") {  		value = RFIDHelper.GetEPCFormUII ((string)o);  		_RFIDHelper.StopCallback ();  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	}  	if (this.textBox1.InvokeRequired) {  		this.textBox1.Invoke (new deleUpdateContorl (UpdateEPCtxtBox)' value);  	}  	else {  		UpdateEPCtxtBox (value);  	}  	break;  case (int)RFIDEventType.RMU_SingleWriteData:  	if (nSingleWriteDataState == 0) {  		if (o == null) {  			//MessageBox.Show("更改标签EPC失败");  			value = "更改标签EPC失败";  		}  		else {  			value = "更改标签EPC成功";  			//MessageBox.Show("更改标签EPC成功");  		}  	}  	if (nSingleWriteDataState == 1) {  		if (o == null) {  			value = "标签锁定失败";  			//MessageBox.Show("标签锁定失败");  		}  		else {  			value = "标签( " + (string)o + " )锁定成功 ";  			//MessageBox.Show(value);  		}  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_Inventory:  	if (null == o) {  		value = "正在检测周围标签...";  	}  	else {  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		tagUII = (string)o;  		value = "检测到标签：" + tagUII;  	}  	UpdateStatus (value);  	break;  case (int)RFIDEventType.RMU_StopGet:  	_RFIDHelper.RmuLockTagReserverdEpcTid ("00000000"' tagUII);  	break;  case (int)RFIDEventType.RMU_LockMem:  	{  		if (null == o) {  			value = "标签锁定失败 ";  			//MessageBox.Show("标签锁定失败 ");  		}  		else if ((string)o == "ok")//写入密码  		 {  			value = "写入密码...";  			Debug.WriteLine (string.Format (" 写入密码->RMU_LockMem {0} {1}"' DateTime.Now.ToLongTimeString ()' DateTime.Now.Millisecond.ToString ()));  			string _initialPwd = RFIDHelper.PwdCheck (null);  			List<string> commands = new List<string> ();  			string strPwdT = RFIDHelper.PwdCheck (txtSecret.Text);  			string pwdTH4 = strPwdT.Substring (0' 4);  			//前四位   			string pwdTT4 = strPwdT.Substring (4' 4);  			//后四位   			List<string> commandSetSecret1 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' _initialPwd' 0' 2' pwdTH4' null);  			List<string> commandSetSecret2 = RFIDHelper.RmuWriteDataCommandCompose (RMU_CommandType.RMU_SingleWriteData' pwdTH4 + _initialPwd' 0' 3' pwdTT4' null);  			commands.AddRange (commandSetSecret1);  			commands.AddRange (commandSetSecret2);  			this.nSingleWriteDataState = 1;  			_RFIDHelper.SendCommand (commands' RFIDEventType.RMU_SingleWriteData' false);  		}  	}  	UpdateStatus (value);  	break;  }  
Missing Default,InventoryMSystem,frmInventoryResult,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Forms\frmInventoryResult.cs,tabControl1_TabIndexChanged,The following switch statement is missing a default case: switch (this.tabControl1.SelectedIndex) {  case 0:  	//盘盈  	this.refreshInventoryMore ();  	break;  case 1:  	this.refreshInventoryLess ();  	break;  case 2:  	this.refreshInventoryEqual ();  	break;  }  
Missing Default,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuReadDataCommandComposer,The following switch statement is missing a default case: switch ((int)commandtype) {  case (int)RMU_CommandType.RMU_SingleReadData:  	commandR = "aa0920" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + "55";  	break;  case (int)RMU_CommandType.RMU_ReadData:  	if (null == strUii || !Regex.IsMatch (strUii' "[0-9a-zA-Z]{14}")) {  		return commandR;  	}  	int nLength = 1 + 1 + 4 + 1 + 1 + 1 + 14;  	commandR = "aa" + nLength.ToString ("X2") + "13" + strPwd_in + Bank_in.ToString ("X2") + nAddress.ToString ("X2") + nCount.ToString ("X2") + strUii + "55";  	break;  }  
Missing Default,InventoryMSystem,RFIDHelper,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\RFIDHelper.cs,RmuWriteDataCommandCompose,The following switch statement is missing a default case: switch ((int)commandType) {  case (int)RMU_CommandType.RMU_SingleWriteData:  	strCmd += "21";  	break;  case (int)RMU_CommandType.RMU_WriteData:  	{  		if (null == strUii) {  			return commandList;  		}  		nLength += 14;  		// strUii.Length / 2;// 加上uii的长度  		strCmd += "14";  	}  	break;  }  
Missing Default,InventoryMSystem,rfidOperateUnitBase,C:\repos\ssor_logisBaseTrainingDemos\InventoryMSystem\InventoryMSystem\Public\rfidOperate\rfidOperateUnitBase.cs,clearException,The following switch statement is missing a default case: switch ((int)eventType) {  case (int)RFIDEventType.RMU_Exception:  	if (!bInventoryStoped) {  		bInventoryStoped = true;  		_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  		break;  	}  	if (null != this.callback) {  		this.callback (new operateMessage ("fail"' "设备异常"));  	}  	break;  case (int)RFIDEventType.RMU_Inventory:  case (int)RFIDEventType.RMU_InventoryAnti:  	_RFIDHelper.SendCommand (RFIDHelper.RFIDCommand_RMU_StopGet' RFIDEventType.RMU_StopGet);  	this.OperateStart ();  	break;  case (int)RFIDEventType.RMU_StopGet:  	this.OperateStart ();  	break;  }  
