Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,Cyclomatic complexity of the method is 23
Complex Method,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,protocal_parse,Cyclomatic complexity of the method is 11
Complex Method,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,Cyclomatic complexity of the method is 23
Complex Method,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,protocal_parse,Cyclomatic complexity of the method is 11
Empty Catch Block,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm_Load,The method has an empty catch block.
Empty Catch Block,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,Form1_Load,The method has an empty catch block.
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm,The following statement contains a magic number: this.comport.DataBits = 8;  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm,The following statement contains a magic number: this.comport.BaudRate = 115200;  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm,The following statement contains a magic number: this._timer.Interval = 2000;  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,carOutaction,The following statement contains a magic number: label12.Text = (t * 10).ToString ();  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm_Load,The following statement contains a magic number: bt [2] = button3;  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm_Load,The following statement contains a magic number: bt [3] = button4;  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm_Load,The following statement contains a magic number: bt [4] = button5;  
Magic Number,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,CaroutForm_Load,The following statement contains a magic number: bt [5] = button6;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,CarinForm,The following statement contains a magic number: this.comport.DataBits = 8;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,CarinForm,The following statement contains a magic number: this.comport.BaudRate = 115200;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,CarinForm,The following statement contains a magic number: this._timer.Interval = 2000;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (isPortOpen) {  	if (this.isReading == true) {  		string str1Write = string.Empty;  		string str2Write = string.Empty;  		switch (currentProto) {  		case 1:  			//tagit  			str1Write = HFCommandItem.设置TAGIT协议;  			str2Write = HFCommandItem.读取TAGIT协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  			break;  		case 2:  			//  			str1Write = HFCommandItem.设置15693协议;  			str2Write = HFCommandItem.读取15693协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  			break;  		case 3:  			//  			str1Write = HFCommandItem.设置14443A协议;  			str2Write = HFCommandItem.读取14443A协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  			break;  		case 4:  			//  			str1Write = HFCommandItem.设置14443B协议;  			str2Write = HFCommandItem.读取14443B协议标签;  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  			break;  		}  		this.comport.Write (str1Write);  		Thread.Sleep (300);  		try {  			//转换列表为数组后发送  			//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  			this.comport.Write (HFCommandItem.读取15693协议标签);  		}  		catch (System.Exception ex) {  			Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  		}  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: if (this.isReading == true) {  	string str1Write = string.Empty;  	string str2Write = string.Empty;  	switch (currentProto) {  	case 1:  		//tagit  		str1Write = HFCommandItem.设置TAGIT协议;  		str2Write = HFCommandItem.读取TAGIT协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  		break;  	case 2:  		//  		str1Write = HFCommandItem.设置15693协议;  		str2Write = HFCommandItem.读取15693协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  		break;  	case 3:  		//  		str1Write = HFCommandItem.设置14443A协议;  		str2Write = HFCommandItem.读取14443A协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  		break;  	case 4:  		//  		str1Write = HFCommandItem.设置14443B协议;  		str2Write = HFCommandItem.读取14443B协议标签;  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  		break;  	}  	this.comport.Write (str1Write);  	Thread.Sleep (300);  	try {  		//转换列表为数组后发送  		//comport.Write(bytesCommandToWrite' 0' bytesCommandToWrite.Length);  		this.comport.Write (HFCommandItem.读取15693协议标签);  	}  	catch (System.Exception ex) {  		Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' ex.Message));  	}  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following statement contains a magic number: Thread.Sleep (300);  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,Form1_Load,The following statement contains a magic number: bt [2] = button3;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,Form1_Load,The following statement contains a magic number: bt [3] = button4;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,Form1_Load,The following statement contains a magic number: bt [4] = button5;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,Form1_Load,The following statement contains a magic number: bt [5] = button6;  
Magic Number,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,button10_Click,The following statement contains a magic number: if (lg.dtall.Rows.Count >= 6) {  	MessageBox.Show ("车位已满，请等待空车位！");  	return;  }  
Missing Default,HFParking,CaroutForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CaroutForm.cs,_timer_Tick,The following switch statement is missing a default case: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
Missing Default,HFParking,CarinForm,C:\repos\ssor_logisBaseTrainingDemos\HFParking\HFParking\CarinForm.cs,_timer_Tick,The following switch statement is missing a default case: switch (currentProto) {  case 1:  	//tagit  	str1Write = HFCommandItem.设置TAGIT协议;  	str2Write = HFCommandItem.读取TAGIT协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取TAGIT协议标签"));  	break;  case 2:  	//  	str1Write = HFCommandItem.设置15693协议;  	str2Write = HFCommandItem.读取15693协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取15693协议标签"));  	break;  case 3:  	//  	str1Write = HFCommandItem.设置14443A协议;  	str2Write = HFCommandItem.读取14443A协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443A协议标签"));  	break;  case 4:  	//  	str1Write = HFCommandItem.设置14443B协议;  	str2Write = HFCommandItem.读取14443B协议标签;  	Debug.WriteLine (string.Format ("frmHFRead._timer_Tick  ->  = {0}"' "读取14443B协议标签"));  	break;  }  
